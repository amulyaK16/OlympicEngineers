
MicrocontrollerApplication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab08  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c3c  0800ac48  0800ac48  0001ac48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b884  0800b884  0001b884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b88c  0800b88c  0001b88c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b890  0800b890  0001b890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  20000004  0800b894  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000ad0  200001e0  0800ba70  000201e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000cb0  0800ba70  00020cb0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   000219d0  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003a80  00000000  00000000  00041be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001b70  00000000  00000000  00045660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001a08  00000000  00000000  000471d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00021ade  00000000  00000000  00048bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001d1d3  00000000  00000000  0006a6b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000d21c1  00000000  00000000  00087889  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00159a4a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000086e4  00000000  00000000  00159aa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e0 	.word	0x200001e0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800ac30 	.word	0x0800ac30

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e4 	.word	0x200001e4
 800017c:	0800ac30 	.word	0x0800ac30

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_ldivmod>:
 8000b58:	b97b      	cbnz	r3, 8000b7a <__aeabi_ldivmod+0x22>
 8000b5a:	b972      	cbnz	r2, 8000b7a <__aeabi_ldivmod+0x22>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bfbe      	ittt	lt
 8000b60:	2000      	movlt	r0, #0
 8000b62:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000b66:	e006      	blt.n	8000b76 <__aeabi_ldivmod+0x1e>
 8000b68:	bf08      	it	eq
 8000b6a:	2800      	cmpeq	r0, #0
 8000b6c:	bf1c      	itt	ne
 8000b6e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000b72:	f04f 30ff 	movne.w	r0, #4294967295
 8000b76:	f000 b9b9 	b.w	8000eec <__aeabi_idiv0>
 8000b7a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b7e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b82:	2900      	cmp	r1, #0
 8000b84:	db09      	blt.n	8000b9a <__aeabi_ldivmod+0x42>
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	db1a      	blt.n	8000bc0 <__aeabi_ldivmod+0x68>
 8000b8a:	f000 f84d 	bl	8000c28 <__udivmoddi4>
 8000b8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b96:	b004      	add	sp, #16
 8000b98:	4770      	bx	lr
 8000b9a:	4240      	negs	r0, r0
 8000b9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	db1b      	blt.n	8000bdc <__aeabi_ldivmod+0x84>
 8000ba4:	f000 f840 	bl	8000c28 <__udivmoddi4>
 8000ba8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb0:	b004      	add	sp, #16
 8000bb2:	4240      	negs	r0, r0
 8000bb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bb8:	4252      	negs	r2, r2
 8000bba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bbe:	4770      	bx	lr
 8000bc0:	4252      	negs	r2, r2
 8000bc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bc6:	f000 f82f 	bl	8000c28 <__udivmoddi4>
 8000bca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd2:	b004      	add	sp, #16
 8000bd4:	4240      	negs	r0, r0
 8000bd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bda:	4770      	bx	lr
 8000bdc:	4252      	negs	r2, r2
 8000bde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000be2:	f000 f821 	bl	8000c28 <__udivmoddi4>
 8000be6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bee:	b004      	add	sp, #16
 8000bf0:	4252      	negs	r2, r2
 8000bf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96e 	b.w	8000eec <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468c      	mov	ip, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f040 8083 	bne.w	8000d3e <__udivmoddi4+0x116>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d947      	bls.n	8000cce <__udivmoddi4+0xa6>
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	b142      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	f1c2 0020 	rsb	r0, r2, #32
 8000c48:	fa24 f000 	lsr.w	r0, r4, r0
 8000c4c:	4091      	lsls	r1, r2
 8000c4e:	4097      	lsls	r7, r2
 8000c50:	ea40 0c01 	orr.w	ip, r0, r1
 8000c54:	4094      	lsls	r4, r2
 8000c56:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c5a:	0c23      	lsrs	r3, r4, #16
 8000c5c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c60:	fa1f fe87 	uxth.w	lr, r7
 8000c64:	fb08 c116 	mls	r1, r8, r6, ip
 8000c68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c70:	4299      	cmp	r1, r3
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x60>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7a:	f080 8119 	bcs.w	8000eb0 <__udivmoddi4+0x288>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 8116 	bls.w	8000eb0 <__udivmoddi4+0x288>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c90:	fb08 3310 	mls	r3, r8, r0, r3
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c9c:	45a6      	cmp	lr, r4
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x8c>
 8000ca0:	193c      	adds	r4, r7, r4
 8000ca2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ca6:	f080 8105 	bcs.w	8000eb4 <__udivmoddi4+0x28c>
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	f240 8102 	bls.w	8000eb4 <__udivmoddi4+0x28c>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	443c      	add	r4, r7
 8000cb4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cb8:	eba4 040e 	sub.w	r4, r4, lr
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	b11d      	cbz	r5, 8000cc8 <__udivmoddi4+0xa0>
 8000cc0:	40d4      	lsrs	r4, r2
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	b902      	cbnz	r2, 8000cd2 <__udivmoddi4+0xaa>
 8000cd0:	deff      	udf	#255	; 0xff
 8000cd2:	fab2 f282 	clz	r2, r2
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	d150      	bne.n	8000d7c <__udivmoddi4+0x154>
 8000cda:	1bcb      	subs	r3, r1, r7
 8000cdc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	2601      	movs	r6, #1
 8000ce6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cea:	0c21      	lsrs	r1, r4, #16
 8000cec:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0xe4>
 8000cfc:	1879      	adds	r1, r7, r1
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0xe2>
 8000d04:	428b      	cmp	r3, r1
 8000d06:	f200 80e9 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1ac9      	subs	r1, r1, r3
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d18:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x10c>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x10a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80d9 	bhi.w	8000ee4 <__udivmoddi4+0x2bc>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e7bf      	b.n	8000cbe <__udivmoddi4+0x96>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0x12e>
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	f000 80b1 	beq.w	8000eaa <__udivmoddi4+0x282>
 8000d48:	2600      	movs	r6, #0
 8000d4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4e:	4630      	mov	r0, r6
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f683 	clz	r6, r3
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	d14a      	bne.n	8000df4 <__udivmoddi4+0x1cc>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0x140>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80b8 	bhi.w	8000ed8 <__udivmoddi4+0x2b0>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	468c      	mov	ip, r1
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	d0a8      	beq.n	8000cc8 <__udivmoddi4+0xa0>
 8000d76:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d7a:	e7a5      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000d7c:	f1c2 0320 	rsb	r3, r2, #32
 8000d80:	fa20 f603 	lsr.w	r6, r0, r3
 8000d84:	4097      	lsls	r7, r2
 8000d86:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8e:	40d9      	lsrs	r1, r3
 8000d90:	4330      	orrs	r0, r6
 8000d92:	0c03      	lsrs	r3, r0, #16
 8000d94:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d98:	fa1f f887 	uxth.w	r8, r7
 8000d9c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb06 f108 	mul.w	r1, r6, r8
 8000da8:	4299      	cmp	r1, r3
 8000daa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x19c>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000db6:	f080 808d 	bcs.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 808a 	bls.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b281      	uxth	r1, r0
 8000dc8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dcc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd4:	fb00 f308 	mul.w	r3, r0, r8
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x1c4>
 8000ddc:	1879      	adds	r1, r7, r1
 8000dde:	f100 3cff 	add.w	ip, r0, #4294967295
 8000de2:	d273      	bcs.n	8000ecc <__udivmoddi4+0x2a4>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d971      	bls.n	8000ecc <__udivmoddi4+0x2a4>
 8000de8:	3802      	subs	r0, #2
 8000dea:	4439      	add	r1, r7
 8000dec:	1acb      	subs	r3, r1, r3
 8000dee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000df2:	e778      	b.n	8000ce6 <__udivmoddi4+0xbe>
 8000df4:	f1c6 0c20 	rsb	ip, r6, #32
 8000df8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dfc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e00:	431c      	orrs	r4, r3
 8000e02:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e06:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e0e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e12:	431f      	orrs	r7, r3
 8000e14:	0c3b      	lsrs	r3, r7, #16
 8000e16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1a:	fa1f f884 	uxth.w	r8, r4
 8000e1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e26:	fb09 fa08 	mul.w	sl, r9, r8
 8000e2a:	458a      	cmp	sl, r1
 8000e2c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e30:	fa00 f306 	lsl.w	r3, r0, r6
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x220>
 8000e36:	1861      	adds	r1, r4, r1
 8000e38:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e3c:	d248      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e3e:	458a      	cmp	sl, r1
 8000e40:	d946      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4421      	add	r1, r4
 8000e48:	eba1 010a 	sub.w	r1, r1, sl
 8000e4c:	b2bf      	uxth	r7, r7
 8000e4e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e52:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e56:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e5a:	fb00 f808 	mul.w	r8, r0, r8
 8000e5e:	45b8      	cmp	r8, r7
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x24a>
 8000e62:	19e7      	adds	r7, r4, r7
 8000e64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e68:	d22e      	bcs.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6a:	45b8      	cmp	r8, r7
 8000e6c:	d92c      	bls.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4427      	add	r7, r4
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	eba7 0708 	sub.w	r7, r7, r8
 8000e7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7e:	454f      	cmp	r7, r9
 8000e80:	46c6      	mov	lr, r8
 8000e82:	4649      	mov	r1, r9
 8000e84:	d31a      	bcc.n	8000ebc <__udivmoddi4+0x294>
 8000e86:	d017      	beq.n	8000eb8 <__udivmoddi4+0x290>
 8000e88:	b15d      	cbz	r5, 8000ea2 <__udivmoddi4+0x27a>
 8000e8a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e8e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e92:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e96:	40f2      	lsrs	r2, r6
 8000e98:	ea4c 0202 	orr.w	r2, ip, r2
 8000e9c:	40f7      	lsrs	r7, r6
 8000e9e:	e9c5 2700 	strd	r2, r7, [r5]
 8000ea2:	2600      	movs	r6, #0
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e70b      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0x60>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6fd      	b.n	8000cb4 <__udivmoddi4+0x8c>
 8000eb8:	4543      	cmp	r3, r8
 8000eba:	d2e5      	bcs.n	8000e88 <__udivmoddi4+0x260>
 8000ebc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ec0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7df      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e7d2      	b.n	8000e72 <__udivmoddi4+0x24a>
 8000ecc:	4660      	mov	r0, ip
 8000ece:	e78d      	b.n	8000dec <__udivmoddi4+0x1c4>
 8000ed0:	4681      	mov	r9, r0
 8000ed2:	e7b9      	b.n	8000e48 <__udivmoddi4+0x220>
 8000ed4:	4666      	mov	r6, ip
 8000ed6:	e775      	b.n	8000dc4 <__udivmoddi4+0x19c>
 8000ed8:	4630      	mov	r0, r6
 8000eda:	e74a      	b.n	8000d72 <__udivmoddi4+0x14a>
 8000edc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee0:	4439      	add	r1, r7
 8000ee2:	e713      	b.n	8000d0c <__udivmoddi4+0xe4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	443c      	add	r4, r7
 8000ee8:	e724      	b.n	8000d34 <__udivmoddi4+0x10c>
 8000eea:	bf00      	nop

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <DWT_Init>:
#endif

//#############################################################################################
TIM_HandleTypeDef htim2;
__STATIC_INLINE void DWT_Init(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // allow to use counter
 8000ef4:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <DWT_Init+0x28>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	4a07      	ldr	r2, [pc, #28]	; (8000f18 <DWT_Init+0x28>)
 8000efa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000efe:	60d3      	str	r3, [r2, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   // start counter
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <DWT_Init+0x2c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a05      	ldr	r2, [pc, #20]	; (8000f1c <DWT_Init+0x2c>)
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	6013      	str	r3, [r2, #0]
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000edf0 	.word	0xe000edf0
 8000f1c:	e0001000 	.word	0xe0001000

08000f20 <hx711_delay_us>:
void hx711_delay_us(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
	uint32_t delay = _HX711_DELAY_US_LOOP;
 8000f26:	2304      	movs	r3, #4
 8000f28:	607b      	str	r3, [r7, #4]
	  while (delay > 0)
 8000f2a:	e006      	b.n	8000f3a <hx711_delay_us+0x1a>
	  {
	    delay--;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	607b      	str	r3, [r7, #4]
	    asm("NOP"); asm("NOP"); asm("NOP"); asm("NOP");
 8000f32:	bf00      	nop
 8000f34:	bf00      	nop
 8000f36:	bf00      	nop
 8000f38:	bf00      	nop
	  while (delay > 0)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d1f5      	bne.n	8000f2c <hx711_delay_us+0xc>
	  }

}
 8000f40:	bf00      	nop
 8000f42:	bf00      	nop
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <hx711_lock>:
//#############################################################################################
void hx711_lock(hx711_t *hx711)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b082      	sub	sp, #8
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
  while (hx711->lock)
 8000f56:	e002      	b.n	8000f5e <hx711_lock+0x10>
    hx711_delay(1);
 8000f58:	2001      	movs	r0, #1
 8000f5a:	f001 fc79 	bl	8002850 <HAL_Delay>
  while (hx711->lock)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	7d1b      	ldrb	r3, [r3, #20]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d1f8      	bne.n	8000f58 <hx711_lock+0xa>
  hx711->lock = 1;      
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2201      	movs	r2, #1
 8000f6a:	751a      	strb	r2, [r3, #20]
}
 8000f6c:	bf00      	nop
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <hx711_unlock>:
//#############################################################################################
void hx711_unlock(hx711_t *hx711)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  hx711->lock = 0;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	751a      	strb	r2, [r3, #20]
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr

08000f8e <hx711_init>:
//#############################################################################################
void hx711_init(hx711_t *hx711, GPIO_TypeDef *clk_gpio, uint16_t clk_pin, GPIO_TypeDef *dat_gpio, uint16_t dat_pin)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b08a      	sub	sp, #40	; 0x28
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	60f8      	str	r0, [r7, #12]
 8000f96:	60b9      	str	r1, [r7, #8]
 8000f98:	603b      	str	r3, [r7, #0]
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	80fb      	strh	r3, [r7, #6]
  DWT_Init();
 8000f9e:	f7ff ffa7 	bl	8000ef0 <DWT_Init>
  hx711_lock(hx711);
 8000fa2:	68f8      	ldr	r0, [r7, #12]
 8000fa4:	f7ff ffd3 	bl	8000f4e <hx711_lock>
  hx711->clk_gpio = clk_gpio;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	68ba      	ldr	r2, [r7, #8]
 8000fac:	601a      	str	r2, [r3, #0]
  hx711->clk_pin = clk_pin;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	88fa      	ldrh	r2, [r7, #6]
 8000fb2:	811a      	strh	r2, [r3, #8]
  hx711->dat_gpio = dat_gpio;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	683a      	ldr	r2, [r7, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
  hx711->dat_pin = dat_pin;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000fbe:	815a      	strh	r2, [r3, #10]
  
  GPIO_InitTypeDef  gpio = {0};
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]
  gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	623b      	str	r3, [r7, #32]
  gpio.Pin = clk_pin;
 8000fdc:	88fb      	ldrh	r3, [r7, #6]
 8000fde:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(clk_gpio, &gpio);
 8000fe0:	f107 0314 	add.w	r3, r7, #20
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	68b8      	ldr	r0, [r7, #8]
 8000fe8:	f002 ff18 	bl	8003e1c <HAL_GPIO_Init>
  gpio.Mode = GPIO_MODE_INPUT;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_PULLUP;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	623b      	str	r3, [r7, #32]
  gpio.Pin = dat_pin;
 8000ff8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000ffa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(dat_gpio, &gpio);
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	4619      	mov	r1, r3
 8001002:	6838      	ldr	r0, [r7, #0]
 8001004:	f002 ff0a 	bl	8003e1c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	6818      	ldr	r0, [r3, #0]
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	891b      	ldrh	r3, [r3, #8]
 8001010:	2201      	movs	r2, #1
 8001012:	4619      	mov	r1, r3
 8001014:	f003 f882 	bl	800411c <HAL_GPIO_WritePin>
  hx711_delay(10);
 8001018:	200a      	movs	r0, #10
 800101a:	f001 fc19 	bl	8002850 <HAL_Delay>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	6818      	ldr	r0, [r3, #0]
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	891b      	ldrh	r3, [r3, #8]
 8001026:	2200      	movs	r2, #0
 8001028:	4619      	mov	r1, r3
 800102a:	f003 f877 	bl	800411c <HAL_GPIO_WritePin>
  hx711_delay(10);  
 800102e:	200a      	movs	r0, #10
 8001030:	f001 fc0e 	bl	8002850 <HAL_Delay>
  hx711_value(hx711);
 8001034:	68f8      	ldr	r0, [r7, #12]
 8001036:	f000 f80a 	bl	800104e <hx711_value>
  hx711_value(hx711);
 800103a:	68f8      	ldr	r0, [r7, #12]
 800103c:	f000 f807 	bl	800104e <hx711_value>
  hx711_unlock(hx711); 
 8001040:	68f8      	ldr	r0, [r7, #12]
 8001042:	f7ff ff97 	bl	8000f74 <hx711_unlock>
}
 8001046:	bf00      	nop
 8001048:	3728      	adds	r7, #40	; 0x28
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <hx711_value>:
//#############################################################################################
int32_t hx711_value(hx711_t *hx711)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b086      	sub	sp, #24
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
  uint32_t data = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]
  uint32_t  startTime = HAL_GetTick();
 800105a:	f001 fbe1 	bl	8002820 <HAL_GetTick>
 800105e:	60f8      	str	r0, [r7, #12]
  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8001060:	e00b      	b.n	800107a <hx711_value+0x2c>
  {
    hx711_delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f001 fbf4 	bl	8002850 <HAL_Delay>
    if(HAL_GetTick() - startTime > 150)
 8001068:	f001 fbda 	bl	8002820 <HAL_GetTick>
 800106c:	4602      	mov	r2, r0
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	2b96      	cmp	r3, #150	; 0x96
 8001074:	d901      	bls.n	800107a <hx711_value+0x2c>
      return 0;
 8001076:	2300      	movs	r3, #0
 8001078:	e055      	b.n	8001126 <hx711_value+0xd8>
  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	685a      	ldr	r2, [r3, #4]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	895b      	ldrh	r3, [r3, #10]
 8001082:	4619      	mov	r1, r3
 8001084:	4610      	mov	r0, r2
 8001086:	f003 f831 	bl	80040ec <HAL_GPIO_ReadPin>
 800108a:	4603      	mov	r3, r0
 800108c:	2b01      	cmp	r3, #1
 800108e:	d0e8      	beq.n	8001062 <hx711_value+0x14>
  }
  for(int8_t i=0; i<24 ; i++)
 8001090:	2300      	movs	r3, #0
 8001092:	74fb      	strb	r3, [r7, #19]
 8001094:	e02a      	b.n	80010ec <hx711_value+0x9e>
  {
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);   
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6818      	ldr	r0, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	891b      	ldrh	r3, [r3, #8]
 800109e:	2201      	movs	r2, #1
 80010a0:	4619      	mov	r1, r3
 80010a2:	f003 f83b 	bl	800411c <HAL_GPIO_WritePin>
    hx711_delay_us();
 80010a6:	f7ff ff3b 	bl	8000f20 <hx711_delay_us>
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6818      	ldr	r0, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	891b      	ldrh	r3, [r3, #8]
 80010b2:	2200      	movs	r2, #0
 80010b4:	4619      	mov	r1, r3
 80010b6:	f003 f831 	bl	800411c <HAL_GPIO_WritePin>
    hx711_delay_us();
 80010ba:	f7ff ff31 	bl	8000f20 <hx711_delay_us>
    data = data << 1;    
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	617b      	str	r3, [r7, #20]
    if(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685a      	ldr	r2, [r3, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	895b      	ldrh	r3, [r3, #10]
 80010cc:	4619      	mov	r1, r3
 80010ce:	4610      	mov	r0, r2
 80010d0:	f003 f80c 	bl	80040ec <HAL_GPIO_ReadPin>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d102      	bne.n	80010e0 <hx711_value+0x92>
      data ++;
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	3301      	adds	r3, #1
 80010de:	617b      	str	r3, [r7, #20]
  for(int8_t i=0; i<24 ; i++)
 80010e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	3301      	adds	r3, #1
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	74fb      	strb	r3, [r7, #19]
 80010ec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80010f0:	2b17      	cmp	r3, #23
 80010f2:	ddd0      	ble.n	8001096 <hx711_value+0x48>
  }
  data = data ^ 0x800000; 
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 80010fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);   
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6818      	ldr	r0, [r3, #0]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	891b      	ldrh	r3, [r3, #8]
 8001104:	2201      	movs	r2, #1
 8001106:	4619      	mov	r1, r3
 8001108:	f003 f808 	bl	800411c <HAL_GPIO_WritePin>
  hx711_delay_us();
 800110c:	f7ff ff08 	bl	8000f20 <hx711_delay_us>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6818      	ldr	r0, [r3, #0]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	891b      	ldrh	r3, [r3, #8]
 8001118:	2200      	movs	r2, #0
 800111a:	4619      	mov	r1, r3
 800111c:	f002 fffe 	bl	800411c <HAL_GPIO_WritePin>
  hx711_delay_us();
 8001120:	f7ff fefe 	bl	8000f20 <hx711_delay_us>
  return data;    
 8001124:	697b      	ldr	r3, [r7, #20]
}
 8001126:	4618      	mov	r0, r3
 8001128:	3718      	adds	r7, #24
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <hx711_tare>:
  hx711_unlock(hx711);
  return answer;
}
//#############################################################################################
void hx711_tare(hx711_t *hx711, uint16_t sample)
{
 800112e:	b5b0      	push	{r4, r5, r7, lr}
 8001130:	b086      	sub	sp, #24
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
 8001136:	460b      	mov	r3, r1
 8001138:	807b      	strh	r3, [r7, #2]
  hx711_lock(hx711);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff ff07 	bl	8000f4e <hx711_lock>
  int64_t  ave = 0;
 8001140:	f04f 0200 	mov.w	r2, #0
 8001144:	f04f 0300 	mov.w	r3, #0
 8001148:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for(uint16_t i=0 ; i<sample ; i++)
 800114c:	2300      	movs	r3, #0
 800114e:	81fb      	strh	r3, [r7, #14]
 8001150:	e013      	b.n	800117a <hx711_tare+0x4c>
  {
    ave += hx711_value(hx711);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff ff7b 	bl	800104e <hx711_value>
 8001158:	4603      	mov	r3, r0
 800115a:	461a      	mov	r2, r3
 800115c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001160:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001164:	1884      	adds	r4, r0, r2
 8001166:	eb41 0503 	adc.w	r5, r1, r3
 800116a:	e9c7 4504 	strd	r4, r5, [r7, #16]
    hx711_delay(5);
 800116e:	2005      	movs	r0, #5
 8001170:	f001 fb6e 	bl	8002850 <HAL_Delay>
  for(uint16_t i=0 ; i<sample ; i++)
 8001174:	89fb      	ldrh	r3, [r7, #14]
 8001176:	3301      	adds	r3, #1
 8001178:	81fb      	strh	r3, [r7, #14]
 800117a:	89fa      	ldrh	r2, [r7, #14]
 800117c:	887b      	ldrh	r3, [r7, #2]
 800117e:	429a      	cmp	r2, r3
 8001180:	d3e7      	bcc.n	8001152 <hx711_tare+0x24>
  }
  hx711->offset = (int32_t)(ave / sample);
 8001182:	887a      	ldrh	r2, [r7, #2]
 8001184:	f04f 0300 	mov.w	r3, #0
 8001188:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800118c:	f7ff fce4 	bl	8000b58 <__aeabi_ldivmod>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	60da      	str	r2, [r3, #12]
  hx711_unlock(hx711);
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff feeb 	bl	8000f74 <hx711_unlock>
}
 800119e:	bf00      	nop
 80011a0:	3718      	adds	r7, #24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bdb0      	pop	{r4, r5, r7, pc}

080011a6 <hx711_weight>:
  hx711->coef = (load_raw - noload_raw) / scale;  
  hx711_unlock(hx711);
}
//#############################################################################################
float hx711_weight(hx711_t *hx711, uint16_t sample)
{
 80011a6:	b5b0      	push	{r4, r5, r7, lr}
 80011a8:	b088      	sub	sp, #32
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
 80011ae:	460b      	mov	r3, r1
 80011b0:	807b      	strh	r3, [r7, #2]
  hx711_lock(hx711);
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff fecb 	bl	8000f4e <hx711_lock>
  int64_t  ave = 0;
 80011b8:	f04f 0200 	mov.w	r2, #0
 80011bc:	f04f 0300 	mov.w	r3, #0
 80011c0:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for(uint16_t i=0 ; i<sample ; i++)
 80011c4:	2300      	movs	r3, #0
 80011c6:	82fb      	strh	r3, [r7, #22]
 80011c8:	e013      	b.n	80011f2 <hx711_weight+0x4c>
  {
    ave += hx711_value(hx711);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff ff3f 	bl	800104e <hx711_value>
 80011d0:	4603      	mov	r3, r0
 80011d2:	461a      	mov	r2, r3
 80011d4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80011d8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80011dc:	1884      	adds	r4, r0, r2
 80011de:	eb41 0503 	adc.w	r5, r1, r3
 80011e2:	e9c7 4506 	strd	r4, r5, [r7, #24]
    hx711_delay(5);
 80011e6:	2005      	movs	r0, #5
 80011e8:	f001 fb32 	bl	8002850 <HAL_Delay>
  for(uint16_t i=0 ; i<sample ; i++)
 80011ec:	8afb      	ldrh	r3, [r7, #22]
 80011ee:	3301      	adds	r3, #1
 80011f0:	82fb      	strh	r3, [r7, #22]
 80011f2:	8afa      	ldrh	r2, [r7, #22]
 80011f4:	887b      	ldrh	r3, [r7, #2]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d3e7      	bcc.n	80011ca <hx711_weight+0x24>
  }
  int32_t data = (int32_t)(ave / sample);
 80011fa:	887a      	ldrh	r2, [r7, #2]
 80011fc:	f04f 0300 	mov.w	r3, #0
 8001200:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001204:	f7ff fca8 	bl	8000b58 <__aeabi_ldivmod>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	4613      	mov	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
  float answer =  (data - hx711->offset) / hx711->coef;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	ee07 3a90 	vmov	s15, r3
 800121c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	ed93 7a04 	vldr	s14, [r3, #16]
 8001226:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800122a:	edc7 7a03 	vstr	s15, [r7, #12]
  hx711_unlock(hx711);
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f7ff fea0 	bl	8000f74 <hx711_unlock>
  return answer;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	ee07 3a90 	vmov	s15, r3
}
 800123a:	eeb0 0a67 	vmov.f32	s0, s15
 800123e:	3720      	adds	r7, #32
 8001240:	46bd      	mov	sp, r7
 8001242:	bdb0      	pop	{r4, r5, r7, pc}

08001244 <hx711_coef_set>:
//#############################################################################################
void hx711_coef_set(hx711_t *hx711, float coef)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	ed87 0a00 	vstr	s0, [r7]
  hx711->coef = coef;  
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	683a      	ldr	r2, [r7, #0]
 8001254:	611a      	str	r2, [r3, #16]
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001262:	b480      	push	{r7}
 8001264:	b083      	sub	sp, #12
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800126a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800126e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001272:	f023 0218 	bic.w	r2, r3, #24
 8001276:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4313      	orrs	r3, r2
 800127e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr

0800128e <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800128e:	b480      	push	{r7}
 8001290:	b085      	sub	sp, #20
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800129a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800129c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80012a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4013      	ands	r3, r2
 80012b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012b2:	68fb      	ldr	r3, [r7, #12]
}
 80012b4:	bf00      	nop
 80012b6:	3714      	adds	r7, #20
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80012c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80012d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4013      	ands	r3, r2
 80012e2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012e4:	68fb      	ldr	r3, [r7, #12]
}
 80012e6:	bf00      	nop
 80012e8:	3714      	adds	r7, #20
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
	...

080012f4 <MPU6050_Init>:
int16_t Gyro_Z_RAW = 0;

float Ax, Ay, Az, Gx, Gy, Gz;

void MPU6050_Init (void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	// check device ID

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,CHECK_REG,1, &check, 1, 1000);
 80012fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fe:	9302      	str	r3, [sp, #8]
 8001300:	2301      	movs	r3, #1
 8001302:	9301      	str	r3, [sp, #4]
 8001304:	1dfb      	adds	r3, r7, #7
 8001306:	9300      	str	r3, [sp, #0]
 8001308:	2301      	movs	r3, #1
 800130a:	2275      	movs	r2, #117	; 0x75
 800130c:	21d0      	movs	r1, #208	; 0xd0
 800130e:	4823      	ldr	r0, [pc, #140]	; (800139c <MPU6050_Init+0xa8>)
 8001310:	f003 f8c0 	bl	8004494 <HAL_I2C_Mem_Read>

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8001314:	79fb      	ldrb	r3, [r7, #7]
 8001316:	2b68      	cmp	r3, #104	; 0x68
 8001318:	d13b      	bne.n	8001392 <MPU6050_Init+0x9e>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 800131e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001322:	9302      	str	r3, [sp, #8]
 8001324:	2301      	movs	r3, #1
 8001326:	9301      	str	r3, [sp, #4]
 8001328:	1dbb      	adds	r3, r7, #6
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	2301      	movs	r3, #1
 800132e:	226b      	movs	r2, #107	; 0x6b
 8001330:	21d0      	movs	r1, #208	; 0xd0
 8001332:	481a      	ldr	r0, [pc, #104]	; (800139c <MPU6050_Init+0xa8>)
 8001334:	f002 ff9a 	bl	800426c <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8001338:	2307      	movs	r3, #7
 800133a:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 800133c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001340:	9302      	str	r3, [sp, #8]
 8001342:	2301      	movs	r3, #1
 8001344:	9301      	str	r3, [sp, #4]
 8001346:	1dbb      	adds	r3, r7, #6
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	2301      	movs	r3, #1
 800134c:	2219      	movs	r2, #25
 800134e:	21d0      	movs	r1, #208	; 0xd0
 8001350:	4812      	ldr	r0, [pc, #72]	; (800139c <MPU6050_Init+0xa8>)
 8001352:	f002 ff8b 	bl	800426c <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
		Data = 0x00;
 8001356:	2300      	movs	r3, #0
 8001358:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 800135a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135e:	9302      	str	r3, [sp, #8]
 8001360:	2301      	movs	r3, #1
 8001362:	9301      	str	r3, [sp, #4]
 8001364:	1dbb      	adds	r3, r7, #6
 8001366:	9300      	str	r3, [sp, #0]
 8001368:	2301      	movs	r3, #1
 800136a:	221c      	movs	r2, #28
 800136c:	21d0      	movs	r1, #208	; 0xd0
 800136e:	480b      	ldr	r0, [pc, #44]	; (800139c <MPU6050_Init+0xa8>)
 8001370:	f002 ff7c 	bl	800426c <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
		Data = 0x00;
 8001374:	2300      	movs	r3, #0
 8001376:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8001378:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800137c:	9302      	str	r3, [sp, #8]
 800137e:	2301      	movs	r3, #1
 8001380:	9301      	str	r3, [sp, #4]
 8001382:	1dbb      	adds	r3, r7, #6
 8001384:	9300      	str	r3, [sp, #0]
 8001386:	2301      	movs	r3, #1
 8001388:	221b      	movs	r2, #27
 800138a:	21d0      	movs	r1, #208	; 0xd0
 800138c:	4803      	ldr	r0, [pc, #12]	; (800139c <MPU6050_Init+0xa8>)
 800138e:	f002 ff6d 	bl	800426c <HAL_I2C_Mem_Write>
	}

}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000604 	.word	0x20000604

080013a0 <get_RTC_Value>:
	Gy = Gyro_Y_RAW/131.0;
	Gz = Gyro_Z_RAW/131.0;
}

void get_RTC_Value(char* buf)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b094      	sub	sp, #80	; 0x50
 80013a4:	af02      	add	r7, sp, #8
 80013a6:	6078      	str	r0, [r7, #4]
	char _date[20];

	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;
	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80013a8:	f107 0308 	add.w	r3, r7, #8
 80013ac:	2200      	movs	r2, #0
 80013ae:	4619      	mov	r1, r3
 80013b0:	4819      	ldr	r0, [pc, #100]	; (8001418 <get_RTC_Value+0x78>)
 80013b2:	f005 f95e 	bl	8006672 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 80013b6:	f107 031c 	add.w	r3, r7, #28
 80013ba:	2200      	movs	r2, #0
 80013bc:	4619      	mov	r1, r3
 80013be:	4816      	ldr	r0, [pc, #88]	; (8001418 <get_RTC_Value+0x78>)
 80013c0:	f005 fa61 	bl	8006886 <HAL_RTC_GetDate>
	/* Display time Format: hh:mm:ss */
	sprintf((char*)_time,"%02d:%02d:%02d ",gTime.Hours, gTime.Minutes, gTime.Seconds);
 80013c4:	7a3b      	ldrb	r3, [r7, #8]
 80013c6:	461a      	mov	r2, r3
 80013c8:	7a7b      	ldrb	r3, [r7, #9]
 80013ca:	4619      	mov	r1, r3
 80013cc:	7abb      	ldrb	r3, [r7, #10]
 80013ce:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	460b      	mov	r3, r1
 80013d6:	4911      	ldr	r1, [pc, #68]	; (800141c <get_RTC_Value+0x7c>)
 80013d8:	f007 fac2 	bl	8008960 <siprintf>
	strcat(buf,_time);
 80013dc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80013e0:	4619      	mov	r1, r3
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f007 fadc 	bl	80089a0 <strcat>
	/* Display date Format: dd-mm-yy */
	sprintf((char*)_date,"%02d-%02d-%2d\n",gDate.Date, gDate.Month, 2000 + gDate.Year);
 80013e8:	7fbb      	ldrb	r3, [r7, #30]
 80013ea:	461a      	mov	r2, r3
 80013ec:	7f7b      	ldrb	r3, [r7, #29]
 80013ee:	4619      	mov	r1, r3
 80013f0:	7ffb      	ldrb	r3, [r7, #31]
 80013f2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80013f6:	f107 0020 	add.w	r0, r7, #32
 80013fa:	9300      	str	r3, [sp, #0]
 80013fc:	460b      	mov	r3, r1
 80013fe:	4908      	ldr	r1, [pc, #32]	; (8001420 <get_RTC_Value+0x80>)
 8001400:	f007 faae 	bl	8008960 <siprintf>
	strcat(buf,_date);
 8001404:	f107 0320 	add.w	r3, r7, #32
 8001408:	4619      	mov	r1, r3
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f007 fac8 	bl	80089a0 <strcat>
}
 8001410:	bf00      	nop
 8001412:	3748      	adds	r7, #72	; 0x48
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20000b4c 	.word	0x20000b4c
 800141c:	0800ac48 	.word	0x0800ac48
 8001420:	0800ac58 	.word	0x0800ac58

08001424 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b0e0      	sub	sp, #384	; 0x180
 8001428:	af02      	add	r7, sp, #8
	char buf[4];
	float weight;
	int loadcellCounter;

	//*** Uncomment to print str to UART ***//
	global_flags.str_debug = 0;
 800142a:	4acf      	ldr	r2, [pc, #828]	; (8001768 <main+0x344>)
 800142c:	7813      	ldrb	r3, [r2, #0]
 800142e:	f36f 1304 	bfc	r3, #4, #1
 8001432:	7013      	strb	r3, [r2, #0]
    //*************************************//

	//The microcontroller is booting up
	if(set_state(&state, STARTUP) == false)
 8001434:	2101      	movs	r1, #1
 8001436:	48cd      	ldr	r0, [pc, #820]	; (800176c <main+0x348>)
 8001438:	f000 fdaa 	bl	8001f90 <set_state>
 800143c:	4603      	mov	r3, r0
 800143e:	2b01      	cmp	r3, #1
 8001440:	d101      	bne.n	8001446 <main+0x22>
	{
		Error_Handler();
 8001442:	f000 fd89 	bl	8001f58 <Error_Handler>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001446:	f001 f9b7 	bl	80027b8 <HAL_Init>

  /* USER CODE BEGIN Init */

	//Begin to configure the mcu
	if(set_state(&state, CONFIGURING) == false)
 800144a:	2102      	movs	r1, #2
 800144c:	48c7      	ldr	r0, [pc, #796]	; (800176c <main+0x348>)
 800144e:	f000 fd9f 	bl	8001f90 <set_state>
 8001452:	4603      	mov	r3, r0
 8001454:	2b01      	cmp	r3, #1
 8001456:	d101      	bne.n	800145c <main+0x38>
	{
		Error_Handler();
 8001458:	f000 fd7e 	bl	8001f58 <Error_Handler>
	}
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800145c:	f000 faf2 	bl	8001a44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001460:	f000 fd0e 	bl	8001e80 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001464:	f000 fb68 	bl	8001b38 <MX_ADC1_Init>
  MX_DMA_Init();
 8001468:	f000 fcf8 	bl	8001e5c <MX_DMA_Init>
  MX_USART1_UART_Init();
 800146c:	f000 fcaa 	bl	8001dc4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001470:	f000 fc5a 	bl	8001d28 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001474:	f000 fbbe 	bl	8001bf4 <MX_I2C1_Init>
  MX_RTC_Init();
 8001478:	f000 fbfa 	bl	8001c70 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 800147c:	2260      	movs	r2, #96	; 0x60
 800147e:	49bc      	ldr	r1, [pc, #752]	; (8001770 <main+0x34c>)
 8001480:	48bc      	ldr	r0, [pc, #752]	; (8001774 <main+0x350>)
 8001482:	f001 fe1b 	bl	80030bc <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim2);
 8001486:	48bc      	ldr	r0, [pc, #752]	; (8001778 <main+0x354>)
 8001488:	f005 fb2e 	bl	8006ae8 <HAL_TIM_Base_Start>

	hx711_init(&loadcell, GPIOB, GPIO_PIN_5, GPIOB, GPIO_PIN_0);
 800148c:	2301      	movs	r3, #1
 800148e:	9300      	str	r3, [sp, #0]
 8001490:	4bba      	ldr	r3, [pc, #744]	; (800177c <main+0x358>)
 8001492:	2220      	movs	r2, #32
 8001494:	49b9      	ldr	r1, [pc, #740]	; (800177c <main+0x358>)
 8001496:	48ba      	ldr	r0, [pc, #744]	; (8001780 <main+0x35c>)
 8001498:	f7ff fd79 	bl	8000f8e <hx711_init>
	hx711_coef_set(&loadcell, 1000000); // read after calibration
 800149c:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 8001784 <main+0x360>
 80014a0:	48b7      	ldr	r0, [pc, #732]	; (8001780 <main+0x35c>)
 80014a2:	f7ff fecf 	bl	8001244 <hx711_coef_set>
	hx711_tare(&loadcell, 10);
 80014a6:	210a      	movs	r1, #10
 80014a8:	48b5      	ldr	r0, [pc, #724]	; (8001780 <main+0x35c>)
 80014aa:	f7ff fe40 	bl	800112e <hx711_tare>

	MPU6050_Init();
 80014ae:	f7ff ff21 	bl	80012f4 <MPU6050_Init>
	HAL_Delay (1000);
 80014b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014b6:	f001 f9cb 	bl	8002850 <HAL_Delay>

	packet_queue* queue = create_queue();
 80014ba:	f000 fd52 	bl	8001f62 <create_queue>
 80014be:	f8c7 0170 	str.w	r0, [r7, #368]	; 0x170

	if(queue == NULL)
 80014c2:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d109      	bne.n	80014de <main+0xba>
	{
		if(set_state(&state, INIT_QUEUE_FAIL) == false)
 80014ca:	f06f 0104 	mvn.w	r1, #4
 80014ce:	48a7      	ldr	r0, [pc, #668]	; (800176c <main+0x348>)
 80014d0:	f000 fd5e 	bl	8001f90 <set_state>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d101      	bne.n	80014de <main+0xba>
		{
			Error_Handler();
 80014da:	f000 fd3d 	bl	8001f58 <Error_Handler>
		}
	}


	//AROUND HERE WOULD BE BLUETOOTH INITIALIZATION
	if(set_state(&state, SEARCHING) == false)
 80014de:	2103      	movs	r1, #3
 80014e0:	48a2      	ldr	r0, [pc, #648]	; (800176c <main+0x348>)
 80014e2:	f000 fd55 	bl	8001f90 <set_state>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d101      	bne.n	80014f0 <main+0xcc>
	{
		Error_Handler();
 80014ec:	f000 fd34 	bl	8001f58 <Error_Handler>
	}
	if(set_state(&state, CONNECTING) == false)
 80014f0:	2104      	movs	r1, #4
 80014f2:	489e      	ldr	r0, [pc, #632]	; (800176c <main+0x348>)
 80014f4:	f000 fd4c 	bl	8001f90 <set_state>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d101      	bne.n	8001502 <main+0xde>
	{
		Error_Handler();
 80014fe:	f000 fd2b 	bl	8001f58 <Error_Handler>
	}
	if(set_state(&state, READY) == false)
 8001502:	2105      	movs	r1, #5
 8001504:	4899      	ldr	r0, [pc, #612]	; (800176c <main+0x348>)
 8001506:	f000 fd43 	bl	8001f90 <set_state>
 800150a:	4603      	mov	r3, r0
 800150c:	2b01      	cmp	r3, #1
 800150e:	d101      	bne.n	8001514 <main+0xf0>
	{
		Error_Handler();
 8001510:	f000 fd22 	bl	8001f58 <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	loadcellCounter=0;
 8001514:	2300      	movs	r3, #0
 8001516:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174

	while (1)
	{

		if(set_state(&state, READING) == false)
 800151a:	2106      	movs	r1, #6
 800151c:	4893      	ldr	r0, [pc, #588]	; (800176c <main+0x348>)
 800151e:	f000 fd37 	bl	8001f90 <set_state>
 8001522:	4603      	mov	r3, r0
 8001524:	2b01      	cmp	r3, #1
 8001526:	d101      	bne.n	800152c <main+0x108>
		{
			Error_Handler();
 8001528:	f000 fd16 	bl	8001f58 <Error_Handler>
		}

		char transmitString[340]="";
 800152c:	463b      	mov	r3, r7
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	3304      	adds	r3, #4
 8001534:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8001538:	2100      	movs	r1, #0
 800153a:	4618      	mov	r0, r3
 800153c:	f006 fce4 	bl	8007f08 <memset>

		if(global_flags.str_debug)
 8001540:	4b89      	ldr	r3, [pc, #548]	; (8001768 <main+0x344>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	f003 0310 	and.w	r3, r3, #16
 8001548:	b2db      	uxtb	r3, r3
 800154a:	2b00      	cmp	r3, #0
 800154c:	d01e      	beq.n	800158c <main+0x168>
		{
			get_RTC_Value(msg);
 800154e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff ff24 	bl	80013a0 <get_RTC_Value>
			strcat(transmitString,msg);
 8001558:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800155c:	463b      	mov	r3, r7
 800155e:	4611      	mov	r1, r2
 8001560:	4618      	mov	r0, r3
 8001562:	f007 fa1d 	bl	80089a0 <strcat>

			uint32_t time1 = HAL_GetTick();
 8001566:	f001 f95b 	bl	8002820 <HAL_GetTick>
 800156a:	f8c7 016c 	str.w	r0, [r7, #364]	; 0x16c

			sprintf(msg, "%i, ", time1);
 800156e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001572:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8001576:	4984      	ldr	r1, [pc, #528]	; (8001788 <main+0x364>)
 8001578:	4618      	mov	r0, r3
 800157a:	f007 f9f1 	bl	8008960 <siprintf>
			strcat(transmitString,msg);
 800157e:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8001582:	463b      	mov	r3, r7
 8001584:	4611      	mov	r1, r2
 8001586:	4618      	mov	r0, r3
 8001588:	f007 fa0a 	bl	80089a0 <strcat>
		}

		//Get ADC value
		sConfig.Channel= ADC_CHANNEL_9;
 800158c:	4b7f      	ldr	r3, [pc, #508]	; (800178c <main+0x368>)
 800158e:	4a80      	ldr	r2, [pc, #512]	; (8001790 <main+0x36c>)
 8001590:	601a      	str	r2, [r3, #0]
		HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001592:	497e      	ldr	r1, [pc, #504]	; (800178c <main+0x368>)
 8001594:	4877      	ldr	r0, [pc, #476]	; (8001774 <main+0x350>)
 8001596:	f001 fe33 	bl	8003200 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc1);
 800159a:	4876      	ldr	r0, [pc, #472]	; (8001774 <main+0x350>)
 800159c:	f001 fc88 	bl	8002eb0 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80015a0:	f04f 31ff 	mov.w	r1, #4294967295
 80015a4:	4873      	ldr	r0, [pc, #460]	; (8001774 <main+0x350>)
 80015a6:	f001 fcfc 	bl	8002fa2 <HAL_ADC_PollForConversion>
		raw_ecg_val = HAL_ADC_GetValue(&hadc1);
 80015aa:	4872      	ldr	r0, [pc, #456]	; (8001774 <main+0x350>)
 80015ac:	f001 fdfc 	bl	80031a8 <HAL_ADC_GetValue>
 80015b0:	4603      	mov	r3, r0
 80015b2:	f8a7 316a 	strh.w	r3, [r7, #362]	; 0x16a
		HAL_ADC_Stop(&hadc1);
 80015b6:	486f      	ldr	r0, [pc, #444]	; (8001774 <main+0x350>)
 80015b8:	f001 fcc0 	bl	8002f3c <HAL_ADC_Stop>

		if(global_flags.str_debug)
 80015bc:	4b6a      	ldr	r3, [pc, #424]	; (8001768 <main+0x344>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	f003 0310 	and.w	r3, r3, #16
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d00e      	beq.n	80015e8 <main+0x1c4>
		{
			sprintf(msg, "%hu, ", raw_ecg_val);
 80015ca:	f8b7 216a 	ldrh.w	r2, [r7, #362]	; 0x16a
 80015ce:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80015d2:	4970      	ldr	r1, [pc, #448]	; (8001794 <main+0x370>)
 80015d4:	4618      	mov	r0, r3
 80015d6:	f007 f9c3 	bl	8008960 <siprintf>
			strcat(transmitString,msg);
 80015da:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80015de:	463b      	mov	r3, r7
 80015e0:	4611      	mov	r1, r2
 80015e2:	4618      	mov	r0, r3
 80015e4:	f007 f9dc 	bl	80089a0 <strcat>
		}

		global_flags.ecg_ready = 0x01;
 80015e8:	4a5f      	ldr	r2, [pc, #380]	; (8001768 <main+0x344>)
 80015ea:	7853      	ldrb	r3, [r2, #1]
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	7053      	strb	r3, [r2, #1]
		pl.ecg_s[sample_cnt] = raw_ecg_val;
 80015f2:	4b69      	ldr	r3, [pc, #420]	; (8001798 <main+0x374>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a69      	ldr	r2, [pc, #420]	; (800179c <main+0x378>)
 80015f8:	f8b7 116a 	ldrh.w	r1, [r7, #362]	; 0x16a
 80015fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		//Get ADC value
		sConfig.Channel= ADC_CHANNEL_5;
 8001600:	4b62      	ldr	r3, [pc, #392]	; (800178c <main+0x368>)
 8001602:	4a67      	ldr	r2, [pc, #412]	; (80017a0 <main+0x37c>)
 8001604:	601a      	str	r2, [r3, #0]
		HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001606:	4961      	ldr	r1, [pc, #388]	; (800178c <main+0x368>)
 8001608:	485a      	ldr	r0, [pc, #360]	; (8001774 <main+0x350>)
 800160a:	f001 fdf9 	bl	8003200 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc1);
 800160e:	4859      	ldr	r0, [pc, #356]	; (8001774 <main+0x350>)
 8001610:	f001 fc4e 	bl	8002eb0 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001614:	f04f 31ff 	mov.w	r1, #4294967295
 8001618:	4856      	ldr	r0, [pc, #344]	; (8001774 <main+0x350>)
 800161a:	f001 fcc2 	bl	8002fa2 <HAL_ADC_PollForConversion>
		raw_emg_val = HAL_ADC_GetValue(&hadc1);
 800161e:	4855      	ldr	r0, [pc, #340]	; (8001774 <main+0x350>)
 8001620:	f001 fdc2 	bl	80031a8 <HAL_ADC_GetValue>
 8001624:	4603      	mov	r3, r0
 8001626:	f8a7 3168 	strh.w	r3, [r7, #360]	; 0x168
		HAL_ADC_Stop(&hadc1);
 800162a:	4852      	ldr	r0, [pc, #328]	; (8001774 <main+0x350>)
 800162c:	f001 fc86 	bl	8002f3c <HAL_ADC_Stop>

		if(global_flags.str_debug)
 8001630:	4b4d      	ldr	r3, [pc, #308]	; (8001768 <main+0x344>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	f003 0310 	and.w	r3, r3, #16
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2b00      	cmp	r3, #0
 800163c:	d00e      	beq.n	800165c <main+0x238>
		{
			sprintf(msg, "%hu, ", raw_emg_val);
 800163e:	f8b7 2168 	ldrh.w	r2, [r7, #360]	; 0x168
 8001642:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001646:	4953      	ldr	r1, [pc, #332]	; (8001794 <main+0x370>)
 8001648:	4618      	mov	r0, r3
 800164a:	f007 f989 	bl	8008960 <siprintf>
			strcat(transmitString,msg);
 800164e:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8001652:	463b      	mov	r3, r7
 8001654:	4611      	mov	r1, r2
 8001656:	4618      	mov	r0, r3
 8001658:	f007 f9a2 	bl	80089a0 <strcat>
		}

		global_flags.emg_ready = 0x01;
 800165c:	4a42      	ldr	r2, [pc, #264]	; (8001768 <main+0x344>)
 800165e:	7853      	ldrb	r3, [r2, #1]
 8001660:	f043 0302 	orr.w	r3, r3, #2
 8001664:	7053      	strb	r3, [r2, #1]
		pl.emg_s[sample_cnt] = raw_emg_val;
 8001666:	4b4c      	ldr	r3, [pc, #304]	; (8001798 <main+0x374>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a4c      	ldr	r2, [pc, #304]	; (800179c <main+0x378>)
 800166c:	3320      	adds	r3, #32
 800166e:	f8b7 1168 	ldrh.w	r1, [r7, #360]	; 0x168
 8001672:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		// read the Accelerometer and Gyro values
		//MPU6050_Read_Accel();
		//MPU6050_Read_Gyro();

		if(global_flags.str_debug)
 8001676:	4b3c      	ldr	r3, [pc, #240]	; (8001768 <main+0x344>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	f003 0310 	and.w	r3, r3, #16
 800167e:	b2db      	uxtb	r3, r3
 8001680:	2b00      	cmp	r3, #0
 8001682:	f000 809f 	beq.w	80017c4 <main+0x3a0>
		{
			sprintf(buf, "%f, ", Ax);
 8001686:	4b47      	ldr	r3, [pc, #284]	; (80017a4 <main+0x380>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f7fe ff34 	bl	80004f8 <__aeabi_f2d>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	f507 70aa 	add.w	r0, r7, #340	; 0x154
 8001698:	4943      	ldr	r1, [pc, #268]	; (80017a8 <main+0x384>)
 800169a:	f007 f961 	bl	8008960 <siprintf>
			strcat(transmitString,buf);
 800169e:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 80016a2:	463b      	mov	r3, r7
 80016a4:	4611      	mov	r1, r2
 80016a6:	4618      	mov	r0, r3
 80016a8:	f007 f97a 	bl	80089a0 <strcat>
			sprintf(buf, "%f, ", Ay);
 80016ac:	4b3f      	ldr	r3, [pc, #252]	; (80017ac <main+0x388>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7fe ff21 	bl	80004f8 <__aeabi_f2d>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	f507 70aa 	add.w	r0, r7, #340	; 0x154
 80016be:	493a      	ldr	r1, [pc, #232]	; (80017a8 <main+0x384>)
 80016c0:	f007 f94e 	bl	8008960 <siprintf>
			strcat(transmitString,buf);
 80016c4:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 80016c8:	463b      	mov	r3, r7
 80016ca:	4611      	mov	r1, r2
 80016cc:	4618      	mov	r0, r3
 80016ce:	f007 f967 	bl	80089a0 <strcat>
			sprintf(buf, "%f, ", Az);
 80016d2:	4b37      	ldr	r3, [pc, #220]	; (80017b0 <main+0x38c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7fe ff0e 	bl	80004f8 <__aeabi_f2d>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	f507 70aa 	add.w	r0, r7, #340	; 0x154
 80016e4:	4930      	ldr	r1, [pc, #192]	; (80017a8 <main+0x384>)
 80016e6:	f007 f93b 	bl	8008960 <siprintf>
			strcat(transmitString,buf);
 80016ea:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 80016ee:	463b      	mov	r3, r7
 80016f0:	4611      	mov	r1, r2
 80016f2:	4618      	mov	r0, r3
 80016f4:	f007 f954 	bl	80089a0 <strcat>
			sprintf(buf, "%f, ", Gx);
 80016f8:	4b2e      	ldr	r3, [pc, #184]	; (80017b4 <main+0x390>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7fe fefb 	bl	80004f8 <__aeabi_f2d>
 8001702:	4602      	mov	r2, r0
 8001704:	460b      	mov	r3, r1
 8001706:	f507 70aa 	add.w	r0, r7, #340	; 0x154
 800170a:	4927      	ldr	r1, [pc, #156]	; (80017a8 <main+0x384>)
 800170c:	f007 f928 	bl	8008960 <siprintf>
			strcat(transmitString,buf);
 8001710:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8001714:	463b      	mov	r3, r7
 8001716:	4611      	mov	r1, r2
 8001718:	4618      	mov	r0, r3
 800171a:	f007 f941 	bl	80089a0 <strcat>
			sprintf(buf, "%f, ", Gy);
 800171e:	4b26      	ldr	r3, [pc, #152]	; (80017b8 <main+0x394>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4618      	mov	r0, r3
 8001724:	f7fe fee8 	bl	80004f8 <__aeabi_f2d>
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	f507 70aa 	add.w	r0, r7, #340	; 0x154
 8001730:	491d      	ldr	r1, [pc, #116]	; (80017a8 <main+0x384>)
 8001732:	f007 f915 	bl	8008960 <siprintf>
			strcat(transmitString,buf);
 8001736:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 800173a:	463b      	mov	r3, r7
 800173c:	4611      	mov	r1, r2
 800173e:	4618      	mov	r0, r3
 8001740:	f007 f92e 	bl	80089a0 <strcat>
			sprintf(buf, "%f, ", Gz);
 8001744:	4b1d      	ldr	r3, [pc, #116]	; (80017bc <main+0x398>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe fed5 	bl	80004f8 <__aeabi_f2d>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	f507 70aa 	add.w	r0, r7, #340	; 0x154
 8001756:	4914      	ldr	r1, [pc, #80]	; (80017a8 <main+0x384>)
 8001758:	f007 f902 	bl	8008960 <siprintf>
			strcat(transmitString,buf);
 800175c:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8001760:	463b      	mov	r3, r7
 8001762:	4611      	mov	r1, r2
 8001764:	4618      	mov	r0, r3
 8001766:	e02b      	b.n	80017c0 <main+0x39c>
 8001768:	20000258 	.word	0x20000258
 800176c:	20000668 	.word	0x20000668
 8001770:	20000b88 	.word	0x20000b88
 8001774:	20000678 	.word	0x20000678
 8001778:	20000208 	.word	0x20000208
 800177c:	48000400 	.word	0x48000400
 8001780:	20000650 	.word	0x20000650
 8001784:	49742400 	.word	0x49742400
 8001788:	0800ac68 	.word	0x0800ac68
 800178c:	20000b78 	.word	0x20000b78
 8001790:	24000200 	.word	0x24000200
 8001794:	0800ac70 	.word	0x0800ac70
 8001798:	200006cc 	.word	0x200006cc
 800179c:	20000764 	.word	0x20000764
 80017a0:	14000020 	.word	0x14000020
 80017a4:	20000b70 	.word	0x20000b70
 80017a8:	0800ac78 	.word	0x0800ac78
 80017ac:	2000066c 	.word	0x2000066c
 80017b0:	20000b74 	.word	0x20000b74
 80017b4:	20000254 	.word	0x20000254
 80017b8:	20000674 	.word	0x20000674
 80017bc:	20000c48 	.word	0x20000c48
 80017c0:	f007 f8ee 	bl	80089a0 <strcat>
		}

		global_flags.accel_ready = 0x01;
 80017c4:	4a8c      	ldr	r2, [pc, #560]	; (80019f8 <main+0x5d4>)
 80017c6:	7853      	ldrb	r3, [r2, #1]
 80017c8:	f043 0308 	orr.w	r3, r3, #8
 80017cc:	7053      	strb	r3, [r2, #1]
		pl.accelx_s[sample_cnt] = Ax;
 80017ce:	4b8b      	ldr	r3, [pc, #556]	; (80019fc <main+0x5d8>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a8b      	ldr	r2, [pc, #556]	; (8001a00 <main+0x5dc>)
 80017d4:	6811      	ldr	r1, [r2, #0]
 80017d6:	4a8b      	ldr	r2, [pc, #556]	; (8001a04 <main+0x5e0>)
 80017d8:	3320      	adds	r3, #32
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	4413      	add	r3, r2
 80017de:	460a      	mov	r2, r1
 80017e0:	605a      	str	r2, [r3, #4]
		pl.accely_s[sample_cnt] = Ay;
 80017e2:	4b86      	ldr	r3, [pc, #536]	; (80019fc <main+0x5d8>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a88      	ldr	r2, [pc, #544]	; (8001a08 <main+0x5e4>)
 80017e8:	6811      	ldr	r1, [r2, #0]
 80017ea:	4a86      	ldr	r2, [pc, #536]	; (8001a04 <main+0x5e0>)
 80017ec:	3340      	adds	r3, #64	; 0x40
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	4413      	add	r3, r2
 80017f2:	460a      	mov	r2, r1
 80017f4:	605a      	str	r2, [r3, #4]
		pl.accelz_s[sample_cnt] = Az;
 80017f6:	4b81      	ldr	r3, [pc, #516]	; (80019fc <main+0x5d8>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a84      	ldr	r2, [pc, #528]	; (8001a0c <main+0x5e8>)
 80017fc:	6811      	ldr	r1, [r2, #0]
 80017fe:	4a81      	ldr	r2, [pc, #516]	; (8001a04 <main+0x5e0>)
 8001800:	3360      	adds	r3, #96	; 0x60
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	4413      	add	r3, r2
 8001806:	460a      	mov	r2, r1
 8001808:	605a      	str	r2, [r3, #4]

		global_flags.gyro_ready = 0x01;
 800180a:	4a7b      	ldr	r2, [pc, #492]	; (80019f8 <main+0x5d4>)
 800180c:	7853      	ldrb	r3, [r2, #1]
 800180e:	f043 0310 	orr.w	r3, r3, #16
 8001812:	7053      	strb	r3, [r2, #1]
		pl.gyrox_s[sample_cnt] = Gx;
 8001814:	4b79      	ldr	r3, [pc, #484]	; (80019fc <main+0x5d8>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a7d      	ldr	r2, [pc, #500]	; (8001a10 <main+0x5ec>)
 800181a:	6811      	ldr	r1, [r2, #0]
 800181c:	4a79      	ldr	r2, [pc, #484]	; (8001a04 <main+0x5e0>)
 800181e:	3380      	adds	r3, #128	; 0x80
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	4413      	add	r3, r2
 8001824:	460a      	mov	r2, r1
 8001826:	605a      	str	r2, [r3, #4]
		pl.gyroy_s[sample_cnt] = Gy;
 8001828:	4b74      	ldr	r3, [pc, #464]	; (80019fc <main+0x5d8>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a79      	ldr	r2, [pc, #484]	; (8001a14 <main+0x5f0>)
 800182e:	6811      	ldr	r1, [r2, #0]
 8001830:	4a74      	ldr	r2, [pc, #464]	; (8001a04 <main+0x5e0>)
 8001832:	33a0      	adds	r3, #160	; 0xa0
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4413      	add	r3, r2
 8001838:	460a      	mov	r2, r1
 800183a:	605a      	str	r2, [r3, #4]
		pl.gyroz_s[sample_cnt] = Gz;
 800183c:	4b6f      	ldr	r3, [pc, #444]	; (80019fc <main+0x5d8>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a75      	ldr	r2, [pc, #468]	; (8001a18 <main+0x5f4>)
 8001842:	6811      	ldr	r1, [r2, #0]
 8001844:	4a6f      	ldr	r2, [pc, #444]	; (8001a04 <main+0x5e0>)
 8001846:	33c0      	adds	r3, #192	; 0xc0
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	4413      	add	r3, r2
 800184c:	460a      	mov	r2, r1
 800184e:	605a      	str	r2, [r3, #4]

		// Get value from the load cell amplifier
		//Only read the load cell value every 10000 samples
		loadcellCounter++;
 8001850:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001854:	3301      	adds	r3, #1
 8001856:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
		if(loadcellCounter > 10000){
 800185a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800185e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001862:	4293      	cmp	r3, r2
 8001864:	dd27      	ble.n	80018b6 <main+0x492>
			weight = hx711_weight(&loadcell, 10);
 8001866:	210a      	movs	r1, #10
 8001868:	486c      	ldr	r0, [pc, #432]	; (8001a1c <main+0x5f8>)
 800186a:	f7ff fc9c 	bl	80011a6 <hx711_weight>
 800186e:	ed87 0a59 	vstr	s0, [r7, #356]	; 0x164

			global_flags.force_ready = 0x01;
 8001872:	4a61      	ldr	r2, [pc, #388]	; (80019f8 <main+0x5d4>)
 8001874:	7853      	ldrb	r3, [r2, #1]
 8001876:	f043 0304 	orr.w	r3, r3, #4
 800187a:	7053      	strb	r3, [r2, #1]
			loadcellCounter = 0;
 800187c:	2300      	movs	r3, #0
 800187e:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174

			if(global_flags.str_debug)
 8001882:	4b5d      	ldr	r3, [pc, #372]	; (80019f8 <main+0x5d4>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	f003 0310 	and.w	r3, r3, #16
 800188a:	b2db      	uxtb	r3, r3
 800188c:	2b00      	cmp	r3, #0
 800188e:	d017      	beq.n	80018c0 <main+0x49c>
			{
				sprintf(msg, "  %f,", weight);
 8001890:	f8d7 0164 	ldr.w	r0, [r7, #356]	; 0x164
 8001894:	f7fe fe30 	bl	80004f8 <__aeabi_f2d>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 80018a0:	495f      	ldr	r1, [pc, #380]	; (8001a20 <main+0x5fc>)
 80018a2:	f007 f85d 	bl	8008960 <siprintf>
				strcat(transmitString,msg);
 80018a6:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80018aa:	463b      	mov	r3, r7
 80018ac:	4611      	mov	r1, r2
 80018ae:	4618      	mov	r0, r3
 80018b0:	f007 f876 	bl	80089a0 <strcat>
 80018b4:	e004      	b.n	80018c0 <main+0x49c>
			}
		}
		else
		{
			pl.force_s = 0;
 80018b6:	4b53      	ldr	r3, [pc, #332]	; (8001a04 <main+0x5e0>)
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		}

		if(global_flags.str_debug)
 80018c0:	4b4d      	ldr	r3, [pc, #308]	; (80019f8 <main+0x5d4>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	f003 0310 	and.w	r3, r3, #16
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d018      	beq.n	8001900 <main+0x4dc>
		{
			sprintf(msg, "%\r\n");
 80018ce:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80018d2:	4954      	ldr	r1, [pc, #336]	; (8001a24 <main+0x600>)
 80018d4:	4618      	mov	r0, r3
 80018d6:	f007 f843 	bl	8008960 <siprintf>
			strcat(transmitString,msg);
 80018da:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80018de:	463b      	mov	r3, r7
 80018e0:	4611      	mov	r1, r2
 80018e2:	4618      	mov	r0, r3
 80018e4:	f007 f85c 	bl	80089a0 <strcat>
			HAL_UART_Transmit(&huart1, (uint8_t*)transmitString, strlen(transmitString), HAL_MAX_DELAY);
 80018e8:	463b      	mov	r3, r7
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7fe fc48 	bl	8000180 <strlen>
 80018f0:	4603      	mov	r3, r0
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	4639      	mov	r1, r7
 80018f6:	f04f 33ff 	mov.w	r3, #4294967295
 80018fa:	484b      	ldr	r0, [pc, #300]	; (8001a28 <main+0x604>)
 80018fc:	f005 fd70 	bl	80073e0 <HAL_UART_Transmit>
		}

		//Simple method to create and add packets to queue
		if(sample_cnt % 32 == 0 && sample_cnt != 0) //32 loops have occurred and at least 1 sensor has 1 value in it
 8001900:	4b3e      	ldr	r3, [pc, #248]	; (80019fc <main+0x5d8>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 031f 	and.w	r3, r3, #31
 8001908:	2b00      	cmp	r3, #0
 800190a:	d16f      	bne.n	80019ec <main+0x5c8>
 800190c:	4b3b      	ldr	r3, [pc, #236]	; (80019fc <main+0x5d8>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d06b      	beq.n	80019ec <main+0x5c8>
		{
			if(set_state(&state, STORING) == false)
 8001914:	2107      	movs	r1, #7
 8001916:	4845      	ldr	r0, [pc, #276]	; (8001a2c <main+0x608>)
 8001918:	f000 fb3a 	bl	8001f90 <set_state>
 800191c:	4603      	mov	r3, r0
 800191e:	2b01      	cmp	r3, #1
 8001920:	d101      	bne.n	8001926 <main+0x502>
			{
				Error_Handler();
 8001922:	f000 fb19 	bl	8001f58 <Error_Handler>
			}
			pl.payload_size = global_flags.sensor_contents; //bit mask
 8001926:	4b34      	ldr	r3, [pc, #208]	; (80019f8 <main+0x5d4>)
 8001928:	785a      	ldrb	r2, [r3, #1]
 800192a:	4b36      	ldr	r3, [pc, #216]	; (8001a04 <main+0x5e0>)
 800192c:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384

			pkt.start = 0xFFFFFFFF;
 8001930:	4b3f      	ldr	r3, [pc, #252]	; (8001a30 <main+0x60c>)
 8001932:	781a      	ldrb	r2, [r3, #0]
 8001934:	f04f 32ff 	mov.w	r2, #4294967295
 8001938:	701a      	strb	r2, [r3, #0]
 800193a:	785a      	ldrb	r2, [r3, #1]
 800193c:	f04f 32ff 	mov.w	r2, #4294967295
 8001940:	705a      	strb	r2, [r3, #1]
 8001942:	789a      	ldrb	r2, [r3, #2]
 8001944:	f04f 32ff 	mov.w	r2, #4294967295
 8001948:	709a      	strb	r2, [r3, #2]
 800194a:	78da      	ldrb	r2, [r3, #3]
 800194c:	f04f 32ff 	mov.w	r2, #4294967295
 8001950:	70da      	strb	r2, [r3, #3]
			pkt.payload = pl;
 8001952:	4b37      	ldr	r3, [pc, #220]	; (8001a30 <main+0x60c>)
 8001954:	4a2b      	ldr	r2, [pc, #172]	; (8001a04 <main+0x5e0>)
 8001956:	3309      	adds	r3, #9
 8001958:	4611      	mov	r1, r2
 800195a:	f240 3285 	movw	r2, #901	; 0x385
 800195e:	4618      	mov	r0, r3
 8001960:	f006 fac4 	bl	8007eec <memcpy>
			pkt.state = (uint8_t) state; //save the current state;
 8001964:	4b31      	ldr	r3, [pc, #196]	; (8001a2c <main+0x608>)
 8001966:	f993 3000 	ldrsb.w	r3, [r3]
 800196a:	f003 030f 	and.w	r3, r3, #15
 800196e:	b2d9      	uxtb	r1, r3
 8001970:	4a2f      	ldr	r2, [pc, #188]	; (8001a30 <main+0x60c>)
 8001972:	7a13      	ldrb	r3, [r2, #8]
 8001974:	f361 0303 	bfi	r3, r1, #0, #4
 8001978:	7213      	strb	r3, [r2, #8]
			pkt.packet_size = sizeof(packet_t);
 800197a:	4b2d      	ldr	r3, [pc, #180]	; (8001a30 <main+0x60c>)
 800197c:	791a      	ldrb	r2, [r3, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	f062 0259 	orn	r2, r2, #89	; 0x59
 8001984:	711a      	strb	r2, [r3, #4]
 8001986:	795a      	ldrb	r2, [r3, #5]
 8001988:	2200      	movs	r2, #0
 800198a:	f042 0203 	orr.w	r2, r2, #3
 800198e:	715a      	strb	r2, [r3, #5]
			pkt.packet_num = pkt_cnt;
 8001990:	4b28      	ldr	r3, [pc, #160]	; (8001a34 <main+0x610>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	b29a      	uxth	r2, r3
 8001996:	4b26      	ldr	r3, [pc, #152]	; (8001a30 <main+0x60c>)
 8001998:	80da      	strh	r2, [r3, #6]
			get_RTC_Value((char*)pkt.timestamp);
 800199a:	4827      	ldr	r0, [pc, #156]	; (8001a38 <main+0x614>)
 800199c:	f7ff fd00 	bl	80013a0 <get_RTC_Value>

			HAL_UART_Transmit(&huart1, (uint8_t*)&pkt, pkt.packet_size, HAL_MAX_DELAY);
 80019a0:	4b23      	ldr	r3, [pc, #140]	; (8001a30 <main+0x60c>)
 80019a2:	889b      	ldrh	r3, [r3, #4]
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	f04f 33ff 	mov.w	r3, #4294967295
 80019aa:	4921      	ldr	r1, [pc, #132]	; (8001a30 <main+0x60c>)
 80019ac:	481e      	ldr	r0, [pc, #120]	; (8001a28 <main+0x604>)
 80019ae:	f005 fd17 	bl	80073e0 <HAL_UART_Transmit>
//				if(HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY) != HAL_OK)
//				{
//					Error_Handler();
//				}
//			}
			pl = null_pl;
 80019b2:	4a14      	ldr	r2, [pc, #80]	; (8001a04 <main+0x5e0>)
 80019b4:	4b21      	ldr	r3, [pc, #132]	; (8001a3c <main+0x618>)
 80019b6:	4610      	mov	r0, r2
 80019b8:	4619      	mov	r1, r3
 80019ba:	f240 3385 	movw	r3, #901	; 0x385
 80019be:	461a      	mov	r2, r3
 80019c0:	f006 fa94 	bl	8007eec <memcpy>
			pkt = null_pkt;
 80019c4:	4a1a      	ldr	r2, [pc, #104]	; (8001a30 <main+0x60c>)
 80019c6:	4b1e      	ldr	r3, [pc, #120]	; (8001a40 <main+0x61c>)
 80019c8:	4610      	mov	r0, r2
 80019ca:	4619      	mov	r1, r3
 80019cc:	f240 33a6 	movw	r3, #934	; 0x3a6
 80019d0:	461a      	mov	r2, r3
 80019d2:	f006 fa8b 	bl	8007eec <memcpy>

			global_flags.sensor_contents = 0x00; //reset all packet ready values
 80019d6:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <main+0x5d4>)
 80019d8:	2200      	movs	r2, #0
 80019da:	705a      	strb	r2, [r3, #1]
			pkt_cnt ++;
 80019dc:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <main+0x610>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	3301      	adds	r3, #1
 80019e2:	4a14      	ldr	r2, [pc, #80]	; (8001a34 <main+0x610>)
 80019e4:	6013      	str	r3, [r2, #0]
			sample_cnt = 0;
 80019e6:	4b05      	ldr	r3, [pc, #20]	; (80019fc <main+0x5d8>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
		}

		sample_cnt ++;
 80019ec:	4b03      	ldr	r3, [pc, #12]	; (80019fc <main+0x5d8>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	3301      	adds	r3, #1
 80019f2:	4a02      	ldr	r2, [pc, #8]	; (80019fc <main+0x5d8>)
 80019f4:	6013      	str	r3, [r2, #0]
	{
 80019f6:	e590      	b.n	800151a <main+0xf6>
 80019f8:	20000258 	.word	0x20000258
 80019fc:	200006cc 	.word	0x200006cc
 8001a00:	20000b70 	.word	0x20000b70
 8001a04:	20000764 	.word	0x20000764
 8001a08:	2000066c 	.word	0x2000066c
 8001a0c:	20000b74 	.word	0x20000b74
 8001a10:	20000254 	.word	0x20000254
 8001a14:	20000674 	.word	0x20000674
 8001a18:	20000c48 	.word	0x20000c48
 8001a1c:	20000650 	.word	0x20000650
 8001a20:	0800ac80 	.word	0x0800ac80
 8001a24:	0800ac88 	.word	0x0800ac88
 8001a28:	200006d4 	.word	0x200006d4
 8001a2c:	20000668 	.word	0x20000668
 8001a30:	2000025c 	.word	0x2000025c
 8001a34:	200006d0 	.word	0x200006d0
 8001a38:	200005ea 	.word	0x200005ea
 8001a3c:	0800b054 	.word	0x0800b054
 8001a40:	0800acac 	.word	0x0800acac

08001a44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b0a4      	sub	sp, #144	; 0x90
 8001a48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a4a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a4e:	2244      	movs	r2, #68	; 0x44
 8001a50:	2100      	movs	r1, #0
 8001a52:	4618      	mov	r0, r3
 8001a54:	f006 fa58 	bl	8007f08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a58:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]
 8001a68:	615a      	str	r2, [r3, #20]
 8001a6a:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a6c:	463b      	mov	r3, r7
 8001a6e:	2230      	movs	r2, #48	; 0x30
 8001a70:	2100      	movs	r1, #0
 8001a72:	4618      	mov	r0, r3
 8001a74:	f006 fa48 	bl	8007f08 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001a78:	f003 f8ea 	bl	8004c50 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	f7ff fbf0 	bl	8001262 <LL_RCC_LSE_SetDriveCapability>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8001a82:	232f      	movs	r3, #47	; 0x2f
 8001a84:	64fb      	str	r3, [r7, #76]	; 0x4c
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a8a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a94:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001a96:	2301      	movs	r3, #1
 8001a98:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a9a:	2340      	movs	r3, #64	; 0x40
 8001a9c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001aa2:	2360      	movs	r3, #96	; 0x60
 8001aa4:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001aa6:	2305      	movs	r3, #5
 8001aa8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f003 fc2a 	bl	800530c <HAL_RCC_OscConfig>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001abe:	f000 fa4b 	bl	8001f58 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001ac2:	236f      	movs	r3, #111	; 0x6f
 8001ac4:	633b      	str	r3, [r7, #48]	; 0x30
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aca:	2300      	movs	r3, #0
 8001acc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001ada:	2300      	movs	r3, #0
 8001adc:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001ade:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f003 ff5f 	bl	80059a8 <HAL_RCC_ClockConfig>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001af0:	f000 fa32 	bl	8001f58 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RTC
 8001af4:	f642 4305 	movw	r3, #11269	; 0x2c05
 8001af8:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001afa:	2300      	movs	r3, #0
 8001afc:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001afe:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001b02:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_HSI;
 8001b04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001b08:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001b0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b0e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001b10:	2300      	movs	r3, #0
 8001b12:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001b14:	2310      	movs	r3, #16
 8001b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b18:	463b      	mov	r3, r7
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f004 fb4b 	bl	80061b6 <HAL_RCCEx_PeriphCLKConfig>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001b26:	f000 fa17 	bl	8001f58 <Error_Handler>
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001b2a:	f004 fc3a 	bl	80063a2 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001b2e:	bf00      	nop
 8001b30:	3790      	adds	r7, #144	; 0x90
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
	...

08001b38 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b3e:	1d3b      	adds	r3, r7, #4
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001b48:	4b27      	ldr	r3, [pc, #156]	; (8001be8 <MX_ADC1_Init+0xb0>)
 8001b4a:	4a28      	ldr	r2, [pc, #160]	; (8001bec <MX_ADC1_Init+0xb4>)
 8001b4c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001b4e:	4b26      	ldr	r3, [pc, #152]	; (8001be8 <MX_ADC1_Init+0xb0>)
 8001b50:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001b54:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8001b56:	4b24      	ldr	r3, [pc, #144]	; (8001be8 <MX_ADC1_Init+0xb0>)
 8001b58:	2210      	movs	r2, #16
 8001b5a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b5c:	4b22      	ldr	r3, [pc, #136]	; (8001be8 <MX_ADC1_Init+0xb0>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b62:	4b21      	ldr	r3, [pc, #132]	; (8001be8 <MX_ADC1_Init+0xb0>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b68:	4b1f      	ldr	r3, [pc, #124]	; (8001be8 <MX_ADC1_Init+0xb0>)
 8001b6a:	2204      	movs	r2, #4
 8001b6c:	615a      	str	r2, [r3, #20]
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8001b6e:	4b1e      	ldr	r3, [pc, #120]	; (8001be8 <MX_ADC1_Init+0xb0>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8001b74:	4b1c      	ldr	r3, [pc, #112]	; (8001be8 <MX_ADC1_Init+0xb0>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001b7a:	4b1b      	ldr	r3, [pc, #108]	; (8001be8 <MX_ADC1_Init+0xb0>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001b80:	4b19      	ldr	r3, [pc, #100]	; (8001be8 <MX_ADC1_Init+0xb0>)
 8001b82:	2201      	movs	r2, #1
 8001b84:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8001b86:	4b18      	ldr	r3, [pc, #96]	; (8001be8 <MX_ADC1_Init+0xb0>)
 8001b88:	2201      	movs	r2, #1
 8001b8a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b8c:	4b16      	ldr	r3, [pc, #88]	; (8001be8 <MX_ADC1_Init+0xb0>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b94:	4b14      	ldr	r3, [pc, #80]	; (8001be8 <MX_ADC1_Init+0xb0>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b9a:	4b13      	ldr	r3, [pc, #76]	; (8001be8 <MX_ADC1_Init+0xb0>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001ba0:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <MX_ADC1_Init+0xb0>)
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001ba8:	4b0f      	ldr	r3, [pc, #60]	; (8001be8 <MX_ADC1_Init+0xb0>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001bae:	480e      	ldr	r0, [pc, #56]	; (8001be8 <MX_ADC1_Init+0xb0>)
 8001bb0:	f000 ffdc 	bl	8002b6c <HAL_ADC_Init>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001bba:	f000 f9cd 	bl	8001f58 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001bbe:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <MX_ADC1_Init+0xb8>)
 8001bc0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bca:	1d3b      	adds	r3, r7, #4
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4806      	ldr	r0, [pc, #24]	; (8001be8 <MX_ADC1_Init+0xb0>)
 8001bd0:	f001 fb16 	bl	8003200 <HAL_ADC_ConfigChannel>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001bda:	f000 f9bd 	bl	8001f58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001bde:	bf00      	nop
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	20000678 	.word	0x20000678
 8001bec:	40012400 	.word	0x40012400
 8001bf0:	24000200 	.word	0x24000200

08001bf4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001bf8:	4b1b      	ldr	r3, [pc, #108]	; (8001c68 <MX_I2C1_Init+0x74>)
 8001bfa:	4a1c      	ldr	r2, [pc, #112]	; (8001c6c <MX_I2C1_Init+0x78>)
 8001bfc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8001bfe:	4b1a      	ldr	r3, [pc, #104]	; (8001c68 <MX_I2C1_Init+0x74>)
 8001c00:	f640 6214 	movw	r2, #3604	; 0xe14
 8001c04:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001c06:	4b18      	ldr	r3, [pc, #96]	; (8001c68 <MX_I2C1_Init+0x74>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c0c:	4b16      	ldr	r3, [pc, #88]	; (8001c68 <MX_I2C1_Init+0x74>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c12:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <MX_I2C1_Init+0x74>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001c18:	4b13      	ldr	r3, [pc, #76]	; (8001c68 <MX_I2C1_Init+0x74>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c1e:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <MX_I2C1_Init+0x74>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c24:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <MX_I2C1_Init+0x74>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c2a:	4b0f      	ldr	r3, [pc, #60]	; (8001c68 <MX_I2C1_Init+0x74>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c30:	480d      	ldr	r0, [pc, #52]	; (8001c68 <MX_I2C1_Init+0x74>)
 8001c32:	f002 fa8b 	bl	800414c <HAL_I2C_Init>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c3c:	f000 f98c 	bl	8001f58 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c40:	2100      	movs	r1, #0
 8001c42:	4809      	ldr	r0, [pc, #36]	; (8001c68 <MX_I2C1_Init+0x74>)
 8001c44:	f002 ff6c 	bl	8004b20 <HAL_I2CEx_ConfigAnalogFilter>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001c4e:	f000 f983 	bl	8001f58 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001c52:	2100      	movs	r1, #0
 8001c54:	4804      	ldr	r0, [pc, #16]	; (8001c68 <MX_I2C1_Init+0x74>)
 8001c56:	f002 ffae 	bl	8004bb6 <HAL_I2CEx_ConfigDigitalFilter>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001c60:	f000 f97a 	bl	8001f58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c64:	bf00      	nop
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20000604 	.word	0x20000604
 8001c6c:	40005400 	.word	0x40005400

08001c70 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001c76:	1d3b      	adds	r3, r7, #4
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
 8001c82:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001c84:	2300      	movs	r3, #0
 8001c86:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001c88:	4b25      	ldr	r3, [pc, #148]	; (8001d20 <MX_RTC_Init+0xb0>)
 8001c8a:	4a26      	ldr	r2, [pc, #152]	; (8001d24 <MX_RTC_Init+0xb4>)
 8001c8c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001c8e:	4b24      	ldr	r3, [pc, #144]	; (8001d20 <MX_RTC_Init+0xb0>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001c94:	4b22      	ldr	r3, [pc, #136]	; (8001d20 <MX_RTC_Init+0xb0>)
 8001c96:	227f      	movs	r2, #127	; 0x7f
 8001c98:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001c9a:	4b21      	ldr	r3, [pc, #132]	; (8001d20 <MX_RTC_Init+0xb0>)
 8001c9c:	22ff      	movs	r2, #255	; 0xff
 8001c9e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001ca0:	4b1f      	ldr	r3, [pc, #124]	; (8001d20 <MX_RTC_Init+0xb0>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001ca6:	4b1e      	ldr	r3, [pc, #120]	; (8001d20 <MX_RTC_Init+0xb0>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001cac:	4b1c      	ldr	r3, [pc, #112]	; (8001d20 <MX_RTC_Init+0xb0>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001cb2:	481b      	ldr	r0, [pc, #108]	; (8001d20 <MX_RTC_Init+0xb0>)
 8001cb4:	f004 fb7b 	bl	80063ae <HAL_RTC_Init>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001cbe:	f000 f94b 	bl	8001f58 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x20;
 8001cc2:	2320      	movs	r3, #32
 8001cc4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x30;
 8001cc6:	2330      	movs	r3, #48	; 0x30
 8001cc8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0x0;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001cda:	1d3b      	adds	r3, r7, #4
 8001cdc:	2201      	movs	r2, #1
 8001cde:	4619      	mov	r1, r3
 8001ce0:	480f      	ldr	r0, [pc, #60]	; (8001d20 <MX_RTC_Init+0xb0>)
 8001ce2:	f004 fc02 	bl	80064ea <HAL_RTC_SetTime>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_RTC_Init+0x80>
  {
    Error_Handler();
 8001cec:	f000 f934 	bl	8001f58 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x25;
 8001cf8:	2325      	movs	r3, #37	; 0x25
 8001cfa:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 8001cfc:	2322      	movs	r3, #34	; 0x22
 8001cfe:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001d00:	463b      	mov	r3, r7
 8001d02:	2201      	movs	r2, #1
 8001d04:	4619      	mov	r1, r3
 8001d06:	4806      	ldr	r0, [pc, #24]	; (8001d20 <MX_RTC_Init+0xb0>)
 8001d08:	f004 fd0f 	bl	800672a <HAL_RTC_SetDate>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 8001d12:	f000 f921 	bl	8001f58 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001d16:	bf00      	nop
 8001d18:	3718      	adds	r7, #24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000b4c 	.word	0x20000b4c
 8001d24:	40002800 	.word	0x40002800

08001d28 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b088      	sub	sp, #32
 8001d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d2e:	f107 0310 	add.w	r3, r7, #16
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	605a      	str	r2, [r3, #4]
 8001d38:	609a      	str	r2, [r3, #8]
 8001d3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d3c:	1d3b      	adds	r3, r7, #4
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	605a      	str	r2, [r3, #4]
 8001d44:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d46:	4b1e      	ldr	r3, [pc, #120]	; (8001dc0 <MX_TIM2_Init+0x98>)
 8001d48:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d4c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 8001d4e:	4b1c      	ldr	r3, [pc, #112]	; (8001dc0 <MX_TIM2_Init+0x98>)
 8001d50:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001d54:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d56:	4b1a      	ldr	r3, [pc, #104]	; (8001dc0 <MX_TIM2_Init+0x98>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8001d5c:	4b18      	ldr	r3, [pc, #96]	; (8001dc0 <MX_TIM2_Init+0x98>)
 8001d5e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001d62:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d64:	4b16      	ldr	r3, [pc, #88]	; (8001dc0 <MX_TIM2_Init+0x98>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d6a:	4b15      	ldr	r3, [pc, #84]	; (8001dc0 <MX_TIM2_Init+0x98>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d70:	4813      	ldr	r0, [pc, #76]	; (8001dc0 <MX_TIM2_Init+0x98>)
 8001d72:	f004 fe61 	bl	8006a38 <HAL_TIM_Base_Init>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001d7c:	f000 f8ec 	bl	8001f58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d84:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d86:	f107 0310 	add.w	r3, r7, #16
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	480c      	ldr	r0, [pc, #48]	; (8001dc0 <MX_TIM2_Init+0x98>)
 8001d8e:	f005 f85e 	bl	8006e4e <HAL_TIM_ConfigClockSource>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001d98:	f000 f8de 	bl	8001f58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001da0:	2300      	movs	r3, #0
 8001da2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001da4:	1d3b      	adds	r3, r7, #4
 8001da6:	4619      	mov	r1, r3
 8001da8:	4805      	ldr	r0, [pc, #20]	; (8001dc0 <MX_TIM2_Init+0x98>)
 8001daa:	f005 fa2b 	bl	8007204 <HAL_TIMEx_MasterConfigSynchronization>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001db4:	f000 f8d0 	bl	8001f58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001db8:	bf00      	nop
 8001dba:	3720      	adds	r7, #32
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	20000208 	.word	0x20000208

08001dc4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001dc8:	4b22      	ldr	r3, [pc, #136]	; (8001e54 <MX_USART1_UART_Init+0x90>)
 8001dca:	4a23      	ldr	r2, [pc, #140]	; (8001e58 <MX_USART1_UART_Init+0x94>)
 8001dcc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001dce:	4b21      	ldr	r3, [pc, #132]	; (8001e54 <MX_USART1_UART_Init+0x90>)
 8001dd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dd4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dd6:	4b1f      	ldr	r3, [pc, #124]	; (8001e54 <MX_USART1_UART_Init+0x90>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ddc:	4b1d      	ldr	r3, [pc, #116]	; (8001e54 <MX_USART1_UART_Init+0x90>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001de2:	4b1c      	ldr	r3, [pc, #112]	; (8001e54 <MX_USART1_UART_Init+0x90>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001de8:	4b1a      	ldr	r3, [pc, #104]	; (8001e54 <MX_USART1_UART_Init+0x90>)
 8001dea:	220c      	movs	r2, #12
 8001dec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dee:	4b19      	ldr	r3, [pc, #100]	; (8001e54 <MX_USART1_UART_Init+0x90>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001df4:	4b17      	ldr	r3, [pc, #92]	; (8001e54 <MX_USART1_UART_Init+0x90>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dfa:	4b16      	ldr	r3, [pc, #88]	; (8001e54 <MX_USART1_UART_Init+0x90>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e00:	4b14      	ldr	r3, [pc, #80]	; (8001e54 <MX_USART1_UART_Init+0x90>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e06:	4b13      	ldr	r3, [pc, #76]	; (8001e54 <MX_USART1_UART_Init+0x90>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e0c:	4811      	ldr	r0, [pc, #68]	; (8001e54 <MX_USART1_UART_Init+0x90>)
 8001e0e:	f005 fa97 	bl	8007340 <HAL_UART_Init>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001e18:	f000 f89e 	bl	8001f58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	480d      	ldr	r0, [pc, #52]	; (8001e54 <MX_USART1_UART_Init+0x90>)
 8001e20:	f005 ff68 	bl	8007cf4 <HAL_UARTEx_SetTxFifoThreshold>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001e2a:	f000 f895 	bl	8001f58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e2e:	2100      	movs	r1, #0
 8001e30:	4808      	ldr	r0, [pc, #32]	; (8001e54 <MX_USART1_UART_Init+0x90>)
 8001e32:	f005 ff9d 	bl	8007d70 <HAL_UARTEx_SetRxFifoThreshold>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001e3c:	f000 f88c 	bl	8001f58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001e40:	4804      	ldr	r0, [pc, #16]	; (8001e54 <MX_USART1_UART_Init+0x90>)
 8001e42:	f005 ff1e 	bl	8007c82 <HAL_UARTEx_DisableFifoMode>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001e4c:	f000 f884 	bl	8001f58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e50:	bf00      	nop
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	200006d4 	.word	0x200006d4
 8001e58:	40013800 	.word	0x40013800

08001e5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001e60:	2004      	movs	r0, #4
 8001e62:	f7ff fa14 	bl	800128e <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e66:	2001      	movs	r0, #1
 8001e68:	f7ff fa11 	bl	800128e <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2100      	movs	r1, #0
 8001e70:	200b      	movs	r0, #11
 8001e72:	f001 fd65 	bl	8003940 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001e76:	200b      	movs	r0, #11
 8001e78:	f001 fd7c 	bl	8003974 <HAL_NVIC_EnableIRQ>

}
 8001e7c:	bf00      	nop
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e86:	1d3b      	adds	r3, r7, #4
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	60da      	str	r2, [r3, #12]
 8001e92:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e94:	2004      	movs	r0, #4
 8001e96:	f7ff fa13 	bl	80012c0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e9a:	2002      	movs	r0, #2
 8001e9c:	f7ff fa10 	bl	80012c0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea0:	2001      	movs	r0, #1
 8001ea2:	f7ff fa0d 	bl	80012c0 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001eac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eb0:	f002 f934 	bl	800411c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	2120      	movs	r1, #32
 8001eb8:	481d      	ldr	r0, [pc, #116]	; (8001f30 <MX_GPIO_Init+0xb0>)
 8001eba:	f002 f92f 	bl	800411c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eca:	1d3b      	adds	r3, r7, #4
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4818      	ldr	r0, [pc, #96]	; (8001f30 <MX_GPIO_Init+0xb0>)
 8001ed0:	f001 ffa4 	bl	8003e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001ed4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001ed8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eda:	2301      	movs	r3, #1
 8001edc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee6:	1d3b      	adds	r3, r7, #4
 8001ee8:	4619      	mov	r1, r3
 8001eea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eee:	f001 ff95 	bl	8003e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001ef2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ef6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f00:	1d3b      	adds	r3, r7, #4
 8001f02:	4619      	mov	r1, r3
 8001f04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f08:	f001 ff88 	bl	8003e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001f0c:	2320      	movs	r3, #32
 8001f0e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f10:	2301      	movs	r3, #1
 8001f12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f1c:	1d3b      	adds	r3, r7, #4
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4803      	ldr	r0, [pc, #12]	; (8001f30 <MX_GPIO_Init+0xb0>)
 8001f22:	f001 ff7b 	bl	8003e1c <HAL_GPIO_Init>

}
 8001f26:	bf00      	nop
 8001f28:	3718      	adds	r7, #24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	48000400 	.word	0x48000400

08001f34 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a04      	ldr	r2, [pc, #16]	; (8001f54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d101      	bne.n	8001f4a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f46:	f000 fc57 	bl	80027f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40012c00 	.word	0x40012c00

08001f58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f5c:	b672      	cpsid	i
}
 8001f5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001f60:	e7fe      	b.n	8001f60 <Error_Handler+0x8>

08001f62 <create_queue>:
 * Parameters:
 *
 * Return Value: packet_queue*
 -------------------------------------------*/
packet_queue* create_queue()
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b082      	sub	sp, #8
 8001f66:	af00      	add	r7, sp, #0
	packet_queue* new_queue = (packet_queue*)malloc(sizeof(packet_queue));
 8001f68:	200c      	movs	r0, #12
 8001f6a:	f005 ffb7 	bl	8007edc <malloc>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	607b      	str	r3, [r7, #4]
	new_queue->back = NULL;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	605a      	str	r2, [r3, #4]
	new_queue->front = NULL;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
	new_queue->size = 0;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	811a      	strh	r2, [r3, #8]

	return new_queue;
 8001f84:	687b      	ldr	r3, [r7, #4]
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
	...

08001f90 <set_state>:
 * Parameters: state_machine*, state_machine
 *
 * Return Value: bool
 *-------------------------------------------*/
bool set_state(state_machine* curr_state, state_machine new_state)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	460b      	mov	r3, r1
 8001f9a:	70fb      	strb	r3, [r7, #3]
	switch(*curr_state)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f993 3000 	ldrsb.w	r3, [r3]
 8001fa2:	2b08      	cmp	r3, #8
 8001fa4:	f200 809e 	bhi.w	80020e4 <set_state+0x154>
 8001fa8:	a201      	add	r2, pc, #4	; (adr r2, 8001fb0 <set_state+0x20>)
 8001faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fae:	bf00      	nop
 8001fb0:	08001fd5 	.word	0x08001fd5
 8001fb4:	08001ff3 	.word	0x08001ff3
 8001fb8:	08002011 	.word	0x08002011
 8001fbc:	0800202f 	.word	0x0800202f
 8001fc0:	0800204d 	.word	0x0800204d
 8001fc4:	0800206b 	.word	0x0800206b
 8001fc8:	08002089 	.word	0x08002089
 8001fcc:	080020b1 	.word	0x080020b1
 8001fd0:	080020cb 	.word	0x080020cb
	{
	case NONE:
		if(new_state == STARTUP || new_state < 0)
 8001fd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d003      	beq.n	8001fe4 <set_state+0x54>
 8001fdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	da04      	bge.n	8001fee <set_state+0x5e>
		{
			*curr_state = new_state;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	78fa      	ldrb	r2, [r7, #3]
 8001fe8:	701a      	strb	r2, [r3, #0]
			return true;
 8001fea:	2300      	movs	r3, #0
 8001fec:	e07b      	b.n	80020e6 <set_state+0x156>
		}
		else
		{
			return false;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e079      	b.n	80020e6 <set_state+0x156>
		}
	case STARTUP:
		if(new_state == CONFIGURING || new_state < 0)
 8001ff2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d003      	beq.n	8002002 <set_state+0x72>
 8001ffa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	da04      	bge.n	800200c <set_state+0x7c>
		{
			*curr_state = new_state;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	78fa      	ldrb	r2, [r7, #3]
 8002006:	701a      	strb	r2, [r3, #0]
			return true;
 8002008:	2300      	movs	r3, #0
 800200a:	e06c      	b.n	80020e6 <set_state+0x156>
		}
		return false;
 800200c:	2301      	movs	r3, #1
 800200e:	e06a      	b.n	80020e6 <set_state+0x156>

	case CONFIGURING:
		if(new_state == SEARCHING || new_state < 0)
 8002010:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002014:	2b03      	cmp	r3, #3
 8002016:	d003      	beq.n	8002020 <set_state+0x90>
 8002018:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800201c:	2b00      	cmp	r3, #0
 800201e:	da04      	bge.n	800202a <set_state+0x9a>
		{
			*curr_state = new_state;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	78fa      	ldrb	r2, [r7, #3]
 8002024:	701a      	strb	r2, [r3, #0]
			return true;
 8002026:	2300      	movs	r3, #0
 8002028:	e05d      	b.n	80020e6 <set_state+0x156>
		}
		return false;
 800202a:	2301      	movs	r3, #1
 800202c:	e05b      	b.n	80020e6 <set_state+0x156>

	case SEARCHING:
		if(new_state == CONNECTING || new_state < 0)
 800202e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002032:	2b04      	cmp	r3, #4
 8002034:	d003      	beq.n	800203e <set_state+0xae>
 8002036:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800203a:	2b00      	cmp	r3, #0
 800203c:	da04      	bge.n	8002048 <set_state+0xb8>
		{
			*curr_state = new_state;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	78fa      	ldrb	r2, [r7, #3]
 8002042:	701a      	strb	r2, [r3, #0]
			return true;
 8002044:	2300      	movs	r3, #0
 8002046:	e04e      	b.n	80020e6 <set_state+0x156>
		}
		return false;
 8002048:	2301      	movs	r3, #1
 800204a:	e04c      	b.n	80020e6 <set_state+0x156>

	case CONNECTING:
		if(new_state == READY || new_state < 0)
 800204c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002050:	2b05      	cmp	r3, #5
 8002052:	d003      	beq.n	800205c <set_state+0xcc>
 8002054:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002058:	2b00      	cmp	r3, #0
 800205a:	da04      	bge.n	8002066 <set_state+0xd6>
		{
			*curr_state = new_state;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	78fa      	ldrb	r2, [r7, #3]
 8002060:	701a      	strb	r2, [r3, #0]
			return true;
 8002062:	2300      	movs	r3, #0
 8002064:	e03f      	b.n	80020e6 <set_state+0x156>
		}
		return false;
 8002066:	2301      	movs	r3, #1
 8002068:	e03d      	b.n	80020e6 <set_state+0x156>

	case READY:
		if(new_state == READING || new_state < 0)
 800206a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800206e:	2b06      	cmp	r3, #6
 8002070:	d003      	beq.n	800207a <set_state+0xea>
 8002072:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002076:	2b00      	cmp	r3, #0
 8002078:	da04      	bge.n	8002084 <set_state+0xf4>
		{
			*curr_state = new_state;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	78fa      	ldrb	r2, [r7, #3]
 800207e:	701a      	strb	r2, [r3, #0]
			return true;
 8002080:	2300      	movs	r3, #0
 8002082:	e030      	b.n	80020e6 <set_state+0x156>
		}
		return false;
 8002084:	2301      	movs	r3, #1
 8002086:	e02e      	b.n	80020e6 <set_state+0x156>

	case READING:
		if(new_state == STORING && global_flags.pkt_ready == true || new_state < 0)
 8002088:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800208c:	2b07      	cmp	r3, #7
 800208e:	d106      	bne.n	800209e <set_state+0x10e>
 8002090:	4b18      	ldr	r3, [pc, #96]	; (80020f4 <set_state+0x164>)
 8002092:	785b      	ldrb	r3, [r3, #1]
 8002094:	f003 0320 	and.w	r3, r3, #32
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <set_state+0x116>
 800209e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	da04      	bge.n	80020b0 <set_state+0x120>
		{
			*curr_state = new_state;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	78fa      	ldrb	r2, [r7, #3]
 80020aa:	701a      	strb	r2, [r3, #0]
			return true;
 80020ac:	2300      	movs	r3, #0
 80020ae:	e01a      	b.n	80020e6 <set_state+0x156>
		}

	case STORING:
		if(new_state == READING || new_state < 0)
 80020b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020b4:	2b06      	cmp	r3, #6
 80020b6:	d003      	beq.n	80020c0 <set_state+0x130>
 80020b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	da04      	bge.n	80020ca <set_state+0x13a>
		{
			*curr_state = new_state;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	78fa      	ldrb	r2, [r7, #3]
 80020c4:	701a      	strb	r2, [r3, #0]
			return true;
 80020c6:	2300      	movs	r3, #0
 80020c8:	e00d      	b.n	80020e6 <set_state+0x156>
		}

	case SENDING:
		if(new_state == READING || new_state < 0)
 80020ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020ce:	2b06      	cmp	r3, #6
 80020d0:	d003      	beq.n	80020da <set_state+0x14a>
 80020d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	da04      	bge.n	80020e4 <set_state+0x154>
		{
			*curr_state = new_state;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	78fa      	ldrb	r2, [r7, #3]
 80020de:	701a      	strb	r2, [r3, #0]
			return true;
 80020e0:	2300      	movs	r3, #0
 80020e2:	e000      	b.n	80020e6 <set_state+0x156>
		}
	default:
		return false;
 80020e4:	2301      	movs	r3, #1
	}

	return false;
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	20000258 	.word	0x20000258

080020f8 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80020fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002104:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002108:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800210c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002110:	bf00      	nop
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr

0800211a <LL_AHB2_GRP1_EnableClock>:
{
 800211a:	b480      	push	{r7}
 800211c:	b085      	sub	sp, #20
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002122:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002126:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002128:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4313      	orrs	r3, r2
 8002130:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002132:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002136:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4013      	ands	r3, r2
 800213c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800213e:	68fb      	ldr	r3, [r7, #12]
}
 8002140:	bf00      	nop
 8002142:	3714      	adds	r7, #20
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002154:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002158:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800215a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4313      	orrs	r3, r2
 8002162:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002168:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4013      	ands	r3, r2
 800216e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002170:	68fb      	ldr	r3, [r7, #12]
}
 8002172:	bf00      	nop
 8002174:	3714      	adds	r7, #20
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800217e:	b480      	push	{r7}
 8002180:	b085      	sub	sp, #20
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002186:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800218a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800218c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4313      	orrs	r3, r2
 8002194:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800219a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4013      	ands	r3, r2
 80021a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021a2:	68fb      	ldr	r3, [r7, #12]
}
 80021a4:	bf00      	nop
 80021a6:	3714      	adds	r7, #20
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021b4:	bf00      	nop
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
	...

080021c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b088      	sub	sp, #32
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c8:	f107 030c 	add.w	r3, r7, #12
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	605a      	str	r2, [r3, #4]
 80021d2:	609a      	str	r2, [r3, #8]
 80021d4:	60da      	str	r2, [r3, #12]
 80021d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a22      	ldr	r2, [pc, #136]	; (8002268 <HAL_ADC_MspInit+0xa8>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d13e      	bne.n	8002260 <HAL_ADC_MspInit+0xa0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80021e2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80021e6:	f7ff ffca 	bl	800217e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ea:	2001      	movs	r0, #1
 80021ec:	f7ff ff95 	bl	800211a <LL_AHB2_GRP1_EnableClock>
    PA0     ------> ADC1_IN5
    PA2     ------> ADC1_IN7
    PA3     ------> ADC1_IN8
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80021f0:	231d      	movs	r3, #29
 80021f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021f4:	2303      	movs	r3, #3
 80021f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f8:	2300      	movs	r3, #0
 80021fa:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021fc:	f107 030c 	add.w	r3, r7, #12
 8002200:	4619      	mov	r1, r3
 8002202:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002206:	f001 fe09 	bl	8003e1c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800220a:	4b18      	ldr	r3, [pc, #96]	; (800226c <HAL_ADC_MspInit+0xac>)
 800220c:	4a18      	ldr	r2, [pc, #96]	; (8002270 <HAL_ADC_MspInit+0xb0>)
 800220e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002210:	4b16      	ldr	r3, [pc, #88]	; (800226c <HAL_ADC_MspInit+0xac>)
 8002212:	2205      	movs	r2, #5
 8002214:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002216:	4b15      	ldr	r3, [pc, #84]	; (800226c <HAL_ADC_MspInit+0xac>)
 8002218:	2200      	movs	r2, #0
 800221a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800221c:	4b13      	ldr	r3, [pc, #76]	; (800226c <HAL_ADC_MspInit+0xac>)
 800221e:	2200      	movs	r2, #0
 8002220:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002222:	4b12      	ldr	r3, [pc, #72]	; (800226c <HAL_ADC_MspInit+0xac>)
 8002224:	2280      	movs	r2, #128	; 0x80
 8002226:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002228:	4b10      	ldr	r3, [pc, #64]	; (800226c <HAL_ADC_MspInit+0xac>)
 800222a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800222e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002230:	4b0e      	ldr	r3, [pc, #56]	; (800226c <HAL_ADC_MspInit+0xac>)
 8002232:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002236:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002238:	4b0c      	ldr	r3, [pc, #48]	; (800226c <HAL_ADC_MspInit+0xac>)
 800223a:	2220      	movs	r2, #32
 800223c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800223e:	4b0b      	ldr	r3, [pc, #44]	; (800226c <HAL_ADC_MspInit+0xac>)
 8002240:	2200      	movs	r2, #0
 8002242:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002244:	4809      	ldr	r0, [pc, #36]	; (800226c <HAL_ADC_MspInit+0xac>)
 8002246:	f001 fba3 	bl	8003990 <HAL_DMA_Init>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <HAL_ADC_MspInit+0x94>
    {
      Error_Handler();
 8002250:	f7ff fe82 	bl	8001f58 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a05      	ldr	r2, [pc, #20]	; (800226c <HAL_ADC_MspInit+0xac>)
 8002258:	641a      	str	r2, [r3, #64]	; 0x40
 800225a:	4a04      	ldr	r2, [pc, #16]	; (800226c <HAL_ADC_MspInit+0xac>)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002260:	bf00      	nop
 8002262:	3720      	adds	r7, #32
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40012400 	.word	0x40012400
 800226c:	20000aec 	.word	0x20000aec
 8002270:	40020008 	.word	0x40020008

08002274 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b088      	sub	sp, #32
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800227c:	f107 030c 	add.w	r3, r7, #12
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	609a      	str	r2, [r3, #8]
 8002288:	60da      	str	r2, [r3, #12]
 800228a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a0f      	ldr	r2, [pc, #60]	; (80022d0 <HAL_I2C_MspInit+0x5c>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d117      	bne.n	80022c6 <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002296:	2002      	movs	r0, #2
 8002298:	f7ff ff3f 	bl	800211a <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800229c:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022a0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022a2:	2312      	movs	r3, #18
 80022a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a6:	2300      	movs	r3, #0
 80022a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022ae:	2304      	movs	r3, #4
 80022b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022b2:	f107 030c 	add.w	r3, r7, #12
 80022b6:	4619      	mov	r1, r3
 80022b8:	4806      	ldr	r0, [pc, #24]	; (80022d4 <HAL_I2C_MspInit+0x60>)
 80022ba:	f001 fdaf 	bl	8003e1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022be:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80022c2:	f7ff ff43 	bl	800214c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80022c6:	bf00      	nop
 80022c8:	3720      	adds	r7, #32
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40005400 	.word	0x40005400
 80022d4:	48000400 	.word	0x48000400

080022d8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a06      	ldr	r2, [pc, #24]	; (8002300 <HAL_RTC_MspInit+0x28>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d105      	bne.n	80022f6 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80022ea:	f7ff ff05 	bl	80020f8 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80022ee:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80022f2:	f7ff ff2b 	bl	800214c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80022f6:	bf00      	nop
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40002800 	.word	0x40002800

08002304 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002314:	d10a      	bne.n	800232c <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002316:	2001      	movs	r0, #1
 8002318:	f7ff ff18 	bl	800214c <LL_APB1_GRP1_EnableClock>
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800231c:	2200      	movs	r2, #0
 800231e:	2100      	movs	r1, #0
 8002320:	201c      	movs	r0, #28
 8002322:	f001 fb0d 	bl	8003940 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002326:	201c      	movs	r0, #28
 8002328:	f001 fb24 	bl	8003974 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800232c:	bf00      	nop
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b088      	sub	sp, #32
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800233c:	f107 030c 	add.w	r3, r7, #12
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	605a      	str	r2, [r3, #4]
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	60da      	str	r2, [r3, #12]
 800234a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a19      	ldr	r2, [pc, #100]	; (80023b8 <HAL_UART_MspInit+0x84>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d12b      	bne.n	80023ae <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002356:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800235a:	f7ff ff10 	bl	800217e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800235e:	2001      	movs	r0, #1
 8002360:	f7ff fedb 	bl	800211a <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002364:	2002      	movs	r0, #2
 8002366:	f7ff fed8 	bl	800211a <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800236a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800236e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002370:	2302      	movs	r3, #2
 8002372:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002374:	2300      	movs	r3, #0
 8002376:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002378:	2300      	movs	r3, #0
 800237a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800237c:	2307      	movs	r3, #7
 800237e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002380:	f107 030c 	add.w	r3, r7, #12
 8002384:	4619      	mov	r1, r3
 8002386:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800238a:	f001 fd47 	bl	8003e1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800238e:	2380      	movs	r3, #128	; 0x80
 8002390:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002392:	2302      	movs	r3, #2
 8002394:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002396:	2300      	movs	r3, #0
 8002398:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239a:	2300      	movs	r3, #0
 800239c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800239e:	2307      	movs	r3, #7
 80023a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a2:	f107 030c 	add.w	r3, r7, #12
 80023a6:	4619      	mov	r1, r3
 80023a8:	4804      	ldr	r0, [pc, #16]	; (80023bc <HAL_UART_MspInit+0x88>)
 80023aa:	f001 fd37 	bl	8003e1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80023ae:	bf00      	nop
 80023b0:	3720      	adds	r7, #32
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	40013800 	.word	0x40013800
 80023bc:	48000400 	.word	0x48000400

080023c0 <LL_APB2_GRP1_EnableClock>:
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80023c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80023d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4013      	ands	r3, r2
 80023e2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023e4:	68fb      	ldr	r3, [r7, #12]
}
 80023e6:	bf00      	nop
 80023e8:	3714      	adds	r7, #20
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
	...

080023f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b08c      	sub	sp, #48	; 0x30
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80023fc:	2300      	movs	r3, #0
 80023fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002400:	2300      	movs	r3, #0
 8002402:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8002404:	2200      	movs	r2, #0
 8002406:	6879      	ldr	r1, [r7, #4]
 8002408:	2019      	movs	r0, #25
 800240a:	f001 fa99 	bl	8003940 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800240e:	2019      	movs	r0, #25
 8002410:	f001 fab0 	bl	8003974 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002414:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002418:	f7ff ffd2 	bl	80023c0 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800241c:	f107 0208 	add.w	r2, r7, #8
 8002420:	f107 030c 	add.w	r3, r7, #12
 8002424:	4611      	mov	r1, r2
 8002426:	4618      	mov	r0, r3
 8002428:	f003 fcac 	bl	8005d84 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800242c:	f003 fc94 	bl	8005d58 <HAL_RCC_GetPCLK2Freq>
 8002430:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002434:	4a12      	ldr	r2, [pc, #72]	; (8002480 <HAL_InitTick+0x8c>)
 8002436:	fba2 2303 	umull	r2, r3, r2, r3
 800243a:	0c9b      	lsrs	r3, r3, #18
 800243c:	3b01      	subs	r3, #1
 800243e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002440:	4b10      	ldr	r3, [pc, #64]	; (8002484 <HAL_InitTick+0x90>)
 8002442:	4a11      	ldr	r2, [pc, #68]	; (8002488 <HAL_InitTick+0x94>)
 8002444:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002446:	4b0f      	ldr	r3, [pc, #60]	; (8002484 <HAL_InitTick+0x90>)
 8002448:	f240 32e7 	movw	r2, #999	; 0x3e7
 800244c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800244e:	4a0d      	ldr	r2, [pc, #52]	; (8002484 <HAL_InitTick+0x90>)
 8002450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002452:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002454:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <HAL_InitTick+0x90>)
 8002456:	2200      	movs	r2, #0
 8002458:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800245a:	4b0a      	ldr	r3, [pc, #40]	; (8002484 <HAL_InitTick+0x90>)
 800245c:	2200      	movs	r2, #0
 800245e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002460:	4808      	ldr	r0, [pc, #32]	; (8002484 <HAL_InitTick+0x90>)
 8002462:	f004 fae9 	bl	8006a38 <HAL_TIM_Base_Init>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d104      	bne.n	8002476 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800246c:	4805      	ldr	r0, [pc, #20]	; (8002484 <HAL_InitTick+0x90>)
 800246e:	f004 fb81 	bl	8006b74 <HAL_TIM_Base_Start_IT>
 8002472:	4603      	mov	r3, r0
 8002474:	e000      	b.n	8002478 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
}
 8002478:	4618      	mov	r0, r3
 800247a:	3730      	adds	r7, #48	; 0x30
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	431bde83 	.word	0x431bde83
 8002484:	20000c50 	.word	0x20000c50
 8002488:	40012c00 	.word	0x40012c00

0800248c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002490:	e7fe      	b.n	8002490 <NMI_Handler+0x4>

08002492 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002492:	b480      	push	{r7}
 8002494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002496:	e7fe      	b.n	8002496 <HardFault_Handler+0x4>

08002498 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800249c:	e7fe      	b.n	800249c <MemManage_Handler+0x4>

0800249e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800249e:	b480      	push	{r7}
 80024a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024a2:	e7fe      	b.n	80024a2 <BusFault_Handler+0x4>

080024a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024a8:	e7fe      	b.n	80024a8 <UsageFault_Handler+0x4>

080024aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024aa:	b480      	push	{r7}
 80024ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024bc:	bf00      	nop
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024c6:	b480      	push	{r7}
 80024c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024ca:	bf00      	nop
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024d8:	bf00      	nop
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
	...

080024e4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80024e8:	4802      	ldr	r0, [pc, #8]	; (80024f4 <DMA1_Channel1_IRQHandler+0x10>)
 80024ea:	f001 fb58 	bl	8003b9e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80024ee:	bf00      	nop
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	20000aec 	.word	0x20000aec

080024f8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update Interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024fc:	4802      	ldr	r0, [pc, #8]	; (8002508 <TIM1_UP_IRQHandler+0x10>)
 80024fe:	f004 fb87 	bl	8006c10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002502:	bf00      	nop
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	20000c50 	.word	0x20000c50

0800250c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002510:	4802      	ldr	r0, [pc, #8]	; (800251c <TIM2_IRQHandler+0x10>)
 8002512:	f004 fb7d 	bl	8006c10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002516:	bf00      	nop
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	20000208 	.word	0x20000208

08002520 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
	return 1;
 8002524:	2301      	movs	r3, #1
}
 8002526:	4618      	mov	r0, r3
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <_kill>:

int _kill(int pid, int sig)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800253a:	f005 fca5 	bl	8007e88 <__errno>
 800253e:	4603      	mov	r3, r0
 8002540:	2216      	movs	r2, #22
 8002542:	601a      	str	r2, [r3, #0]
	return -1;
 8002544:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002548:	4618      	mov	r0, r3
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <_exit>:

void _exit (int status)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002558:	f04f 31ff 	mov.w	r1, #4294967295
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f7ff ffe7 	bl	8002530 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002562:	e7fe      	b.n	8002562 <_exit+0x12>

08002564 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002570:	2300      	movs	r3, #0
 8002572:	617b      	str	r3, [r7, #20]
 8002574:	e00a      	b.n	800258c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002576:	f3af 8000 	nop.w
 800257a:	4601      	mov	r1, r0
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	1c5a      	adds	r2, r3, #1
 8002580:	60ba      	str	r2, [r7, #8]
 8002582:	b2ca      	uxtb	r2, r1
 8002584:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	3301      	adds	r3, #1
 800258a:	617b      	str	r3, [r7, #20]
 800258c:	697a      	ldr	r2, [r7, #20]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	429a      	cmp	r2, r3
 8002592:	dbf0      	blt.n	8002576 <_read+0x12>
	}

return len;
 8002594:	687b      	ldr	r3, [r7, #4]
}
 8002596:	4618      	mov	r0, r3
 8002598:	3718      	adds	r7, #24
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b086      	sub	sp, #24
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	60f8      	str	r0, [r7, #12]
 80025a6:	60b9      	str	r1, [r7, #8]
 80025a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025aa:	2300      	movs	r3, #0
 80025ac:	617b      	str	r3, [r7, #20]
 80025ae:	e009      	b.n	80025c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	1c5a      	adds	r2, r3, #1
 80025b4:	60ba      	str	r2, [r7, #8]
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	3301      	adds	r3, #1
 80025c2:	617b      	str	r3, [r7, #20]
 80025c4:	697a      	ldr	r2, [r7, #20]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	dbf1      	blt.n	80025b0 <_write+0x12>
	}
	return len;
 80025cc:	687b      	ldr	r3, [r7, #4]
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3718      	adds	r7, #24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <_close>:

int _close(int file)
{
 80025d6:	b480      	push	{r7}
 80025d8:	b083      	sub	sp, #12
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
	return -1;
 80025de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025ee:	b480      	push	{r7}
 80025f0:	b083      	sub	sp, #12
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
 80025f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025fe:	605a      	str	r2, [r3, #4]
	return 0;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr

0800260e <_isatty>:

int _isatty(int file)
{
 800260e:	b480      	push	{r7}
 8002610:	b083      	sub	sp, #12
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
	return 1;
 8002616:	2301      	movs	r3, #1
}
 8002618:	4618      	mov	r0, r3
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
	return 0;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3714      	adds	r7, #20
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
	...

08002640 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002648:	4a14      	ldr	r2, [pc, #80]	; (800269c <_sbrk+0x5c>)
 800264a:	4b15      	ldr	r3, [pc, #84]	; (80026a0 <_sbrk+0x60>)
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002654:	4b13      	ldr	r3, [pc, #76]	; (80026a4 <_sbrk+0x64>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d102      	bne.n	8002662 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800265c:	4b11      	ldr	r3, [pc, #68]	; (80026a4 <_sbrk+0x64>)
 800265e:	4a12      	ldr	r2, [pc, #72]	; (80026a8 <_sbrk+0x68>)
 8002660:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002662:	4b10      	ldr	r3, [pc, #64]	; (80026a4 <_sbrk+0x64>)
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4413      	add	r3, r2
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	429a      	cmp	r2, r3
 800266e:	d207      	bcs.n	8002680 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002670:	f005 fc0a 	bl	8007e88 <__errno>
 8002674:	4603      	mov	r3, r0
 8002676:	220c      	movs	r2, #12
 8002678:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800267a:	f04f 33ff 	mov.w	r3, #4294967295
 800267e:	e009      	b.n	8002694 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002680:	4b08      	ldr	r3, [pc, #32]	; (80026a4 <_sbrk+0x64>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002686:	4b07      	ldr	r3, [pc, #28]	; (80026a4 <_sbrk+0x64>)
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4413      	add	r3, r2
 800268e:	4a05      	ldr	r2, [pc, #20]	; (80026a4 <_sbrk+0x64>)
 8002690:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002692:	68fb      	ldr	r3, [r7, #12]
}
 8002694:	4618      	mov	r0, r3
 8002696:	3718      	adds	r7, #24
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	20003000 	.word	0x20003000
 80026a0:	00000400 	.word	0x00000400
 80026a4:	200001fc 	.word	0x200001fc
 80026a8:	20000cb0 	.word	0x20000cb0

080026ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80026b0:	4b22      	ldr	r3, [pc, #136]	; (800273c <SystemInit+0x90>)
 80026b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b6:	4a21      	ldr	r2, [pc, #132]	; (800273c <SystemInit+0x90>)
 80026b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80026c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026ca:	f043 0301 	orr.w	r3, r3, #1
 80026ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80026d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026d4:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80026d8:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80026da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026e4:	4b16      	ldr	r3, [pc, #88]	; (8002740 <SystemInit+0x94>)
 80026e6:	4013      	ands	r3, r2
 80026e8:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80026ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026f6:	f023 0305 	bic.w	r3, r3, #5
 80026fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80026fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002702:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002706:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800270a:	f023 0301 	bic.w	r3, r3, #1
 800270e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002712:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002716:	4a0b      	ldr	r2, [pc, #44]	; (8002744 <SystemInit+0x98>)
 8002718:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800271a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002724:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002728:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800272a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800272e:	2200      	movs	r2, #0
 8002730:	619a      	str	r2, [r3, #24]
}
 8002732:	bf00      	nop
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	e000ed00 	.word	0xe000ed00
 8002740:	faf6fefb 	.word	0xfaf6fefb
 8002744:	22041000 	.word	0x22041000

08002748 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002748:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800274a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800274c:	3304      	adds	r3, #4

0800274e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800274e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002750:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002752:	d3f9      	bcc.n	8002748 <CopyDataInit>
  bx lr
 8002754:	4770      	bx	lr

08002756 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002756:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002758:	3004      	adds	r0, #4

0800275a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800275a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800275c:	d3fb      	bcc.n	8002756 <FillZerobss>
  bx lr
 800275e:	4770      	bx	lr

08002760 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002760:	480c      	ldr	r0, [pc, #48]	; (8002794 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8002762:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002764:	f7ff ffa2 	bl	80026ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002768:	480b      	ldr	r0, [pc, #44]	; (8002798 <LoopForever+0x8>)
 800276a:	490c      	ldr	r1, [pc, #48]	; (800279c <LoopForever+0xc>)
 800276c:	4a0c      	ldr	r2, [pc, #48]	; (80027a0 <LoopForever+0x10>)
 800276e:	2300      	movs	r3, #0
 8002770:	f7ff ffed 	bl	800274e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002774:	480b      	ldr	r0, [pc, #44]	; (80027a4 <LoopForever+0x14>)
 8002776:	490c      	ldr	r1, [pc, #48]	; (80027a8 <LoopForever+0x18>)
 8002778:	2300      	movs	r3, #0
 800277a:	f7ff ffee 	bl	800275a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800277e:	480b      	ldr	r0, [pc, #44]	; (80027ac <LoopForever+0x1c>)
 8002780:	490b      	ldr	r1, [pc, #44]	; (80027b0 <LoopForever+0x20>)
 8002782:	2300      	movs	r3, #0
 8002784:	f7ff ffe9 	bl	800275a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002788:	f005 fb84 	bl	8007e94 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 800278c:	f7fe fe4a 	bl	8001424 <main>

08002790 <LoopForever>:

LoopForever:
  b LoopForever
 8002790:	e7fe      	b.n	8002790 <LoopForever>
 8002792:	0000      	.short	0x0000
  ldr   r0, =_estack
 8002794:	20003000 	.word	0x20003000
  INIT_DATA _sdata, _edata, _sidata
 8002798:	20000004 	.word	0x20000004
 800279c:	200001e0 	.word	0x200001e0
 80027a0:	0800b894 	.word	0x0800b894
  INIT_BSS _sbss, _ebss
 80027a4:	200001e0 	.word	0x200001e0
 80027a8:	20000cb0 	.word	0x20000cb0
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80027ac:	20030000 	.word	0x20030000
 80027b0:	20030000 	.word	0x20030000

080027b4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80027b4:	e7fe      	b.n	80027b4 <ADC1_IRQHandler>
	...

080027b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80027be:	2300      	movs	r3, #0
 80027c0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027c2:	4b0c      	ldr	r3, [pc, #48]	; (80027f4 <HAL_Init+0x3c>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a0b      	ldr	r2, [pc, #44]	; (80027f4 <HAL_Init+0x3c>)
 80027c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027cc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027ce:	2003      	movs	r0, #3
 80027d0:	f001 f8ab 	bl	800392a <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027d4:	200f      	movs	r0, #15
 80027d6:	f7ff fe0d 	bl	80023f4 <HAL_InitTick>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d002      	beq.n	80027e6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	71fb      	strb	r3, [r7, #7]
 80027e4:	e001      	b.n	80027ea <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80027e6:	f7ff fce3 	bl	80021b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80027ea:	79fb      	ldrb	r3, [r7, #7]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	58004000 	.word	0x58004000

080027f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027fc:	4b06      	ldr	r3, [pc, #24]	; (8002818 <HAL_IncTick+0x20>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	461a      	mov	r2, r3
 8002802:	4b06      	ldr	r3, [pc, #24]	; (800281c <HAL_IncTick+0x24>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4413      	add	r3, r2
 8002808:	4a04      	ldr	r2, [pc, #16]	; (800281c <HAL_IncTick+0x24>)
 800280a:	6013      	str	r3, [r2, #0]
}
 800280c:	bf00      	nop
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	2000000c 	.word	0x2000000c
 800281c:	20000c9c 	.word	0x20000c9c

08002820 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  return uwTick;
 8002824:	4b03      	ldr	r3, [pc, #12]	; (8002834 <HAL_GetTick+0x14>)
 8002826:	681b      	ldr	r3, [r3, #0]
}
 8002828:	4618      	mov	r0, r3
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	20000c9c 	.word	0x20000c9c

08002838 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800283c:	4b03      	ldr	r3, [pc, #12]	; (800284c <HAL_GetTickPrio+0x14>)
 800283e:	681b      	ldr	r3, [r3, #0]
}
 8002840:	4618      	mov	r0, r3
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	20000008 	.word	0x20000008

08002850 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8002858:	f7ff ffe2 	bl	8002820 <HAL_GetTick>
 800285c:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002868:	d005      	beq.n	8002876 <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 800286a:	4b0a      	ldr	r3, [pc, #40]	; (8002894 <HAL_Delay+0x44>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	461a      	mov	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	4413      	add	r3, r2
 8002874:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8002876:	bf00      	nop
 8002878:	f7ff ffd2 	bl	8002820 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	429a      	cmp	r2, r3
 8002886:	d8f7      	bhi.n	8002878 <HAL_Delay+0x28>
    {
    }
  }
 8002888:	bf00      	nop
 800288a:	bf00      	nop
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	2000000c 	.word	0x2000000c

08002898 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	431a      	orrs	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	609a      	str	r2, [r3, #8]
}
 80028b2:	bf00      	nop
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80028be:	b480      	push	{r7}
 80028c0:	b083      	sub	sp, #12
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY, uint32_t SamplingTime)
{
 80028da:	b480      	push	{r7}
 80028dc:	b085      	sub	sp, #20
 80028de:	af00      	add	r7, sp, #0
 80028e0:	60f8      	str	r0, [r7, #12]
 80028e2:	60b9      	str	r1, [r7, #8]
 80028e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	695a      	ldr	r2, [r3, #20]
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	f003 0304 	and.w	r3, r3, #4
 80028f0:	2107      	movs	r1, #7
 80028f2:	fa01 f303 	lsl.w	r3, r1, r3
 80028f6:	43db      	mvns	r3, r3
 80028f8:	401a      	ands	r2, r3
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	f003 0304 	and.w	r3, r3, #4
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	fa01 f303 	lsl.w	r3, r1, r3
 8002906:	431a      	orrs	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800290c:	bf00      	nop
 800290e:	3714      	adds	r7, #20
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
#if defined (ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002928:	2b00      	cmp	r3, #0
 800292a:	d101      	bne.n	8002930 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800292c:	2301      	movs	r3, #1
 800292e:	e000      	b.n	8002932 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002930:	2300      	movs	r3, #0
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
#endif
}
 8002932:	4618      	mov	r0, r3
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr

0800293e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800293e:	b480      	push	{r7}
 8002940:	b085      	sub	sp, #20
 8002942:	af00      	add	r7, sp, #0
 8002944:	60f8      	str	r0, [r7, #12]
 8002946:	60b9      	str	r1, [r7, #8]
 8002948:	607a      	str	r2, [r7, #4]
#if defined (ADC_SUPPORT_2_5_MSPS)
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	f003 031f 	and.w	r3, r3, #31
 8002954:	210f      	movs	r1, #15
 8002956:	fa01 f303 	lsl.w	r3, r1, r3
 800295a:	43db      	mvns	r3, r3
 800295c:	401a      	ands	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	0e9b      	lsrs	r3, r3, #26
 8002962:	f003 010f 	and.w	r1, r3, #15
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	f003 031f 	and.w	r3, r3, #31
 800296c:	fa01 f303 	lsl.w	r3, r1, r3
 8002970:	431a      	orrs	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	629a      	str	r2, [r3, #40]	; 0x28

  MODIFY_REG(*preg,
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif
}
 8002976:	bf00      	nop
 8002978:	3714      	adds	r7, #20
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <LL_ADC_REG_SetSequencerChAdd>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002982:	b480      	push	{r7}
 8002984:	b083      	sub	sp, #12
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
 800298a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002996:	431a      	orrs	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <LL_ADC_REG_SetSequencerChRem>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029bc:	43db      	mvns	r3, r3
 80029be:	401a      	ands	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	695a      	ldr	r2, [r3, #20]
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	021b      	lsls	r3, r3, #8
 80029e4:	43db      	mvns	r3, r3
 80029e6:	401a      	ands	r2, r3
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	0219      	lsls	r1, r3, #8
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	400b      	ands	r3, r1
 80029f0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80029f4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80029f8:	431a      	orrs	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80029fe:	bf00      	nop
 8002a00:	3714      	adds	r7, #20
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr

08002a0a <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b083      	sub	sp, #12
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002a1a:	f023 0317 	bic.w	r3, r3, #23
 8002a1e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr

08002a32 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002a32:	b480      	push	{r7}
 8002a34:	b083      	sub	sp, #12
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a46:	d101      	bne.n	8002a4c <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e000      	b.n	8002a4e <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b083      	sub	sp, #12
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a6a:	f023 0317 	bic.w	r3, r3, #23
 8002a6e:	f043 0201 	orr.w	r2, r3, #1
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b083      	sub	sp, #12
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a92:	f023 0317 	bic.w	r3, r3, #23
 8002a96:	f043 0202 	orr.w	r2, r3, #2
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002a9e:	bf00      	nop
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr

08002aaa <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b083      	sub	sp, #12
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d101      	bne.n	8002ac2 <LL_ADC_IsEnabled+0x18>
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e000      	b.n	8002ac4 <LL_ADC_IsEnabled+0x1a>
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d101      	bne.n	8002ae8 <LL_ADC_IsDisableOngoing+0x18>
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e000      	b.n	8002aea <LL_ADC_IsDisableOngoing+0x1a>
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr

08002af6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002af6:	b480      	push	{r7}
 8002af8:	b083      	sub	sp, #12
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b06:	f023 0317 	bic.w	r3, r3, #23
 8002b0a:	f043 0204 	orr.w	r2, r3, #4
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr

08002b1e <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b083      	sub	sp, #12
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b2e:	f023 0317 	bic.w	r3, r3, #23
 8002b32:	f043 0210 	orr.w	r2, r3, #16
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002b3a:	bf00      	nop
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b083      	sub	sp, #12
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 0304 	and.w	r3, r3, #4
 8002b56:	2b04      	cmp	r3, #4
 8002b58:	d101      	bne.n	8002b5e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e000      	b.n	8002b60 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b088      	sub	sp, #32
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b74:	2300      	movs	r3, #0
 8002b76:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	60bb      	str	r3, [r7, #8]
#if defined (ADC_SUPPORT_2_5_MSPS)
  uint32_t tmpCFGR2 = 0UL;
 8002b80:	2300      	movs	r3, #0
 8002b82:	613b      	str	r3, [r7, #16]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif

  /* Check ADC handle */
  if (hadc == NULL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e189      	b.n	8002ea2 <HAL_ADC_Init+0x336>
  assert_param(IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon1));
  assert_param(IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon2));
  
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d109      	bne.n	8002bb0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f7ff fb0f 	bl	80021c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7ff ff3c 	bl	8002a32 <LL_ADC_IsInternalRegulatorEnabled>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d115      	bne.n	8002bec <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff ff20 	bl	8002a0a <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bca:	4b91      	ldr	r3, [pc, #580]	; (8002e10 <HAL_ADC_Init+0x2a4>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	099b      	lsrs	r3, r3, #6
 8002bd0:	4a90      	ldr	r2, [pc, #576]	; (8002e14 <HAL_ADC_Init+0x2a8>)
 8002bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd6:	099b      	lsrs	r3, r3, #6
 8002bd8:	3301      	adds	r3, #1
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002bde:	e002      	b.n	8002be6 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d1f9      	bne.n	8002be0 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff ff1e 	bl	8002a32 <LL_ADC_IsInternalRegulatorEnabled>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10d      	bne.n	8002c18 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c00:	f043 0210 	orr.w	r2, r3, #16
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	649a      	str	r2, [r3, #72]	; 0x48

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c0c:	f043 0201 	orr.w	r2, r3, #1
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	64da      	str	r2, [r3, #76]	; 0x4c

    tmp_hal_status = HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff ff92 	bl	8002b46 <LL_ADC_REG_IsConversionOngoing>
 8002c22:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c28:	f003 0310 	and.w	r3, r3, #16
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f040 812f 	bne.w	8002e90 <HAL_ADC_Init+0x324>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f040 812b 	bne.w	8002e90 <HAL_ADC_Init+0x324>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c3e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002c42:	f043 0202 	orr.w	r2, r3, #2
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	649a      	str	r2, [r3, #72]	; 0x48
    /*  - Clock configuration                                                 */
    /*  - ADC resolution                                                      */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7ff ff2b 	bl	8002aaa <LL_ADC_IsEnabled>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d138      	bne.n	8002ccc <HAL_ADC_Init+0x160>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
      
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f023 0118 	bic.w	r1, r3, #24
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	60da      	str	r2, [r3, #12]
      /*  - oversampling enable                                               */
      /*  - oversampling ratio                                                */
      /*  - oversampling shift                                                */
      /*  - oversampling discontinuous mode (triggered mode)                  */
      /*  - trigger frequency mode                                            */
      tmpCFGR2 |= ( (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                    hadc->Init.TriggerFrequencyMode
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR2 |= ( (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	613b      	str	r3, [r7, #16]
                    );
      
      MODIFY_REG(hadc->Instance->CFGR2,
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	430a      	orrs	r2, r1
 8002c96:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_LFTRIG     ,
                 tmpCFGR2              );
      
      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002ca0:	d014      	beq.n	8002ccc <HAL_ADC_Init+0x160>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002caa:	d00f      	beq.n	8002ccc <HAL_ADC_Init+0x160>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002cb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002cb4:	d00a      	beq.n	8002ccc <HAL_ADC_Init+0x160>
      {
        MODIFY_REG(ADC1_COMMON->CCR                         ,
 8002cb6:	4b58      	ldr	r3, [pc, #352]	; (8002e18 <HAL_ADC_Init+0x2ac>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002cc6:	4954      	ldr	r1, [pc, #336]	; (8002e18 <HAL_ADC_Init+0x2ac>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	608b      	str	r3, [r1, #8]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	7e1b      	ldrb	r3, [r3, #24]
 8002cd0:	039a      	lsls	r2, r3, #14
                ADC_CFGR_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	7e5b      	ldrb	r3, [r3, #25]
 8002cd6:	03db      	lsls	r3, r3, #15
    tmpCFGR |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002cd8:	431a      	orrs	r2, r3
                ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	7e9b      	ldrb	r3, [r3, #26]
 8002cde:	035b      	lsls	r3, r3, #13
                ADC_CFGR_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002ce0:	4313      	orrs	r3, r2
                ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002ce6:	2a00      	cmp	r2, #0
 8002ce8:	d002      	beq.n	8002cf0 <HAL_ADC_Init+0x184>
 8002cea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002cee:	e000      	b.n	8002cf2 <HAL_ADC_Init+0x186>
 8002cf0:	2200      	movs	r2, #0
                ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002cf2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                            |
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68db      	ldr	r3, [r3, #12]
                ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8002cf8:	431a      	orrs	r2, r3
                ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	da04      	bge.n	8002d0c <HAL_ADC_Init+0x1a0>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d0a:	e001      	b.n	8002d10 <HAL_ADC_Init+0x1a4>
 8002d0c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                hadc->Init.DataAlign                                            |
 8002d10:	431a      	orrs	r2, r3
                ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002d18:	005b      	lsls	r3, r3, #1
                ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8002d1a:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	61bb      	str	r3, [r7, #24]
    
    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d114      	bne.n	8002d56 <HAL_ADC_Init+0x1ea>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	7e9b      	ldrb	r3, [r3, #26]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d104      	bne.n	8002d3e <HAL_ADC_Init+0x1d2>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR |= ADC_CFGR1_DISCEN;
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d3a:	61bb      	str	r3, [r7, #24]
 8002d3c:	e00b      	b.n	8002d56 <HAL_ADC_Init+0x1ea>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d42:	f043 0220 	orr.w	r2, r3, #32
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	649a      	str	r2, [r3, #72]	; 0x48
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d4e:	f043 0201 	orr.w	r2, r3, #1
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d009      	beq.n	8002d72 <HAL_ADC_Init+0x206>
    {
      tmpCFGR |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge );
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	61bb      	str	r3, [r7, #24]
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8002d7c:	f423 73f3 	bic.w	r3, r3, #486	; 0x1e6
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	6812      	ldr	r2, [r2, #0]
 8002d84:	69b9      	ldr	r1, [r7, #24]
 8002d86:	430b      	orrs	r3, r1
 8002d88:	60d3      	str	r3, [r2, #12]
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG     ,
               tmpCFGR              );
    
    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6818      	ldr	r0, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d92:	461a      	mov	r2, r3
 8002d94:	2100      	movs	r1, #0
 8002d96:	f7ff fda0 	bl	80028da <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6818      	ldr	r0, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da2:	461a      	mov	r2, r3
 8002da4:	491d      	ldr	r1, [pc, #116]	; (8002e1c <HAL_ADC_Init+0x2b0>)
 8002da6:	f7ff fd98 	bl	80028da <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if(hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d108      	bne.n	8002dc4 <HAL_ADC_Init+0x258>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f062 020f 	orn	r2, r2, #15
 8002dc0:	629a      	str	r2, [r3, #40]	; 0x28
 8002dc2:	e040      	b.n	8002e46 <HAL_ADC_Init+0x2da>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if(hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002dcc:	d13b      	bne.n	8002e46 <HAL_ADC_Init+0x2da>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;
      
      /* Parse all ranks from 1 to 8 */
      for(ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002dce:	2300      	movs	r3, #0
 8002dd0:	617b      	str	r3, [r7, #20]
 8002dd2:	e00c      	b.n	8002dee <HAL_ADC_Init+0x282>
      {
        /* Check each sequencer rank until value of end of sequence */
        if(((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) == ADC_CHSELR_SQ1)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8002de0:	f003 030f 	and.w	r3, r3, #15
 8002de4:	2b0f      	cmp	r3, #15
 8002de6:	d006      	beq.n	8002df6 <HAL_ADC_Init+0x28a>
      for(ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	3301      	adds	r3, #1
 8002dec:	617b      	str	r3, [r7, #20]
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	2b07      	cmp	r3, #7
 8002df2:	d9ef      	bls.n	8002dd4 <HAL_ADC_Init+0x268>
 8002df4:	e000      	b.n	8002df8 <HAL_ADC_Init+0x28c>
        {
          break;
 8002df6:	bf00      	nop
        }
      }
      
      if(ADCGroupRegularSequencerRanksCount == 1UL)
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d110      	bne.n	8002e20 <HAL_ADC_Init+0x2b4>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f062 020f 	orn	r2, r2, #15
 8002e0c:	629a      	str	r2, [r3, #40]	; 0x28
 8002e0e:	e01a      	b.n	8002e46 <HAL_ADC_Init+0x2da>
 8002e10:	20000004 	.word	0x20000004
 8002e14:	053e2d63 	.word	0x053e2d63
 8002e18:	40012700 	.word	0x40012700
 8002e1c:	07ffff04 	.word	0x07ffff04
        /*          therefore afer the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	f003 031c 	and.w	r3, r3, #28
 8002e32:	f06f 020f 	mvn.w	r2, #15
 8002e36:	fa02 f103 	lsl.w	r1, r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	430a      	orrs	r2, r1
 8002e44:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR').                                  */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68da      	ldr	r2, [r3, #12]
 8002e4c:	4b17      	ldr	r3, [pc, #92]	; (8002eac <HAL_ADC_Init+0x340>)
 8002e4e:	4013      	ands	r3, r2
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d10b      	bne.n	8002e6e <HAL_ADC_Init+0x302>
         == tmpCFGR)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e60:	f023 0303 	bic.w	r3, r3, #3
 8002e64:	f043 0201 	orr.w	r2, r3, #1
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	649a      	str	r2, [r3, #72]	; 0x48
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002e6c:	e018      	b.n	8002ea0 <HAL_ADC_Init+0x334>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e72:	f023 0312 	bic.w	r3, r3, #18
 8002e76:	f043 0210 	orr.w	r2, r3, #16
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	649a      	str	r2, [r3, #72]	; 0x48
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e82:	f043 0201 	orr.w	r2, r3, #1
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	64da      	str	r2, [r3, #76]	; 0x4c
      
      tmp_hal_status = HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	77fb      	strb	r3, [r7, #31]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002e8e:	e007      	b.n	8002ea0 <HAL_ADC_Init+0x334>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e94:	f043 0210 	orr.w	r2, r3, #16
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	649a      	str	r2, [r3, #72]	; 0x48

    tmp_hal_status = HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ea0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3720      	adds	r7, #32
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	833fffe7 	.word	0x833fffe7

08002eb0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff fe42 	bl	8002b46 <LL_ADC_REG_IsConversionOngoing>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d132      	bne.n	8002f2e <HAL_ADC_Start+0x7e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d101      	bne.n	8002ed6 <HAL_ADC_Start+0x26>
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	e02e      	b.n	8002f34 <HAL_ADC_Start+0x84>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 fb0c 	bl	80034fc <ADC_Enable>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002ee8:	7bfb      	ldrb	r3, [r7, #15]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d11a      	bne.n	8002f24 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ef2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ef6:	f023 0301 	bic.w	r3, r3, #1
 8002efa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	649a      	str	r2, [r3, #72]	; 0x48
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
#if defined (ADC_SUPPORT_2_5_MSPS)
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	64da      	str	r2, [r3, #76]	; 0x4c
      }
#endif /* ADC_SUPPORT_2_5_MSPS */

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	221c      	movs	r2, #28
 8002f0e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7ff fdea 	bl	8002af6 <LL_ADC_REG_StartConversion>
 8002f22:	e006      	b.n	8002f32 <HAL_ADC_Start+0x82>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f2c:	e001      	b.n	8002f32 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002f2e:	2302      	movs	r3, #2
 8002f30:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3710      	adds	r7, #16
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d101      	bne.n	8002f52 <HAL_ADC_Stop+0x16>
 8002f4e:	2302      	movs	r3, #2
 8002f50:	e023      	b.n	8002f9a <HAL_ADC_Stop+0x5e>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

#if defined (ADC_SUPPORT_2_5_MSPS)
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 fa8d 	bl	800347c <ADC_ConversionStop>
 8002f62:	4603      	mov	r3, r0
 8002f64:	73fb      	strb	r3, [r7, #15]
  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002f66:	7bfb      	ldrb	r3, [r7, #15]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d111      	bne.n	8002f90 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 fb43 	bl	80035f8 <ADC_Disable>
 8002f72:	4603      	mov	r3, r0
 8002f74:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002f76:	7bfb      	ldrb	r3, [r7, #15]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d109      	bne.n	8002f90 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
#if defined (ADC_SUPPORT_2_5_MSPS)
      ADC_STATE_CLR_SET(hadc->State,
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f84:	f023 0301 	bic.w	r3, r3, #1
 8002f88:	f043 0201 	orr.w	r2, r3, #1
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* ADC_SUPPORT_2_5_MSPS */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return tmp_hal_status;
 8002f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b084      	sub	sp, #16
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
 8002faa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	695b      	ldr	r3, [r3, #20]
 8002fb0:	2b08      	cmp	r3, #8
 8002fb2:	d102      	bne.n	8002fba <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002fb4:	2308      	movs	r3, #8
 8002fb6:	60fb      	str	r3, [r7, #12]
 8002fb8:	e010      	b.n	8002fdc <HAL_ADC_PollForConversion+0x3a>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined (ADC_SUPPORT_2_5_MSPS)
    if(READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN) != 0UL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d007      	beq.n	8002fd8 <HAL_ADC_PollForConversion+0x36>
#else
    if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
#endif
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fcc:	f043 0220 	orr.w	r2, r3, #32
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	649a      	str	r2, [r3, #72]	; 0x48

      return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e06d      	b.n	80030b4 <HAL_ADC_PollForConversion+0x112>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002fd8:	2304      	movs	r3, #4
 8002fda:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002fdc:	f7ff fc20 	bl	8002820 <HAL_GetTick>
 8002fe0:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002fe2:	e021      	b.n	8003028 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fea:	d01d      	beq.n	8003028 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002fec:	f7ff fc18 	bl	8002820 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d302      	bcc.n	8003002 <HAL_ADC_PollForConversion+0x60>
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d112      	bne.n	8003028 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	4013      	ands	r3, r2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d10b      	bne.n	8003028 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003014:	f043 0204 	orr.w	r2, r3, #4
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	649a      	str	r2, [r3, #72]	; 0x48

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

          return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e045      	b.n	80030b4 <HAL_ADC_PollForConversion+0x112>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	4013      	ands	r3, r2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d0d6      	beq.n	8002fe4 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800303a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	649a      	str	r2, [r3, #72]	; 0x48

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4618      	mov	r0, r3
 8003048:	f7ff fc66 	bl	8002918 <LL_ADC_REG_IsTriggerSourceSWStart>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d01c      	beq.n	800308c <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	7e9b      	ldrb	r3, [r3, #26]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d118      	bne.n	800308c <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0308 	and.w	r3, r3, #8
 8003064:	2b08      	cmp	r3, #8
 8003066:	d111      	bne.n	800308c <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800306c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	649a      	str	r2, [r3, #72]	; 0x48

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003078:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d105      	bne.n	800308c <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003084:	f043 0201 	orr.w	r2, r3, #1
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	649a      	str	r2, [r3, #72]	; 0x48
      }
    }
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2b08      	cmp	r3, #8
 8003090:	d104      	bne.n	800309c <HAL_ADC_PollForConversion+0xfa>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2208      	movs	r2, #8
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	e00a      	b.n	80030b2 <HAL_ADC_PollForConversion+0x110>
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
#if defined (ADC_SUPPORT_2_5_MSPS)
    if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_WAIT) == 0UL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d103      	bne.n	80030b2 <HAL_ADC_PollForConversion+0x110>
#else
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY) == 0UL)
#endif
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	220c      	movs	r2, #12
 80030b0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3710      	adds	r7, #16
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff fd3a 	bl	8002b46 <LL_ADC_REG_IsConversionOngoing>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d15a      	bne.n	800318e <HAL_ADC_Start_DMA+0xd2>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d101      	bne.n	80030e6 <HAL_ADC_Start_DMA+0x2a>
 80030e2:	2302      	movs	r3, #2
 80030e4:	e056      	b.n	8003194 <HAL_ADC_Start_DMA+0xd8>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f000 fa04 	bl	80034fc <ADC_Enable>
 80030f4:	4603      	mov	r3, r0
 80030f6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80030f8:	7dfb      	ldrb	r3, [r7, #23]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d142      	bne.n	8003184 <HAL_ADC_Start_DMA+0xc8>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003102:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003106:	f023 0301 	bic.w	r3, r3, #1
 800310a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	649a      	str	r2, [r3, #72]	; 0x48
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

#if defined (ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	64da      	str	r2, [r3, #76]	; 0x4c
          ADC_CLEAR_ERRORCODE(hadc);
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311c:	4a1f      	ldr	r2, [pc, #124]	; (800319c <HAL_ADC_Start_DMA+0xe0>)
 800311e:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003124:	4a1e      	ldr	r2, [pc, #120]	; (80031a0 <HAL_ADC_Start_DMA+0xe4>)
 8003126:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312c:	4a1d      	ldr	r2, [pc, #116]	; (80031a4 <HAL_ADC_Start_DMA+0xe8>)
 800312e:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	221c      	movs	r2, #28
 8003136:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	685a      	ldr	r2, [r3, #4]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f042 0210 	orr.w	r2, r2, #16
 800314e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if defined (ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68da      	ldr	r2, [r3, #12]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f042 0201 	orr.w	r2, r2, #1
 800315e:	60da      	str	r2, [r3, #12]
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
#endif

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	3340      	adds	r3, #64	; 0x40
 800316a:	4619      	mov	r1, r3
 800316c:	68ba      	ldr	r2, [r7, #8]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f000 fc9a 	bl	8003aa8 <HAL_DMA_Start_IT>
 8003174:	4603      	mov	r3, r0
 8003176:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4618      	mov	r0, r3
 800317e:	f7ff fcba 	bl	8002af6 <LL_ADC_REG_StartConversion>
 8003182:	e006      	b.n	8003192 <HAL_ADC_Start_DMA+0xd6>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800318c:	e001      	b.n	8003192 <HAL_ADC_Start_DMA+0xd6>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800318e:	2302      	movs	r3, #2
 8003190:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003192:	7dfb      	ldrb	r3, [r7, #23]
}
 8003194:	4618      	mov	r0, r3
 8003196:	3718      	adds	r7, #24
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	080036b7 	.word	0x080036b7
 80031a0:	0800377f 	.word	0x0800377f
 80031a4:	0800379b 	.word	0x0800379b

080031a8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b083      	sub	sp, #12
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80031ca:	bf00      	nop
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr

080031d6 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80031d6:	b480      	push	{r7}
 80031d8:	b083      	sub	sp, #12
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80031de:	bf00      	nop
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b083      	sub	sp, #12
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80031f2:	bf00      	nop
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
	...

08003200 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b088      	sub	sp, #32
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
#if defined (ADC_SUPPORT_2_5_MSPS)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800320a:	2300      	movs	r3, #0
 800320c:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800320e:	2300      	movs	r3, #0
 8003210:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(hadc, sConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(sConfig->SamplingTime));
  
  if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    
    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003220:	2b01      	cmp	r3, #1
 8003222:	d101      	bne.n	8003228 <HAL_ADC_ConfigChannel+0x28>
 8003224:	2302      	movs	r3, #2
 8003226:	e114      	b.n	8003452 <HAL_ADC_ConfigChannel+0x252>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff fc86 	bl	8002b46 <LL_ADC_REG_IsConversionOngoing>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	f040 80fb 	bne.w	8003438 <HAL_ADC_ConfigChannel+0x238>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if(sConfig->Rank != ADC_RANK_NONE)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b02      	cmp	r3, #2
 8003248:	f000 80b3 	beq.w	80033b2 <HAL_ADC_ConfigChannel+0x1b2>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003254:	d004      	beq.n	8003260 <HAL_ADC_ConfigChannel+0x60>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	691b      	ldr	r3, [r3, #16]
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800325a:	4a80      	ldr	r2, [pc, #512]	; (800345c <HAL_ADC_ConfigChannel+0x25c>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d108      	bne.n	8003272 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4619      	mov	r1, r3
 800326a:	4610      	mov	r0, r2
 800326c:	f7ff fb89 	bl	8002982 <LL_ADC_REG_SetSequencerChAdd>
 8003270:	e041      	b.n	80032f6 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */
        
        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f003 031f 	and.w	r3, r3, #31
 800327e:	210f      	movs	r1, #15
 8003280:	fa01 f303 	lsl.w	r3, r1, r3
 8003284:	43db      	mvns	r3, r3
 8003286:	401a      	ands	r2, r3
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003290:	2b00      	cmp	r3, #0
 8003292:	d105      	bne.n	80032a0 <HAL_ADC_ConfigChannel+0xa0>
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	0e9b      	lsrs	r3, r3, #26
 800329a:	f003 031f 	and.w	r3, r3, #31
 800329e:	e011      	b.n	80032c4 <HAL_ADC_ConfigChannel+0xc4>
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	fa93 f3a3 	rbit	r3, r3
 80032ac:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d101      	bne.n	80032bc <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 80032b8:	2320      	movs	r3, #32
 80032ba:	e003      	b.n	80032c4 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	fab3 f383 	clz	r3, r3
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	6839      	ldr	r1, [r7, #0]
 80032c6:	6849      	ldr	r1, [r1, #4]
 80032c8:	f001 011f 	and.w	r1, r1, #31
 80032cc:	408b      	lsls	r3, r1
 80032ce:	431a      	orrs	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	651a      	str	r2, [r3, #80]	; 0x50
        
        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */        
        if(((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	089b      	lsrs	r3, r3, #2
 80032da:	1c5a      	adds	r2, r3, #1
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	69db      	ldr	r3, [r3, #28]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d808      	bhi.n	80032f6 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6818      	ldr	r0, [r3, #0]
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	6859      	ldr	r1, [r3, #4]
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	461a      	mov	r2, r3
 80032f2:	f7ff fb24 	bl	800293e <LL_ADC_REG_SetSequencerRanks>
        }
      }
      
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6818      	ldr	r0, [r3, #0]
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	6819      	ldr	r1, [r3, #0]
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	461a      	mov	r2, r3
 8003304:	f7ff fb64 	bl	80029d0 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	4b54      	ldr	r3, [pc, #336]	; (8003460 <HAL_ADC_ConfigChannel+0x260>)
 800330e:	4013      	ands	r3, r2
 8003310:	2b00      	cmp	r3, #0
 8003312:	f000 8099 	beq.w	8003448 <HAL_ADC_ConfigChannel+0x248>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003316:	4853      	ldr	r0, [pc, #332]	; (8003464 <HAL_ADC_ConfigChannel+0x264>)
 8003318:	f7ff fad1 	bl	80028be <LL_ADC_GetCommonPathInternalCh>
 800331c:	61b8      	str	r0, [r7, #24]
        
        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a51      	ldr	r2, [pc, #324]	; (8003468 <HAL_ADC_ConfigChannel+0x268>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d120      	bne.n	800336a <HAL_ADC_ConfigChannel+0x16a>
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d11b      	bne.n	800336a <HAL_ADC_ConfigChannel+0x16a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003338:	4619      	mov	r1, r3
 800333a:	484a      	ldr	r0, [pc, #296]	; (8003464 <HAL_ADC_ConfigChannel+0x264>)
 800333c:	f7ff faac 	bl	8002898 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003340:	4b4a      	ldr	r3, [pc, #296]	; (800346c <HAL_ADC_ConfigChannel+0x26c>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	099b      	lsrs	r3, r3, #6
 8003346:	4a4a      	ldr	r2, [pc, #296]	; (8003470 <HAL_ADC_ConfigChannel+0x270>)
 8003348:	fba2 2303 	umull	r2, r3, r2, r3
 800334c:	099b      	lsrs	r3, r3, #6
 800334e:	1c5a      	adds	r2, r3, #1
 8003350:	4613      	mov	r3, r2
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	4413      	add	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0UL)
 800335a:	e002      	b.n	8003362 <HAL_ADC_ConfigChannel+0x162>
          {
            wait_loop_index--;
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	3b01      	subs	r3, #1
 8003360:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0UL)
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1f9      	bne.n	800335c <HAL_ADC_ConfigChannel+0x15c>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003368:	e06e      	b.n	8003448 <HAL_ADC_ConfigChannel+0x248>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a41      	ldr	r2, [pc, #260]	; (8003474 <HAL_ADC_ConfigChannel+0x274>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d10c      	bne.n	800338e <HAL_ADC_ConfigChannel+0x18e>
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d107      	bne.n	800338e <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003384:	4619      	mov	r1, r3
 8003386:	4837      	ldr	r0, [pc, #220]	; (8003464 <HAL_ADC_ConfigChannel+0x264>)
 8003388:	f7ff fa86 	bl	8002898 <LL_ADC_SetCommonPathInternalCh>
 800338c:	e05c      	b.n	8003448 <HAL_ADC_ConfigChannel+0x248>
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a39      	ldr	r2, [pc, #228]	; (8003478 <HAL_ADC_ConfigChannel+0x278>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d157      	bne.n	8003448 <HAL_ADC_ConfigChannel+0x248>
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d152      	bne.n	8003448 <HAL_ADC_ConfigChannel+0x248>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80033a8:	4619      	mov	r1, r3
 80033aa:	482e      	ldr	r0, [pc, #184]	; (8003464 <HAL_ADC_ConfigChannel+0x264>)
 80033ac:	f7ff fa74 	bl	8002898 <LL_ADC_SetCommonPathInternalCh>
 80033b0:	e04a      	b.n	8003448 <HAL_ADC_ConfigChannel+0x248>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033ba:	d004      	beq.n	80033c6 <HAL_ADC_ConfigChannel+0x1c6>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	691b      	ldr	r3, [r3, #16]
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80033c0:	4a26      	ldr	r2, [pc, #152]	; (800345c <HAL_ADC_ConfigChannel+0x25c>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d107      	bne.n	80033d6 <HAL_ADC_ConfigChannel+0x1d6>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4619      	mov	r1, r3
 80033d0:	4610      	mov	r0, r2
 80033d2:	f7ff fae9 	bl	80029a8 <LL_ADC_REG_SetSequencerChRem>
      }
      
      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	4b21      	ldr	r3, [pc, #132]	; (8003460 <HAL_ADC_ConfigChannel+0x260>)
 80033dc:	4013      	ands	r3, r2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d032      	beq.n	8003448 <HAL_ADC_ConfigChannel+0x248>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033e2:	4820      	ldr	r0, [pc, #128]	; (8003464 <HAL_ADC_ConfigChannel+0x264>)
 80033e4:	f7ff fa6b 	bl	80028be <LL_ADC_GetCommonPathInternalCh>
 80033e8:	61b8      	str	r0, [r7, #24]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a1e      	ldr	r2, [pc, #120]	; (8003468 <HAL_ADC_ConfigChannel+0x268>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d107      	bne.n	8003404 <HAL_ADC_ConfigChannel+0x204>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80033fa:	4619      	mov	r1, r3
 80033fc:	4819      	ldr	r0, [pc, #100]	; (8003464 <HAL_ADC_ConfigChannel+0x264>)
 80033fe:	f7ff fa4b 	bl	8002898 <LL_ADC_SetCommonPathInternalCh>
 8003402:	e021      	b.n	8003448 <HAL_ADC_ConfigChannel+0x248>
        }
        else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a1a      	ldr	r2, [pc, #104]	; (8003474 <HAL_ADC_ConfigChannel+0x274>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d107      	bne.n	800341e <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003414:	4619      	mov	r1, r3
 8003416:	4813      	ldr	r0, [pc, #76]	; (8003464 <HAL_ADC_ConfigChannel+0x264>)
 8003418:	f7ff fa3e 	bl	8002898 <LL_ADC_SetCommonPathInternalCh>
 800341c:	e014      	b.n	8003448 <HAL_ADC_ConfigChannel+0x248>
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a15      	ldr	r2, [pc, #84]	; (8003478 <HAL_ADC_ConfigChannel+0x278>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d10f      	bne.n	8003448 <HAL_ADC_ConfigChannel+0x248>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800342e:	4619      	mov	r1, r3
 8003430:	480c      	ldr	r0, [pc, #48]	; (8003464 <HAL_ADC_ConfigChannel+0x264>)
 8003432:	f7ff fa31 	bl	8002898 <LL_ADC_SetCommonPathInternalCh>
 8003436:	e007      	b.n	8003448 <HAL_ADC_ConfigChannel+0x248>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800343c:	f043 0220 	orr.w	r2, r3, #32
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	649a      	str	r2, [r3, #72]	; 0x48
    
    tmp_hal_status = HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	77fb      	strb	r3, [r7, #31]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8003450:	7ffb      	ldrb	r3, [r7, #31]
}
 8003452:	4618      	mov	r0, r3
 8003454:	3720      	adds	r7, #32
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	80000004 	.word	0x80000004
 8003460:	80080000 	.word	0x80080000
 8003464:	40012700 	.word	0x40012700
 8003468:	b0001000 	.word	0xb0001000
 800346c:	20000004 	.word	0x20000004
 8003470:	053e2d63 	.word	0x053e2d63
 8003474:	b8004000 	.word	0xb8004000
 8003478:	b4002000 	.word	0xb4002000

0800347c <ADC_ConversionStop>:
  *
  *         (1) On STM32WB serie, parameter not available on devices: STM32WB10xx, STM32WB15xx.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4618      	mov	r0, r3
 800348c:	f7ff fb5b 	bl	8002b46 <LL_ADC_REG_IsConversionOngoing>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d02c      	beq.n	80034f0 <ADC_ConversionStop+0x74>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f7ff fb18 	bl	8002ad0 <LL_ADC_IsDisableOngoing>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d104      	bne.n	80034b0 <ADC_ConversionStop+0x34>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7ff fb37 	bl	8002b1e <LL_ADC_REG_StopConversion>
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80034b0:	f7ff f9b6 	bl	8002820 <HAL_GetTick>
 80034b4:	60f8      	str	r0, [r7, #12]
    
    while((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80034b6:	e014      	b.n	80034e2 <ADC_ConversionStop+0x66>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80034b8:	f7ff f9b2 	bl	8002820 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b05      	cmp	r3, #5
 80034c4:	d90d      	bls.n	80034e2 <ADC_ConversionStop+0x66>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ca:	f043 0210 	orr.w	r2, r3, #16
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	649a      	str	r2, [r3, #72]	; 0x48
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034d6:	f043 0201 	orr.w	r2, r3, #1
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	64da      	str	r2, [r3, #76]	; 0x4c
        
        return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e007      	b.n	80034f2 <ADC_ConversionStop+0x76>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f003 0304 	and.w	r3, r3, #4
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1e3      	bne.n	80034b8 <ADC_ConversionStop+0x3c>

  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return HAL status */
  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3710      	adds	r7, #16
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
	...

080034fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003504:	2300      	movs	r3, #0
 8003506:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4618      	mov	r0, r3
 800350e:	f7ff facc 	bl	8002aaa <LL_ADC_IsEnabled>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d162      	bne.n	80035de <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if defined (ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689a      	ldr	r2, [r3, #8]
 800351e:	4b32      	ldr	r3, [pc, #200]	; (80035e8 <ADC_Enable+0xec>)
 8003520:	4013      	ands	r3, r2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00d      	beq.n	8003542 <ADC_Enable+0x46>
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#endif
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800352a:	f043 0210 	orr.w	r2, r3, #16
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	649a      	str	r2, [r3, #72]	; 0x48

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003536:	f043 0201 	orr.w	r2, r3, #1
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	64da      	str	r2, [r3, #76]	; 0x4c

      return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e04e      	b.n	80035e0 <ADC_Enable+0xe4>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4618      	mov	r0, r3
 8003548:	f7ff fa87 	bl	8002a5a <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800354c:	4827      	ldr	r0, [pc, #156]	; (80035ec <ADC_Enable+0xf0>)
 800354e:	f7ff f9b6 	bl	80028be <LL_ADC_GetCommonPathInternalCh>
 8003552:	4603      	mov	r3, r0
 8003554:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00f      	beq.n	800357c <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800355c:	4b24      	ldr	r3, [pc, #144]	; (80035f0 <ADC_Enable+0xf4>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	099b      	lsrs	r3, r3, #6
 8003562:	4a24      	ldr	r2, [pc, #144]	; (80035f4 <ADC_Enable+0xf8>)
 8003564:	fba2 2303 	umull	r2, r3, r2, r3
 8003568:	099b      	lsrs	r3, r3, #6
 800356a:	3301      	adds	r3, #1
 800356c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800356e:	e002      	b.n	8003576 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	3b01      	subs	r3, #1
 8003574:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1f9      	bne.n	8003570 <ADC_Enable+0x74>
    }

#if defined (ADC_SUPPORT_2_5_MSPS)
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	7e5b      	ldrb	r3, [r3, #25]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d02c      	beq.n	80035de <ADC_Enable+0xe2>
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003584:	f7ff f94c 	bl	8002820 <HAL_GetTick>
 8003588:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800358a:	e021      	b.n	80035d0 <ADC_Enable+0xd4>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4618      	mov	r0, r3
 8003592:	f7ff fa8a 	bl	8002aaa <LL_ADC_IsEnabled>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d104      	bne.n	80035a6 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7ff fa5a 	bl	8002a5a <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80035a6:	f7ff f93b 	bl	8002820 <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d90d      	bls.n	80035d0 <ADC_Enable+0xd4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035b8:	f043 0210 	orr.w	r2, r3, #16
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	649a      	str	r2, [r3, #72]	; 0x48
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035c4:	f043 0201 	orr.w	r2, r3, #1
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	64da      	str	r2, [r3, #76]	; 0x4c
          
          return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e007      	b.n	80035e0 <ADC_Enable+0xe4>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d1d6      	bne.n	800358c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	80000017 	.word	0x80000017
 80035ec:	40012700 	.word	0x40012700
 80035f0:	20000004 	.word	0x20000004
 80035f4:	053e2d63 	.word	0x053e2d63

080035f8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4618      	mov	r0, r3
 8003606:	f7ff fa63 	bl	8002ad0 <LL_ADC_IsDisableOngoing>
 800360a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4618      	mov	r0, r3
 8003612:	f7ff fa4a 	bl	8002aaa <LL_ADC_IsEnabled>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d047      	beq.n	80036ac <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d144      	bne.n	80036ac <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if defined (ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f003 0305 	and.w	r3, r3, #5
 800362c:	2b01      	cmp	r3, #1
 800362e:	d10c      	bne.n	800364a <ADC_Disable+0x52>
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#endif
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4618      	mov	r0, r3
 8003636:	f7ff fa24 	bl	8002a82 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2203      	movs	r2, #3
 8003640:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003642:	f7ff f8ed 	bl	8002820 <HAL_GetTick>
 8003646:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003648:	e029      	b.n	800369e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800364e:	f043 0210 	orr.w	r2, r3, #16
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	649a      	str	r2, [r3, #72]	; 0x48
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800365a:	f043 0201 	orr.w	r2, r3, #1
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	64da      	str	r2, [r3, #76]	; 0x4c
      return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e023      	b.n	80036ae <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003666:	f7ff f8db 	bl	8002820 <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d914      	bls.n	800369e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00d      	beq.n	800369e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003686:	f043 0210 	orr.w	r2, r3, #16
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003692:	f043 0201 	orr.w	r2, r3, #1
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	64da      	str	r2, [r3, #76]	; 0x4c

          return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e007      	b.n	80036ae <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1dc      	bne.n	8003666 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3710      	adds	r7, #16
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b084      	sub	sp, #16
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036c8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d143      	bne.n	8003758 <ADC_DMAConvCplt+0xa2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036d4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	649a      	str	r2, [r3, #72]	; 0x48
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
#if defined (ADC_SUPPORT_2_5_MSPS)
    if(   (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7ff f919 	bl	8002918 <LL_ADC_REG_IsTriggerSourceSWStart>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d031      	beq.n	8003750 <ADC_DMAConvCplt+0x9a>
       && (hadc->Init.ContinuousConvMode == DISABLE)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	7e9b      	ldrb	r3, [r3, #26]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d12d      	bne.n	8003750 <ADC_DMAConvCplt+0x9a>
      )
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0308 	and.w	r3, r3, #8
 80036fe:	2b08      	cmp	r3, #8
 8003700:	d126      	bne.n	8003750 <ADC_DMAConvCplt+0x9a>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4618      	mov	r0, r3
 8003708:	f7ff fa1d 	bl	8002b46 <LL_ADC_REG_IsConversionOngoing>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d112      	bne.n	8003738 <ADC_DMAConvCplt+0x82>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 020c 	bic.w	r2, r2, #12
 8003720:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003726:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800372a:	f023 0301 	bic.w	r3, r3, #1
 800372e:	f043 0201 	orr.w	r2, r3, #1
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	649a      	str	r2, [r3, #72]	; 0x48
 8003736:	e00b      	b.n	8003750 <ADC_DMAConvCplt+0x9a>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800373c:	f043 0220 	orr.w	r2, r3, #32
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	649a      	str	r2, [r3, #72]	; 0x48
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003748:	f043 0201 	orr.w	r2, r3, #1
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f7ff fd36 	bl	80031c2 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003756:	e00e      	b.n	8003776 <ADC_DMAConvCplt+0xc0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800375c:	f003 0310 	and.w	r3, r3, #16
 8003760:	2b00      	cmp	r3, #0
 8003762:	d003      	beq.n	800376c <ADC_DMAConvCplt+0xb6>
      HAL_ADC_ErrorCallback(hadc);
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f7ff fd40 	bl	80031ea <HAL_ADC_ErrorCallback>
}
 800376a:	e004      	b.n	8003776 <ADC_DMAConvCplt+0xc0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	4798      	blx	r3
}
 8003776:	bf00      	nop
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b084      	sub	sp, #16
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800378c:	68f8      	ldr	r0, [r7, #12]
 800378e:	f7ff fd22 	bl	80031d6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003792:	bf00      	nop
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b084      	sub	sp, #16
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037b8:	f043 0204 	orr.w	r2, r3, #4
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f7ff fd12 	bl	80031ea <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80037c6:	bf00      	nop
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
	...

080037d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b085      	sub	sp, #20
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f003 0307 	and.w	r3, r3, #7
 80037de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037e0:	4b0c      	ldr	r3, [pc, #48]	; (8003814 <__NVIC_SetPriorityGrouping+0x44>)
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037ec:	4013      	ands	r3, r2
 80037ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003800:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003802:	4a04      	ldr	r2, [pc, #16]	; (8003814 <__NVIC_SetPriorityGrouping+0x44>)
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	60d3      	str	r3, [r2, #12]
}
 8003808:	bf00      	nop
 800380a:	3714      	adds	r7, #20
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr
 8003814:	e000ed00 	.word	0xe000ed00

08003818 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800381c:	4b04      	ldr	r3, [pc, #16]	; (8003830 <__NVIC_GetPriorityGrouping+0x18>)
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	0a1b      	lsrs	r3, r3, #8
 8003822:	f003 0307 	and.w	r3, r3, #7
}
 8003826:	4618      	mov	r0, r3
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr
 8003830:	e000ed00 	.word	0xe000ed00

08003834 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	4603      	mov	r3, r0
 800383c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800383e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003842:	2b00      	cmp	r3, #0
 8003844:	db0b      	blt.n	800385e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003846:	79fb      	ldrb	r3, [r7, #7]
 8003848:	f003 021f 	and.w	r2, r3, #31
 800384c:	4907      	ldr	r1, [pc, #28]	; (800386c <__NVIC_EnableIRQ+0x38>)
 800384e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003852:	095b      	lsrs	r3, r3, #5
 8003854:	2001      	movs	r0, #1
 8003856:	fa00 f202 	lsl.w	r2, r0, r2
 800385a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800385e:	bf00      	nop
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	e000e100 	.word	0xe000e100

08003870 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	4603      	mov	r3, r0
 8003878:	6039      	str	r1, [r7, #0]
 800387a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800387c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003880:	2b00      	cmp	r3, #0
 8003882:	db0a      	blt.n	800389a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	b2da      	uxtb	r2, r3
 8003888:	490c      	ldr	r1, [pc, #48]	; (80038bc <__NVIC_SetPriority+0x4c>)
 800388a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800388e:	0112      	lsls	r2, r2, #4
 8003890:	b2d2      	uxtb	r2, r2
 8003892:	440b      	add	r3, r1
 8003894:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003898:	e00a      	b.n	80038b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	b2da      	uxtb	r2, r3
 800389e:	4908      	ldr	r1, [pc, #32]	; (80038c0 <__NVIC_SetPriority+0x50>)
 80038a0:	79fb      	ldrb	r3, [r7, #7]
 80038a2:	f003 030f 	and.w	r3, r3, #15
 80038a6:	3b04      	subs	r3, #4
 80038a8:	0112      	lsls	r2, r2, #4
 80038aa:	b2d2      	uxtb	r2, r2
 80038ac:	440b      	add	r3, r1
 80038ae:	761a      	strb	r2, [r3, #24]
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr
 80038bc:	e000e100 	.word	0xe000e100
 80038c0:	e000ed00 	.word	0xe000ed00

080038c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b089      	sub	sp, #36	; 0x24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f003 0307 	and.w	r3, r3, #7
 80038d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	f1c3 0307 	rsb	r3, r3, #7
 80038de:	2b04      	cmp	r3, #4
 80038e0:	bf28      	it	cs
 80038e2:	2304      	movcs	r3, #4
 80038e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	3304      	adds	r3, #4
 80038ea:	2b06      	cmp	r3, #6
 80038ec:	d902      	bls.n	80038f4 <NVIC_EncodePriority+0x30>
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	3b03      	subs	r3, #3
 80038f2:	e000      	b.n	80038f6 <NVIC_EncodePriority+0x32>
 80038f4:	2300      	movs	r3, #0
 80038f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038f8:	f04f 32ff 	mov.w	r2, #4294967295
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003902:	43da      	mvns	r2, r3
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	401a      	ands	r2, r3
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800390c:	f04f 31ff 	mov.w	r1, #4294967295
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	fa01 f303 	lsl.w	r3, r1, r3
 8003916:	43d9      	mvns	r1, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800391c:	4313      	orrs	r3, r2
         );
}
 800391e:	4618      	mov	r0, r3
 8003920:	3724      	adds	r7, #36	; 0x24
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr

0800392a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b082      	sub	sp, #8
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f7ff ff4c 	bl	80037d0 <__NVIC_SetPriorityGrouping>
}
 8003938:	bf00      	nop
 800393a:	3708      	adds	r7, #8
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af00      	add	r7, sp, #0
 8003946:	4603      	mov	r3, r0
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
 800394c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800394e:	f7ff ff63 	bl	8003818 <__NVIC_GetPriorityGrouping>
 8003952:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	68b9      	ldr	r1, [r7, #8]
 8003958:	6978      	ldr	r0, [r7, #20]
 800395a:	f7ff ffb3 	bl	80038c4 <NVIC_EncodePriority>
 800395e:	4602      	mov	r2, r0
 8003960:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003964:	4611      	mov	r1, r2
 8003966:	4618      	mov	r0, r3
 8003968:	f7ff ff82 	bl	8003870 <__NVIC_SetPriority>
}
 800396c:	bf00      	nop
 800396e:	3718      	adds	r7, #24
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	4603      	mov	r3, r0
 800397c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800397e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003982:	4618      	mov	r0, r3
 8003984:	f7ff ff56 	bl	8003834 <__NVIC_EnableIRQ>
}
 8003988:	bf00      	nop
 800398a:	3708      	adds	r7, #8
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e078      	b.n	8003a94 <HAL_DMA_Init+0x104>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	461a      	mov	r2, r3
 80039a8:	4b3c      	ldr	r3, [pc, #240]	; (8003a9c <HAL_DMA_Init+0x10c>)
 80039aa:	4413      	add	r3, r2
 80039ac:	4a3c      	ldr	r2, [pc, #240]	; (8003aa0 <HAL_DMA_Init+0x110>)
 80039ae:	fba2 2303 	umull	r2, r3, r2, r3
 80039b2:	091b      	lsrs	r3, r3, #4
 80039b4:	009a      	lsls	r2, r3, #2
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a39      	ldr	r2, [pc, #228]	; (8003aa4 <HAL_DMA_Init+0x114>)
 80039be:	641a      	str	r2, [r3, #64]	; 0x40
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2202      	movs	r2, #2
 80039c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80039d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039da:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80039e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68fa      	ldr	r2, [r7, #12]
 8003a10:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 f9b0 	bl	8003d78 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a20:	d102      	bne.n	8003a28 <HAL_DMA_Init+0x98>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685a      	ldr	r2, [r3, #4]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a30:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003a34:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003a3e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d010      	beq.n	8003a6a <HAL_DMA_Init+0xda>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	2b04      	cmp	r3, #4
 8003a4e:	d80c      	bhi.n	8003a6a <HAL_DMA_Init+0xda>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 f9bd 	bl	8003dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003a66:	605a      	str	r2, [r3, #4]
 8003a68:	e008      	b.n	8003a7c <HAL_DMA_Init+0xec>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3710      	adds	r7, #16
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	bffdfff8 	.word	0xbffdfff8
 8003aa0:	cccccccd 	.word	0xcccccccd
 8003aa4:	40020000 	.word	0x40020000

08003aa8 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
 8003ab4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d101      	bne.n	8003ac8 <HAL_DMA_Start_IT+0x20>
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	e066      	b.n	8003b96 <HAL_DMA_Start_IT+0xee>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d155      	bne.n	8003b88 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2202      	movs	r2, #2
 8003ae0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f022 0201 	bic.w	r2, r2, #1
 8003af8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	68b9      	ldr	r1, [r7, #8]
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f000 f8fb 	bl	8003cfc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d008      	beq.n	8003b20 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f042 020e 	orr.w	r2, r2, #14
 8003b1c:	601a      	str	r2, [r3, #0]
 8003b1e:	e00f      	b.n	8003b40 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f022 0204 	bic.w	r2, r2, #4
 8003b2e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f042 020a 	orr.w	r2, r2, #10
 8003b3e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d007      	beq.n	8003b5e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b5c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d007      	beq.n	8003b76 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b74:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f042 0201 	orr.w	r2, r2, #1
 8003b84:	601a      	str	r2, [r3, #0]
 8003b86:	e005      	b.n	8003b94 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003b90:	2302      	movs	r3, #2
 8003b92:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003b94:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3718      	adds	r7, #24
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b084      	sub	sp, #16
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bba:	f003 031c 	and.w	r3, r3, #28
 8003bbe:	2204      	movs	r2, #4
 8003bc0:	409a      	lsls	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d026      	beq.n	8003c18 <HAL_DMA_IRQHandler+0x7a>
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	f003 0304 	and.w	r3, r3, #4
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d021      	beq.n	8003c18 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0320 	and.w	r3, r3, #32
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d107      	bne.n	8003bf2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f022 0204 	bic.w	r2, r2, #4
 8003bf0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf6:	f003 021c 	and.w	r2, r3, #28
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfe:	2104      	movs	r1, #4
 8003c00:	fa01 f202 	lsl.w	r2, r1, r2
 8003c04:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d071      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003c16:	e06c      	b.n	8003cf2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1c:	f003 031c 	and.w	r3, r3, #28
 8003c20:	2202      	movs	r2, #2
 8003c22:	409a      	lsls	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	4013      	ands	r3, r2
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d02e      	beq.n	8003c8a <HAL_DMA_IRQHandler+0xec>
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d029      	beq.n	8003c8a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0320 	and.w	r3, r3, #32
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d10b      	bne.n	8003c5c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 020a 	bic.w	r2, r2, #10
 8003c52:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c60:	f003 021c 	and.w	r2, r3, #28
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c68:	2102      	movs	r1, #2
 8003c6a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c6e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d038      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003c88:	e033      	b.n	8003cf2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c8e:	f003 031c 	and.w	r3, r3, #28
 8003c92:	2208      	movs	r2, #8
 8003c94:	409a      	lsls	r2, r3
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	4013      	ands	r3, r2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d02a      	beq.n	8003cf4 <HAL_DMA_IRQHandler+0x156>
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	f003 0308 	and.w	r3, r3, #8
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d025      	beq.n	8003cf4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f022 020e 	bic.w	r2, r2, #14
 8003cb6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cbc:	f003 021c 	and.w	r2, r3, #28
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc4:	2101      	movs	r1, #1
 8003cc6:	fa01 f202 	lsl.w	r2, r1, r2
 8003cca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d004      	beq.n	8003cf4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003cf2:	bf00      	nop
 8003cf4:	bf00      	nop
}
 8003cf6:	3710      	adds	r7, #16
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
 8003d08:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003d12:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d004      	beq.n	8003d26 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003d24:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2a:	f003 021c 	and.w	r2, r3, #28
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d32:	2101      	movs	r1, #1
 8003d34:	fa01 f202 	lsl.w	r2, r1, r2
 8003d38:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	683a      	ldr	r2, [r7, #0]
 8003d40:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	2b10      	cmp	r3, #16
 8003d48:	d108      	bne.n	8003d5c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68ba      	ldr	r2, [r7, #8]
 8003d58:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003d5a:	e007      	b.n	8003d6c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68ba      	ldr	r2, [r7, #8]
 8003d62:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	60da      	str	r2, [r3, #12]
}
 8003d6c:	bf00      	nop
 8003d6e:	3714      	adds	r7, #20
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d84:	089b      	lsrs	r3, r3, #2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003d8c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	6493      	str	r3, [r2, #72]	; 0x48
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	3b08      	subs	r3, #8
 8003d9c:	4a0a      	ldr	r2, [pc, #40]	; (8003dc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003da2:	091b      	lsrs	r3, r3, #4
 8003da4:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a08      	ldr	r2, [pc, #32]	; (8003dcc <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003daa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f003 031f 	and.w	r3, r3, #31
 8003db2:	2201      	movs	r2, #1
 8003db4:	409a      	lsls	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003dba:	bf00      	nop
 8003dbc:	3714      	adds	r7, #20
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	cccccccd 	.word	0xcccccccd
 8003dcc:	40020880 	.word	0x40020880

08003dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003de0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	4b0b      	ldr	r3, [pc, #44]	; (8003e14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003de6:	4413      	add	r3, r2
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	461a      	mov	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a09      	ldr	r2, [pc, #36]	; (8003e18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003df4:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	f003 0303 	and.w	r3, r3, #3
 8003dfe:	2201      	movs	r2, #1
 8003e00:	409a      	lsls	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003e06:	bf00      	nop
 8003e08:	3714      	adds	r7, #20
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	1000823f 	.word	0x1000823f
 8003e18:	40020940 	.word	0x40020940

08003e1c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b087      	sub	sp, #28
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e26:	2300      	movs	r3, #0
 8003e28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e2a:	e146      	b.n	80040ba <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	2101      	movs	r1, #1
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	fa01 f303 	lsl.w	r3, r1, r3
 8003e38:	4013      	ands	r3, r2
 8003e3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f000 8138 	beq.w	80040b4 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f003 0303 	and.w	r3, r3, #3
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d005      	beq.n	8003e5c <HAL_GPIO_Init+0x40>
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f003 0303 	and.w	r3, r3, #3
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d130      	bne.n	8003ebe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	2203      	movs	r2, #3
 8003e68:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6c:	43db      	mvns	r3, r3
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	4013      	ands	r3, r2
 8003e72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	68da      	ldr	r2, [r3, #12]
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	005b      	lsls	r3, r3, #1
 8003e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	693a      	ldr	r2, [r7, #16]
 8003e8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e92:	2201      	movs	r2, #1
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9a:	43db      	mvns	r3, r3
 8003e9c:	693a      	ldr	r2, [r7, #16]
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	091b      	lsrs	r3, r3, #4
 8003ea8:	f003 0201 	and.w	r2, r3, #1
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f003 0303 	and.w	r3, r3, #3
 8003ec6:	2b03      	cmp	r3, #3
 8003ec8:	d017      	beq.n	8003efa <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	005b      	lsls	r3, r3, #1
 8003ed4:	2203      	movs	r2, #3
 8003ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eda:	43db      	mvns	r3, r3
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	4013      	ands	r3, r2
 8003ee0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	689a      	ldr	r2, [r3, #8]
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	fa02 f303 	lsl.w	r3, r2, r3
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f003 0303 	and.w	r3, r3, #3
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d123      	bne.n	8003f4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	08da      	lsrs	r2, r3, #3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	3208      	adds	r2, #8
 8003f0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	f003 0307 	and.w	r3, r3, #7
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	220f      	movs	r2, #15
 8003f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f22:	43db      	mvns	r3, r3
 8003f24:	693a      	ldr	r2, [r7, #16]
 8003f26:	4013      	ands	r3, r2
 8003f28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	691a      	ldr	r2, [r3, #16]
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	f003 0307 	and.w	r3, r3, #7
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	08da      	lsrs	r2, r3, #3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	3208      	adds	r2, #8
 8003f48:	6939      	ldr	r1, [r7, #16]
 8003f4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	005b      	lsls	r3, r3, #1
 8003f58:	2203      	movs	r2, #3
 8003f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5e:	43db      	mvns	r3, r3
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	4013      	ands	r3, r2
 8003f64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f003 0203 	and.w	r2, r3, #3
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	005b      	lsls	r3, r3, #1
 8003f72:	fa02 f303 	lsl.w	r3, r2, r3
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	f000 8092 	beq.w	80040b4 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003f90:	4a51      	ldr	r2, [pc, #324]	; (80040d8 <HAL_GPIO_Init+0x2bc>)
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	089b      	lsrs	r3, r3, #2
 8003f96:	3302      	adds	r3, #2
 8003f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	f003 0303 	and.w	r3, r3, #3
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	220f      	movs	r2, #15
 8003fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fac:	43db      	mvns	r3, r3
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003fba:	d013      	beq.n	8003fe4 <HAL_GPIO_Init+0x1c8>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a47      	ldr	r2, [pc, #284]	; (80040dc <HAL_GPIO_Init+0x2c0>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d00d      	beq.n	8003fe0 <HAL_GPIO_Init+0x1c4>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a46      	ldr	r2, [pc, #280]	; (80040e0 <HAL_GPIO_Init+0x2c4>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d007      	beq.n	8003fdc <HAL_GPIO_Init+0x1c0>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a45      	ldr	r2, [pc, #276]	; (80040e4 <HAL_GPIO_Init+0x2c8>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d101      	bne.n	8003fd8 <HAL_GPIO_Init+0x1bc>
 8003fd4:	2304      	movs	r3, #4
 8003fd6:	e006      	b.n	8003fe6 <HAL_GPIO_Init+0x1ca>
 8003fd8:	2307      	movs	r3, #7
 8003fda:	e004      	b.n	8003fe6 <HAL_GPIO_Init+0x1ca>
 8003fdc:	2302      	movs	r3, #2
 8003fde:	e002      	b.n	8003fe6 <HAL_GPIO_Init+0x1ca>
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e000      	b.n	8003fe6 <HAL_GPIO_Init+0x1ca>
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	697a      	ldr	r2, [r7, #20]
 8003fe8:	f002 0203 	and.w	r2, r2, #3
 8003fec:	0092      	lsls	r2, r2, #2
 8003fee:	4093      	lsls	r3, r2
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003ff6:	4938      	ldr	r1, [pc, #224]	; (80040d8 <HAL_GPIO_Init+0x2bc>)
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	089b      	lsrs	r3, r3, #2
 8003ffc:	3302      	adds	r3, #2
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004004:	4b38      	ldr	r3, [pc, #224]	; (80040e8 <HAL_GPIO_Init+0x2cc>)
 8004006:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800400a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	43db      	mvns	r3, r3
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	4013      	ands	r3, r2
 8004014:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d003      	beq.n	800402a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	4313      	orrs	r3, r2
 8004028:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800402a:	4a2f      	ldr	r2, [pc, #188]	; (80040e8 <HAL_GPIO_Init+0x2cc>)
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8004032:	4b2d      	ldr	r3, [pc, #180]	; (80040e8 <HAL_GPIO_Init+0x2cc>)
 8004034:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004038:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	43db      	mvns	r3, r3
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	4013      	ands	r3, r2
 8004042:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d003      	beq.n	8004058 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	4313      	orrs	r3, r2
 8004056:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004058:	4a23      	ldr	r2, [pc, #140]	; (80040e8 <HAL_GPIO_Init+0x2cc>)
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004060:	4b21      	ldr	r3, [pc, #132]	; (80040e8 <HAL_GPIO_Init+0x2cc>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	43db      	mvns	r3, r3
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	4013      	ands	r3, r2
 800406e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d003      	beq.n	8004084 <HAL_GPIO_Init+0x268>
        {
          temp |= iocurrent;
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	4313      	orrs	r3, r2
 8004082:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004084:	4a18      	ldr	r2, [pc, #96]	; (80040e8 <HAL_GPIO_Init+0x2cc>)
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800408a:	4b17      	ldr	r3, [pc, #92]	; (80040e8 <HAL_GPIO_Init+0x2cc>)
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	43db      	mvns	r3, r3
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	4013      	ands	r3, r2
 8004098:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d003      	beq.n	80040ae <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80040ae:	4a0e      	ldr	r2, [pc, #56]	; (80040e8 <HAL_GPIO_Init+0x2cc>)
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	3301      	adds	r3, #1
 80040b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	fa22 f303 	lsr.w	r3, r2, r3
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f47f aeb1 	bne.w	8003e2c <HAL_GPIO_Init+0x10>
  }
}
 80040ca:	bf00      	nop
 80040cc:	bf00      	nop
 80040ce:	371c      	adds	r7, #28
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr
 80040d8:	40010000 	.word	0x40010000
 80040dc:	48000400 	.word	0x48000400
 80040e0:	48000800 	.word	0x48000800
 80040e4:	48001000 	.word	0x48001000
 80040e8:	58000800 	.word	0x58000800

080040ec <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	460b      	mov	r3, r1
 80040f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	691a      	ldr	r2, [r3, #16]
 80040fc:	887b      	ldrh	r3, [r7, #2]
 80040fe:	4013      	ands	r3, r2
 8004100:	2b00      	cmp	r3, #0
 8004102:	d002      	beq.n	800410a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004104:	2301      	movs	r3, #1
 8004106:	73fb      	strb	r3, [r7, #15]
 8004108:	e001      	b.n	800410e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800410a:	2300      	movs	r3, #0
 800410c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800410e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004110:	4618      	mov	r0, r3
 8004112:	3714      	adds	r7, #20
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	460b      	mov	r3, r1
 8004126:	807b      	strh	r3, [r7, #2]
 8004128:	4613      	mov	r3, r2
 800412a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800412c:	787b      	ldrb	r3, [r7, #1]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d003      	beq.n	800413a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004132:	887a      	ldrh	r2, [r7, #2]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004138:	e002      	b.n	8004140 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800413a:	887a      	ldrh	r2, [r7, #2]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e081      	b.n	8004262 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d106      	bne.n	8004178 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f7fe f87e 	bl	8002274 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2224      	movs	r2, #36	; 0x24
 800417c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f022 0201 	bic.w	r2, r2, #1
 800418e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685a      	ldr	r2, [r3, #4]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800419c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	689a      	ldr	r2, [r3, #8]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d107      	bne.n	80041c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	689a      	ldr	r2, [r3, #8]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041c2:	609a      	str	r2, [r3, #8]
 80041c4:	e006      	b.n	80041d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	689a      	ldr	r2, [r3, #8]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80041d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d104      	bne.n	80041e6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	6812      	ldr	r2, [r2, #0]
 80041f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80041f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68da      	ldr	r2, [r3, #12]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004208:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	691a      	ldr	r2, [r3, #16]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	430a      	orrs	r2, r1
 8004222:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	69d9      	ldr	r1, [r3, #28]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a1a      	ldr	r2, [r3, #32]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	430a      	orrs	r2, r1
 8004232:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f042 0201 	orr.w	r2, r2, #1
 8004242:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2220      	movs	r2, #32
 800424e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3708      	adds	r7, #8
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
	...

0800426c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b088      	sub	sp, #32
 8004270:	af02      	add	r7, sp, #8
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	4608      	mov	r0, r1
 8004276:	4611      	mov	r1, r2
 8004278:	461a      	mov	r2, r3
 800427a:	4603      	mov	r3, r0
 800427c:	817b      	strh	r3, [r7, #10]
 800427e:	460b      	mov	r3, r1
 8004280:	813b      	strh	r3, [r7, #8]
 8004282:	4613      	mov	r3, r2
 8004284:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b20      	cmp	r3, #32
 8004290:	f040 80f9 	bne.w	8004486 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004294:	6a3b      	ldr	r3, [r7, #32]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d002      	beq.n	80042a0 <HAL_I2C_Mem_Write+0x34>
 800429a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800429c:	2b00      	cmp	r3, #0
 800429e:	d105      	bne.n	80042ac <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042a6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e0ed      	b.n	8004488 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d101      	bne.n	80042ba <HAL_I2C_Mem_Write+0x4e>
 80042b6:	2302      	movs	r3, #2
 80042b8:	e0e6      	b.n	8004488 <HAL_I2C_Mem_Write+0x21c>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80042c2:	f7fe faad 	bl	8002820 <HAL_GetTick>
 80042c6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	9300      	str	r3, [sp, #0]
 80042cc:	2319      	movs	r3, #25
 80042ce:	2201      	movs	r2, #1
 80042d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	f000 fac3 	bl	8004860 <I2C_WaitOnFlagUntilTimeout>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d001      	beq.n	80042e4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e0d1      	b.n	8004488 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2221      	movs	r2, #33	; 0x21
 80042e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2240      	movs	r2, #64	; 0x40
 80042f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6a3a      	ldr	r2, [r7, #32]
 80042fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004304:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800430c:	88f8      	ldrh	r0, [r7, #6]
 800430e:	893a      	ldrh	r2, [r7, #8]
 8004310:	8979      	ldrh	r1, [r7, #10]
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	9301      	str	r3, [sp, #4]
 8004316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004318:	9300      	str	r3, [sp, #0]
 800431a:	4603      	mov	r3, r0
 800431c:	68f8      	ldr	r0, [r7, #12]
 800431e:	f000 f9d3 	bl	80046c8 <I2C_RequestMemoryWrite>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d005      	beq.n	8004334 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e0a9      	b.n	8004488 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004338:	b29b      	uxth	r3, r3
 800433a:	2bff      	cmp	r3, #255	; 0xff
 800433c:	d90e      	bls.n	800435c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	22ff      	movs	r2, #255	; 0xff
 8004342:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004348:	b2da      	uxtb	r2, r3
 800434a:	8979      	ldrh	r1, [r7, #10]
 800434c:	2300      	movs	r3, #0
 800434e:	9300      	str	r3, [sp, #0]
 8004350:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	f000 fbb5 	bl	8004ac4 <I2C_TransferConfig>
 800435a:	e00f      	b.n	800437c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004360:	b29a      	uxth	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800436a:	b2da      	uxtb	r2, r3
 800436c:	8979      	ldrh	r1, [r7, #10]
 800436e:	2300      	movs	r3, #0
 8004370:	9300      	str	r3, [sp, #0]
 8004372:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004376:	68f8      	ldr	r0, [r7, #12]
 8004378:	f000 fba4 	bl	8004ac4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004380:	68f8      	ldr	r0, [r7, #12]
 8004382:	f000 faad 	bl	80048e0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d001      	beq.n	8004390 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e07b      	b.n	8004488 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004394:	781a      	ldrb	r2, [r3, #0]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a0:	1c5a      	adds	r2, r3, #1
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	3b01      	subs	r3, #1
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b8:	3b01      	subs	r3, #1
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d034      	beq.n	8004434 <HAL_I2C_Mem_Write+0x1c8>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d130      	bne.n	8004434 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	9300      	str	r3, [sp, #0]
 80043d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d8:	2200      	movs	r2, #0
 80043da:	2180      	movs	r1, #128	; 0x80
 80043dc:	68f8      	ldr	r0, [r7, #12]
 80043de:	f000 fa3f 	bl	8004860 <I2C_WaitOnFlagUntilTimeout>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d001      	beq.n	80043ec <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e04d      	b.n	8004488 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	2bff      	cmp	r3, #255	; 0xff
 80043f4:	d90e      	bls.n	8004414 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	22ff      	movs	r2, #255	; 0xff
 80043fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004400:	b2da      	uxtb	r2, r3
 8004402:	8979      	ldrh	r1, [r7, #10]
 8004404:	2300      	movs	r3, #0
 8004406:	9300      	str	r3, [sp, #0]
 8004408:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f000 fb59 	bl	8004ac4 <I2C_TransferConfig>
 8004412:	e00f      	b.n	8004434 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004418:	b29a      	uxth	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004422:	b2da      	uxtb	r2, r3
 8004424:	8979      	ldrh	r1, [r7, #10]
 8004426:	2300      	movs	r3, #0
 8004428:	9300      	str	r3, [sp, #0]
 800442a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	f000 fb48 	bl	8004ac4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004438:	b29b      	uxth	r3, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d19e      	bne.n	800437c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f000 fa8c 	bl	8004960 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d001      	beq.n	8004452 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e01a      	b.n	8004488 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2220      	movs	r2, #32
 8004458:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	6859      	ldr	r1, [r3, #4]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	4b0a      	ldr	r3, [pc, #40]	; (8004490 <HAL_I2C_Mem_Write+0x224>)
 8004466:	400b      	ands	r3, r1
 8004468:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2220      	movs	r2, #32
 800446e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004482:	2300      	movs	r3, #0
 8004484:	e000      	b.n	8004488 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004486:	2302      	movs	r3, #2
  }
}
 8004488:	4618      	mov	r0, r3
 800448a:	3718      	adds	r7, #24
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	fe00e800 	.word	0xfe00e800

08004494 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b088      	sub	sp, #32
 8004498:	af02      	add	r7, sp, #8
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	4608      	mov	r0, r1
 800449e:	4611      	mov	r1, r2
 80044a0:	461a      	mov	r2, r3
 80044a2:	4603      	mov	r3, r0
 80044a4:	817b      	strh	r3, [r7, #10]
 80044a6:	460b      	mov	r3, r1
 80044a8:	813b      	strh	r3, [r7, #8]
 80044aa:	4613      	mov	r3, r2
 80044ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b20      	cmp	r3, #32
 80044b8:	f040 80fd 	bne.w	80046b6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80044bc:	6a3b      	ldr	r3, [r7, #32]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d002      	beq.n	80044c8 <HAL_I2C_Mem_Read+0x34>
 80044c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d105      	bne.n	80044d4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044ce:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e0f1      	b.n	80046b8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d101      	bne.n	80044e2 <HAL_I2C_Mem_Read+0x4e>
 80044de:	2302      	movs	r3, #2
 80044e0:	e0ea      	b.n	80046b8 <HAL_I2C_Mem_Read+0x224>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2201      	movs	r2, #1
 80044e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80044ea:	f7fe f999 	bl	8002820 <HAL_GetTick>
 80044ee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	9300      	str	r3, [sp, #0]
 80044f4:	2319      	movs	r3, #25
 80044f6:	2201      	movs	r2, #1
 80044f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80044fc:	68f8      	ldr	r0, [r7, #12]
 80044fe:	f000 f9af 	bl	8004860 <I2C_WaitOnFlagUntilTimeout>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d001      	beq.n	800450c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e0d5      	b.n	80046b8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2222      	movs	r2, #34	; 0x22
 8004510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2240      	movs	r2, #64	; 0x40
 8004518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6a3a      	ldr	r2, [r7, #32]
 8004526:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800452c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004534:	88f8      	ldrh	r0, [r7, #6]
 8004536:	893a      	ldrh	r2, [r7, #8]
 8004538:	8979      	ldrh	r1, [r7, #10]
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	9301      	str	r3, [sp, #4]
 800453e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004540:	9300      	str	r3, [sp, #0]
 8004542:	4603      	mov	r3, r0
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f000 f913 	bl	8004770 <I2C_RequestMemoryRead>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d005      	beq.n	800455c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e0ad      	b.n	80046b8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004560:	b29b      	uxth	r3, r3
 8004562:	2bff      	cmp	r3, #255	; 0xff
 8004564:	d90e      	bls.n	8004584 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	22ff      	movs	r2, #255	; 0xff
 800456a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004570:	b2da      	uxtb	r2, r3
 8004572:	8979      	ldrh	r1, [r7, #10]
 8004574:	4b52      	ldr	r3, [pc, #328]	; (80046c0 <HAL_I2C_Mem_Read+0x22c>)
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f000 faa1 	bl	8004ac4 <I2C_TransferConfig>
 8004582:	e00f      	b.n	80045a4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004588:	b29a      	uxth	r2, r3
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004592:	b2da      	uxtb	r2, r3
 8004594:	8979      	ldrh	r1, [r7, #10]
 8004596:	4b4a      	ldr	r3, [pc, #296]	; (80046c0 <HAL_I2C_Mem_Read+0x22c>)
 8004598:	9300      	str	r3, [sp, #0]
 800459a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	f000 fa90 	bl	8004ac4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	9300      	str	r3, [sp, #0]
 80045a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045aa:	2200      	movs	r2, #0
 80045ac:	2104      	movs	r1, #4
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f000 f956 	bl	8004860 <I2C_WaitOnFlagUntilTimeout>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e07c      	b.n	80046b8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c8:	b2d2      	uxtb	r2, r2
 80045ca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d0:	1c5a      	adds	r2, r3, #1
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045da:	3b01      	subs	r3, #1
 80045dc:	b29a      	uxth	r2, r3
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	3b01      	subs	r3, #1
 80045ea:	b29a      	uxth	r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d034      	beq.n	8004664 <HAL_I2C_Mem_Read+0x1d0>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d130      	bne.n	8004664 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	9300      	str	r3, [sp, #0]
 8004606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004608:	2200      	movs	r2, #0
 800460a:	2180      	movs	r1, #128	; 0x80
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	f000 f927 	bl	8004860 <I2C_WaitOnFlagUntilTimeout>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d001      	beq.n	800461c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e04d      	b.n	80046b8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004620:	b29b      	uxth	r3, r3
 8004622:	2bff      	cmp	r3, #255	; 0xff
 8004624:	d90e      	bls.n	8004644 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	22ff      	movs	r2, #255	; 0xff
 800462a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004630:	b2da      	uxtb	r2, r3
 8004632:	8979      	ldrh	r1, [r7, #10]
 8004634:	2300      	movs	r3, #0
 8004636:	9300      	str	r3, [sp, #0]
 8004638:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f000 fa41 	bl	8004ac4 <I2C_TransferConfig>
 8004642:	e00f      	b.n	8004664 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004648:	b29a      	uxth	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004652:	b2da      	uxtb	r2, r3
 8004654:	8979      	ldrh	r1, [r7, #10]
 8004656:	2300      	movs	r3, #0
 8004658:	9300      	str	r3, [sp, #0]
 800465a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800465e:	68f8      	ldr	r0, [r7, #12]
 8004660:	f000 fa30 	bl	8004ac4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004668:	b29b      	uxth	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	d19a      	bne.n	80045a4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f000 f974 	bl	8004960 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e01a      	b.n	80046b8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2220      	movs	r2, #32
 8004688:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	6859      	ldr	r1, [r3, #4]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	4b0b      	ldr	r3, [pc, #44]	; (80046c4 <HAL_I2C_Mem_Read+0x230>)
 8004696:	400b      	ands	r3, r1
 8004698:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2220      	movs	r2, #32
 800469e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80046b2:	2300      	movs	r3, #0
 80046b4:	e000      	b.n	80046b8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80046b6:	2302      	movs	r3, #2
  }
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3718      	adds	r7, #24
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	80002400 	.word	0x80002400
 80046c4:	fe00e800 	.word	0xfe00e800

080046c8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b086      	sub	sp, #24
 80046cc:	af02      	add	r7, sp, #8
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	4608      	mov	r0, r1
 80046d2:	4611      	mov	r1, r2
 80046d4:	461a      	mov	r2, r3
 80046d6:	4603      	mov	r3, r0
 80046d8:	817b      	strh	r3, [r7, #10]
 80046da:	460b      	mov	r3, r1
 80046dc:	813b      	strh	r3, [r7, #8]
 80046de:	4613      	mov	r3, r2
 80046e0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80046e2:	88fb      	ldrh	r3, [r7, #6]
 80046e4:	b2da      	uxtb	r2, r3
 80046e6:	8979      	ldrh	r1, [r7, #10]
 80046e8:	4b20      	ldr	r3, [pc, #128]	; (800476c <I2C_RequestMemoryWrite+0xa4>)
 80046ea:	9300      	str	r3, [sp, #0]
 80046ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f000 f9e7 	bl	8004ac4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046f6:	69fa      	ldr	r2, [r7, #28]
 80046f8:	69b9      	ldr	r1, [r7, #24]
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f000 f8f0 	bl	80048e0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e02c      	b.n	8004764 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800470a:	88fb      	ldrh	r3, [r7, #6]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d105      	bne.n	800471c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004710:	893b      	ldrh	r3, [r7, #8]
 8004712:	b2da      	uxtb	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	629a      	str	r2, [r3, #40]	; 0x28
 800471a:	e015      	b.n	8004748 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800471c:	893b      	ldrh	r3, [r7, #8]
 800471e:	0a1b      	lsrs	r3, r3, #8
 8004720:	b29b      	uxth	r3, r3
 8004722:	b2da      	uxtb	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800472a:	69fa      	ldr	r2, [r7, #28]
 800472c:	69b9      	ldr	r1, [r7, #24]
 800472e:	68f8      	ldr	r0, [r7, #12]
 8004730:	f000 f8d6 	bl	80048e0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e012      	b.n	8004764 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800473e:	893b      	ldrh	r3, [r7, #8]
 8004740:	b2da      	uxtb	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	9300      	str	r3, [sp, #0]
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	2200      	movs	r2, #0
 8004750:	2180      	movs	r1, #128	; 0x80
 8004752:	68f8      	ldr	r0, [r7, #12]
 8004754:	f000 f884 	bl	8004860 <I2C_WaitOnFlagUntilTimeout>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d001      	beq.n	8004762 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e000      	b.n	8004764 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	80002000 	.word	0x80002000

08004770 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b086      	sub	sp, #24
 8004774:	af02      	add	r7, sp, #8
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	4608      	mov	r0, r1
 800477a:	4611      	mov	r1, r2
 800477c:	461a      	mov	r2, r3
 800477e:	4603      	mov	r3, r0
 8004780:	817b      	strh	r3, [r7, #10]
 8004782:	460b      	mov	r3, r1
 8004784:	813b      	strh	r3, [r7, #8]
 8004786:	4613      	mov	r3, r2
 8004788:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800478a:	88fb      	ldrh	r3, [r7, #6]
 800478c:	b2da      	uxtb	r2, r3
 800478e:	8979      	ldrh	r1, [r7, #10]
 8004790:	4b20      	ldr	r3, [pc, #128]	; (8004814 <I2C_RequestMemoryRead+0xa4>)
 8004792:	9300      	str	r3, [sp, #0]
 8004794:	2300      	movs	r3, #0
 8004796:	68f8      	ldr	r0, [r7, #12]
 8004798:	f000 f994 	bl	8004ac4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800479c:	69fa      	ldr	r2, [r7, #28]
 800479e:	69b9      	ldr	r1, [r7, #24]
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	f000 f89d 	bl	80048e0 <I2C_WaitOnTXISFlagUntilTimeout>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d001      	beq.n	80047b0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e02c      	b.n	800480a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80047b0:	88fb      	ldrh	r3, [r7, #6]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d105      	bne.n	80047c2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80047b6:	893b      	ldrh	r3, [r7, #8]
 80047b8:	b2da      	uxtb	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	629a      	str	r2, [r3, #40]	; 0x28
 80047c0:	e015      	b.n	80047ee <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80047c2:	893b      	ldrh	r3, [r7, #8]
 80047c4:	0a1b      	lsrs	r3, r3, #8
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	b2da      	uxtb	r2, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047d0:	69fa      	ldr	r2, [r7, #28]
 80047d2:	69b9      	ldr	r1, [r7, #24]
 80047d4:	68f8      	ldr	r0, [r7, #12]
 80047d6:	f000 f883 	bl	80048e0 <I2C_WaitOnTXISFlagUntilTimeout>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d001      	beq.n	80047e4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e012      	b.n	800480a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80047e4:	893b      	ldrh	r3, [r7, #8]
 80047e6:	b2da      	uxtb	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	2200      	movs	r2, #0
 80047f6:	2140      	movs	r1, #64	; 0x40
 80047f8:	68f8      	ldr	r0, [r7, #12]
 80047fa:	f000 f831 	bl	8004860 <I2C_WaitOnFlagUntilTimeout>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d001      	beq.n	8004808 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e000      	b.n	800480a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3710      	adds	r7, #16
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	80002000 	.word	0x80002000

08004818 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	f003 0302 	and.w	r3, r3, #2
 800482a:	2b02      	cmp	r3, #2
 800482c:	d103      	bne.n	8004836 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2200      	movs	r2, #0
 8004834:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	f003 0301 	and.w	r3, r3, #1
 8004840:	2b01      	cmp	r3, #1
 8004842:	d007      	beq.n	8004854 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	699a      	ldr	r2, [r3, #24]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f042 0201 	orr.w	r2, r2, #1
 8004852:	619a      	str	r2, [r3, #24]
  }
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	603b      	str	r3, [r7, #0]
 800486c:	4613      	mov	r3, r2
 800486e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004870:	e022      	b.n	80048b8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004878:	d01e      	beq.n	80048b8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800487a:	f7fd ffd1 	bl	8002820 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	683a      	ldr	r2, [r7, #0]
 8004886:	429a      	cmp	r2, r3
 8004888:	d302      	bcc.n	8004890 <I2C_WaitOnFlagUntilTimeout+0x30>
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d113      	bne.n	80048b8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004894:	f043 0220 	orr.w	r2, r3, #32
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2220      	movs	r2, #32
 80048a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e00f      	b.n	80048d8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	699a      	ldr	r2, [r3, #24]
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	4013      	ands	r3, r2
 80048c2:	68ba      	ldr	r2, [r7, #8]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	bf0c      	ite	eq
 80048c8:	2301      	moveq	r3, #1
 80048ca:	2300      	movne	r3, #0
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	461a      	mov	r2, r3
 80048d0:	79fb      	ldrb	r3, [r7, #7]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d0cd      	beq.n	8004872 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3710      	adds	r7, #16
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80048ec:	e02c      	b.n	8004948 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	68b9      	ldr	r1, [r7, #8]
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	f000 f870 	bl	80049d8 <I2C_IsAcknowledgeFailed>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d001      	beq.n	8004902 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e02a      	b.n	8004958 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004908:	d01e      	beq.n	8004948 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800490a:	f7fd ff89 	bl	8002820 <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	68ba      	ldr	r2, [r7, #8]
 8004916:	429a      	cmp	r2, r3
 8004918:	d302      	bcc.n	8004920 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d113      	bne.n	8004948 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004924:	f043 0220 	orr.w	r2, r3, #32
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2220      	movs	r2, #32
 8004930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e007      	b.n	8004958 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	f003 0302 	and.w	r3, r3, #2
 8004952:	2b02      	cmp	r3, #2
 8004954:	d1cb      	bne.n	80048ee <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800496c:	e028      	b.n	80049c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	68b9      	ldr	r1, [r7, #8]
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f000 f830 	bl	80049d8 <I2C_IsAcknowledgeFailed>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d001      	beq.n	8004982 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e026      	b.n	80049d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004982:	f7fd ff4d 	bl	8002820 <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	68ba      	ldr	r2, [r7, #8]
 800498e:	429a      	cmp	r2, r3
 8004990:	d302      	bcc.n	8004998 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d113      	bne.n	80049c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800499c:	f043 0220 	orr.w	r2, r3, #32
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2220      	movs	r2, #32
 80049a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e007      	b.n	80049d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	f003 0320 	and.w	r3, r3, #32
 80049ca:	2b20      	cmp	r3, #32
 80049cc:	d1cf      	bne.n	800496e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	f003 0310 	and.w	r3, r3, #16
 80049ee:	2b10      	cmp	r3, #16
 80049f0:	d161      	bne.n	8004ab6 <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a00:	d02b      	beq.n	8004a5a <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	685a      	ldr	r2, [r3, #4]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a10:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a12:	e022      	b.n	8004a5a <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a1a:	d01e      	beq.n	8004a5a <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a1c:	f7fd ff00 	bl	8002820 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d302      	bcc.n	8004a32 <I2C_IsAcknowledgeFailed+0x5a>
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d113      	bne.n	8004a5a <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a36:	f043 0220 	orr.w	r2, r3, #32
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2220      	movs	r2, #32
 8004a42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e02e      	b.n	8004ab8 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	f003 0320 	and.w	r3, r3, #32
 8004a64:	2b20      	cmp	r3, #32
 8004a66:	d1d5      	bne.n	8004a14 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2210      	movs	r2, #16
 8004a6e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2220      	movs	r2, #32
 8004a76:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f7ff fecd 	bl	8004818 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	6859      	ldr	r1, [r3, #4]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	4b0d      	ldr	r3, [pc, #52]	; (8004ac0 <I2C_IsAcknowledgeFailed+0xe8>)
 8004a8a:	400b      	ands	r3, r1
 8004a8c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a92:	f043 0204 	orr.w	r2, r3, #4
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2220      	movs	r2, #32
 8004a9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e000      	b.n	8004ab8 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3710      	adds	r7, #16
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	fe00e800 	.word	0xfe00e800

08004ac4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	607b      	str	r3, [r7, #4]
 8004ace:	460b      	mov	r3, r1
 8004ad0:	817b      	strh	r3, [r7, #10]
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	685a      	ldr	r2, [r3, #4]
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	0d5b      	lsrs	r3, r3, #21
 8004ae0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004ae4:	4b0d      	ldr	r3, [pc, #52]	; (8004b1c <I2C_TransferConfig+0x58>)
 8004ae6:	430b      	orrs	r3, r1
 8004ae8:	43db      	mvns	r3, r3
 8004aea:	ea02 0103 	and.w	r1, r2, r3
 8004aee:	897b      	ldrh	r3, [r7, #10]
 8004af0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004af4:	7a7b      	ldrb	r3, [r7, #9]
 8004af6:	041b      	lsls	r3, r3, #16
 8004af8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004afc:	431a      	orrs	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	431a      	orrs	r2, r3
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	431a      	orrs	r2, r3
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8004b0e:	bf00      	nop
 8004b10:	3714      	adds	r7, #20
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	03ff63ff 	.word	0x03ff63ff

08004b20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	2b20      	cmp	r3, #32
 8004b34:	d138      	bne.n	8004ba8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d101      	bne.n	8004b44 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004b40:	2302      	movs	r3, #2
 8004b42:	e032      	b.n	8004baa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2224      	movs	r2, #36	; 0x24
 8004b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f022 0201 	bic.w	r2, r2, #1
 8004b62:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b72:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	6819      	ldr	r1, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	683a      	ldr	r2, [r7, #0]
 8004b80:	430a      	orrs	r2, r1
 8004b82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f042 0201 	orr.w	r2, r2, #1
 8004b92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2220      	movs	r2, #32
 8004b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	e000      	b.n	8004baa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004ba8:	2302      	movs	r3, #2
  }
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	370c      	adds	r7, #12
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr

08004bb6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	b085      	sub	sp, #20
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
 8004bbe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	2b20      	cmp	r3, #32
 8004bca:	d139      	bne.n	8004c40 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d101      	bne.n	8004bda <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004bd6:	2302      	movs	r3, #2
 8004bd8:	e033      	b.n	8004c42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2224      	movs	r2, #36	; 0x24
 8004be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f022 0201 	bic.w	r2, r2, #1
 8004bf8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004c08:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	021b      	lsls	r3, r3, #8
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f042 0201 	orr.w	r2, r2, #1
 8004c2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2220      	movs	r2, #32
 8004c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	e000      	b.n	8004c42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004c40:	2302      	movs	r3, #2
  }
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3714      	adds	r7, #20
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
	...

08004c50 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004c50:	b480      	push	{r7}
 8004c52:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c54:	4b05      	ldr	r3, [pc, #20]	; (8004c6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a04      	ldr	r2, [pc, #16]	; (8004c6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004c5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c5e:	6013      	str	r3, [r2, #0]
}
 8004c60:	bf00      	nop
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	58000400 	.word	0x58000400

08004c70 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004c70:	b480      	push	{r7}
 8004c72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c82:	d101      	bne.n	8004c88 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004c84:	2301      	movs	r3, #1
 8004c86:	e000      	b.n	8004c8a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <LL_RCC_HSE_Enable>:
{
 8004c94:	b480      	push	{r7}
 8004c96:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004c98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ca2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ca6:	6013      	str	r3, [r2, #0]
}
 8004ca8:	bf00      	nop
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr

08004cb2 <LL_RCC_HSE_Disable>:
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cc4:	6013      	str	r3, [r2, #0]
}
 8004cc6:	bf00      	nop
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <LL_RCC_HSE_IsReady>:
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004cd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cde:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ce2:	d101      	bne.n	8004ce8 <LL_RCC_HSE_IsReady+0x18>
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e000      	b.n	8004cea <LL_RCC_HSE_IsReady+0x1a>
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <LL_RCC_HSI_Enable>:
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004cf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d06:	6013      	str	r3, [r2, #0]
}
 8004d08:	bf00      	nop
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr

08004d12 <LL_RCC_HSI_Disable>:
{
 8004d12:	b480      	push	{r7}
 8004d14:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004d16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d24:	6013      	str	r3, [r2, #0]
}
 8004d26:	bf00      	nop
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <LL_RCC_HSI_IsReady>:
{
 8004d30:	b480      	push	{r7}
 8004d32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004d34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d42:	d101      	bne.n	8004d48 <LL_RCC_HSI_IsReady+0x18>
 8004d44:	2301      	movs	r3, #1
 8004d46:	e000      	b.n	8004d4a <LL_RCC_HSI_IsReady+0x1a>
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004d5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	061b      	lsls	r3, r3, #24
 8004d6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	604b      	str	r3, [r1, #4]
}
 8004d72:	bf00      	nop
 8004d74:	370c      	adds	r7, #12
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr

08004d7e <LL_RCC_LSE_Enable>:
{
 8004d7e:	b480      	push	{r7}
 8004d80:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004d82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d8e:	f043 0301 	orr.w	r3, r3, #1
 8004d92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004d96:	bf00      	nop
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <LL_RCC_LSE_Disable>:
{
 8004da0:	b480      	push	{r7}
 8004da2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004da4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004db0:	f023 0301 	bic.w	r3, r3, #1
 8004db4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004db8:	bf00      	nop
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr

08004dc2 <LL_RCC_LSE_EnableBypass>:
{
 8004dc2:	b480      	push	{r7}
 8004dc4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004dd2:	f043 0304 	orr.w	r3, r3, #4
 8004dd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004dda:	bf00      	nop
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <LL_RCC_LSE_DisableBypass>:
{
 8004de4:	b480      	push	{r7}
 8004de6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004de8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004df4:	f023 0304 	bic.w	r3, r3, #4
 8004df8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004dfc:	bf00      	nop
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr

08004e06 <LL_RCC_LSE_IsReady>:
{
 8004e06:	b480      	push	{r7}
 8004e08:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004e0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e12:	f003 0302 	and.w	r3, r3, #2
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d101      	bne.n	8004e1e <LL_RCC_LSE_IsReady+0x18>
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e000      	b.n	8004e20 <LL_RCC_LSE_IsReady+0x1a>
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr

08004e2a <LL_RCC_LSI1_Enable>:
{
 8004e2a:	b480      	push	{r7}
 8004e2c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004e2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e3a:	f043 0301 	orr.w	r3, r3, #1
 8004e3e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004e42:	bf00      	nop
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <LL_RCC_LSI1_Disable>:
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004e50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e5c:	f023 0301 	bic.w	r3, r3, #1
 8004e60:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004e64:	bf00      	nop
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr

08004e6e <LL_RCC_LSI1_IsReady>:
{
 8004e6e:	b480      	push	{r7}
 8004e70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004e72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d101      	bne.n	8004e86 <LL_RCC_LSI1_IsReady+0x18>
 8004e82:	2301      	movs	r3, #1
 8004e84:	e000      	b.n	8004e88 <LL_RCC_LSI1_IsReady+0x1a>
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr

08004e92 <LL_RCC_LSI2_Enable>:
{
 8004e92:	b480      	push	{r7}
 8004e94:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004e96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ea2:	f043 0304 	orr.w	r3, r3, #4
 8004ea6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004eaa:	bf00      	nop
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <LL_RCC_LSI2_Disable>:
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ebc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ec0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ec4:	f023 0304 	bic.w	r3, r3, #4
 8004ec8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004ecc:	bf00      	nop
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr

08004ed6 <LL_RCC_LSI2_IsReady>:
{
 8004ed6:	b480      	push	{r7}
 8004ed8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004eda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ede:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ee2:	f003 0308 	and.w	r3, r3, #8
 8004ee6:	2b08      	cmp	r3, #8
 8004ee8:	d101      	bne.n	8004eee <LL_RCC_LSI2_IsReady+0x18>
 8004eea:	2301      	movs	r3, #1
 8004eec:	e000      	b.n	8004ef0 <LL_RCC_LSI2_IsReady+0x1a>
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr

08004efa <LL_RCC_LSI2_SetTrimming>:
{
 8004efa:	b480      	push	{r7}
 8004efc:	b083      	sub	sp, #12
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f0a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	021b      	lsls	r3, r3, #8
 8004f12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f16:	4313      	orrs	r3, r2
 8004f18:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004f1c:	bf00      	nop
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <LL_RCC_MSI_Enable>:
{
 8004f28:	b480      	push	{r7}
 8004f2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004f2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f36:	f043 0301 	orr.w	r3, r3, #1
 8004f3a:	6013      	str	r3, [r2, #0]
}
 8004f3c:	bf00      	nop
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr

08004f46 <LL_RCC_MSI_Disable>:
{
 8004f46:	b480      	push	{r7}
 8004f48:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004f4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f54:	f023 0301 	bic.w	r3, r3, #1
 8004f58:	6013      	str	r3, [r2, #0]
}
 8004f5a:	bf00      	nop
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <LL_RCC_MSI_IsReady>:
{
 8004f64:	b480      	push	{r7}
 8004f66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004f68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d101      	bne.n	8004f7a <LL_RCC_MSI_IsReady+0x16>
 8004f76:	2301      	movs	r3, #1
 8004f78:	e000      	b.n	8004f7c <LL_RCC_MSI_IsReady+0x18>
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr

08004f86 <LL_RCC_MSI_SetRange>:
{
 8004f86:	b480      	push	{r7}
 8004f88:	b083      	sub	sp, #12
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	600b      	str	r3, [r1, #0]
}
 8004fa2:	bf00      	nop
 8004fa4:	370c      	adds	r7, #12
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr

08004fae <LL_RCC_MSI_GetRange>:
{
 8004fae:	b480      	push	{r7}
 8004fb0:	b083      	sub	sp, #12
 8004fb2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004fb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fbe:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2bb0      	cmp	r3, #176	; 0xb0
 8004fc4:	d901      	bls.n	8004fca <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8004fc6:	23b0      	movs	r3, #176	; 0xb0
 8004fc8:	607b      	str	r3, [r7, #4]
  return msiRange;
 8004fca:	687b      	ldr	r3, [r7, #4]
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <LL_RCC_MSI_SetCalibTrimming>:
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	021b      	lsls	r3, r3, #8
 8004fee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	604b      	str	r3, [r1, #4]
}
 8004ff6:	bf00      	nop
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr

08005002 <LL_RCC_SetSysClkSource>:
{
 8005002:	b480      	push	{r7}
 8005004:	b083      	sub	sp, #12
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800500a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	f023 0203 	bic.w	r2, r3, #3
 8005014:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4313      	orrs	r3, r2
 800501c:	608b      	str	r3, [r1, #8]
}
 800501e:	bf00      	nop
 8005020:	370c      	adds	r7, #12
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr

0800502a <LL_RCC_GetSysClkSource>:
{
 800502a:	b480      	push	{r7}
 800502c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800502e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f003 030c 	and.w	r3, r3, #12
}
 8005038:	4618      	mov	r0, r3
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr

08005042 <LL_RCC_SetAHBPrescaler>:
{
 8005042:	b480      	push	{r7}
 8005044:	b083      	sub	sp, #12
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800504a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005054:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4313      	orrs	r3, r2
 800505c:	608b      	str	r3, [r1, #8]
}
 800505e:	bf00      	nop
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr

0800506a <LL_C2_RCC_SetAHBPrescaler>:
{
 800506a:	b480      	push	{r7}
 800506c:	b083      	sub	sp, #12
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8005072:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005076:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800507a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800507e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4313      	orrs	r3, r2
 8005086:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800508a:	bf00      	nop
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr

08005096 <LL_RCC_SetAHB4Prescaler>:
{
 8005096:	b480      	push	{r7}
 8005098:	b083      	sub	sp, #12
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800509e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050a2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80050a6:	f023 020f 	bic.w	r2, r3, #15
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	091b      	lsrs	r3, r3, #4
 80050ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050b2:	4313      	orrs	r3, r2
 80050b4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80050b8:	bf00      	nop
 80050ba:	370c      	adds	r7, #12
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <LL_RCC_SetAPB1Prescaler>:
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80050cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80050d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4313      	orrs	r3, r2
 80050de:	608b      	str	r3, [r1, #8]
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <LL_RCC_SetAPB2Prescaler>:
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80050f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80050fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4313      	orrs	r3, r2
 8005106:	608b      	str	r3, [r1, #8]
}
 8005108:	bf00      	nop
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <LL_RCC_GetAHBPrescaler>:
{
 8005114:	b480      	push	{r7}
 8005116:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005118:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005122:	4618      	mov	r0, r3
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <LL_C2_RCC_GetAHBPrescaler>:
{
 800512c:	b480      	push	{r7}
 800512e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8005130:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005134:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005138:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800513c:	4618      	mov	r0, r3
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr

08005146 <LL_RCC_GetAHB4Prescaler>:
{
 8005146:	b480      	push	{r7}
 8005148:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800514a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800514e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005152:	011b      	lsls	r3, r3, #4
 8005154:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005158:	4618      	mov	r0, r3
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr

08005162 <LL_RCC_GetAPB1Prescaler>:
{
 8005162:	b480      	push	{r7}
 8005164:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005166:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005170:	4618      	mov	r0, r3
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr

0800517a <LL_RCC_GetAPB2Prescaler>:
{
 800517a:	b480      	push	{r7}
 800517c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800517e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005188:	4618      	mov	r0, r3
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr

08005192 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005192:	b480      	push	{r7}
 8005194:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051a4:	6013      	str	r3, [r2, #0]
}
 80051a6:	bf00      	nop
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80051b0:	b480      	push	{r7}
 80051b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80051b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051c2:	6013      	str	r3, [r2, #0]
}
 80051c4:	bf00      	nop
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr

080051ce <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80051ce:	b480      	push	{r7}
 80051d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80051d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051e0:	d101      	bne.n	80051e6 <LL_RCC_PLL_IsReady+0x18>
 80051e2:	2301      	movs	r3, #1
 80051e4:	e000      	b.n	80051e8 <LL_RCC_PLL_IsReady+0x1a>
 80051e6:	2300      	movs	r3, #0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr

080051f2 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80051f2:	b480      	push	{r7}
 80051f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80051f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	0a1b      	lsrs	r3, r3, #8
 80051fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005202:	4618      	mov	r0, r3
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800520c:	b480      	push	{r7}
 800520e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005210:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800521a:	4618      	mov	r0, r3
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005224:	b480      	push	{r7}
 8005226:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005232:	4618      	mov	r0, r3
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800523c:	b480      	push	{r7}
 800523e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	f003 0303 	and.w	r3, r3, #3
}
 800524a:	4618      	mov	r0, r3
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005254:	b480      	push	{r7}
 8005256:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005258:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005262:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005266:	d101      	bne.n	800526c <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005268:	2301      	movs	r3, #1
 800526a:	e000      	b.n	800526e <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8005278:	b480      	push	{r7}
 800527a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800527c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005280:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005288:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800528c:	d101      	bne.n	8005292 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800528e:	2301      	movs	r3, #1
 8005290:	e000      	b.n	8005294 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005292:	2300      	movs	r3, #0
}
 8005294:	4618      	mov	r0, r3
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr

0800529e <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800529e:	b480      	push	{r7}
 80052a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80052a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052a6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80052aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052b2:	d101      	bne.n	80052b8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80052b4:	2301      	movs	r3, #1
 80052b6:	e000      	b.n	80052ba <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80052c4:	b480      	push	{r7}
 80052c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80052c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052d6:	d101      	bne.n	80052dc <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80052d8:	2301      	movs	r3, #1
 80052da:	e000      	b.n	80052de <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80052e8:	b480      	push	{r7}
 80052ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80052ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80052fa:	d101      	bne.n	8005300 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80052fc:	2301      	movs	r3, #1
 80052fe:	e000      	b.n	8005302 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800530c:	b590      	push	{r4, r7, lr}
 800530e:	b08d      	sub	sp, #52	; 0x34
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d101      	bne.n	800531e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e33b      	b.n	8005996 <HAL_RCC_OscConfig+0x68a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0320 	and.w	r3, r3, #32
 8005326:	2b00      	cmp	r3, #0
 8005328:	f000 8092 	beq.w	8005450 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800532c:	f7ff fe7d 	bl	800502a <LL_RCC_GetSysClkSource>
 8005330:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005332:	f7ff ff83 	bl	800523c <LL_RCC_PLL_GetMainSource>
 8005336:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800533a:	2b00      	cmp	r3, #0
 800533c:	d005      	beq.n	800534a <HAL_RCC_OscConfig+0x3e>
 800533e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005340:	2b0c      	cmp	r3, #12
 8005342:	d14c      	bne.n	80053de <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8005344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005346:	2b01      	cmp	r3, #1
 8005348:	d149      	bne.n	80053de <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800534a:	f7ff fe0b 	bl	8004f64 <LL_RCC_MSI_IsReady>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d005      	beq.n	8005360 <HAL_RCC_OscConfig+0x54>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	69db      	ldr	r3, [r3, #28]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d101      	bne.n	8005360 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e31a      	b.n	8005996 <HAL_RCC_OscConfig+0x68a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005364:	f7ff fe23 	bl	8004fae <LL_RCC_MSI_GetRange>
 8005368:	4603      	mov	r3, r0
 800536a:	429c      	cmp	r4, r3
 800536c:	d914      	bls.n	8005398 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005372:	4618      	mov	r0, r3
 8005374:	f000 fd38 	bl	8005de8 <RCC_SetFlashLatencyFromMSIRange>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d001      	beq.n	8005382 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e309      	b.n	8005996 <HAL_RCC_OscConfig+0x68a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005386:	4618      	mov	r0, r3
 8005388:	f7ff fdfd 	bl	8004f86 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a1b      	ldr	r3, [r3, #32]
 8005390:	4618      	mov	r0, r3
 8005392:	f7ff fe21 	bl	8004fd8 <LL_RCC_MSI_SetCalibTrimming>
 8005396:	e013      	b.n	80053c0 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539c:	4618      	mov	r0, r3
 800539e:	f7ff fdf2 	bl	8004f86 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a1b      	ldr	r3, [r3, #32]
 80053a6:	4618      	mov	r0, r3
 80053a8:	f7ff fe16 	bl	8004fd8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b0:	4618      	mov	r0, r3
 80053b2:	f000 fd19 	bl	8005de8 <RCC_SetFlashLatencyFromMSIRange>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d001      	beq.n	80053c0 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e2ea      	b.n	8005996 <HAL_RCC_OscConfig+0x68a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80053c0:	f000 fca0 	bl	8005d04 <HAL_RCC_GetHCLKFreq>
 80053c4:	4603      	mov	r3, r0
 80053c6:	4ab3      	ldr	r2, [pc, #716]	; (8005694 <HAL_RCC_OscConfig+0x388>)
 80053c8:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80053ca:	4bb3      	ldr	r3, [pc, #716]	; (8005698 <HAL_RCC_OscConfig+0x38c>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7fd f810 	bl	80023f4 <HAL_InitTick>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d039      	beq.n	800544e <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e2db      	b.n	8005996 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	69db      	ldr	r3, [r3, #28]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d01e      	beq.n	8005424 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80053e6:	f7ff fd9f 	bl	8004f28 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80053ea:	f7fd fa19 	bl	8002820 <HAL_GetTick>
 80053ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80053f0:	e008      	b.n	8005404 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80053f2:	f7fd fa15 	bl	8002820 <HAL_GetTick>
 80053f6:	4602      	mov	r2, r0
 80053f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	2b02      	cmp	r3, #2
 80053fe:	d901      	bls.n	8005404 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8005400:	2303      	movs	r3, #3
 8005402:	e2c8      	b.n	8005996 <HAL_RCC_OscConfig+0x68a>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005404:	f7ff fdae 	bl	8004f64 <LL_RCC_MSI_IsReady>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d0f1      	beq.n	80053f2 <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005412:	4618      	mov	r0, r3
 8005414:	f7ff fdb7 	bl	8004f86 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a1b      	ldr	r3, [r3, #32]
 800541c:	4618      	mov	r0, r3
 800541e:	f7ff fddb 	bl	8004fd8 <LL_RCC_MSI_SetCalibTrimming>
 8005422:	e015      	b.n	8005450 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005424:	f7ff fd8f 	bl	8004f46 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005428:	f7fd f9fa 	bl	8002820 <HAL_GetTick>
 800542c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800542e:	e008      	b.n	8005442 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005430:	f7fd f9f6 	bl	8002820 <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	2b02      	cmp	r3, #2
 800543c:	d901      	bls.n	8005442 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e2a9      	b.n	8005996 <HAL_RCC_OscConfig+0x68a>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005442:	f7ff fd8f 	bl	8004f64 <LL_RCC_MSI_IsReady>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1f1      	bne.n	8005430 <HAL_RCC_OscConfig+0x124>
 800544c:	e000      	b.n	8005450 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800544e:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0301 	and.w	r3, r3, #1
 8005458:	2b00      	cmp	r3, #0
 800545a:	d04e      	beq.n	80054fa <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800545c:	f7ff fde5 	bl	800502a <LL_RCC_GetSysClkSource>
 8005460:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005462:	f7ff feeb 	bl	800523c <LL_RCC_PLL_GetMainSource>
 8005466:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005468:	6a3b      	ldr	r3, [r7, #32]
 800546a:	2b08      	cmp	r3, #8
 800546c:	d005      	beq.n	800547a <HAL_RCC_OscConfig+0x16e>
 800546e:	6a3b      	ldr	r3, [r7, #32]
 8005470:	2b0c      	cmp	r3, #12
 8005472:	d10d      	bne.n	8005490 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	2b03      	cmp	r3, #3
 8005478:	d10a      	bne.n	8005490 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800547a:	f7ff fc29 	bl	8004cd0 <LL_RCC_HSE_IsReady>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d039      	beq.n	80054f8 <HAL_RCC_OscConfig+0x1ec>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d135      	bne.n	80054f8 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e282      	b.n	8005996 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005498:	d102      	bne.n	80054a0 <HAL_RCC_OscConfig+0x194>
 800549a:	f7ff fbfb 	bl	8004c94 <LL_RCC_HSE_Enable>
 800549e:	e001      	b.n	80054a4 <HAL_RCC_OscConfig+0x198>
 80054a0:	f7ff fc07 	bl	8004cb2 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d012      	beq.n	80054d2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ac:	f7fd f9b8 	bl	8002820 <HAL_GetTick>
 80054b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80054b2:	e008      	b.n	80054c6 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054b4:	f7fd f9b4 	bl	8002820 <HAL_GetTick>
 80054b8:	4602      	mov	r2, r0
 80054ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	2b64      	cmp	r3, #100	; 0x64
 80054c0:	d901      	bls.n	80054c6 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e267      	b.n	8005996 <HAL_RCC_OscConfig+0x68a>
        while (LL_RCC_HSE_IsReady() == 0U)
 80054c6:	f7ff fc03 	bl	8004cd0 <LL_RCC_HSE_IsReady>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d0f1      	beq.n	80054b4 <HAL_RCC_OscConfig+0x1a8>
 80054d0:	e013      	b.n	80054fa <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054d2:	f7fd f9a5 	bl	8002820 <HAL_GetTick>
 80054d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80054d8:	e008      	b.n	80054ec <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054da:	f7fd f9a1 	bl	8002820 <HAL_GetTick>
 80054de:	4602      	mov	r2, r0
 80054e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	2b64      	cmp	r3, #100	; 0x64
 80054e6:	d901      	bls.n	80054ec <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80054e8:	2303      	movs	r3, #3
 80054ea:	e254      	b.n	8005996 <HAL_RCC_OscConfig+0x68a>
        while (LL_RCC_HSE_IsReady() != 0U)
 80054ec:	f7ff fbf0 	bl	8004cd0 <LL_RCC_HSE_IsReady>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d1f1      	bne.n	80054da <HAL_RCC_OscConfig+0x1ce>
 80054f6:	e000      	b.n	80054fa <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054f8:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0302 	and.w	r3, r3, #2
 8005502:	2b00      	cmp	r3, #0
 8005504:	d051      	beq.n	80055aa <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005506:	f7ff fd90 	bl	800502a <LL_RCC_GetSysClkSource>
 800550a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800550c:	f7ff fe96 	bl	800523c <LL_RCC_PLL_GetMainSource>
 8005510:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	2b04      	cmp	r3, #4
 8005516:	d005      	beq.n	8005524 <HAL_RCC_OscConfig+0x218>
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	2b0c      	cmp	r3, #12
 800551c:	d113      	bne.n	8005546 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	2b02      	cmp	r3, #2
 8005522:	d110      	bne.n	8005546 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005524:	f7ff fc04 	bl	8004d30 <LL_RCC_HSI_IsReady>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d005      	beq.n	800553a <HAL_RCC_OscConfig+0x22e>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d101      	bne.n	800553a <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e22d      	b.n	8005996 <HAL_RCC_OscConfig+0x68a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	4618      	mov	r0, r3
 8005540:	f7ff fc08 	bl	8004d54 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005544:	e031      	b.n	80055aa <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d019      	beq.n	8005582 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800554e:	f7ff fbd1 	bl	8004cf4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005552:	f7fd f965 	bl	8002820 <HAL_GetTick>
 8005556:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005558:	e008      	b.n	800556c <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800555a:	f7fd f961 	bl	8002820 <HAL_GetTick>
 800555e:	4602      	mov	r2, r0
 8005560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	2b02      	cmp	r3, #2
 8005566:	d901      	bls.n	800556c <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e214      	b.n	8005996 <HAL_RCC_OscConfig+0x68a>
        while (LL_RCC_HSI_IsReady() == 0U)
 800556c:	f7ff fbe0 	bl	8004d30 <LL_RCC_HSI_IsReady>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d0f1      	beq.n	800555a <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	4618      	mov	r0, r3
 800557c:	f7ff fbea 	bl	8004d54 <LL_RCC_HSI_SetCalibTrimming>
 8005580:	e013      	b.n	80055aa <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005582:	f7ff fbc6 	bl	8004d12 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005586:	f7fd f94b 	bl	8002820 <HAL_GetTick>
 800558a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800558c:	e008      	b.n	80055a0 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800558e:	f7fd f947 	bl	8002820 <HAL_GetTick>
 8005592:	4602      	mov	r2, r0
 8005594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	2b02      	cmp	r3, #2
 800559a:	d901      	bls.n	80055a0 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	e1fa      	b.n	8005996 <HAL_RCC_OscConfig+0x68a>
        while (LL_RCC_HSI_IsReady() != 0U)
 80055a0:	f7ff fbc6 	bl	8004d30 <LL_RCC_HSI_IsReady>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1f1      	bne.n	800558e <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0308 	and.w	r3, r3, #8
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d106      	bne.n	80055c4 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80055be:	2b00      	cmp	r3, #0
 80055c0:	f000 80a3 	beq.w	800570a <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	695b      	ldr	r3, [r3, #20]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d076      	beq.n	80056ba <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0310 	and.w	r3, r3, #16
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d046      	beq.n	8005666 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80055d8:	f7ff fc49 	bl	8004e6e <LL_RCC_LSI1_IsReady>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d113      	bne.n	800560a <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80055e2:	f7ff fc22 	bl	8004e2a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80055e6:	f7fd f91b 	bl	8002820 <HAL_GetTick>
 80055ea:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80055ec:	e008      	b.n	8005600 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80055ee:	f7fd f917 	bl	8002820 <HAL_GetTick>
 80055f2:	4602      	mov	r2, r0
 80055f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	2b02      	cmp	r3, #2
 80055fa:	d901      	bls.n	8005600 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e1ca      	b.n	8005996 <HAL_RCC_OscConfig+0x68a>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005600:	f7ff fc35 	bl	8004e6e <LL_RCC_LSI1_IsReady>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d0f1      	beq.n	80055ee <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800560a:	f7ff fc42 	bl	8004e92 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800560e:	f7fd f907 	bl	8002820 <HAL_GetTick>
 8005612:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005614:	e008      	b.n	8005628 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005616:	f7fd f903 	bl	8002820 <HAL_GetTick>
 800561a:	4602      	mov	r2, r0
 800561c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	2b03      	cmp	r3, #3
 8005622:	d901      	bls.n	8005628 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8005624:	2303      	movs	r3, #3
 8005626:	e1b6      	b.n	8005996 <HAL_RCC_OscConfig+0x68a>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005628:	f7ff fc55 	bl	8004ed6 <LL_RCC_LSI2_IsReady>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d0f1      	beq.n	8005616 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	699b      	ldr	r3, [r3, #24]
 8005636:	4618      	mov	r0, r3
 8005638:	f7ff fc5f 	bl	8004efa <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800563c:	f7ff fc06 	bl	8004e4c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005640:	f7fd f8ee 	bl	8002820 <HAL_GetTick>
 8005644:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005646:	e008      	b.n	800565a <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005648:	f7fd f8ea 	bl	8002820 <HAL_GetTick>
 800564c:	4602      	mov	r2, r0
 800564e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	2b02      	cmp	r3, #2
 8005654:	d901      	bls.n	800565a <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e19d      	b.n	8005996 <HAL_RCC_OscConfig+0x68a>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800565a:	f7ff fc08 	bl	8004e6e <LL_RCC_LSI1_IsReady>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d1f1      	bne.n	8005648 <HAL_RCC_OscConfig+0x33c>
 8005664:	e051      	b.n	800570a <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8005666:	f7ff fbe0 	bl	8004e2a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800566a:	f7fd f8d9 	bl	8002820 <HAL_GetTick>
 800566e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005670:	e008      	b.n	8005684 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005672:	f7fd f8d5 	bl	8002820 <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	2b02      	cmp	r3, #2
 800567e:	d901      	bls.n	8005684 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e188      	b.n	8005996 <HAL_RCC_OscConfig+0x68a>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005684:	f7ff fbf3 	bl	8004e6e <LL_RCC_LSI1_IsReady>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d0f1      	beq.n	8005672 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800568e:	f7ff fc11 	bl	8004eb4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005692:	e00c      	b.n	80056ae <HAL_RCC_OscConfig+0x3a2>
 8005694:	20000004 	.word	0x20000004
 8005698:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800569c:	f7fd f8c0 	bl	8002820 <HAL_GetTick>
 80056a0:	4602      	mov	r2, r0
 80056a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	2b03      	cmp	r3, #3
 80056a8:	d901      	bls.n	80056ae <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80056aa:	2303      	movs	r3, #3
 80056ac:	e173      	b.n	8005996 <HAL_RCC_OscConfig+0x68a>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80056ae:	f7ff fc12 	bl	8004ed6 <LL_RCC_LSI2_IsReady>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d1f1      	bne.n	800569c <HAL_RCC_OscConfig+0x390>
 80056b8:	e027      	b.n	800570a <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80056ba:	f7ff fbfb 	bl	8004eb4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056be:	f7fd f8af 	bl	8002820 <HAL_GetTick>
 80056c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80056c4:	e008      	b.n	80056d8 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80056c6:	f7fd f8ab 	bl	8002820 <HAL_GetTick>
 80056ca:	4602      	mov	r2, r0
 80056cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	2b03      	cmp	r3, #3
 80056d2:	d901      	bls.n	80056d8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e15e      	b.n	8005996 <HAL_RCC_OscConfig+0x68a>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80056d8:	f7ff fbfd 	bl	8004ed6 <LL_RCC_LSI2_IsReady>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1f1      	bne.n	80056c6 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80056e2:	f7ff fbb3 	bl	8004e4c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056e6:	f7fd f89b 	bl	8002820 <HAL_GetTick>
 80056ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80056ec:	e008      	b.n	8005700 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80056ee:	f7fd f897 	bl	8002820 <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d901      	bls.n	8005700 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e14a      	b.n	8005996 <HAL_RCC_OscConfig+0x68a>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005700:	f7ff fbb5 	bl	8004e6e <LL_RCC_LSI1_IsReady>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d1f1      	bne.n	80056ee <HAL_RCC_OscConfig+0x3e2>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 0304 	and.w	r3, r3, #4
 8005712:	2b00      	cmp	r3, #0
 8005714:	d05b      	beq.n	80057ce <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005716:	4ba2      	ldr	r3, [pc, #648]	; (80059a0 <HAL_RCC_OscConfig+0x694>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800571e:	2b00      	cmp	r3, #0
 8005720:	d114      	bne.n	800574c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005722:	f7ff fa95 	bl	8004c50 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005726:	f7fd f87b 	bl	8002820 <HAL_GetTick>
 800572a:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800572c:	e008      	b.n	8005740 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800572e:	f7fd f877 	bl	8002820 <HAL_GetTick>
 8005732:	4602      	mov	r2, r0
 8005734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	2b02      	cmp	r3, #2
 800573a:	d901      	bls.n	8005740 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	e12a      	b.n	8005996 <HAL_RCC_OscConfig+0x68a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005740:	4b97      	ldr	r3, [pc, #604]	; (80059a0 <HAL_RCC_OscConfig+0x694>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005748:	2b00      	cmp	r3, #0
 800574a:	d0f0      	beq.n	800572e <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	2b01      	cmp	r3, #1
 8005752:	d102      	bne.n	800575a <HAL_RCC_OscConfig+0x44e>
 8005754:	f7ff fb13 	bl	8004d7e <LL_RCC_LSE_Enable>
 8005758:	e00c      	b.n	8005774 <HAL_RCC_OscConfig+0x468>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	2b05      	cmp	r3, #5
 8005760:	d104      	bne.n	800576c <HAL_RCC_OscConfig+0x460>
 8005762:	f7ff fb2e 	bl	8004dc2 <LL_RCC_LSE_EnableBypass>
 8005766:	f7ff fb0a 	bl	8004d7e <LL_RCC_LSE_Enable>
 800576a:	e003      	b.n	8005774 <HAL_RCC_OscConfig+0x468>
 800576c:	f7ff fb18 	bl	8004da0 <LL_RCC_LSE_Disable>
 8005770:	f7ff fb38 	bl	8004de4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d014      	beq.n	80057a6 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800577c:	f7fd f850 	bl	8002820 <HAL_GetTick>
 8005780:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005782:	e00a      	b.n	800579a <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005784:	f7fd f84c 	bl	8002820 <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005792:	4293      	cmp	r3, r2
 8005794:	d901      	bls.n	800579a <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e0fd      	b.n	8005996 <HAL_RCC_OscConfig+0x68a>
      while (LL_RCC_LSE_IsReady() == 0U)
 800579a:	f7ff fb34 	bl	8004e06 <LL_RCC_LSE_IsReady>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d0ef      	beq.n	8005784 <HAL_RCC_OscConfig+0x478>
 80057a4:	e013      	b.n	80057ce <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057a6:	f7fd f83b 	bl	8002820 <HAL_GetTick>
 80057aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80057ac:	e00a      	b.n	80057c4 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057ae:	f7fd f837 	bl	8002820 <HAL_GetTick>
 80057b2:	4602      	mov	r2, r0
 80057b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80057bc:	4293      	cmp	r3, r2
 80057be:	d901      	bls.n	80057c4 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e0e8      	b.n	8005996 <HAL_RCC_OscConfig+0x68a>
      while (LL_RCC_LSE_IsReady() != 0U)
 80057c4:	f7ff fb1f 	bl	8004e06 <LL_RCC_LSE_IsReady>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1ef      	bne.n	80057ae <HAL_RCC_OscConfig+0x4a2>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	f000 80de 	beq.w	8005994 <HAL_RCC_OscConfig+0x688>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057d8:	f7ff fc27 	bl	800502a <LL_RCC_GetSysClkSource>
 80057dc:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80057de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	f040 80a6 	bne.w	800593c <HAL_RCC_OscConfig+0x630>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f003 0203 	and.w	r2, r3, #3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d123      	bne.n	8005846 <HAL_RCC_OscConfig+0x53a>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005808:	429a      	cmp	r2, r3
 800580a:	d11c      	bne.n	8005846 <HAL_RCC_OscConfig+0x53a>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	0a1b      	lsrs	r3, r3, #8
 8005810:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005818:	429a      	cmp	r2, r3
 800581a:	d114      	bne.n	8005846 <HAL_RCC_OscConfig+0x53a>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005826:	429a      	cmp	r2, r3
 8005828:	d10d      	bne.n	8005846 <HAL_RCC_OscConfig+0x53a>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005834:	429a      	cmp	r2, r3
 8005836:	d106      	bne.n	8005846 <HAL_RCC_OscConfig+0x53a>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005842:	429a      	cmp	r2, r3
 8005844:	d054      	beq.n	80058f0 <HAL_RCC_OscConfig+0x5e4>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	2b0c      	cmp	r3, #12
 800584a:	d04f      	beq.n	80058ec <HAL_RCC_OscConfig+0x5e0>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800584c:	f7ff fcb0 	bl	80051b0 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005850:	f7fc ffe6 	bl	8002820 <HAL_GetTick>
 8005854:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005856:	e008      	b.n	800586a <HAL_RCC_OscConfig+0x55e>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005858:	f7fc ffe2 	bl	8002820 <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	2b02      	cmp	r3, #2
 8005864:	d901      	bls.n	800586a <HAL_RCC_OscConfig+0x55e>
              {
                return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e095      	b.n	8005996 <HAL_RCC_OscConfig+0x68a>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800586a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d1ef      	bne.n	8005858 <HAL_RCC_OscConfig+0x54c>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005878:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800587c:	68da      	ldr	r2, [r3, #12]
 800587e:	4b49      	ldr	r3, [pc, #292]	; (80059a4 <HAL_RCC_OscConfig+0x698>)
 8005880:	4013      	ands	r3, r2
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800588a:	4311      	orrs	r1, r2
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005890:	0212      	lsls	r2, r2, #8
 8005892:	4311      	orrs	r1, r2
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005898:	4311      	orrs	r1, r2
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800589e:	4311      	orrs	r1, r2
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80058a4:	430a      	orrs	r2, r1
 80058a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058aa:	4313      	orrs	r3, r2
 80058ac:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80058ae:	f7ff fc70 	bl	8005192 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80058b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058c0:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80058c2:	f7fc ffad 	bl	8002820 <HAL_GetTick>
 80058c6:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058c8:	e008      	b.n	80058dc <HAL_RCC_OscConfig+0x5d0>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058ca:	f7fc ffa9 	bl	8002820 <HAL_GetTick>
 80058ce:	4602      	mov	r2, r0
 80058d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d901      	bls.n	80058dc <HAL_RCC_OscConfig+0x5d0>
              {
                return HAL_TIMEOUT;
 80058d8:	2303      	movs	r3, #3
 80058da:	e05c      	b.n	8005996 <HAL_RCC_OscConfig+0x68a>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d0ef      	beq.n	80058ca <HAL_RCC_OscConfig+0x5be>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058ea:	e053      	b.n	8005994 <HAL_RCC_OscConfig+0x688>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e052      	b.n	8005996 <HAL_RCC_OscConfig+0x68a>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d14a      	bne.n	8005994 <HAL_RCC_OscConfig+0x688>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80058fe:	f7ff fc48 	bl	8005192 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005902:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800590c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005910:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005912:	f7fc ff85 	bl	8002820 <HAL_GetTick>
 8005916:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005918:	e008      	b.n	800592c <HAL_RCC_OscConfig+0x620>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800591a:	f7fc ff81 	bl	8002820 <HAL_GetTick>
 800591e:	4602      	mov	r2, r0
 8005920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	2b02      	cmp	r3, #2
 8005926:	d901      	bls.n	800592c <HAL_RCC_OscConfig+0x620>
            {
              return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e034      	b.n	8005996 <HAL_RCC_OscConfig+0x68a>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800592c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d0ef      	beq.n	800591a <HAL_RCC_OscConfig+0x60e>
 800593a:	e02b      	b.n	8005994 <HAL_RCC_OscConfig+0x688>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	2b0c      	cmp	r3, #12
 8005940:	d026      	beq.n	8005990 <HAL_RCC_OscConfig+0x684>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005942:	f7ff fc35 	bl	80051b0 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8005946:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005950:	f023 0303 	bic.w	r3, r3, #3
 8005954:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
 8005956:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005960:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005964:	60d3      	str	r3, [r2, #12]
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005966:	f7fc ff5b 	bl	8002820 <HAL_GetTick>
 800596a:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800596c:	e008      	b.n	8005980 <HAL_RCC_OscConfig+0x674>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800596e:	f7fc ff57 	bl	8002820 <HAL_GetTick>
 8005972:	4602      	mov	r2, r0
 8005974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	2b02      	cmp	r3, #2
 800597a:	d901      	bls.n	8005980 <HAL_RCC_OscConfig+0x674>
          {
            return HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	e00a      	b.n	8005996 <HAL_RCC_OscConfig+0x68a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005980:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1ef      	bne.n	800596e <HAL_RCC_OscConfig+0x662>
 800598e:	e001      	b.n	8005994 <HAL_RCC_OscConfig+0x688>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e000      	b.n	8005996 <HAL_RCC_OscConfig+0x68a>
      }
    }
  }
  return HAL_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3734      	adds	r7, #52	; 0x34
 800599a:	46bd      	mov	sp, r7
 800599c:	bd90      	pop	{r4, r7, pc}
 800599e:	bf00      	nop
 80059a0:	58000400 	.word	0x58000400
 80059a4:	11c1808c 	.word	0x11c1808c

080059a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d101      	bne.n	80059bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e12d      	b.n	8005c18 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80059bc:	4b98      	ldr	r3, [pc, #608]	; (8005c20 <HAL_RCC_ClockConfig+0x278>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0307 	and.w	r3, r3, #7
 80059c4:	683a      	ldr	r2, [r7, #0]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d91b      	bls.n	8005a02 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059ca:	4b95      	ldr	r3, [pc, #596]	; (8005c20 <HAL_RCC_ClockConfig+0x278>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f023 0207 	bic.w	r2, r3, #7
 80059d2:	4993      	ldr	r1, [pc, #588]	; (8005c20 <HAL_RCC_ClockConfig+0x278>)
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059da:	f7fc ff21 	bl	8002820 <HAL_GetTick>
 80059de:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059e0:	e008      	b.n	80059f4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80059e2:	f7fc ff1d 	bl	8002820 <HAL_GetTick>
 80059e6:	4602      	mov	r2, r0
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	d901      	bls.n	80059f4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80059f0:	2303      	movs	r3, #3
 80059f2:	e111      	b.n	8005c18 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059f4:	4b8a      	ldr	r3, [pc, #552]	; (8005c20 <HAL_RCC_ClockConfig+0x278>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 0307 	and.w	r3, r3, #7
 80059fc:	683a      	ldr	r2, [r7, #0]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d1ef      	bne.n	80059e2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0302 	and.w	r3, r3, #2
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d016      	beq.n	8005a3c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	4618      	mov	r0, r3
 8005a14:	f7ff fb15 	bl	8005042 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005a18:	f7fc ff02 	bl	8002820 <HAL_GetTick>
 8005a1c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005a1e:	e008      	b.n	8005a32 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005a20:	f7fc fefe 	bl	8002820 <HAL_GetTick>
 8005a24:	4602      	mov	r2, r0
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d901      	bls.n	8005a32 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e0f2      	b.n	8005c18 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005a32:	f7ff fc0f 	bl	8005254 <LL_RCC_IsActiveFlag_HPRE>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d0f1      	beq.n	8005a20 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 0320 	and.w	r3, r3, #32
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d016      	beq.n	8005a76 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	695b      	ldr	r3, [r3, #20]
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f7ff fb0c 	bl	800506a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005a52:	f7fc fee5 	bl	8002820 <HAL_GetTick>
 8005a56:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005a58:	e008      	b.n	8005a6c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005a5a:	f7fc fee1 	bl	8002820 <HAL_GetTick>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	1ad3      	subs	r3, r2, r3
 8005a64:	2b02      	cmp	r3, #2
 8005a66:	d901      	bls.n	8005a6c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e0d5      	b.n	8005c18 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005a6c:	f7ff fc04 	bl	8005278 <LL_RCC_IsActiveFlag_C2HPRE>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d0f1      	beq.n	8005a5a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d016      	beq.n	8005ab0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	4618      	mov	r0, r3
 8005a88:	f7ff fb05 	bl	8005096 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005a8c:	f7fc fec8 	bl	8002820 <HAL_GetTick>
 8005a90:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005a92:	e008      	b.n	8005aa6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005a94:	f7fc fec4 	bl	8002820 <HAL_GetTick>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d901      	bls.n	8005aa6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	e0b8      	b.n	8005c18 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005aa6:	f7ff fbfa 	bl	800529e <LL_RCC_IsActiveFlag_SHDHPRE>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d0f1      	beq.n	8005a94 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 0304 	and.w	r3, r3, #4
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d016      	beq.n	8005aea <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f7ff faff 	bl	80050c4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005ac6:	f7fc feab 	bl	8002820 <HAL_GetTick>
 8005aca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005acc:	e008      	b.n	8005ae0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005ace:	f7fc fea7 	bl	8002820 <HAL_GetTick>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	2b02      	cmp	r3, #2
 8005ada:	d901      	bls.n	8005ae0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005adc:	2303      	movs	r3, #3
 8005ade:	e09b      	b.n	8005c18 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005ae0:	f7ff fbf0 	bl	80052c4 <LL_RCC_IsActiveFlag_PPRE1>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d0f1      	beq.n	8005ace <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 0308 	and.w	r3, r3, #8
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d017      	beq.n	8005b26 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	00db      	lsls	r3, r3, #3
 8005afc:	4618      	mov	r0, r3
 8005afe:	f7ff faf5 	bl	80050ec <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005b02:	f7fc fe8d 	bl	8002820 <HAL_GetTick>
 8005b06:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005b08:	e008      	b.n	8005b1c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005b0a:	f7fc fe89 	bl	8002820 <HAL_GetTick>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d901      	bls.n	8005b1c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	e07d      	b.n	8005c18 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005b1c:	f7ff fbe4 	bl	80052e8 <LL_RCC_IsActiveFlag_PPRE2>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d0f1      	beq.n	8005b0a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0301 	and.w	r3, r3, #1
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d043      	beq.n	8005bba <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	2b02      	cmp	r3, #2
 8005b38:	d106      	bne.n	8005b48 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005b3a:	f7ff f8c9 	bl	8004cd0 <LL_RCC_HSE_IsReady>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d11e      	bne.n	8005b82 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e067      	b.n	8005c18 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	2b03      	cmp	r3, #3
 8005b4e:	d106      	bne.n	8005b5e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005b50:	f7ff fb3d 	bl	80051ce <LL_RCC_PLL_IsReady>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d113      	bne.n	8005b82 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e05c      	b.n	8005c18 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d106      	bne.n	8005b74 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005b66:	f7ff f9fd 	bl	8004f64 <LL_RCC_MSI_IsReady>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d108      	bne.n	8005b82 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	e051      	b.n	8005c18 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005b74:	f7ff f8dc 	bl	8004d30 <LL_RCC_HSI_IsReady>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d101      	bne.n	8005b82 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e04a      	b.n	8005c18 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7ff fa3b 	bl	8005002 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b8c:	f7fc fe48 	bl	8002820 <HAL_GetTick>
 8005b90:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b92:	e00a      	b.n	8005baa <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b94:	f7fc fe44 	bl	8002820 <HAL_GetTick>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d901      	bls.n	8005baa <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	e036      	b.n	8005c18 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005baa:	f7ff fa3e 	bl	800502a <LL_RCC_GetSysClkSource>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d1ec      	bne.n	8005b94 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005bba:	4b19      	ldr	r3, [pc, #100]	; (8005c20 <HAL_RCC_ClockConfig+0x278>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 0307 	and.w	r3, r3, #7
 8005bc2:	683a      	ldr	r2, [r7, #0]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d21b      	bcs.n	8005c00 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bc8:	4b15      	ldr	r3, [pc, #84]	; (8005c20 <HAL_RCC_ClockConfig+0x278>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f023 0207 	bic.w	r2, r3, #7
 8005bd0:	4913      	ldr	r1, [pc, #76]	; (8005c20 <HAL_RCC_ClockConfig+0x278>)
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bd8:	f7fc fe22 	bl	8002820 <HAL_GetTick>
 8005bdc:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bde:	e008      	b.n	8005bf2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005be0:	f7fc fe1e 	bl	8002820 <HAL_GetTick>
 8005be4:	4602      	mov	r2, r0
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	1ad3      	subs	r3, r2, r3
 8005bea:	2b02      	cmp	r3, #2
 8005bec:	d901      	bls.n	8005bf2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	e012      	b.n	8005c18 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bf2:	4b0b      	ldr	r3, [pc, #44]	; (8005c20 <HAL_RCC_ClockConfig+0x278>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 0307 	and.w	r3, r3, #7
 8005bfa:	683a      	ldr	r2, [r7, #0]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d1ef      	bne.n	8005be0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005c00:	f000 f880 	bl	8005d04 <HAL_RCC_GetHCLKFreq>
 8005c04:	4603      	mov	r3, r0
 8005c06:	4a07      	ldr	r2, [pc, #28]	; (8005c24 <HAL_RCC_ClockConfig+0x27c>)
 8005c08:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005c0a:	f7fc fe15 	bl	8002838 <HAL_GetTickPrio>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	4618      	mov	r0, r3
 8005c12:	f7fc fbef 	bl	80023f4 <HAL_InitTick>
 8005c16:	4603      	mov	r3, r0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3710      	adds	r7, #16
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	58004000 	.word	0x58004000
 8005c24:	20000004 	.word	0x20000004

08005c28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c28:	b590      	push	{r4, r7, lr}
 8005c2a:	b085      	sub	sp, #20
 8005c2c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c2e:	f7ff f9fc 	bl	800502a <LL_RCC_GetSysClkSource>
 8005c32:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d10a      	bne.n	8005c50 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005c3a:	f7ff f9b8 	bl	8004fae <LL_RCC_MSI_GetRange>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	091b      	lsrs	r3, r3, #4
 8005c42:	f003 030f 	and.w	r3, r3, #15
 8005c46:	4a2b      	ldr	r2, [pc, #172]	; (8005cf4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c4c:	60fb      	str	r3, [r7, #12]
 8005c4e:	e04b      	b.n	8005ce8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2b04      	cmp	r3, #4
 8005c54:	d102      	bne.n	8005c5c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005c56:	4b28      	ldr	r3, [pc, #160]	; (8005cf8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005c58:	60fb      	str	r3, [r7, #12]
 8005c5a:	e045      	b.n	8005ce8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2b08      	cmp	r3, #8
 8005c60:	d10a      	bne.n	8005c78 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005c62:	f7ff f805 	bl	8004c70 <LL_RCC_HSE_IsEnabledDiv2>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d102      	bne.n	8005c72 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005c6c:	4b23      	ldr	r3, [pc, #140]	; (8005cfc <HAL_RCC_GetSysClockFreq+0xd4>)
 8005c6e:	60fb      	str	r3, [r7, #12]
 8005c70:	e03a      	b.n	8005ce8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005c72:	4b23      	ldr	r3, [pc, #140]	; (8005d00 <HAL_RCC_GetSysClockFreq+0xd8>)
 8005c74:	60fb      	str	r3, [r7, #12]
 8005c76:	e037      	b.n	8005ce8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005c78:	f7ff fae0 	bl	800523c <LL_RCC_PLL_GetMainSource>
 8005c7c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d003      	beq.n	8005c8c <HAL_RCC_GetSysClockFreq+0x64>
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	2b03      	cmp	r3, #3
 8005c88:	d003      	beq.n	8005c92 <HAL_RCC_GetSysClockFreq+0x6a>
 8005c8a:	e00d      	b.n	8005ca8 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005c8c:	4b1a      	ldr	r3, [pc, #104]	; (8005cf8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005c8e:	60bb      	str	r3, [r7, #8]
        break;
 8005c90:	e015      	b.n	8005cbe <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005c92:	f7fe ffed 	bl	8004c70 <LL_RCC_HSE_IsEnabledDiv2>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d102      	bne.n	8005ca2 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005c9c:	4b17      	ldr	r3, [pc, #92]	; (8005cfc <HAL_RCC_GetSysClockFreq+0xd4>)
 8005c9e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005ca0:	e00d      	b.n	8005cbe <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005ca2:	4b17      	ldr	r3, [pc, #92]	; (8005d00 <HAL_RCC_GetSysClockFreq+0xd8>)
 8005ca4:	60bb      	str	r3, [r7, #8]
        break;
 8005ca6:	e00a      	b.n	8005cbe <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005ca8:	f7ff f981 	bl	8004fae <LL_RCC_MSI_GetRange>
 8005cac:	4603      	mov	r3, r0
 8005cae:	091b      	lsrs	r3, r3, #4
 8005cb0:	f003 030f 	and.w	r3, r3, #15
 8005cb4:	4a0f      	ldr	r2, [pc, #60]	; (8005cf4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cba:	60bb      	str	r3, [r7, #8]
        break;
 8005cbc:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8005cbe:	f7ff fa98 	bl	80051f2 <LL_RCC_PLL_GetN>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	fb03 f402 	mul.w	r4, r3, r2
 8005cca:	f7ff faab 	bl	8005224 <LL_RCC_PLL_GetDivider>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	091b      	lsrs	r3, r3, #4
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	fbb4 f4f3 	udiv	r4, r4, r3
 8005cd8:	f7ff fa98 	bl	800520c <LL_RCC_PLL_GetR>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	0f5b      	lsrs	r3, r3, #29
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	fbb4 f3f3 	udiv	r3, r4, r3
 8005ce6:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3714      	adds	r7, #20
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd90      	pop	{r4, r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	0800b43c 	.word	0x0800b43c
 8005cf8:	00f42400 	.word	0x00f42400
 8005cfc:	003d0900 	.word	0x003d0900
 8005d00:	007a1200 	.word	0x007a1200

08005d04 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d04:	b598      	push	{r3, r4, r7, lr}
 8005d06:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005d08:	f7ff ff8e 	bl	8005c28 <HAL_RCC_GetSysClockFreq>
 8005d0c:	4604      	mov	r4, r0
 8005d0e:	f7ff fa01 	bl	8005114 <LL_RCC_GetAHBPrescaler>
 8005d12:	4603      	mov	r3, r0
 8005d14:	091b      	lsrs	r3, r3, #4
 8005d16:	f003 030f 	and.w	r3, r3, #15
 8005d1a:	4a03      	ldr	r2, [pc, #12]	; (8005d28 <HAL_RCC_GetHCLKFreq+0x24>)
 8005d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d20:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	bd98      	pop	{r3, r4, r7, pc}
 8005d28:	0800b3dc 	.word	0x0800b3dc

08005d2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d2c:	b598      	push	{r3, r4, r7, lr}
 8005d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005d30:	f7ff ffe8 	bl	8005d04 <HAL_RCC_GetHCLKFreq>
 8005d34:	4604      	mov	r4, r0
 8005d36:	f7ff fa14 	bl	8005162 <LL_RCC_GetAPB1Prescaler>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	0a1b      	lsrs	r3, r3, #8
 8005d3e:	f003 0307 	and.w	r3, r3, #7
 8005d42:	4a04      	ldr	r2, [pc, #16]	; (8005d54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d48:	f003 031f 	and.w	r3, r3, #31
 8005d4c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	bd98      	pop	{r3, r4, r7, pc}
 8005d54:	0800b41c 	.word	0x0800b41c

08005d58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d58:	b598      	push	{r3, r4, r7, lr}
 8005d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005d5c:	f7ff ffd2 	bl	8005d04 <HAL_RCC_GetHCLKFreq>
 8005d60:	4604      	mov	r4, r0
 8005d62:	f7ff fa0a 	bl	800517a <LL_RCC_GetAPB2Prescaler>
 8005d66:	4603      	mov	r3, r0
 8005d68:	0adb      	lsrs	r3, r3, #11
 8005d6a:	f003 0307 	and.w	r3, r3, #7
 8005d6e:	4a04      	ldr	r2, [pc, #16]	; (8005d80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d74:	f003 031f 	and.w	r3, r3, #31
 8005d78:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	bd98      	pop	{r3, r4, r7, pc}
 8005d80:	0800b41c 	.word	0x0800b41c

08005d84 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b082      	sub	sp, #8
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	226f      	movs	r2, #111	; 0x6f
 8005d92:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8005d94:	f7ff f949 	bl	800502a <LL_RCC_GetSysClkSource>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8005d9e:	f7ff f9b9 	bl	8005114 <LL_RCC_GetAHBPrescaler>
 8005da2:	4602      	mov	r2, r0
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8005da8:	f7ff f9db 	bl	8005162 <LL_RCC_GetAPB1Prescaler>
 8005dac:	4602      	mov	r2, r0
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8005db2:	f7ff f9e2 	bl	800517a <LL_RCC_GetAPB2Prescaler>
 8005db6:	4602      	mov	r2, r0
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8005dbc:	f7ff f9b6 	bl	800512c <LL_C2_RCC_GetAHBPrescaler>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8005dc6:	f7ff f9be 	bl	8005146 <LL_RCC_GetAHB4Prescaler>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005dd0:	4b04      	ldr	r3, [pc, #16]	; (8005de4 <HAL_RCC_GetClockConfig+0x60>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 0207 	and.w	r2, r3, #7
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	601a      	str	r2, [r3, #0]
}
 8005ddc:	bf00      	nop
 8005dde:	3708      	adds	r7, #8
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	58004000 	.word	0x58004000

08005de8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2bb0      	cmp	r3, #176	; 0xb0
 8005df4:	d903      	bls.n	8005dfe <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005df6:	4b14      	ldr	r3, [pc, #80]	; (8005e48 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8005df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dfa:	60fb      	str	r3, [r7, #12]
 8005dfc:	e007      	b.n	8005e0e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	091b      	lsrs	r3, r3, #4
 8005e02:	f003 030f 	and.w	r3, r3, #15
 8005e06:	4a10      	ldr	r2, [pc, #64]	; (8005e48 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8005e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e0c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005e0e:	f7ff f99a 	bl	8005146 <LL_RCC_GetAHB4Prescaler>
 8005e12:	4603      	mov	r3, r0
 8005e14:	091b      	lsrs	r3, r3, #4
 8005e16:	f003 030f 	and.w	r3, r3, #15
 8005e1a:	4a0c      	ldr	r2, [pc, #48]	; (8005e4c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e20:	68fa      	ldr	r2, [r7, #12]
 8005e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e26:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	4a09      	ldr	r2, [pc, #36]	; (8005e50 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e30:	0c9b      	lsrs	r3, r3, #18
 8005e32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005e36:	4618      	mov	r0, r3
 8005e38:	f000 f80c 	bl	8005e54 <RCC_SetFlashLatency>
 8005e3c:	4603      	mov	r3, r0
#endif
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3710      	adds	r7, #16
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	0800b43c 	.word	0x0800b43c
 8005e4c:	0800b3dc 	.word	0x0800b3dc
 8005e50:	431bde83 	.word	0x431bde83

08005e54 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005e54:	b590      	push	{r4, r7, lr}
 8005e56:	b08f      	sub	sp, #60	; 0x3c
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005e5e:	4b25      	ldr	r3, [pc, #148]	; (8005ef4 <RCC_SetFlashLatency+0xa0>)
 8005e60:	f107 041c 	add.w	r4, r7, #28
 8005e64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005e66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005e6a:	4b23      	ldr	r3, [pc, #140]	; (8005ef8 <RCC_SetFlashLatency+0xa4>)
 8005e6c:	f107 040c 	add.w	r4, r7, #12
 8005e70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005e72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005e76:	2300      	movs	r3, #0
 8005e78:	637b      	str	r3, [r7, #52]	; 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	633b      	str	r3, [r7, #48]	; 0x30
 8005e7e:	e015      	b.n	8005eac <RCC_SetFlashLatency+0x58>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005e88:	4413      	add	r3, r2
 8005e8a:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d808      	bhi.n	8005ea6 <RCC_SetFlashLatency+0x52>
    {
      latency = FLASH_LATENCY_RANGE[index];
 8005e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005e9c:	4413      	add	r3, r2
 8005e9e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005ea2:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8005ea4:	e005      	b.n	8005eb2 <RCC_SetFlashLatency+0x5e>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	633b      	str	r3, [r7, #48]	; 0x30
 8005eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eae:	2b03      	cmp	r3, #3
 8005eb0:	d9e6      	bls.n	8005e80 <RCC_SetFlashLatency+0x2c>
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8005eb2:	4b12      	ldr	r3, [pc, #72]	; (8005efc <RCC_SetFlashLatency+0xa8>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f023 0207 	bic.w	r2, r3, #7
 8005eba:	4910      	ldr	r1, [pc, #64]	; (8005efc <RCC_SetFlashLatency+0xa8>)
 8005ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005ec2:	f7fc fcad 	bl	8002820 <HAL_GetTick>
 8005ec6:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005ec8:	e008      	b.n	8005edc <RCC_SetFlashLatency+0x88>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005eca:	f7fc fca9 	bl	8002820 <HAL_GetTick>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	d901      	bls.n	8005edc <RCC_SetFlashLatency+0x88>
    {
      return HAL_TIMEOUT;
 8005ed8:	2303      	movs	r3, #3
 8005eda:	e007      	b.n	8005eec <RCC_SetFlashLatency+0x98>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005edc:	4b07      	ldr	r3, [pc, #28]	; (8005efc <RCC_SetFlashLatency+0xa8>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 0307 	and.w	r3, r3, #7
 8005ee4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d1ef      	bne.n	8005eca <RCC_SetFlashLatency+0x76>
    }
  }
  return HAL_OK;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	373c      	adds	r7, #60	; 0x3c
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd90      	pop	{r4, r7, pc}
 8005ef4:	0800ac8c 	.word	0x0800ac8c
 8005ef8:	0800ac9c 	.word	0x0800ac9c
 8005efc:	58004000 	.word	0x58004000

08005f00 <LL_RCC_LSE_IsEnabled>:
{
 8005f00:	b480      	push	{r7}
 8005f02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005f04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f0c:	f003 0301 	and.w	r3, r3, #1
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d101      	bne.n	8005f18 <LL_RCC_LSE_IsEnabled+0x18>
 8005f14:	2301      	movs	r3, #1
 8005f16:	e000      	b.n	8005f1a <LL_RCC_LSE_IsEnabled+0x1a>
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <LL_RCC_LSE_IsReady>:
{
 8005f24:	b480      	push	{r7}
 8005f26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005f28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f30:	f003 0302 	and.w	r3, r3, #2
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d101      	bne.n	8005f3c <LL_RCC_LSE_IsReady+0x18>
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e000      	b.n	8005f3e <LL_RCC_LSE_IsReady+0x1a>
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <LL_RCC_MSI_EnablePLLMode>:
{
 8005f48:	b480      	push	{r7}
 8005f4a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8005f4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f56:	f043 0304 	orr.w	r3, r3, #4
 8005f5a:	6013      	str	r3, [r2, #0]
}
 8005f5c:	bf00      	nop
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr

08005f66 <LL_RCC_SetRFWKPClockSource>:
{
 8005f66:	b480      	push	{r7}
 8005f68:	b083      	sub	sp, #12
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005f6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f76:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005f7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005f86:	bf00      	nop
 8005f88:	370c      	adds	r7, #12
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr

08005f92 <LL_RCC_SetSMPSClockSource>:
{
 8005f92:	b480      	push	{r7}
 8005f94:	b083      	sub	sp, #12
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005f9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa0:	f023 0203 	bic.w	r2, r3, #3
 8005fa4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005fae:	bf00      	nop
 8005fb0:	370c      	adds	r7, #12
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr

08005fba <LL_RCC_SetSMPSPrescaler>:
{
 8005fba:	b480      	push	{r7}
 8005fbc:	b083      	sub	sp, #12
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005fc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005fcc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005fd6:	bf00      	nop
 8005fd8:	370c      	adds	r7, #12
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr

08005fe2 <LL_RCC_SetUSARTClockSource>:
{
 8005fe2:	b480      	push	{r7}
 8005fe4:	b083      	sub	sp, #12
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005fea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ff2:	f023 0203 	bic.w	r2, r3, #3
 8005ff6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006002:	bf00      	nop
 8006004:	370c      	adds	r7, #12
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr

0800600e <LL_RCC_SetLPUARTClockSource>:
{
 800600e:	b480      	push	{r7}
 8006010:	b083      	sub	sp, #12
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800601a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800601e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006022:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4313      	orrs	r3, r2
 800602a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800602e:	bf00      	nop
 8006030:	370c      	adds	r7, #12
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr

0800603a <LL_RCC_SetI2CClockSource>:
{
 800603a:	b480      	push	{r7}
 800603c:	b083      	sub	sp, #12
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006042:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006046:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	091b      	lsrs	r3, r3, #4
 800604e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006052:	43db      	mvns	r3, r3
 8006054:	401a      	ands	r2, r3
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	011b      	lsls	r3, r3, #4
 800605a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800605e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006062:	4313      	orrs	r3, r2
 8006064:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006068:	bf00      	nop
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <LL_RCC_SetLPTIMClockSource>:
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800607c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006080:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	0c1b      	lsrs	r3, r3, #16
 8006088:	041b      	lsls	r3, r3, #16
 800608a:	43db      	mvns	r3, r3
 800608c:	401a      	ands	r2, r3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	041b      	lsls	r3, r3, #16
 8006092:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006096:	4313      	orrs	r3, r2
 8006098:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800609c:	bf00      	nop
 800609e:	370c      	adds	r7, #12
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <LL_RCC_SetRNGClockSource>:
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80060b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060b8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80060bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <LL_RCC_SetCLK48ClockSource>:
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80060dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060e4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80060e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80060f4:	bf00      	nop
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <LL_RCC_SetADCClockSource>:
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006108:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800610c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006110:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006114:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4313      	orrs	r3, r2
 800611c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006120:	bf00      	nop
 8006122:	370c      	adds	r7, #12
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <LL_RCC_SetRTCClockSource>:
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006134:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800613c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006140:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4313      	orrs	r3, r2
 8006148:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800614c:	bf00      	nop
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <LL_RCC_GetRTCClockSource>:
{
 8006158:	b480      	push	{r7}
 800615a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800615c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006164:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006168:	4618      	mov	r0, r3
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr

08006172 <LL_RCC_ForceBackupDomainReset>:
{
 8006172:	b480      	push	{r7}
 8006174:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006176:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800617a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800617e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006182:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006186:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800618a:	bf00      	nop
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006194:	b480      	push	{r7}
 8006196:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006198:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800619c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80061ac:	bf00      	nop
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr

080061b6 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061b6:	b580      	push	{r7, lr}
 80061b8:	b088      	sub	sp, #32
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80061be:	2300      	movs	r3, #0
 80061c0:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80061c2:	2300      	movs	r3, #0
 80061c4:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d046      	beq.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80061d2:	f7ff ffc1 	bl	8006158 <LL_RCC_GetRTCClockSource>
 80061d6:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6a1b      	ldr	r3, [r3, #32]
 80061dc:	69ba      	ldr	r2, [r7, #24]
 80061de:	429a      	cmp	r2, r3
 80061e0:	d03c      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80061e2:	f7fe fd35 	bl	8004c50 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d105      	bne.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a1b      	ldr	r3, [r3, #32]
 80061f0:	4618      	mov	r0, r3
 80061f2:	f7ff ff9b 	bl	800612c <LL_RCC_SetRTCClockSource>
 80061f6:	e02e      	b.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80061f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006200:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8006202:	f7ff ffb6 	bl	8006172 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8006206:	f7ff ffc5 	bl	8006194 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6a1b      	ldr	r3, [r3, #32]
 8006214:	4313      	orrs	r3, r2
 8006216:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8006218:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8006222:	f7ff fe6d 	bl	8005f00 <LL_RCC_LSE_IsEnabled>
 8006226:	4603      	mov	r3, r0
 8006228:	2b01      	cmp	r3, #1
 800622a:	d114      	bne.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800622c:	f7fc faf8 	bl	8002820 <HAL_GetTick>
 8006230:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8006232:	e00b      	b.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006234:	f7fc faf4 	bl	8002820 <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006242:	4293      	cmp	r3, r2
 8006244:	d902      	bls.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 8006246:	2303      	movs	r3, #3
 8006248:	77fb      	strb	r3, [r7, #31]
              break;
 800624a:	e004      	b.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 800624c:	f7ff fe6a 	bl	8005f24 <LL_RCC_LSE_IsReady>
 8006250:	4603      	mov	r3, r0
 8006252:	2b01      	cmp	r3, #1
 8006254:	d1ee      	bne.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8006256:	7ffb      	ldrb	r3, [r7, #31]
 8006258:	77bb      	strb	r3, [r7, #30]
 800625a:	e001      	b.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800625c:	7ffb      	ldrb	r3, [r7, #31]
 800625e:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 0301 	and.w	r3, r3, #1
 8006268:	2b00      	cmp	r3, #0
 800626a:	d004      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	4618      	mov	r0, r3
 8006272:	f7ff feb6 	bl	8005fe2 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f003 0302 	and.w	r3, r3, #2
 800627e:	2b00      	cmp	r3, #0
 8006280:	d004      	beq.n	800628c <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	4618      	mov	r0, r3
 8006288:	f7ff fec1 	bl	800600e <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 0310 	and.w	r3, r3, #16
 8006294:	2b00      	cmp	r3, #0
 8006296:	d004      	beq.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	691b      	ldr	r3, [r3, #16]
 800629c:	4618      	mov	r0, r3
 800629e:	f7ff fee9 	bl	8006074 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f003 0320 	and.w	r3, r3, #32
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d004      	beq.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	4618      	mov	r0, r3
 80062b4:	f7ff fede 	bl	8006074 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 0304 	and.w	r3, r3, #4
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d004      	beq.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	4618      	mov	r0, r3
 80062ca:	f7ff feb6 	bl	800603a <LL_RCC_SetI2CClockSource>
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d02b      	beq.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	699b      	ldr	r3, [r3, #24]
 80062de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062e2:	d008      	beq.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x140>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	699b      	ldr	r3, [r3, #24]
 80062e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062ec:	d003      	beq.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x140>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	699b      	ldr	r3, [r3, #24]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d105      	bne.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	699b      	ldr	r3, [r3, #24]
 80062fa:	4618      	mov	r0, r3
 80062fc:	f7ff fed4 	bl	80060a8 <LL_RCC_SetRNGClockSource>
 8006300:	e00a      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x162>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	699b      	ldr	r3, [r3, #24]
 8006306:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800630a:	60fb      	str	r3, [r7, #12]
 800630c:	2000      	movs	r0, #0
 800630e:	f7ff fecb 	bl	80060a8 <LL_RCC_SetRNGClockSource>
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	f7ff fede 	bl	80060d4 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	699b      	ldr	r3, [r3, #24]
 800631c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8006320:	d107      	bne.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006322:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800632c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006330:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800633a:	2b00      	cmp	r3, #0
 800633c:	d011      	beq.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	69db      	ldr	r3, [r3, #28]
 8006342:	4618      	mov	r0, r3
 8006344:	f7ff fedc 	bl	8006100 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	69db      	ldr	r3, [r3, #28]
 800634c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006350:	d107      	bne.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006352:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800635c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006360:	60d3      	str	r3, [r2, #12]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800636a:	2b00      	cmp	r3, #0
 800636c:	d004      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006372:	4618      	mov	r0, r3
 8006374:	f7ff fdf7 	bl	8005f66 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006380:	2b00      	cmp	r3, #0
 8006382:	d009      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006388:	4618      	mov	r0, r3
 800638a:	f7ff fe16 	bl	8005fba <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006392:	4618      	mov	r0, r3
 8006394:	f7ff fdfd 	bl	8005f92 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8006398:	7fbb      	ldrb	r3, [r7, #30]
}
 800639a:	4618      	mov	r0, r3
 800639c:	3720      	adds	r7, #32
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}

080063a2 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80063a2:	b580      	push	{r7, lr}
 80063a4:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 80063a6:	f7ff fdcf 	bl	8005f48 <LL_RCC_MSI_EnablePLLMode>
}
 80063aa:	bf00      	nop
 80063ac:	bd80      	pop	{r7, pc}

080063ae <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80063ae:	b580      	push	{r7, lr}
 80063b0:	b082      	sub	sp, #8
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d101      	bne.n	80063c0 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	e090      	b.n	80064e2 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d106      	bne.n	80063da <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f7fb ff7f 	bl	80022d8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2202      	movs	r2, #2
 80063de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	22ca      	movs	r2, #202	; 0xca
 80063e8:	625a      	str	r2, [r3, #36]	; 0x24
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2253      	movs	r2, #83	; 0x53
 80063f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 faba 	bl	800696c <RTC_EnterInitMode>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d009      	beq.n	8006412 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	22ff      	movs	r2, #255	; 0xff
 8006404:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2204      	movs	r2, #4
 800640a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e067      	b.n	80064e2 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	6812      	ldr	r2, [r2, #0]
 800641c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006420:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006424:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	6899      	ldr	r1, [r3, #8]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	685a      	ldr	r2, [r3, #4]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	691b      	ldr	r3, [r3, #16]
 8006434:	431a      	orrs	r2, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	699b      	ldr	r3, [r3, #24]
 800643a:	431a      	orrs	r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	430a      	orrs	r2, r1
 8006442:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	68d2      	ldr	r2, [r2, #12]
 800644c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	6919      	ldr	r1, [r3, #16]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	041a      	lsls	r2, r3, #16
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	430a      	orrs	r2, r1
 8006460:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68da      	ldr	r2, [r3, #12]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006470:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f022 0202 	bic.w	r2, r2, #2
 8006480:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	69da      	ldr	r2, [r3, #28]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	695b      	ldr	r3, [r3, #20]
 8006490:	431a      	orrs	r2, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	430a      	orrs	r2, r1
 8006498:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	f003 0320 	and.w	r3, r3, #32
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d113      	bne.n	80064d0 <HAL_RTC_Init+0x122>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 fa39 	bl	8006920 <HAL_RTC_WaitForSynchro>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00d      	beq.n	80064d0 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	22ff      	movs	r2, #255	; 0xff
 80064ba:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2204      	movs	r2, #4
 80064c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e008      	b.n	80064e2 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	22ff      	movs	r2, #255	; 0xff
 80064d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 80064e0:	2300      	movs	r3, #0
  }
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3708      	adds	r7, #8
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}

080064ea <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80064ea:	b590      	push	{r4, r7, lr}
 80064ec:	b087      	sub	sp, #28
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	60f8      	str	r0, [r7, #12]
 80064f2:	60b9      	str	r1, [r7, #8]
 80064f4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d101      	bne.n	8006504 <HAL_RTC_SetTime+0x1a>
 8006500:	2302      	movs	r3, #2
 8006502:	e0b2      	b.n	800666a <HAL_RTC_SetTime+0x180>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2202      	movs	r2, #2
 8006510:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d126      	bne.n	8006568 <HAL_RTC_SetTime+0x7e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006524:	2b00      	cmp	r3, #0
 8006526:	d102      	bne.n	800652e <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	2200      	movs	r2, #0
 800652c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	4618      	mov	r0, r3
 8006534:	f000 fa44 	bl	80069c0 <RTC_ByteToBcd2>
 8006538:	4603      	mov	r3, r0
 800653a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	785b      	ldrb	r3, [r3, #1]
 8006540:	4618      	mov	r0, r3
 8006542:	f000 fa3d 	bl	80069c0 <RTC_ByteToBcd2>
 8006546:	4603      	mov	r3, r0
 8006548:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800654a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	789b      	ldrb	r3, [r3, #2]
 8006550:	4618      	mov	r0, r3
 8006552:	f000 fa35 	bl	80069c0 <RTC_ByteToBcd2>
 8006556:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006558:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	78db      	ldrb	r3, [r3, #3]
 8006560:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006562:	4313      	orrs	r3, r2
 8006564:	617b      	str	r3, [r7, #20]
 8006566:	e018      	b.n	800659a <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006572:	2b00      	cmp	r3, #0
 8006574:	d102      	bne.n	800657c <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	2200      	movs	r2, #0
 800657a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	785b      	ldrb	r3, [r3, #1]
 8006586:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006588:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800658a:	68ba      	ldr	r2, [r7, #8]
 800658c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800658e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	78db      	ldrb	r3, [r3, #3]
 8006594:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006596:	4313      	orrs	r3, r2
 8006598:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	22ca      	movs	r2, #202	; 0xca
 80065a0:	625a      	str	r2, [r3, #36]	; 0x24
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2253      	movs	r2, #83	; 0x53
 80065a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	f000 f9de 	bl	800696c <RTC_EnterInitMode>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00d      	beq.n	80065d2 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	22ff      	movs	r2, #255	; 0xff
 80065bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2204      	movs	r2, #4
 80065c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e04b      	b.n	800666a <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80065dc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80065e0:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	689a      	ldr	r2, [r3, #8]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80065f0:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	6899      	ldr	r1, [r3, #8]
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	68da      	ldr	r2, [r3, #12]
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	431a      	orrs	r2, r3
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	430a      	orrs	r2, r1
 8006608:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	68da      	ldr	r2, [r3, #12]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006618:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	f003 0320 	and.w	r3, r3, #32
 8006624:	2b00      	cmp	r3, #0
 8006626:	d113      	bne.n	8006650 <HAL_RTC_SetTime+0x166>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006628:	68f8      	ldr	r0, [r7, #12]
 800662a:	f000 f979 	bl	8006920 <HAL_RTC_WaitForSynchro>
 800662e:	4603      	mov	r3, r0
 8006630:	2b00      	cmp	r3, #0
 8006632:	d00d      	beq.n	8006650 <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	22ff      	movs	r2, #255	; 0xff
 800663a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2204      	movs	r2, #4
 8006640:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2200      	movs	r2, #0
 8006648:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	e00c      	b.n	800666a <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	22ff      	movs	r2, #255	; 0xff
 8006656:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2201      	movs	r2, #1
 800665c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    __HAL_UNLOCK(hrtc);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2200      	movs	r2, #0
 8006664:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8006668:	2300      	movs	r3, #0
  }
}
 800666a:	4618      	mov	r0, r3
 800666c:	371c      	adds	r7, #28
 800666e:	46bd      	mov	sp, r7
 8006670:	bd90      	pop	{r4, r7, pc}

08006672 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006672:	b580      	push	{r7, lr}
 8006674:	b086      	sub	sp, #24
 8006676:	af00      	add	r7, sp, #0
 8006678:	60f8      	str	r0, [r7, #12]
 800667a:	60b9      	str	r1, [r7, #8]
 800667c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80066a0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80066a4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	0c1b      	lsrs	r3, r3, #16
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066b0:	b2da      	uxtb	r2, r3
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	0a1b      	lsrs	r3, r3, #8
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066c0:	b2da      	uxtb	r2, r3
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066ce:	b2da      	uxtb	r2, r3
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	0c1b      	lsrs	r3, r3, #16
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066de:	b2da      	uxtb	r2, r3
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d11a      	bne.n	8006720 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	4618      	mov	r0, r3
 80066f0:	f000 f986 	bl	8006a00 <RTC_Bcd2ToByte>
 80066f4:	4603      	mov	r3, r0
 80066f6:	461a      	mov	r2, r3
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	785b      	ldrb	r3, [r3, #1]
 8006700:	4618      	mov	r0, r3
 8006702:	f000 f97d 	bl	8006a00 <RTC_Bcd2ToByte>
 8006706:	4603      	mov	r3, r0
 8006708:	461a      	mov	r2, r3
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	789b      	ldrb	r3, [r3, #2]
 8006712:	4618      	mov	r0, r3
 8006714:	f000 f974 	bl	8006a00 <RTC_Bcd2ToByte>
 8006718:	4603      	mov	r3, r0
 800671a:	461a      	mov	r2, r3
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3718      	adds	r7, #24
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}

0800672a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800672a:	b590      	push	{r4, r7, lr}
 800672c:	b087      	sub	sp, #28
 800672e:	af00      	add	r7, sp, #0
 8006730:	60f8      	str	r0, [r7, #12]
 8006732:	60b9      	str	r1, [r7, #8]
 8006734:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f893 3020 	ldrb.w	r3, [r3, #32]
 800673c:	2b01      	cmp	r3, #1
 800673e:	d101      	bne.n	8006744 <HAL_RTC_SetDate+0x1a>
 8006740:	2302      	movs	r3, #2
 8006742:	e09c      	b.n	800687e <HAL_RTC_SetDate+0x154>
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2202      	movs	r2, #2
 8006750:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d10e      	bne.n	8006778 <HAL_RTC_SetDate+0x4e>
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	785b      	ldrb	r3, [r3, #1]
 800675e:	f003 0310 	and.w	r3, r3, #16
 8006762:	2b00      	cmp	r3, #0
 8006764:	d008      	beq.n	8006778 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	785b      	ldrb	r3, [r3, #1]
 800676a:	f023 0310 	bic.w	r3, r3, #16
 800676e:	b2db      	uxtb	r3, r3
 8006770:	330a      	adds	r3, #10
 8006772:	b2da      	uxtb	r2, r3
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d11c      	bne.n	80067b8 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	78db      	ldrb	r3, [r3, #3]
 8006782:	4618      	mov	r0, r3
 8006784:	f000 f91c 	bl	80069c0 <RTC_ByteToBcd2>
 8006788:	4603      	mov	r3, r0
 800678a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	785b      	ldrb	r3, [r3, #1]
 8006790:	4618      	mov	r0, r3
 8006792:	f000 f915 	bl	80069c0 <RTC_ByteToBcd2>
 8006796:	4603      	mov	r3, r0
 8006798:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800679a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	789b      	ldrb	r3, [r3, #2]
 80067a0:	4618      	mov	r0, r3
 80067a2:	f000 f90d 	bl	80069c0 <RTC_ByteToBcd2>
 80067a6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80067a8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80067b2:	4313      	orrs	r3, r2
 80067b4:	617b      	str	r3, [r7, #20]
 80067b6:	e00e      	b.n	80067d6 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	78db      	ldrb	r3, [r3, #3]
 80067bc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	785b      	ldrb	r3, [r3, #1]
 80067c2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80067c4:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80067c6:	68ba      	ldr	r2, [r7, #8]
 80067c8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80067ca:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80067d2:	4313      	orrs	r3, r2
 80067d4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	22ca      	movs	r2, #202	; 0xca
 80067dc:	625a      	str	r2, [r3, #36]	; 0x24
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	2253      	movs	r2, #83	; 0x53
 80067e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	f000 f8c0 	bl	800696c <RTC_EnterInitMode>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00d      	beq.n	800680e <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	22ff      	movs	r2, #255	; 0xff
 80067f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2204      	movs	r2, #4
 80067fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e037      	b.n	800687e <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006818:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800681c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68da      	ldr	r2, [r3, #12]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800682c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	f003 0320 	and.w	r3, r3, #32
 8006838:	2b00      	cmp	r3, #0
 800683a:	d113      	bne.n	8006864 <HAL_RTC_SetDate+0x13a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800683c:	68f8      	ldr	r0, [r7, #12]
 800683e:	f000 f86f 	bl	8006920 <HAL_RTC_WaitForSynchro>
 8006842:	4603      	mov	r3, r0
 8006844:	2b00      	cmp	r3, #0
 8006846:	d00d      	beq.n	8006864 <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	22ff      	movs	r2, #255	; 0xff
 800684e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2204      	movs	r2, #4
 8006854:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2200      	movs	r2, #0
 800685c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	e00c      	b.n	800687e <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	22ff      	movs	r2, #255	; 0xff
 800686a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2200      	movs	r2, #0
 8006878:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800687c:	2300      	movs	r3, #0
  }
}
 800687e:	4618      	mov	r0, r3
 8006880:	371c      	adds	r7, #28
 8006882:	46bd      	mov	sp, r7
 8006884:	bd90      	pop	{r4, r7, pc}

08006886 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006886:	b580      	push	{r7, lr}
 8006888:	b086      	sub	sp, #24
 800688a:	af00      	add	r7, sp, #0
 800688c:	60f8      	str	r0, [r7, #12]
 800688e:	60b9      	str	r1, [r7, #8]
 8006890:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800689c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80068a0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	0c1b      	lsrs	r3, r3, #16
 80068a6:	b2da      	uxtb	r2, r3
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	0a1b      	lsrs	r3, r3, #8
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	f003 031f 	and.w	r3, r3, #31
 80068b6:	b2da      	uxtb	r2, r3
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068c4:	b2da      	uxtb	r2, r3
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	0b5b      	lsrs	r3, r3, #13
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	f003 0307 	and.w	r3, r3, #7
 80068d4:	b2da      	uxtb	r2, r3
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d11a      	bne.n	8006916 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	78db      	ldrb	r3, [r3, #3]
 80068e4:	4618      	mov	r0, r3
 80068e6:	f000 f88b 	bl	8006a00 <RTC_Bcd2ToByte>
 80068ea:	4603      	mov	r3, r0
 80068ec:	461a      	mov	r2, r3
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	785b      	ldrb	r3, [r3, #1]
 80068f6:	4618      	mov	r0, r3
 80068f8:	f000 f882 	bl	8006a00 <RTC_Bcd2ToByte>
 80068fc:	4603      	mov	r3, r0
 80068fe:	461a      	mov	r2, r3
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	789b      	ldrb	r3, [r3, #2]
 8006908:	4618      	mov	r0, r3
 800690a:	f000 f879 	bl	8006a00 <RTC_Bcd2ToByte>
 800690e:	4603      	mov	r3, r0
 8006910:	461a      	mov	r2, r3
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006916:	2300      	movs	r3, #0
}
 8006918:	4618      	mov	r0, r3
 800691a:	3718      	adds	r7, #24
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	68da      	ldr	r2, [r3, #12]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006936:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006938:	f7fb ff72 	bl	8002820 <HAL_GetTick>
 800693c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800693e:	e009      	b.n	8006954 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006940:	f7fb ff6e 	bl	8002820 <HAL_GetTick>
 8006944:	4602      	mov	r2, r0
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	1ad3      	subs	r3, r2, r3
 800694a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800694e:	d901      	bls.n	8006954 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006950:	2303      	movs	r3, #3
 8006952:	e007      	b.n	8006964 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	f003 0320 	and.w	r3, r3, #32
 800695e:	2b00      	cmp	r3, #0
 8006960:	d0ee      	beq.n	8006940 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006962:	2300      	movs	r3, #0
}
 8006964:	4618      	mov	r0, r3
 8006966:	3710      	adds	r7, #16
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800697e:	2b00      	cmp	r3, #0
 8006980:	d119      	bne.n	80069b6 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f04f 32ff 	mov.w	r2, #4294967295
 800698a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800698c:	f7fb ff48 	bl	8002820 <HAL_GetTick>
 8006990:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006992:	e009      	b.n	80069a8 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006994:	f7fb ff44 	bl	8002820 <HAL_GetTick>
 8006998:	4602      	mov	r2, r0
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	1ad3      	subs	r3, r2, r3
 800699e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069a2:	d901      	bls.n	80069a8 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80069a4:	2303      	movs	r3, #3
 80069a6:	e007      	b.n	80069b8 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d0ee      	beq.n	8006994 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80069b6:	2300      	movs	r3, #0
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3710      	adds	r7, #16
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b085      	sub	sp, #20
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	4603      	mov	r3, r0
 80069c8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80069ca:	2300      	movs	r3, #0
 80069cc:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80069ce:	79fb      	ldrb	r3, [r7, #7]
 80069d0:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 80069d2:	e005      	b.n	80069e0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	3301      	adds	r3, #1
 80069d8:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80069da:	7afb      	ldrb	r3, [r7, #11]
 80069dc:	3b0a      	subs	r3, #10
 80069de:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 80069e0:	7afb      	ldrb	r3, [r7, #11]
 80069e2:	2b09      	cmp	r3, #9
 80069e4:	d8f6      	bhi.n	80069d4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	011b      	lsls	r3, r3, #4
 80069ec:	b2da      	uxtb	r2, r3
 80069ee:	7afb      	ldrb	r3, [r7, #11]
 80069f0:	4313      	orrs	r3, r2
 80069f2:	b2db      	uxtb	r3, r3
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3714      	adds	r7, #20
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b085      	sub	sp, #20
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	4603      	mov	r3, r0
 8006a08:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8006a0a:	79fb      	ldrb	r3, [r7, #7]
 8006a0c:	091b      	lsrs	r3, r3, #4
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	461a      	mov	r2, r3
 8006a12:	4613      	mov	r3, r2
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	4413      	add	r3, r2
 8006a18:	005b      	lsls	r3, r3, #1
 8006a1a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	b2da      	uxtb	r2, r3
 8006a20:	79fb      	ldrb	r3, [r7, #7]
 8006a22:	f003 030f 	and.w	r3, r3, #15
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	4413      	add	r3, r2
 8006a2a:	b2db      	uxtb	r3, r3
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3714      	adds	r7, #20
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b082      	sub	sp, #8
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d101      	bne.n	8006a4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	e049      	b.n	8006ade <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d106      	bne.n	8006a64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f7fb fc50 	bl	8002304 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2202      	movs	r2, #2
 8006a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	3304      	adds	r3, #4
 8006a74:	4619      	mov	r1, r3
 8006a76:	4610      	mov	r0, r2
 8006a78:	f000 fad8 	bl	800702c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006adc:	2300      	movs	r3, #0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3708      	adds	r7, #8
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
	...

08006ae8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b085      	sub	sp, #20
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d001      	beq.n	8006b00 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006afc:	2301      	movs	r3, #1
 8006afe:	e02e      	b.n	8006b5e <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2202      	movs	r2, #2
 8006b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a17      	ldr	r2, [pc, #92]	; (8006b6c <HAL_TIM_Base_Start+0x84>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d004      	beq.n	8006b1c <HAL_TIM_Base_Start+0x34>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b1a:	d115      	bne.n	8006b48 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	689a      	ldr	r2, [r3, #8]
 8006b22:	4b13      	ldr	r3, [pc, #76]	; (8006b70 <HAL_TIM_Base_Start+0x88>)
 8006b24:	4013      	ands	r3, r2
 8006b26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2b06      	cmp	r3, #6
 8006b2c:	d015      	beq.n	8006b5a <HAL_TIM_Base_Start+0x72>
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b34:	d011      	beq.n	8006b5a <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f042 0201 	orr.w	r2, r2, #1
 8006b44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b46:	e008      	b.n	8006b5a <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f042 0201 	orr.w	r2, r2, #1
 8006b56:	601a      	str	r2, [r3, #0]
 8006b58:	e000      	b.n	8006b5c <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b5a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3714      	adds	r7, #20
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr
 8006b6a:	bf00      	nop
 8006b6c:	40012c00 	.word	0x40012c00
 8006b70:	00010007 	.word	0x00010007

08006b74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b085      	sub	sp, #20
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d001      	beq.n	8006b8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e036      	b.n	8006bfa <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2202      	movs	r2, #2
 8006b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	68da      	ldr	r2, [r3, #12]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f042 0201 	orr.w	r2, r2, #1
 8006ba2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a17      	ldr	r2, [pc, #92]	; (8006c08 <HAL_TIM_Base_Start_IT+0x94>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d004      	beq.n	8006bb8 <HAL_TIM_Base_Start_IT+0x44>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bb6:	d115      	bne.n	8006be4 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	689a      	ldr	r2, [r3, #8]
 8006bbe:	4b13      	ldr	r3, [pc, #76]	; (8006c0c <HAL_TIM_Base_Start_IT+0x98>)
 8006bc0:	4013      	ands	r3, r2
 8006bc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2b06      	cmp	r3, #6
 8006bc8:	d015      	beq.n	8006bf6 <HAL_TIM_Base_Start_IT+0x82>
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bd0:	d011      	beq.n	8006bf6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f042 0201 	orr.w	r2, r2, #1
 8006be0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006be2:	e008      	b.n	8006bf6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f042 0201 	orr.w	r2, r2, #1
 8006bf2:	601a      	str	r2, [r3, #0]
 8006bf4:	e000      	b.n	8006bf8 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bf6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3714      	adds	r7, #20
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr
 8006c06:	bf00      	nop
 8006c08:	40012c00 	.word	0x40012c00
 8006c0c:	00010007 	.word	0x00010007

08006c10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b082      	sub	sp, #8
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	691b      	ldr	r3, [r3, #16]
 8006c1e:	f003 0302 	and.w	r3, r3, #2
 8006c22:	2b02      	cmp	r3, #2
 8006c24:	d122      	bne.n	8006c6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	f003 0302 	and.w	r3, r3, #2
 8006c30:	2b02      	cmp	r3, #2
 8006c32:	d11b      	bne.n	8006c6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f06f 0202 	mvn.w	r2, #2
 8006c3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2201      	movs	r2, #1
 8006c42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	699b      	ldr	r3, [r3, #24]
 8006c4a:	f003 0303 	and.w	r3, r3, #3
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d003      	beq.n	8006c5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 f9cb 	bl	8006fee <HAL_TIM_IC_CaptureCallback>
 8006c58:	e005      	b.n	8006c66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 f9bd 	bl	8006fda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 f9ce 	bl	8007002 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	f003 0304 	and.w	r3, r3, #4
 8006c76:	2b04      	cmp	r3, #4
 8006c78:	d122      	bne.n	8006cc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	f003 0304 	and.w	r3, r3, #4
 8006c84:	2b04      	cmp	r3, #4
 8006c86:	d11b      	bne.n	8006cc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f06f 0204 	mvn.w	r2, #4
 8006c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2202      	movs	r2, #2
 8006c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	699b      	ldr	r3, [r3, #24]
 8006c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d003      	beq.n	8006cae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 f9a1 	bl	8006fee <HAL_TIM_IC_CaptureCallback>
 8006cac:	e005      	b.n	8006cba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 f993 	bl	8006fda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 f9a4 	bl	8007002 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	f003 0308 	and.w	r3, r3, #8
 8006cca:	2b08      	cmp	r3, #8
 8006ccc:	d122      	bne.n	8006d14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	f003 0308 	and.w	r3, r3, #8
 8006cd8:	2b08      	cmp	r3, #8
 8006cda:	d11b      	bne.n	8006d14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f06f 0208 	mvn.w	r2, #8
 8006ce4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2204      	movs	r2, #4
 8006cea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	69db      	ldr	r3, [r3, #28]
 8006cf2:	f003 0303 	and.w	r3, r3, #3
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d003      	beq.n	8006d02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 f977 	bl	8006fee <HAL_TIM_IC_CaptureCallback>
 8006d00:	e005      	b.n	8006d0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 f969 	bl	8006fda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f000 f97a 	bl	8007002 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	691b      	ldr	r3, [r3, #16]
 8006d1a:	f003 0310 	and.w	r3, r3, #16
 8006d1e:	2b10      	cmp	r3, #16
 8006d20:	d122      	bne.n	8006d68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	f003 0310 	and.w	r3, r3, #16
 8006d2c:	2b10      	cmp	r3, #16
 8006d2e:	d11b      	bne.n	8006d68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f06f 0210 	mvn.w	r2, #16
 8006d38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2208      	movs	r2, #8
 8006d3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	69db      	ldr	r3, [r3, #28]
 8006d46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d003      	beq.n	8006d56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 f94d 	bl	8006fee <HAL_TIM_IC_CaptureCallback>
 8006d54:	e005      	b.n	8006d62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 f93f 	bl	8006fda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 f950 	bl	8007002 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	f003 0301 	and.w	r3, r3, #1
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d10e      	bne.n	8006d94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	f003 0301 	and.w	r3, r3, #1
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d107      	bne.n	8006d94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f06f 0201 	mvn.w	r2, #1
 8006d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f7fb f8d0 	bl	8001f34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d9e:	2b80      	cmp	r3, #128	; 0x80
 8006da0:	d10e      	bne.n	8006dc0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dac:	2b80      	cmp	r3, #128	; 0x80
 8006dae:	d107      	bne.n	8006dc0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 fa8c 	bl	80072d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dce:	d10e      	bne.n	8006dee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dda:	2b80      	cmp	r3, #128	; 0x80
 8006ddc:	d107      	bne.n	8006dee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006de6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 fa7f 	bl	80072ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	691b      	ldr	r3, [r3, #16]
 8006df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006df8:	2b40      	cmp	r3, #64	; 0x40
 8006dfa:	d10e      	bne.n	8006e1a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e06:	2b40      	cmp	r3, #64	; 0x40
 8006e08:	d107      	bne.n	8006e1a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006e12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f000 f8fe 	bl	8007016 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	691b      	ldr	r3, [r3, #16]
 8006e20:	f003 0320 	and.w	r3, r3, #32
 8006e24:	2b20      	cmp	r3, #32
 8006e26:	d10e      	bne.n	8006e46 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68db      	ldr	r3, [r3, #12]
 8006e2e:	f003 0320 	and.w	r3, r3, #32
 8006e32:	2b20      	cmp	r3, #32
 8006e34:	d107      	bne.n	8006e46 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f06f 0220 	mvn.w	r2, #32
 8006e3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 fa3f 	bl	80072c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e46:	bf00      	nop
 8006e48:	3708      	adds	r7, #8
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}

08006e4e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e4e:	b580      	push	{r7, lr}
 8006e50:	b084      	sub	sp, #16
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
 8006e56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d101      	bne.n	8006e66 <HAL_TIM_ConfigClockSource+0x18>
 8006e62:	2302      	movs	r3, #2
 8006e64:	e0b5      	b.n	8006fd2 <HAL_TIM_ConfigClockSource+0x184>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2202      	movs	r2, #2
 8006e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006e84:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006e88:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e90:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	68fa      	ldr	r2, [r7, #12]
 8006e98:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ea2:	d03e      	beq.n	8006f22 <HAL_TIM_ConfigClockSource+0xd4>
 8006ea4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ea8:	f200 8087 	bhi.w	8006fba <HAL_TIM_ConfigClockSource+0x16c>
 8006eac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eb0:	f000 8085 	beq.w	8006fbe <HAL_TIM_ConfigClockSource+0x170>
 8006eb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eb8:	d87f      	bhi.n	8006fba <HAL_TIM_ConfigClockSource+0x16c>
 8006eba:	2b70      	cmp	r3, #112	; 0x70
 8006ebc:	d01a      	beq.n	8006ef4 <HAL_TIM_ConfigClockSource+0xa6>
 8006ebe:	2b70      	cmp	r3, #112	; 0x70
 8006ec0:	d87b      	bhi.n	8006fba <HAL_TIM_ConfigClockSource+0x16c>
 8006ec2:	2b60      	cmp	r3, #96	; 0x60
 8006ec4:	d050      	beq.n	8006f68 <HAL_TIM_ConfigClockSource+0x11a>
 8006ec6:	2b60      	cmp	r3, #96	; 0x60
 8006ec8:	d877      	bhi.n	8006fba <HAL_TIM_ConfigClockSource+0x16c>
 8006eca:	2b50      	cmp	r3, #80	; 0x50
 8006ecc:	d03c      	beq.n	8006f48 <HAL_TIM_ConfigClockSource+0xfa>
 8006ece:	2b50      	cmp	r3, #80	; 0x50
 8006ed0:	d873      	bhi.n	8006fba <HAL_TIM_ConfigClockSource+0x16c>
 8006ed2:	2b40      	cmp	r3, #64	; 0x40
 8006ed4:	d058      	beq.n	8006f88 <HAL_TIM_ConfigClockSource+0x13a>
 8006ed6:	2b40      	cmp	r3, #64	; 0x40
 8006ed8:	d86f      	bhi.n	8006fba <HAL_TIM_ConfigClockSource+0x16c>
 8006eda:	2b30      	cmp	r3, #48	; 0x30
 8006edc:	d064      	beq.n	8006fa8 <HAL_TIM_ConfigClockSource+0x15a>
 8006ede:	2b30      	cmp	r3, #48	; 0x30
 8006ee0:	d86b      	bhi.n	8006fba <HAL_TIM_ConfigClockSource+0x16c>
 8006ee2:	2b20      	cmp	r3, #32
 8006ee4:	d060      	beq.n	8006fa8 <HAL_TIM_ConfigClockSource+0x15a>
 8006ee6:	2b20      	cmp	r3, #32
 8006ee8:	d867      	bhi.n	8006fba <HAL_TIM_ConfigClockSource+0x16c>
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d05c      	beq.n	8006fa8 <HAL_TIM_ConfigClockSource+0x15a>
 8006eee:	2b10      	cmp	r3, #16
 8006ef0:	d05a      	beq.n	8006fa8 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006ef2:	e062      	b.n	8006fba <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6818      	ldr	r0, [r3, #0]
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	6899      	ldr	r1, [r3, #8]
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	685a      	ldr	r2, [r3, #4]
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	68db      	ldr	r3, [r3, #12]
 8006f04:	f000 f95e 	bl	80071c4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006f16:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	68fa      	ldr	r2, [r7, #12]
 8006f1e:	609a      	str	r2, [r3, #8]
      break;
 8006f20:	e04e      	b.n	8006fc0 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6818      	ldr	r0, [r3, #0]
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	6899      	ldr	r1, [r3, #8]
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	685a      	ldr	r2, [r3, #4]
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	f000 f947 	bl	80071c4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	689a      	ldr	r2, [r3, #8]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f44:	609a      	str	r2, [r3, #8]
      break;
 8006f46:	e03b      	b.n	8006fc0 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6818      	ldr	r0, [r3, #0]
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	6859      	ldr	r1, [r3, #4]
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	68db      	ldr	r3, [r3, #12]
 8006f54:	461a      	mov	r2, r3
 8006f56:	f000 f8b9 	bl	80070cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	2150      	movs	r1, #80	; 0x50
 8006f60:	4618      	mov	r0, r3
 8006f62:	f000 f912 	bl	800718a <TIM_ITRx_SetConfig>
      break;
 8006f66:	e02b      	b.n	8006fc0 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6818      	ldr	r0, [r3, #0]
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	6859      	ldr	r1, [r3, #4]
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	461a      	mov	r2, r3
 8006f76:	f000 f8d8 	bl	800712a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	2160      	movs	r1, #96	; 0x60
 8006f80:	4618      	mov	r0, r3
 8006f82:	f000 f902 	bl	800718a <TIM_ITRx_SetConfig>
      break;
 8006f86:	e01b      	b.n	8006fc0 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6818      	ldr	r0, [r3, #0]
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	6859      	ldr	r1, [r3, #4]
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	461a      	mov	r2, r3
 8006f96:	f000 f899 	bl	80070cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	2140      	movs	r1, #64	; 0x40
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f000 f8f2 	bl	800718a <TIM_ITRx_SetConfig>
      break;
 8006fa6:	e00b      	b.n	8006fc0 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	4610      	mov	r0, r2
 8006fb4:	f000 f8e9 	bl	800718a <TIM_ITRx_SetConfig>
        break;
 8006fb8:	e002      	b.n	8006fc0 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8006fba:	bf00      	nop
 8006fbc:	e000      	b.n	8006fc0 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8006fbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006fd0:	2300      	movs	r3, #0
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3710      	adds	r7, #16
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}

08006fda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006fda:	b480      	push	{r7}
 8006fdc:	b083      	sub	sp, #12
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006fe2:	bf00      	nop
 8006fe4:	370c      	adds	r7, #12
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr

08006fee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006fee:	b480      	push	{r7}
 8006ff0:	b083      	sub	sp, #12
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ff6:	bf00      	nop
 8006ff8:	370c      	adds	r7, #12
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr

08007002 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007002:	b480      	push	{r7}
 8007004:	b083      	sub	sp, #12
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800700a:	bf00      	nop
 800700c:	370c      	adds	r7, #12
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr

08007016 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007016:	b480      	push	{r7}
 8007018:	b083      	sub	sp, #12
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800701e:	bf00      	nop
 8007020:	370c      	adds	r7, #12
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr
	...

0800702c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800702c:	b480      	push	{r7}
 800702e:	b085      	sub	sp, #20
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	4a22      	ldr	r2, [pc, #136]	; (80070c8 <TIM_Base_SetConfig+0x9c>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d003      	beq.n	800704c <TIM_Base_SetConfig+0x20>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800704a:	d108      	bne.n	800705e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007052:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	68fa      	ldr	r2, [r7, #12]
 800705a:	4313      	orrs	r3, r2
 800705c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a19      	ldr	r2, [pc, #100]	; (80070c8 <TIM_Base_SetConfig+0x9c>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d003      	beq.n	800706e <TIM_Base_SetConfig+0x42>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800706c:	d108      	bne.n	8007080 <TIM_Base_SetConfig+0x54>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007074:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	68fa      	ldr	r2, [r7, #12]
 800707c:	4313      	orrs	r3, r2
 800707e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	695b      	ldr	r3, [r3, #20]
 800708a:	4313      	orrs	r3, r2
 800708c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	68fa      	ldr	r2, [r7, #12]
 8007092:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	689a      	ldr	r2, [r3, #8]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	4a08      	ldr	r2, [pc, #32]	; (80070c8 <TIM_Base_SetConfig+0x9c>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d103      	bne.n	80070b4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	691a      	ldr	r2, [r3, #16]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	615a      	str	r2, [r3, #20]
}
 80070ba:	bf00      	nop
 80070bc:	3714      	adds	r7, #20
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr
 80070c6:	bf00      	nop
 80070c8:	40012c00 	.word	0x40012c00

080070cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b087      	sub	sp, #28
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	60b9      	str	r1, [r7, #8]
 80070d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6a1b      	ldr	r3, [r3, #32]
 80070dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	6a1b      	ldr	r3, [r3, #32]
 80070e2:	f023 0201 	bic.w	r2, r3, #1
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	699b      	ldr	r3, [r3, #24]
 80070ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	011b      	lsls	r3, r3, #4
 80070fc:	693a      	ldr	r2, [r7, #16]
 80070fe:	4313      	orrs	r3, r2
 8007100:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	f023 030a 	bic.w	r3, r3, #10
 8007108:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800710a:	697a      	ldr	r2, [r7, #20]
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	4313      	orrs	r3, r2
 8007110:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	693a      	ldr	r2, [r7, #16]
 8007116:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	697a      	ldr	r2, [r7, #20]
 800711c:	621a      	str	r2, [r3, #32]
}
 800711e:	bf00      	nop
 8007120:	371c      	adds	r7, #28
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr

0800712a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800712a:	b480      	push	{r7}
 800712c:	b087      	sub	sp, #28
 800712e:	af00      	add	r7, sp, #0
 8007130:	60f8      	str	r0, [r7, #12]
 8007132:	60b9      	str	r1, [r7, #8]
 8007134:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	6a1b      	ldr	r3, [r3, #32]
 800713a:	f023 0210 	bic.w	r2, r3, #16
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	699b      	ldr	r3, [r3, #24]
 8007146:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6a1b      	ldr	r3, [r3, #32]
 800714c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007154:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	031b      	lsls	r3, r3, #12
 800715a:	697a      	ldr	r2, [r7, #20]
 800715c:	4313      	orrs	r3, r2
 800715e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007166:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	011b      	lsls	r3, r3, #4
 800716c:	693a      	ldr	r2, [r7, #16]
 800716e:	4313      	orrs	r3, r2
 8007170:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	697a      	ldr	r2, [r7, #20]
 8007176:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	693a      	ldr	r2, [r7, #16]
 800717c:	621a      	str	r2, [r3, #32]
}
 800717e:	bf00      	nop
 8007180:	371c      	adds	r7, #28
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr

0800718a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800718a:	b480      	push	{r7}
 800718c:	b085      	sub	sp, #20
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
 8007192:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80071a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80071a6:	683a      	ldr	r2, [r7, #0]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	f043 0307 	orr.w	r3, r3, #7
 80071b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	609a      	str	r2, [r3, #8]
}
 80071b8:	bf00      	nop
 80071ba:	3714      	adds	r7, #20
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr

080071c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b087      	sub	sp, #28
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	607a      	str	r2, [r7, #4]
 80071d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80071de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	021a      	lsls	r2, r3, #8
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	431a      	orrs	r2, r3
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	697a      	ldr	r2, [r7, #20]
 80071ee:	4313      	orrs	r3, r2
 80071f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	697a      	ldr	r2, [r7, #20]
 80071f6:	609a      	str	r2, [r3, #8]
}
 80071f8:	bf00      	nop
 80071fa:	371c      	adds	r7, #28
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007204:	b480      	push	{r7}
 8007206:	b085      	sub	sp, #20
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007214:	2b01      	cmp	r3, #1
 8007216:	d101      	bne.n	800721c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007218:	2302      	movs	r3, #2
 800721a:	e04a      	b.n	80072b2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2202      	movs	r2, #2
 8007228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a1f      	ldr	r2, [pc, #124]	; (80072c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d108      	bne.n	8007258 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800724c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	68fa      	ldr	r2, [r7, #12]
 8007254:	4313      	orrs	r3, r2
 8007256:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800725e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	68fa      	ldr	r2, [r7, #12]
 8007266:	4313      	orrs	r3, r2
 8007268:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a12      	ldr	r2, [pc, #72]	; (80072c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d004      	beq.n	8007286 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007284:	d10c      	bne.n	80072a0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800728c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	68ba      	ldr	r2, [r7, #8]
 8007294:	4313      	orrs	r3, r2
 8007296:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	68ba      	ldr	r2, [r7, #8]
 800729e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2201      	movs	r2, #1
 80072a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2200      	movs	r2, #0
 80072ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072b0:	2300      	movs	r3, #0
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3714      	adds	r7, #20
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr
 80072be:	bf00      	nop
 80072c0:	40012c00 	.word	0x40012c00

080072c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b083      	sub	sp, #12
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80072cc:	bf00      	nop
 80072ce:	370c      	adds	r7, #12
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr

080072d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80072e0:	bf00      	nop
 80072e2:	370c      	adds	r7, #12
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr

080072ec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80072f4:	bf00      	nop
 80072f6:	370c      	adds	r7, #12
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <LL_RCC_GetUSARTClockSource>:
{
 8007300:	b480      	push	{r7}
 8007302:	b083      	sub	sp, #12
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8007308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800730c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	4013      	ands	r3, r2
}
 8007314:	4618      	mov	r0, r3
 8007316:	370c      	adds	r7, #12
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <LL_RCC_GetLPUARTClockSource>:
{
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800732c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	4013      	ands	r3, r2
}
 8007334:	4618      	mov	r0, r3
 8007336:	370c      	adds	r7, #12
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b082      	sub	sp, #8
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d101      	bne.n	8007352 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	e042      	b.n	80073d8 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007358:	2b00      	cmp	r3, #0
 800735a:	d106      	bne.n	800736a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f7fa ffe5 	bl	8002334 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2224      	movs	r2, #36	; 0x24
 800736e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f022 0201 	bic.w	r2, r2, #1
 8007380:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 f8c2 	bl	800750c <UART_SetConfig>
 8007388:	4603      	mov	r3, r0
 800738a:	2b01      	cmp	r3, #1
 800738c:	d101      	bne.n	8007392 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	e022      	b.n	80073d8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007396:	2b00      	cmp	r3, #0
 8007398:	d002      	beq.n	80073a0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 fabc 	bl	8007918 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	685a      	ldr	r2, [r3, #4]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80073ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	689a      	ldr	r2, [r3, #8]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80073be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	681a      	ldr	r2, [r3, #0]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f042 0201 	orr.w	r2, r2, #1
 80073ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 fb43 	bl	8007a5c <UART_CheckIdleState>
 80073d6:	4603      	mov	r3, r0
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3708      	adds	r7, #8
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b08a      	sub	sp, #40	; 0x28
 80073e4:	af02      	add	r7, sp, #8
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	603b      	str	r3, [r7, #0]
 80073ec:	4613      	mov	r3, r2
 80073ee:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073f6:	2b20      	cmp	r3, #32
 80073f8:	f040 8083 	bne.w	8007502 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d002      	beq.n	8007408 <HAL_UART_Transmit+0x28>
 8007402:	88fb      	ldrh	r3, [r7, #6]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d101      	bne.n	800740c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	e07b      	b.n	8007504 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007412:	2b01      	cmp	r3, #1
 8007414:	d101      	bne.n	800741a <HAL_UART_Transmit+0x3a>
 8007416:	2302      	movs	r3, #2
 8007418:	e074      	b.n	8007504 <HAL_UART_Transmit+0x124>
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2201      	movs	r2, #1
 800741e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2200      	movs	r2, #0
 8007426:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2221      	movs	r2, #33	; 0x21
 800742e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007432:	f7fb f9f5 	bl	8002820 <HAL_GetTick>
 8007436:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	88fa      	ldrh	r2, [r7, #6]
 800743c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	88fa      	ldrh	r2, [r7, #6]
 8007444:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007450:	d108      	bne.n	8007464 <HAL_UART_Transmit+0x84>
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	691b      	ldr	r3, [r3, #16]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d104      	bne.n	8007464 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800745a:	2300      	movs	r3, #0
 800745c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	61bb      	str	r3, [r7, #24]
 8007462:	e003      	b.n	800746c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007468:	2300      	movs	r3, #0
 800746a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2200      	movs	r2, #0
 8007470:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007474:	e02c      	b.n	80074d0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	9300      	str	r3, [sp, #0]
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	2200      	movs	r2, #0
 800747e:	2180      	movs	r1, #128	; 0x80
 8007480:	68f8      	ldr	r0, [r7, #12]
 8007482:	f000 fb36 	bl	8007af2 <UART_WaitOnFlagUntilTimeout>
 8007486:	4603      	mov	r3, r0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d001      	beq.n	8007490 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800748c:	2303      	movs	r3, #3
 800748e:	e039      	b.n	8007504 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d10b      	bne.n	80074ae <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007496:	69bb      	ldr	r3, [r7, #24]
 8007498:	881b      	ldrh	r3, [r3, #0]
 800749a:	461a      	mov	r2, r3
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074a4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80074a6:	69bb      	ldr	r3, [r7, #24]
 80074a8:	3302      	adds	r3, #2
 80074aa:	61bb      	str	r3, [r7, #24]
 80074ac:	e007      	b.n	80074be <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80074ae:	69fb      	ldr	r3, [r7, #28]
 80074b0:	781a      	ldrb	r2, [r3, #0]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	3301      	adds	r3, #1
 80074bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	3b01      	subs	r3, #1
 80074c8:	b29a      	uxth	r2, r3
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d1cc      	bne.n	8007476 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	9300      	str	r3, [sp, #0]
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	2200      	movs	r2, #0
 80074e4:	2140      	movs	r1, #64	; 0x40
 80074e6:	68f8      	ldr	r0, [r7, #12]
 80074e8:	f000 fb03 	bl	8007af2 <UART_WaitOnFlagUntilTimeout>
 80074ec:	4603      	mov	r3, r0
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d001      	beq.n	80074f6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80074f2:	2303      	movs	r3, #3
 80074f4:	e006      	b.n	8007504 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2220      	movs	r2, #32
 80074fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80074fe:	2300      	movs	r3, #0
 8007500:	e000      	b.n	8007504 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007502:	2302      	movs	r3, #2
  }
}
 8007504:	4618      	mov	r0, r3
 8007506:	3720      	adds	r7, #32
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800750c:	b5b0      	push	{r4, r5, r7, lr}
 800750e:	b088      	sub	sp, #32
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007514:	2300      	movs	r3, #0
 8007516:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	689a      	ldr	r2, [r3, #8]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	691b      	ldr	r3, [r3, #16]
 8007520:	431a      	orrs	r2, r3
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	695b      	ldr	r3, [r3, #20]
 8007526:	431a      	orrs	r2, r3
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	69db      	ldr	r3, [r3, #28]
 800752c:	4313      	orrs	r3, r2
 800752e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	4ba3      	ldr	r3, [pc, #652]	; (80077c4 <UART_SetConfig+0x2b8>)
 8007538:	4013      	ands	r3, r2
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	6812      	ldr	r2, [r2, #0]
 800753e:	69f9      	ldr	r1, [r7, #28]
 8007540:	430b      	orrs	r3, r1
 8007542:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	68da      	ldr	r2, [r3, #12]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	430a      	orrs	r2, r1
 8007558:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	699b      	ldr	r3, [r3, #24]
 800755e:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a98      	ldr	r2, [pc, #608]	; (80077c8 <UART_SetConfig+0x2bc>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d004      	beq.n	8007574 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6a1b      	ldr	r3, [r3, #32]
 800756e:	69fa      	ldr	r2, [r7, #28]
 8007570:	4313      	orrs	r3, r2
 8007572:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800757e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	6812      	ldr	r2, [r2, #0]
 8007586:	69f9      	ldr	r1, [r7, #28]
 8007588:	430b      	orrs	r3, r1
 800758a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007592:	f023 010f 	bic.w	r1, r3, #15
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	430a      	orrs	r2, r1
 80075a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a89      	ldr	r2, [pc, #548]	; (80077cc <UART_SetConfig+0x2c0>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d120      	bne.n	80075ee <UART_SetConfig+0xe2>
 80075ac:	2003      	movs	r0, #3
 80075ae:	f7ff fea7 	bl	8007300 <LL_RCC_GetUSARTClockSource>
 80075b2:	4603      	mov	r3, r0
 80075b4:	2b03      	cmp	r3, #3
 80075b6:	d817      	bhi.n	80075e8 <UART_SetConfig+0xdc>
 80075b8:	a201      	add	r2, pc, #4	; (adr r2, 80075c0 <UART_SetConfig+0xb4>)
 80075ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075be:	bf00      	nop
 80075c0:	080075d1 	.word	0x080075d1
 80075c4:	080075dd 	.word	0x080075dd
 80075c8:	080075d7 	.word	0x080075d7
 80075cc:	080075e3 	.word	0x080075e3
 80075d0:	2301      	movs	r3, #1
 80075d2:	76fb      	strb	r3, [r7, #27]
 80075d4:	e038      	b.n	8007648 <UART_SetConfig+0x13c>
 80075d6:	2302      	movs	r3, #2
 80075d8:	76fb      	strb	r3, [r7, #27]
 80075da:	e035      	b.n	8007648 <UART_SetConfig+0x13c>
 80075dc:	2304      	movs	r3, #4
 80075de:	76fb      	strb	r3, [r7, #27]
 80075e0:	e032      	b.n	8007648 <UART_SetConfig+0x13c>
 80075e2:	2308      	movs	r3, #8
 80075e4:	76fb      	strb	r3, [r7, #27]
 80075e6:	e02f      	b.n	8007648 <UART_SetConfig+0x13c>
 80075e8:	2310      	movs	r3, #16
 80075ea:	76fb      	strb	r3, [r7, #27]
 80075ec:	e02c      	b.n	8007648 <UART_SetConfig+0x13c>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a75      	ldr	r2, [pc, #468]	; (80077c8 <UART_SetConfig+0x2bc>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d125      	bne.n	8007644 <UART_SetConfig+0x138>
 80075f8:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80075fc:	f7ff fe90 	bl	8007320 <LL_RCC_GetLPUARTClockSource>
 8007600:	4603      	mov	r3, r0
 8007602:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007606:	d017      	beq.n	8007638 <UART_SetConfig+0x12c>
 8007608:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800760c:	d817      	bhi.n	800763e <UART_SetConfig+0x132>
 800760e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007612:	d00b      	beq.n	800762c <UART_SetConfig+0x120>
 8007614:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007618:	d811      	bhi.n	800763e <UART_SetConfig+0x132>
 800761a:	2b00      	cmp	r3, #0
 800761c:	d003      	beq.n	8007626 <UART_SetConfig+0x11a>
 800761e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007622:	d006      	beq.n	8007632 <UART_SetConfig+0x126>
 8007624:	e00b      	b.n	800763e <UART_SetConfig+0x132>
 8007626:	2300      	movs	r3, #0
 8007628:	76fb      	strb	r3, [r7, #27]
 800762a:	e00d      	b.n	8007648 <UART_SetConfig+0x13c>
 800762c:	2302      	movs	r3, #2
 800762e:	76fb      	strb	r3, [r7, #27]
 8007630:	e00a      	b.n	8007648 <UART_SetConfig+0x13c>
 8007632:	2304      	movs	r3, #4
 8007634:	76fb      	strb	r3, [r7, #27]
 8007636:	e007      	b.n	8007648 <UART_SetConfig+0x13c>
 8007638:	2308      	movs	r3, #8
 800763a:	76fb      	strb	r3, [r7, #27]
 800763c:	e004      	b.n	8007648 <UART_SetConfig+0x13c>
 800763e:	2310      	movs	r3, #16
 8007640:	76fb      	strb	r3, [r7, #27]
 8007642:	e001      	b.n	8007648 <UART_SetConfig+0x13c>
 8007644:	2310      	movs	r3, #16
 8007646:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a5e      	ldr	r2, [pc, #376]	; (80077c8 <UART_SetConfig+0x2bc>)
 800764e:	4293      	cmp	r3, r2
 8007650:	f040 808b 	bne.w	800776a <UART_SetConfig+0x25e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007654:	7efb      	ldrb	r3, [r7, #27]
 8007656:	2b08      	cmp	r3, #8
 8007658:	d823      	bhi.n	80076a2 <UART_SetConfig+0x196>
 800765a:	a201      	add	r2, pc, #4	; (adr r2, 8007660 <UART_SetConfig+0x154>)
 800765c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007660:	08007685 	.word	0x08007685
 8007664:	080076a3 	.word	0x080076a3
 8007668:	0800768d 	.word	0x0800768d
 800766c:	080076a3 	.word	0x080076a3
 8007670:	08007693 	.word	0x08007693
 8007674:	080076a3 	.word	0x080076a3
 8007678:	080076a3 	.word	0x080076a3
 800767c:	080076a3 	.word	0x080076a3
 8007680:	0800769b 	.word	0x0800769b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007684:	f7fe fb52 	bl	8005d2c <HAL_RCC_GetPCLK1Freq>
 8007688:	6178      	str	r0, [r7, #20]
        break;
 800768a:	e00f      	b.n	80076ac <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800768c:	4b50      	ldr	r3, [pc, #320]	; (80077d0 <UART_SetConfig+0x2c4>)
 800768e:	617b      	str	r3, [r7, #20]
        break;
 8007690:	e00c      	b.n	80076ac <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007692:	f7fe fac9 	bl	8005c28 <HAL_RCC_GetSysClockFreq>
 8007696:	6178      	str	r0, [r7, #20]
        break;
 8007698:	e008      	b.n	80076ac <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800769a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800769e:	617b      	str	r3, [r7, #20]
        break;
 80076a0:	e004      	b.n	80076ac <UART_SetConfig+0x1a0>
      default:
        pclk = 0U;
 80076a2:	2300      	movs	r3, #0
 80076a4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	76bb      	strb	r3, [r7, #26]
        break;
 80076aa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	f000 811a 	beq.w	80078e8 <UART_SetConfig+0x3dc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b8:	4a46      	ldr	r2, [pc, #280]	; (80077d4 <UART_SetConfig+0x2c8>)
 80076ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076be:	461a      	mov	r2, r3
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80076c6:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	685a      	ldr	r2, [r3, #4]
 80076cc:	4613      	mov	r3, r2
 80076ce:	005b      	lsls	r3, r3, #1
 80076d0:	4413      	add	r3, r2
 80076d2:	68ba      	ldr	r2, [r7, #8]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d305      	bcc.n	80076e4 <UART_SetConfig+0x1d8>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80076de:	68ba      	ldr	r2, [r7, #8]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d902      	bls.n	80076ea <UART_SetConfig+0x1de>
      {
        ret = HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	76bb      	strb	r3, [r7, #26]
 80076e8:	e0fe      	b.n	80078e8 <UART_SetConfig+0x3dc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	4618      	mov	r0, r3
 80076ee:	f04f 0100 	mov.w	r1, #0
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f6:	4a37      	ldr	r2, [pc, #220]	; (80077d4 <UART_SetConfig+0x2c8>)
 80076f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076fc:	b29a      	uxth	r2, r3
 80076fe:	f04f 0300 	mov.w	r3, #0
 8007702:	f7f9 fa79 	bl	8000bf8 <__aeabi_uldivmod>
 8007706:	4602      	mov	r2, r0
 8007708:	460b      	mov	r3, r1
 800770a:	4610      	mov	r0, r2
 800770c:	4619      	mov	r1, r3
 800770e:	f04f 0200 	mov.w	r2, #0
 8007712:	f04f 0300 	mov.w	r3, #0
 8007716:	020b      	lsls	r3, r1, #8
 8007718:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800771c:	0202      	lsls	r2, r0, #8
 800771e:	6879      	ldr	r1, [r7, #4]
 8007720:	6849      	ldr	r1, [r1, #4]
 8007722:	0849      	lsrs	r1, r1, #1
 8007724:	4608      	mov	r0, r1
 8007726:	f04f 0100 	mov.w	r1, #0
 800772a:	1814      	adds	r4, r2, r0
 800772c:	eb43 0501 	adc.w	r5, r3, r1
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	461a      	mov	r2, r3
 8007736:	f04f 0300 	mov.w	r3, #0
 800773a:	4620      	mov	r0, r4
 800773c:	4629      	mov	r1, r5
 800773e:	f7f9 fa5b 	bl	8000bf8 <__aeabi_uldivmod>
 8007742:	4602      	mov	r2, r0
 8007744:	460b      	mov	r3, r1
 8007746:	4613      	mov	r3, r2
 8007748:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007750:	d308      	bcc.n	8007764 <UART_SetConfig+0x258>
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007758:	d204      	bcs.n	8007764 <UART_SetConfig+0x258>
        {
          huart->Instance->BRR = usartdiv;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	693a      	ldr	r2, [r7, #16]
 8007760:	60da      	str	r2, [r3, #12]
 8007762:	e0c1      	b.n	80078e8 <UART_SetConfig+0x3dc>
        }
        else
        {
          ret = HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	76bb      	strb	r3, [r7, #26]
 8007768:	e0be      	b.n	80078e8 <UART_SetConfig+0x3dc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	69db      	ldr	r3, [r3, #28]
 800776e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007772:	d16a      	bne.n	800784a <UART_SetConfig+0x33e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8007774:	7efb      	ldrb	r3, [r7, #27]
 8007776:	3b01      	subs	r3, #1
 8007778:	2b07      	cmp	r3, #7
 800777a:	d82d      	bhi.n	80077d8 <UART_SetConfig+0x2cc>
 800777c:	a201      	add	r2, pc, #4	; (adr r2, 8007784 <UART_SetConfig+0x278>)
 800777e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007782:	bf00      	nop
 8007784:	080077a5 	.word	0x080077a5
 8007788:	080077ad 	.word	0x080077ad
 800778c:	080077d9 	.word	0x080077d9
 8007790:	080077b3 	.word	0x080077b3
 8007794:	080077d9 	.word	0x080077d9
 8007798:	080077d9 	.word	0x080077d9
 800779c:	080077d9 	.word	0x080077d9
 80077a0:	080077bb 	.word	0x080077bb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077a4:	f7fe fad8 	bl	8005d58 <HAL_RCC_GetPCLK2Freq>
 80077a8:	6178      	str	r0, [r7, #20]
        break;
 80077aa:	e01a      	b.n	80077e2 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077ac:	4b08      	ldr	r3, [pc, #32]	; (80077d0 <UART_SetConfig+0x2c4>)
 80077ae:	617b      	str	r3, [r7, #20]
        break;
 80077b0:	e017      	b.n	80077e2 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077b2:	f7fe fa39 	bl	8005c28 <HAL_RCC_GetSysClockFreq>
 80077b6:	6178      	str	r0, [r7, #20]
        break;
 80077b8:	e013      	b.n	80077e2 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077be:	617b      	str	r3, [r7, #20]
        break;
 80077c0:	e00f      	b.n	80077e2 <UART_SetConfig+0x2d6>
 80077c2:	bf00      	nop
 80077c4:	cfff69f3 	.word	0xcfff69f3
 80077c8:	40008000 	.word	0x40008000
 80077cc:	40013800 	.word	0x40013800
 80077d0:	00f42400 	.word	0x00f42400
 80077d4:	0800b47c 	.word	0x0800b47c
      default:
        pclk = 0U;
 80077d8:	2300      	movs	r3, #0
 80077da:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	76bb      	strb	r3, [r7, #26]
        break;
 80077e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d07f      	beq.n	80078e8 <UART_SetConfig+0x3dc>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ec:	4a48      	ldr	r2, [pc, #288]	; (8007910 <UART_SetConfig+0x404>)
 80077ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077f2:	461a      	mov	r2, r3
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80077fa:	005a      	lsls	r2, r3, #1
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	085b      	lsrs	r3, r3, #1
 8007802:	441a      	add	r2, r3
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	fbb2 f3f3 	udiv	r3, r2, r3
 800780c:	b29b      	uxth	r3, r3
 800780e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	2b0f      	cmp	r3, #15
 8007814:	d916      	bls.n	8007844 <UART_SetConfig+0x338>
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800781c:	d212      	bcs.n	8007844 <UART_SetConfig+0x338>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	b29b      	uxth	r3, r3
 8007822:	f023 030f 	bic.w	r3, r3, #15
 8007826:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	085b      	lsrs	r3, r3, #1
 800782c:	b29b      	uxth	r3, r3
 800782e:	f003 0307 	and.w	r3, r3, #7
 8007832:	b29a      	uxth	r2, r3
 8007834:	89fb      	ldrh	r3, [r7, #14]
 8007836:	4313      	orrs	r3, r2
 8007838:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	89fa      	ldrh	r2, [r7, #14]
 8007840:	60da      	str	r2, [r3, #12]
 8007842:	e051      	b.n	80078e8 <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	76bb      	strb	r3, [r7, #26]
 8007848:	e04e      	b.n	80078e8 <UART_SetConfig+0x3dc>
      }
    }
  }
  else
  {
    switch (clocksource)
 800784a:	7efb      	ldrb	r3, [r7, #27]
 800784c:	3b01      	subs	r3, #1
 800784e:	2b07      	cmp	r3, #7
 8007850:	d821      	bhi.n	8007896 <UART_SetConfig+0x38a>
 8007852:	a201      	add	r2, pc, #4	; (adr r2, 8007858 <UART_SetConfig+0x34c>)
 8007854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007858:	08007879 	.word	0x08007879
 800785c:	08007881 	.word	0x08007881
 8007860:	08007897 	.word	0x08007897
 8007864:	08007887 	.word	0x08007887
 8007868:	08007897 	.word	0x08007897
 800786c:	08007897 	.word	0x08007897
 8007870:	08007897 	.word	0x08007897
 8007874:	0800788f 	.word	0x0800788f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007878:	f7fe fa6e 	bl	8005d58 <HAL_RCC_GetPCLK2Freq>
 800787c:	6178      	str	r0, [r7, #20]
        break;
 800787e:	e00f      	b.n	80078a0 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007880:	4b24      	ldr	r3, [pc, #144]	; (8007914 <UART_SetConfig+0x408>)
 8007882:	617b      	str	r3, [r7, #20]
        break;
 8007884:	e00c      	b.n	80078a0 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007886:	f7fe f9cf 	bl	8005c28 <HAL_RCC_GetSysClockFreq>
 800788a:	6178      	str	r0, [r7, #20]
        break;
 800788c:	e008      	b.n	80078a0 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800788e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007892:	617b      	str	r3, [r7, #20]
        break;
 8007894:	e004      	b.n	80078a0 <UART_SetConfig+0x394>
      default:
        pclk = 0U;
 8007896:	2300      	movs	r3, #0
 8007898:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	76bb      	strb	r3, [r7, #26]
        break;
 800789e:	bf00      	nop
    }

    if (pclk != 0U)
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d020      	beq.n	80078e8 <UART_SetConfig+0x3dc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078aa:	4a19      	ldr	r2, [pc, #100]	; (8007910 <UART_SetConfig+0x404>)
 80078ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078b0:	461a      	mov	r2, r3
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	fbb3 f2f2 	udiv	r2, r3, r2
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	085b      	lsrs	r3, r3, #1
 80078be:	441a      	add	r2, r3
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	2b0f      	cmp	r3, #15
 80078d0:	d908      	bls.n	80078e4 <UART_SetConfig+0x3d8>
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078d8:	d204      	bcs.n	80078e4 <UART_SetConfig+0x3d8>
      {
        huart->Instance->BRR = usartdiv;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	693a      	ldr	r2, [r7, #16]
 80078e0:	60da      	str	r2, [r3, #12]
 80078e2:	e001      	b.n	80078e8 <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 80078e4:	2301      	movs	r3, #1
 80078e6:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2201      	movs	r2, #1
 80078ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2201      	movs	r2, #1
 80078f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2200      	movs	r2, #0
 80078fc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007904:	7ebb      	ldrb	r3, [r7, #26]
}
 8007906:	4618      	mov	r0, r3
 8007908:	3720      	adds	r7, #32
 800790a:	46bd      	mov	sp, r7
 800790c:	bdb0      	pop	{r4, r5, r7, pc}
 800790e:	bf00      	nop
 8007910:	0800b47c 	.word	0x0800b47c
 8007914:	00f42400 	.word	0x00f42400

08007918 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007918:	b480      	push	{r7}
 800791a:	b083      	sub	sp, #12
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007924:	f003 0301 	and.w	r3, r3, #1
 8007928:	2b00      	cmp	r3, #0
 800792a:	d00a      	beq.n	8007942 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	430a      	orrs	r2, r1
 8007940:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007946:	f003 0302 	and.w	r3, r3, #2
 800794a:	2b00      	cmp	r3, #0
 800794c:	d00a      	beq.n	8007964 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	430a      	orrs	r2, r1
 8007962:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007968:	f003 0304 	and.w	r3, r3, #4
 800796c:	2b00      	cmp	r3, #0
 800796e:	d00a      	beq.n	8007986 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	430a      	orrs	r2, r1
 8007984:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800798a:	f003 0308 	and.w	r3, r3, #8
 800798e:	2b00      	cmp	r3, #0
 8007990:	d00a      	beq.n	80079a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	430a      	orrs	r2, r1
 80079a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ac:	f003 0310 	and.w	r3, r3, #16
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d00a      	beq.n	80079ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	430a      	orrs	r2, r1
 80079c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ce:	f003 0320 	and.w	r3, r3, #32
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d00a      	beq.n	80079ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	430a      	orrs	r2, r1
 80079ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d01a      	beq.n	8007a2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	430a      	orrs	r2, r1
 8007a0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a16:	d10a      	bne.n	8007a2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	430a      	orrs	r2, r1
 8007a2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d00a      	beq.n	8007a50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	430a      	orrs	r2, r1
 8007a4e:	605a      	str	r2, [r3, #4]
  }
}
 8007a50:	bf00      	nop
 8007a52:	370c      	adds	r7, #12
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b086      	sub	sp, #24
 8007a60:	af02      	add	r7, sp, #8
 8007a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a6c:	f7fa fed8 	bl	8002820 <HAL_GetTick>
 8007a70:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f003 0308 	and.w	r3, r3, #8
 8007a7c:	2b08      	cmp	r3, #8
 8007a7e:	d10e      	bne.n	8007a9e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a84:	9300      	str	r3, [sp, #0]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 f82f 	bl	8007af2 <UART_WaitOnFlagUntilTimeout>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d001      	beq.n	8007a9e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a9a:	2303      	movs	r3, #3
 8007a9c:	e025      	b.n	8007aea <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f003 0304 	and.w	r3, r3, #4
 8007aa8:	2b04      	cmp	r3, #4
 8007aaa:	d10e      	bne.n	8007aca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007aac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ab0:	9300      	str	r3, [sp, #0]
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 f819 	bl	8007af2 <UART_WaitOnFlagUntilTimeout>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d001      	beq.n	8007aca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ac6:	2303      	movs	r3, #3
 8007ac8:	e00f      	b.n	8007aea <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2220      	movs	r2, #32
 8007ace:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2220      	movs	r2, #32
 8007ad6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2200      	movs	r2, #0
 8007ade:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007ae8:	2300      	movs	r3, #0
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3710      	adds	r7, #16
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}

08007af2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007af2:	b580      	push	{r7, lr}
 8007af4:	b09c      	sub	sp, #112	; 0x70
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	60f8      	str	r0, [r7, #12]
 8007afa:	60b9      	str	r1, [r7, #8]
 8007afc:	603b      	str	r3, [r7, #0]
 8007afe:	4613      	mov	r3, r2
 8007b00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b02:	e0a9      	b.n	8007c58 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b0a:	f000 80a5 	beq.w	8007c58 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b0e:	f7fa fe87 	bl	8002820 <HAL_GetTick>
 8007b12:	4602      	mov	r2, r0
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	1ad3      	subs	r3, r2, r3
 8007b18:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d302      	bcc.n	8007b24 <UART_WaitOnFlagUntilTimeout+0x32>
 8007b1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d140      	bne.n	8007ba6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b2c:	e853 3f00 	ldrex	r3, [r3]
 8007b30:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007b32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b34:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007b38:	667b      	str	r3, [r7, #100]	; 0x64
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	461a      	mov	r2, r3
 8007b40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b44:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b46:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007b48:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007b4a:	e841 2300 	strex	r3, r2, [r1]
 8007b4e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007b50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d1e6      	bne.n	8007b24 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	3308      	adds	r3, #8
 8007b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b60:	e853 3f00 	ldrex	r3, [r3]
 8007b64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b68:	f023 0301 	bic.w	r3, r3, #1
 8007b6c:	663b      	str	r3, [r7, #96]	; 0x60
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	3308      	adds	r3, #8
 8007b74:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007b76:	64ba      	str	r2, [r7, #72]	; 0x48
 8007b78:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b7a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007b7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b7e:	e841 2300 	strex	r3, r2, [r1]
 8007b82:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007b84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d1e5      	bne.n	8007b56 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2220      	movs	r2, #32
 8007b8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2220      	movs	r2, #32
 8007b96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007ba2:	2303      	movs	r3, #3
 8007ba4:	e069      	b.n	8007c7a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f003 0304 	and.w	r3, r3, #4
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d051      	beq.n	8007c58 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	69db      	ldr	r3, [r3, #28]
 8007bba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007bbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bc2:	d149      	bne.n	8007c58 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007bcc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd6:	e853 3f00 	ldrex	r3, [r3]
 8007bda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bde:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007be2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	461a      	mov	r2, r3
 8007bea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bec:	637b      	str	r3, [r7, #52]	; 0x34
 8007bee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007bf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bf4:	e841 2300 	strex	r3, r2, [r1]
 8007bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d1e6      	bne.n	8007bce <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	3308      	adds	r3, #8
 8007c06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	e853 3f00 	ldrex	r3, [r3]
 8007c0e:	613b      	str	r3, [r7, #16]
   return(result);
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	f023 0301 	bic.w	r3, r3, #1
 8007c16:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	3308      	adds	r3, #8
 8007c1e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007c20:	623a      	str	r2, [r7, #32]
 8007c22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c24:	69f9      	ldr	r1, [r7, #28]
 8007c26:	6a3a      	ldr	r2, [r7, #32]
 8007c28:	e841 2300 	strex	r3, r2, [r1]
 8007c2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c2e:	69bb      	ldr	r3, [r7, #24]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d1e5      	bne.n	8007c00 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2220      	movs	r2, #32
 8007c38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2220      	movs	r2, #32
 8007c40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2220      	movs	r2, #32
 8007c48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007c54:	2303      	movs	r3, #3
 8007c56:	e010      	b.n	8007c7a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	69da      	ldr	r2, [r3, #28]
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	4013      	ands	r3, r2
 8007c62:	68ba      	ldr	r2, [r7, #8]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	bf0c      	ite	eq
 8007c68:	2301      	moveq	r3, #1
 8007c6a:	2300      	movne	r3, #0
 8007c6c:	b2db      	uxtb	r3, r3
 8007c6e:	461a      	mov	r2, r3
 8007c70:	79fb      	ldrb	r3, [r7, #7]
 8007c72:	429a      	cmp	r2, r3
 8007c74:	f43f af46 	beq.w	8007b04 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c78:	2300      	movs	r3, #0
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3770      	adds	r7, #112	; 0x70
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}

08007c82 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007c82:	b480      	push	{r7}
 8007c84:	b085      	sub	sp, #20
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d101      	bne.n	8007c98 <HAL_UARTEx_DisableFifoMode+0x16>
 8007c94:	2302      	movs	r3, #2
 8007c96:	e027      	b.n	8007ce8 <HAL_UARTEx_DisableFifoMode+0x66>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2224      	movs	r2, #36	; 0x24
 8007ca4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f022 0201 	bic.w	r2, r2, #1
 8007cbe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007cc6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	68fa      	ldr	r2, [r7, #12]
 8007cd4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2220      	movs	r2, #32
 8007cda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007ce6:	2300      	movs	r3, #0
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3714      	adds	r7, #20
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr

08007cf4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d101      	bne.n	8007d0c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007d08:	2302      	movs	r3, #2
 8007d0a:	e02d      	b.n	8007d68 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2224      	movs	r2, #36	; 0x24
 8007d18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	681a      	ldr	r2, [r3, #0]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f022 0201 	bic.w	r2, r2, #1
 8007d32:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	683a      	ldr	r2, [r7, #0]
 8007d44:	430a      	orrs	r2, r1
 8007d46:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f000 f84f 	bl	8007dec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	68fa      	ldr	r2, [r7, #12]
 8007d54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2220      	movs	r2, #32
 8007d5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2200      	movs	r2, #0
 8007d62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007d66:	2300      	movs	r3, #0
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3710      	adds	r7, #16
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b084      	sub	sp, #16
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d101      	bne.n	8007d88 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007d84:	2302      	movs	r3, #2
 8007d86:	e02d      	b.n	8007de4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2224      	movs	r2, #36	; 0x24
 8007d94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f022 0201 	bic.w	r2, r2, #1
 8007dae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	683a      	ldr	r2, [r7, #0]
 8007dc0:	430a      	orrs	r2, r1
 8007dc2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 f811 	bl	8007dec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	68fa      	ldr	r2, [r7, #12]
 8007dd0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2220      	movs	r2, #32
 8007dd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007de2:	2300      	movs	r3, #0
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3710      	adds	r7, #16
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b085      	sub	sp, #20
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d108      	bne.n	8007e0e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2201      	movs	r2, #1
 8007e08:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007e0c:	e031      	b.n	8007e72 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007e0e:	2308      	movs	r3, #8
 8007e10:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007e12:	2308      	movs	r3, #8
 8007e14:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	0e5b      	lsrs	r3, r3, #25
 8007e1e:	b2db      	uxtb	r3, r3
 8007e20:	f003 0307 	and.w	r3, r3, #7
 8007e24:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	0f5b      	lsrs	r3, r3, #29
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	f003 0307 	and.w	r3, r3, #7
 8007e34:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e36:	7bbb      	ldrb	r3, [r7, #14]
 8007e38:	7b3a      	ldrb	r2, [r7, #12]
 8007e3a:	4911      	ldr	r1, [pc, #68]	; (8007e80 <UARTEx_SetNbDataToProcess+0x94>)
 8007e3c:	5c8a      	ldrb	r2, [r1, r2]
 8007e3e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007e42:	7b3a      	ldrb	r2, [r7, #12]
 8007e44:	490f      	ldr	r1, [pc, #60]	; (8007e84 <UARTEx_SetNbDataToProcess+0x98>)
 8007e46:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e48:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e4c:	b29a      	uxth	r2, r3
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e54:	7bfb      	ldrb	r3, [r7, #15]
 8007e56:	7b7a      	ldrb	r2, [r7, #13]
 8007e58:	4909      	ldr	r1, [pc, #36]	; (8007e80 <UARTEx_SetNbDataToProcess+0x94>)
 8007e5a:	5c8a      	ldrb	r2, [r1, r2]
 8007e5c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007e60:	7b7a      	ldrb	r2, [r7, #13]
 8007e62:	4908      	ldr	r1, [pc, #32]	; (8007e84 <UARTEx_SetNbDataToProcess+0x98>)
 8007e64:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e66:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e6a:	b29a      	uxth	r2, r3
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007e72:	bf00      	nop
 8007e74:	3714      	adds	r7, #20
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop
 8007e80:	0800b494 	.word	0x0800b494
 8007e84:	0800b49c 	.word	0x0800b49c

08007e88 <__errno>:
 8007e88:	4b01      	ldr	r3, [pc, #4]	; (8007e90 <__errno+0x8>)
 8007e8a:	6818      	ldr	r0, [r3, #0]
 8007e8c:	4770      	bx	lr
 8007e8e:	bf00      	nop
 8007e90:	20000010 	.word	0x20000010

08007e94 <__libc_init_array>:
 8007e94:	b570      	push	{r4, r5, r6, lr}
 8007e96:	4d0d      	ldr	r5, [pc, #52]	; (8007ecc <__libc_init_array+0x38>)
 8007e98:	4c0d      	ldr	r4, [pc, #52]	; (8007ed0 <__libc_init_array+0x3c>)
 8007e9a:	1b64      	subs	r4, r4, r5
 8007e9c:	10a4      	asrs	r4, r4, #2
 8007e9e:	2600      	movs	r6, #0
 8007ea0:	42a6      	cmp	r6, r4
 8007ea2:	d109      	bne.n	8007eb8 <__libc_init_array+0x24>
 8007ea4:	4d0b      	ldr	r5, [pc, #44]	; (8007ed4 <__libc_init_array+0x40>)
 8007ea6:	4c0c      	ldr	r4, [pc, #48]	; (8007ed8 <__libc_init_array+0x44>)
 8007ea8:	f002 fec2 	bl	800ac30 <_init>
 8007eac:	1b64      	subs	r4, r4, r5
 8007eae:	10a4      	asrs	r4, r4, #2
 8007eb0:	2600      	movs	r6, #0
 8007eb2:	42a6      	cmp	r6, r4
 8007eb4:	d105      	bne.n	8007ec2 <__libc_init_array+0x2e>
 8007eb6:	bd70      	pop	{r4, r5, r6, pc}
 8007eb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ebc:	4798      	blx	r3
 8007ebe:	3601      	adds	r6, #1
 8007ec0:	e7ee      	b.n	8007ea0 <__libc_init_array+0xc>
 8007ec2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ec6:	4798      	blx	r3
 8007ec8:	3601      	adds	r6, #1
 8007eca:	e7f2      	b.n	8007eb2 <__libc_init_array+0x1e>
 8007ecc:	0800b88c 	.word	0x0800b88c
 8007ed0:	0800b88c 	.word	0x0800b88c
 8007ed4:	0800b88c 	.word	0x0800b88c
 8007ed8:	0800b890 	.word	0x0800b890

08007edc <malloc>:
 8007edc:	4b02      	ldr	r3, [pc, #8]	; (8007ee8 <malloc+0xc>)
 8007ede:	4601      	mov	r1, r0
 8007ee0:	6818      	ldr	r0, [r3, #0]
 8007ee2:	f000 b869 	b.w	8007fb8 <_malloc_r>
 8007ee6:	bf00      	nop
 8007ee8:	20000010 	.word	0x20000010

08007eec <memcpy>:
 8007eec:	440a      	add	r2, r1
 8007eee:	4291      	cmp	r1, r2
 8007ef0:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ef4:	d100      	bne.n	8007ef8 <memcpy+0xc>
 8007ef6:	4770      	bx	lr
 8007ef8:	b510      	push	{r4, lr}
 8007efa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007efe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f02:	4291      	cmp	r1, r2
 8007f04:	d1f9      	bne.n	8007efa <memcpy+0xe>
 8007f06:	bd10      	pop	{r4, pc}

08007f08 <memset>:
 8007f08:	4402      	add	r2, r0
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d100      	bne.n	8007f12 <memset+0xa>
 8007f10:	4770      	bx	lr
 8007f12:	f803 1b01 	strb.w	r1, [r3], #1
 8007f16:	e7f9      	b.n	8007f0c <memset+0x4>

08007f18 <_free_r>:
 8007f18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f1a:	2900      	cmp	r1, #0
 8007f1c:	d048      	beq.n	8007fb0 <_free_r+0x98>
 8007f1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f22:	9001      	str	r0, [sp, #4]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	f1a1 0404 	sub.w	r4, r1, #4
 8007f2a:	bfb8      	it	lt
 8007f2c:	18e4      	addlt	r4, r4, r3
 8007f2e:	f001 fbc3 	bl	80096b8 <__malloc_lock>
 8007f32:	4a20      	ldr	r2, [pc, #128]	; (8007fb4 <_free_r+0x9c>)
 8007f34:	9801      	ldr	r0, [sp, #4]
 8007f36:	6813      	ldr	r3, [r2, #0]
 8007f38:	4615      	mov	r5, r2
 8007f3a:	b933      	cbnz	r3, 8007f4a <_free_r+0x32>
 8007f3c:	6063      	str	r3, [r4, #4]
 8007f3e:	6014      	str	r4, [r2, #0]
 8007f40:	b003      	add	sp, #12
 8007f42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f46:	f001 bbbd 	b.w	80096c4 <__malloc_unlock>
 8007f4a:	42a3      	cmp	r3, r4
 8007f4c:	d90b      	bls.n	8007f66 <_free_r+0x4e>
 8007f4e:	6821      	ldr	r1, [r4, #0]
 8007f50:	1862      	adds	r2, r4, r1
 8007f52:	4293      	cmp	r3, r2
 8007f54:	bf04      	itt	eq
 8007f56:	681a      	ldreq	r2, [r3, #0]
 8007f58:	685b      	ldreq	r3, [r3, #4]
 8007f5a:	6063      	str	r3, [r4, #4]
 8007f5c:	bf04      	itt	eq
 8007f5e:	1852      	addeq	r2, r2, r1
 8007f60:	6022      	streq	r2, [r4, #0]
 8007f62:	602c      	str	r4, [r5, #0]
 8007f64:	e7ec      	b.n	8007f40 <_free_r+0x28>
 8007f66:	461a      	mov	r2, r3
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	b10b      	cbz	r3, 8007f70 <_free_r+0x58>
 8007f6c:	42a3      	cmp	r3, r4
 8007f6e:	d9fa      	bls.n	8007f66 <_free_r+0x4e>
 8007f70:	6811      	ldr	r1, [r2, #0]
 8007f72:	1855      	adds	r5, r2, r1
 8007f74:	42a5      	cmp	r5, r4
 8007f76:	d10b      	bne.n	8007f90 <_free_r+0x78>
 8007f78:	6824      	ldr	r4, [r4, #0]
 8007f7a:	4421      	add	r1, r4
 8007f7c:	1854      	adds	r4, r2, r1
 8007f7e:	42a3      	cmp	r3, r4
 8007f80:	6011      	str	r1, [r2, #0]
 8007f82:	d1dd      	bne.n	8007f40 <_free_r+0x28>
 8007f84:	681c      	ldr	r4, [r3, #0]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	6053      	str	r3, [r2, #4]
 8007f8a:	4421      	add	r1, r4
 8007f8c:	6011      	str	r1, [r2, #0]
 8007f8e:	e7d7      	b.n	8007f40 <_free_r+0x28>
 8007f90:	d902      	bls.n	8007f98 <_free_r+0x80>
 8007f92:	230c      	movs	r3, #12
 8007f94:	6003      	str	r3, [r0, #0]
 8007f96:	e7d3      	b.n	8007f40 <_free_r+0x28>
 8007f98:	6825      	ldr	r5, [r4, #0]
 8007f9a:	1961      	adds	r1, r4, r5
 8007f9c:	428b      	cmp	r3, r1
 8007f9e:	bf04      	itt	eq
 8007fa0:	6819      	ldreq	r1, [r3, #0]
 8007fa2:	685b      	ldreq	r3, [r3, #4]
 8007fa4:	6063      	str	r3, [r4, #4]
 8007fa6:	bf04      	itt	eq
 8007fa8:	1949      	addeq	r1, r1, r5
 8007faa:	6021      	streq	r1, [r4, #0]
 8007fac:	6054      	str	r4, [r2, #4]
 8007fae:	e7c7      	b.n	8007f40 <_free_r+0x28>
 8007fb0:	b003      	add	sp, #12
 8007fb2:	bd30      	pop	{r4, r5, pc}
 8007fb4:	20000200 	.word	0x20000200

08007fb8 <_malloc_r>:
 8007fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fba:	1ccd      	adds	r5, r1, #3
 8007fbc:	f025 0503 	bic.w	r5, r5, #3
 8007fc0:	3508      	adds	r5, #8
 8007fc2:	2d0c      	cmp	r5, #12
 8007fc4:	bf38      	it	cc
 8007fc6:	250c      	movcc	r5, #12
 8007fc8:	2d00      	cmp	r5, #0
 8007fca:	4606      	mov	r6, r0
 8007fcc:	db01      	blt.n	8007fd2 <_malloc_r+0x1a>
 8007fce:	42a9      	cmp	r1, r5
 8007fd0:	d903      	bls.n	8007fda <_malloc_r+0x22>
 8007fd2:	230c      	movs	r3, #12
 8007fd4:	6033      	str	r3, [r6, #0]
 8007fd6:	2000      	movs	r0, #0
 8007fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fda:	f001 fb6d 	bl	80096b8 <__malloc_lock>
 8007fde:	4921      	ldr	r1, [pc, #132]	; (8008064 <_malloc_r+0xac>)
 8007fe0:	680a      	ldr	r2, [r1, #0]
 8007fe2:	4614      	mov	r4, r2
 8007fe4:	b99c      	cbnz	r4, 800800e <_malloc_r+0x56>
 8007fe6:	4f20      	ldr	r7, [pc, #128]	; (8008068 <_malloc_r+0xb0>)
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	b923      	cbnz	r3, 8007ff6 <_malloc_r+0x3e>
 8007fec:	4621      	mov	r1, r4
 8007fee:	4630      	mov	r0, r6
 8007ff0:	f000 fca6 	bl	8008940 <_sbrk_r>
 8007ff4:	6038      	str	r0, [r7, #0]
 8007ff6:	4629      	mov	r1, r5
 8007ff8:	4630      	mov	r0, r6
 8007ffa:	f000 fca1 	bl	8008940 <_sbrk_r>
 8007ffe:	1c43      	adds	r3, r0, #1
 8008000:	d123      	bne.n	800804a <_malloc_r+0x92>
 8008002:	230c      	movs	r3, #12
 8008004:	6033      	str	r3, [r6, #0]
 8008006:	4630      	mov	r0, r6
 8008008:	f001 fb5c 	bl	80096c4 <__malloc_unlock>
 800800c:	e7e3      	b.n	8007fd6 <_malloc_r+0x1e>
 800800e:	6823      	ldr	r3, [r4, #0]
 8008010:	1b5b      	subs	r3, r3, r5
 8008012:	d417      	bmi.n	8008044 <_malloc_r+0x8c>
 8008014:	2b0b      	cmp	r3, #11
 8008016:	d903      	bls.n	8008020 <_malloc_r+0x68>
 8008018:	6023      	str	r3, [r4, #0]
 800801a:	441c      	add	r4, r3
 800801c:	6025      	str	r5, [r4, #0]
 800801e:	e004      	b.n	800802a <_malloc_r+0x72>
 8008020:	6863      	ldr	r3, [r4, #4]
 8008022:	42a2      	cmp	r2, r4
 8008024:	bf0c      	ite	eq
 8008026:	600b      	streq	r3, [r1, #0]
 8008028:	6053      	strne	r3, [r2, #4]
 800802a:	4630      	mov	r0, r6
 800802c:	f001 fb4a 	bl	80096c4 <__malloc_unlock>
 8008030:	f104 000b 	add.w	r0, r4, #11
 8008034:	1d23      	adds	r3, r4, #4
 8008036:	f020 0007 	bic.w	r0, r0, #7
 800803a:	1ac2      	subs	r2, r0, r3
 800803c:	d0cc      	beq.n	8007fd8 <_malloc_r+0x20>
 800803e:	1a1b      	subs	r3, r3, r0
 8008040:	50a3      	str	r3, [r4, r2]
 8008042:	e7c9      	b.n	8007fd8 <_malloc_r+0x20>
 8008044:	4622      	mov	r2, r4
 8008046:	6864      	ldr	r4, [r4, #4]
 8008048:	e7cc      	b.n	8007fe4 <_malloc_r+0x2c>
 800804a:	1cc4      	adds	r4, r0, #3
 800804c:	f024 0403 	bic.w	r4, r4, #3
 8008050:	42a0      	cmp	r0, r4
 8008052:	d0e3      	beq.n	800801c <_malloc_r+0x64>
 8008054:	1a21      	subs	r1, r4, r0
 8008056:	4630      	mov	r0, r6
 8008058:	f000 fc72 	bl	8008940 <_sbrk_r>
 800805c:	3001      	adds	r0, #1
 800805e:	d1dd      	bne.n	800801c <_malloc_r+0x64>
 8008060:	e7cf      	b.n	8008002 <_malloc_r+0x4a>
 8008062:	bf00      	nop
 8008064:	20000200 	.word	0x20000200
 8008068:	20000204 	.word	0x20000204

0800806c <__cvt>:
 800806c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008070:	ec55 4b10 	vmov	r4, r5, d0
 8008074:	2d00      	cmp	r5, #0
 8008076:	460e      	mov	r6, r1
 8008078:	4619      	mov	r1, r3
 800807a:	462b      	mov	r3, r5
 800807c:	bfbb      	ittet	lt
 800807e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008082:	461d      	movlt	r5, r3
 8008084:	2300      	movge	r3, #0
 8008086:	232d      	movlt	r3, #45	; 0x2d
 8008088:	700b      	strb	r3, [r1, #0]
 800808a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800808c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008090:	4691      	mov	r9, r2
 8008092:	f023 0820 	bic.w	r8, r3, #32
 8008096:	bfbc      	itt	lt
 8008098:	4622      	movlt	r2, r4
 800809a:	4614      	movlt	r4, r2
 800809c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80080a0:	d005      	beq.n	80080ae <__cvt+0x42>
 80080a2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80080a6:	d100      	bne.n	80080aa <__cvt+0x3e>
 80080a8:	3601      	adds	r6, #1
 80080aa:	2102      	movs	r1, #2
 80080ac:	e000      	b.n	80080b0 <__cvt+0x44>
 80080ae:	2103      	movs	r1, #3
 80080b0:	ab03      	add	r3, sp, #12
 80080b2:	9301      	str	r3, [sp, #4]
 80080b4:	ab02      	add	r3, sp, #8
 80080b6:	9300      	str	r3, [sp, #0]
 80080b8:	ec45 4b10 	vmov	d0, r4, r5
 80080bc:	4653      	mov	r3, sl
 80080be:	4632      	mov	r2, r6
 80080c0:	f000 fd0a 	bl	8008ad8 <_dtoa_r>
 80080c4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80080c8:	4607      	mov	r7, r0
 80080ca:	d102      	bne.n	80080d2 <__cvt+0x66>
 80080cc:	f019 0f01 	tst.w	r9, #1
 80080d0:	d022      	beq.n	8008118 <__cvt+0xac>
 80080d2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80080d6:	eb07 0906 	add.w	r9, r7, r6
 80080da:	d110      	bne.n	80080fe <__cvt+0x92>
 80080dc:	783b      	ldrb	r3, [r7, #0]
 80080de:	2b30      	cmp	r3, #48	; 0x30
 80080e0:	d10a      	bne.n	80080f8 <__cvt+0x8c>
 80080e2:	2200      	movs	r2, #0
 80080e4:	2300      	movs	r3, #0
 80080e6:	4620      	mov	r0, r4
 80080e8:	4629      	mov	r1, r5
 80080ea:	f7f8 fcc5 	bl	8000a78 <__aeabi_dcmpeq>
 80080ee:	b918      	cbnz	r0, 80080f8 <__cvt+0x8c>
 80080f0:	f1c6 0601 	rsb	r6, r6, #1
 80080f4:	f8ca 6000 	str.w	r6, [sl]
 80080f8:	f8da 3000 	ldr.w	r3, [sl]
 80080fc:	4499      	add	r9, r3
 80080fe:	2200      	movs	r2, #0
 8008100:	2300      	movs	r3, #0
 8008102:	4620      	mov	r0, r4
 8008104:	4629      	mov	r1, r5
 8008106:	f7f8 fcb7 	bl	8000a78 <__aeabi_dcmpeq>
 800810a:	b108      	cbz	r0, 8008110 <__cvt+0xa4>
 800810c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008110:	2230      	movs	r2, #48	; 0x30
 8008112:	9b03      	ldr	r3, [sp, #12]
 8008114:	454b      	cmp	r3, r9
 8008116:	d307      	bcc.n	8008128 <__cvt+0xbc>
 8008118:	9b03      	ldr	r3, [sp, #12]
 800811a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800811c:	1bdb      	subs	r3, r3, r7
 800811e:	4638      	mov	r0, r7
 8008120:	6013      	str	r3, [r2, #0]
 8008122:	b004      	add	sp, #16
 8008124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008128:	1c59      	adds	r1, r3, #1
 800812a:	9103      	str	r1, [sp, #12]
 800812c:	701a      	strb	r2, [r3, #0]
 800812e:	e7f0      	b.n	8008112 <__cvt+0xa6>

08008130 <__exponent>:
 8008130:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008132:	4603      	mov	r3, r0
 8008134:	2900      	cmp	r1, #0
 8008136:	bfb8      	it	lt
 8008138:	4249      	neglt	r1, r1
 800813a:	f803 2b02 	strb.w	r2, [r3], #2
 800813e:	bfb4      	ite	lt
 8008140:	222d      	movlt	r2, #45	; 0x2d
 8008142:	222b      	movge	r2, #43	; 0x2b
 8008144:	2909      	cmp	r1, #9
 8008146:	7042      	strb	r2, [r0, #1]
 8008148:	dd2a      	ble.n	80081a0 <__exponent+0x70>
 800814a:	f10d 0407 	add.w	r4, sp, #7
 800814e:	46a4      	mov	ip, r4
 8008150:	270a      	movs	r7, #10
 8008152:	46a6      	mov	lr, r4
 8008154:	460a      	mov	r2, r1
 8008156:	fb91 f6f7 	sdiv	r6, r1, r7
 800815a:	fb07 1516 	mls	r5, r7, r6, r1
 800815e:	3530      	adds	r5, #48	; 0x30
 8008160:	2a63      	cmp	r2, #99	; 0x63
 8008162:	f104 34ff 	add.w	r4, r4, #4294967295
 8008166:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800816a:	4631      	mov	r1, r6
 800816c:	dcf1      	bgt.n	8008152 <__exponent+0x22>
 800816e:	3130      	adds	r1, #48	; 0x30
 8008170:	f1ae 0502 	sub.w	r5, lr, #2
 8008174:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008178:	1c44      	adds	r4, r0, #1
 800817a:	4629      	mov	r1, r5
 800817c:	4561      	cmp	r1, ip
 800817e:	d30a      	bcc.n	8008196 <__exponent+0x66>
 8008180:	f10d 0209 	add.w	r2, sp, #9
 8008184:	eba2 020e 	sub.w	r2, r2, lr
 8008188:	4565      	cmp	r5, ip
 800818a:	bf88      	it	hi
 800818c:	2200      	movhi	r2, #0
 800818e:	4413      	add	r3, r2
 8008190:	1a18      	subs	r0, r3, r0
 8008192:	b003      	add	sp, #12
 8008194:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008196:	f811 2b01 	ldrb.w	r2, [r1], #1
 800819a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800819e:	e7ed      	b.n	800817c <__exponent+0x4c>
 80081a0:	2330      	movs	r3, #48	; 0x30
 80081a2:	3130      	adds	r1, #48	; 0x30
 80081a4:	7083      	strb	r3, [r0, #2]
 80081a6:	70c1      	strb	r1, [r0, #3]
 80081a8:	1d03      	adds	r3, r0, #4
 80081aa:	e7f1      	b.n	8008190 <__exponent+0x60>

080081ac <_printf_float>:
 80081ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081b0:	ed2d 8b02 	vpush	{d8}
 80081b4:	b08d      	sub	sp, #52	; 0x34
 80081b6:	460c      	mov	r4, r1
 80081b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80081bc:	4616      	mov	r6, r2
 80081be:	461f      	mov	r7, r3
 80081c0:	4605      	mov	r5, r0
 80081c2:	f001 fa75 	bl	80096b0 <_localeconv_r>
 80081c6:	f8d0 a000 	ldr.w	sl, [r0]
 80081ca:	4650      	mov	r0, sl
 80081cc:	f7f7 ffd8 	bl	8000180 <strlen>
 80081d0:	2300      	movs	r3, #0
 80081d2:	930a      	str	r3, [sp, #40]	; 0x28
 80081d4:	6823      	ldr	r3, [r4, #0]
 80081d6:	9305      	str	r3, [sp, #20]
 80081d8:	f8d8 3000 	ldr.w	r3, [r8]
 80081dc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80081e0:	3307      	adds	r3, #7
 80081e2:	f023 0307 	bic.w	r3, r3, #7
 80081e6:	f103 0208 	add.w	r2, r3, #8
 80081ea:	f8c8 2000 	str.w	r2, [r8]
 80081ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80081f6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80081fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80081fe:	9307      	str	r3, [sp, #28]
 8008200:	f8cd 8018 	str.w	r8, [sp, #24]
 8008204:	ee08 0a10 	vmov	s16, r0
 8008208:	4b9f      	ldr	r3, [pc, #636]	; (8008488 <_printf_float+0x2dc>)
 800820a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800820e:	f04f 32ff 	mov.w	r2, #4294967295
 8008212:	f7f8 fc63 	bl	8000adc <__aeabi_dcmpun>
 8008216:	bb88      	cbnz	r0, 800827c <_printf_float+0xd0>
 8008218:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800821c:	4b9a      	ldr	r3, [pc, #616]	; (8008488 <_printf_float+0x2dc>)
 800821e:	f04f 32ff 	mov.w	r2, #4294967295
 8008222:	f7f8 fc3d 	bl	8000aa0 <__aeabi_dcmple>
 8008226:	bb48      	cbnz	r0, 800827c <_printf_float+0xd0>
 8008228:	2200      	movs	r2, #0
 800822a:	2300      	movs	r3, #0
 800822c:	4640      	mov	r0, r8
 800822e:	4649      	mov	r1, r9
 8008230:	f7f8 fc2c 	bl	8000a8c <__aeabi_dcmplt>
 8008234:	b110      	cbz	r0, 800823c <_printf_float+0x90>
 8008236:	232d      	movs	r3, #45	; 0x2d
 8008238:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800823c:	4b93      	ldr	r3, [pc, #588]	; (800848c <_printf_float+0x2e0>)
 800823e:	4894      	ldr	r0, [pc, #592]	; (8008490 <_printf_float+0x2e4>)
 8008240:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008244:	bf94      	ite	ls
 8008246:	4698      	movls	r8, r3
 8008248:	4680      	movhi	r8, r0
 800824a:	2303      	movs	r3, #3
 800824c:	6123      	str	r3, [r4, #16]
 800824e:	9b05      	ldr	r3, [sp, #20]
 8008250:	f023 0204 	bic.w	r2, r3, #4
 8008254:	6022      	str	r2, [r4, #0]
 8008256:	f04f 0900 	mov.w	r9, #0
 800825a:	9700      	str	r7, [sp, #0]
 800825c:	4633      	mov	r3, r6
 800825e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008260:	4621      	mov	r1, r4
 8008262:	4628      	mov	r0, r5
 8008264:	f000 f9d8 	bl	8008618 <_printf_common>
 8008268:	3001      	adds	r0, #1
 800826a:	f040 8090 	bne.w	800838e <_printf_float+0x1e2>
 800826e:	f04f 30ff 	mov.w	r0, #4294967295
 8008272:	b00d      	add	sp, #52	; 0x34
 8008274:	ecbd 8b02 	vpop	{d8}
 8008278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800827c:	4642      	mov	r2, r8
 800827e:	464b      	mov	r3, r9
 8008280:	4640      	mov	r0, r8
 8008282:	4649      	mov	r1, r9
 8008284:	f7f8 fc2a 	bl	8000adc <__aeabi_dcmpun>
 8008288:	b140      	cbz	r0, 800829c <_printf_float+0xf0>
 800828a:	464b      	mov	r3, r9
 800828c:	2b00      	cmp	r3, #0
 800828e:	bfbc      	itt	lt
 8008290:	232d      	movlt	r3, #45	; 0x2d
 8008292:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008296:	487f      	ldr	r0, [pc, #508]	; (8008494 <_printf_float+0x2e8>)
 8008298:	4b7f      	ldr	r3, [pc, #508]	; (8008498 <_printf_float+0x2ec>)
 800829a:	e7d1      	b.n	8008240 <_printf_float+0x94>
 800829c:	6863      	ldr	r3, [r4, #4]
 800829e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80082a2:	9206      	str	r2, [sp, #24]
 80082a4:	1c5a      	adds	r2, r3, #1
 80082a6:	d13f      	bne.n	8008328 <_printf_float+0x17c>
 80082a8:	2306      	movs	r3, #6
 80082aa:	6063      	str	r3, [r4, #4]
 80082ac:	9b05      	ldr	r3, [sp, #20]
 80082ae:	6861      	ldr	r1, [r4, #4]
 80082b0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80082b4:	2300      	movs	r3, #0
 80082b6:	9303      	str	r3, [sp, #12]
 80082b8:	ab0a      	add	r3, sp, #40	; 0x28
 80082ba:	e9cd b301 	strd	fp, r3, [sp, #4]
 80082be:	ab09      	add	r3, sp, #36	; 0x24
 80082c0:	ec49 8b10 	vmov	d0, r8, r9
 80082c4:	9300      	str	r3, [sp, #0]
 80082c6:	6022      	str	r2, [r4, #0]
 80082c8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80082cc:	4628      	mov	r0, r5
 80082ce:	f7ff fecd 	bl	800806c <__cvt>
 80082d2:	9b06      	ldr	r3, [sp, #24]
 80082d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80082d6:	2b47      	cmp	r3, #71	; 0x47
 80082d8:	4680      	mov	r8, r0
 80082da:	d108      	bne.n	80082ee <_printf_float+0x142>
 80082dc:	1cc8      	adds	r0, r1, #3
 80082de:	db02      	blt.n	80082e6 <_printf_float+0x13a>
 80082e0:	6863      	ldr	r3, [r4, #4]
 80082e2:	4299      	cmp	r1, r3
 80082e4:	dd41      	ble.n	800836a <_printf_float+0x1be>
 80082e6:	f1ab 0b02 	sub.w	fp, fp, #2
 80082ea:	fa5f fb8b 	uxtb.w	fp, fp
 80082ee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80082f2:	d820      	bhi.n	8008336 <_printf_float+0x18a>
 80082f4:	3901      	subs	r1, #1
 80082f6:	465a      	mov	r2, fp
 80082f8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80082fc:	9109      	str	r1, [sp, #36]	; 0x24
 80082fe:	f7ff ff17 	bl	8008130 <__exponent>
 8008302:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008304:	1813      	adds	r3, r2, r0
 8008306:	2a01      	cmp	r2, #1
 8008308:	4681      	mov	r9, r0
 800830a:	6123      	str	r3, [r4, #16]
 800830c:	dc02      	bgt.n	8008314 <_printf_float+0x168>
 800830e:	6822      	ldr	r2, [r4, #0]
 8008310:	07d2      	lsls	r2, r2, #31
 8008312:	d501      	bpl.n	8008318 <_printf_float+0x16c>
 8008314:	3301      	adds	r3, #1
 8008316:	6123      	str	r3, [r4, #16]
 8008318:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800831c:	2b00      	cmp	r3, #0
 800831e:	d09c      	beq.n	800825a <_printf_float+0xae>
 8008320:	232d      	movs	r3, #45	; 0x2d
 8008322:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008326:	e798      	b.n	800825a <_printf_float+0xae>
 8008328:	9a06      	ldr	r2, [sp, #24]
 800832a:	2a47      	cmp	r2, #71	; 0x47
 800832c:	d1be      	bne.n	80082ac <_printf_float+0x100>
 800832e:	2b00      	cmp	r3, #0
 8008330:	d1bc      	bne.n	80082ac <_printf_float+0x100>
 8008332:	2301      	movs	r3, #1
 8008334:	e7b9      	b.n	80082aa <_printf_float+0xfe>
 8008336:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800833a:	d118      	bne.n	800836e <_printf_float+0x1c2>
 800833c:	2900      	cmp	r1, #0
 800833e:	6863      	ldr	r3, [r4, #4]
 8008340:	dd0b      	ble.n	800835a <_printf_float+0x1ae>
 8008342:	6121      	str	r1, [r4, #16]
 8008344:	b913      	cbnz	r3, 800834c <_printf_float+0x1a0>
 8008346:	6822      	ldr	r2, [r4, #0]
 8008348:	07d0      	lsls	r0, r2, #31
 800834a:	d502      	bpl.n	8008352 <_printf_float+0x1a6>
 800834c:	3301      	adds	r3, #1
 800834e:	440b      	add	r3, r1
 8008350:	6123      	str	r3, [r4, #16]
 8008352:	65a1      	str	r1, [r4, #88]	; 0x58
 8008354:	f04f 0900 	mov.w	r9, #0
 8008358:	e7de      	b.n	8008318 <_printf_float+0x16c>
 800835a:	b913      	cbnz	r3, 8008362 <_printf_float+0x1b6>
 800835c:	6822      	ldr	r2, [r4, #0]
 800835e:	07d2      	lsls	r2, r2, #31
 8008360:	d501      	bpl.n	8008366 <_printf_float+0x1ba>
 8008362:	3302      	adds	r3, #2
 8008364:	e7f4      	b.n	8008350 <_printf_float+0x1a4>
 8008366:	2301      	movs	r3, #1
 8008368:	e7f2      	b.n	8008350 <_printf_float+0x1a4>
 800836a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800836e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008370:	4299      	cmp	r1, r3
 8008372:	db05      	blt.n	8008380 <_printf_float+0x1d4>
 8008374:	6823      	ldr	r3, [r4, #0]
 8008376:	6121      	str	r1, [r4, #16]
 8008378:	07d8      	lsls	r0, r3, #31
 800837a:	d5ea      	bpl.n	8008352 <_printf_float+0x1a6>
 800837c:	1c4b      	adds	r3, r1, #1
 800837e:	e7e7      	b.n	8008350 <_printf_float+0x1a4>
 8008380:	2900      	cmp	r1, #0
 8008382:	bfd4      	ite	le
 8008384:	f1c1 0202 	rsble	r2, r1, #2
 8008388:	2201      	movgt	r2, #1
 800838a:	4413      	add	r3, r2
 800838c:	e7e0      	b.n	8008350 <_printf_float+0x1a4>
 800838e:	6823      	ldr	r3, [r4, #0]
 8008390:	055a      	lsls	r2, r3, #21
 8008392:	d407      	bmi.n	80083a4 <_printf_float+0x1f8>
 8008394:	6923      	ldr	r3, [r4, #16]
 8008396:	4642      	mov	r2, r8
 8008398:	4631      	mov	r1, r6
 800839a:	4628      	mov	r0, r5
 800839c:	47b8      	blx	r7
 800839e:	3001      	adds	r0, #1
 80083a0:	d12c      	bne.n	80083fc <_printf_float+0x250>
 80083a2:	e764      	b.n	800826e <_printf_float+0xc2>
 80083a4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80083a8:	f240 80e0 	bls.w	800856c <_printf_float+0x3c0>
 80083ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80083b0:	2200      	movs	r2, #0
 80083b2:	2300      	movs	r3, #0
 80083b4:	f7f8 fb60 	bl	8000a78 <__aeabi_dcmpeq>
 80083b8:	2800      	cmp	r0, #0
 80083ba:	d034      	beq.n	8008426 <_printf_float+0x27a>
 80083bc:	4a37      	ldr	r2, [pc, #220]	; (800849c <_printf_float+0x2f0>)
 80083be:	2301      	movs	r3, #1
 80083c0:	4631      	mov	r1, r6
 80083c2:	4628      	mov	r0, r5
 80083c4:	47b8      	blx	r7
 80083c6:	3001      	adds	r0, #1
 80083c8:	f43f af51 	beq.w	800826e <_printf_float+0xc2>
 80083cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80083d0:	429a      	cmp	r2, r3
 80083d2:	db02      	blt.n	80083da <_printf_float+0x22e>
 80083d4:	6823      	ldr	r3, [r4, #0]
 80083d6:	07d8      	lsls	r0, r3, #31
 80083d8:	d510      	bpl.n	80083fc <_printf_float+0x250>
 80083da:	ee18 3a10 	vmov	r3, s16
 80083de:	4652      	mov	r2, sl
 80083e0:	4631      	mov	r1, r6
 80083e2:	4628      	mov	r0, r5
 80083e4:	47b8      	blx	r7
 80083e6:	3001      	adds	r0, #1
 80083e8:	f43f af41 	beq.w	800826e <_printf_float+0xc2>
 80083ec:	f04f 0800 	mov.w	r8, #0
 80083f0:	f104 091a 	add.w	r9, r4, #26
 80083f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083f6:	3b01      	subs	r3, #1
 80083f8:	4543      	cmp	r3, r8
 80083fa:	dc09      	bgt.n	8008410 <_printf_float+0x264>
 80083fc:	6823      	ldr	r3, [r4, #0]
 80083fe:	079b      	lsls	r3, r3, #30
 8008400:	f100 8105 	bmi.w	800860e <_printf_float+0x462>
 8008404:	68e0      	ldr	r0, [r4, #12]
 8008406:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008408:	4298      	cmp	r0, r3
 800840a:	bfb8      	it	lt
 800840c:	4618      	movlt	r0, r3
 800840e:	e730      	b.n	8008272 <_printf_float+0xc6>
 8008410:	2301      	movs	r3, #1
 8008412:	464a      	mov	r2, r9
 8008414:	4631      	mov	r1, r6
 8008416:	4628      	mov	r0, r5
 8008418:	47b8      	blx	r7
 800841a:	3001      	adds	r0, #1
 800841c:	f43f af27 	beq.w	800826e <_printf_float+0xc2>
 8008420:	f108 0801 	add.w	r8, r8, #1
 8008424:	e7e6      	b.n	80083f4 <_printf_float+0x248>
 8008426:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008428:	2b00      	cmp	r3, #0
 800842a:	dc39      	bgt.n	80084a0 <_printf_float+0x2f4>
 800842c:	4a1b      	ldr	r2, [pc, #108]	; (800849c <_printf_float+0x2f0>)
 800842e:	2301      	movs	r3, #1
 8008430:	4631      	mov	r1, r6
 8008432:	4628      	mov	r0, r5
 8008434:	47b8      	blx	r7
 8008436:	3001      	adds	r0, #1
 8008438:	f43f af19 	beq.w	800826e <_printf_float+0xc2>
 800843c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008440:	4313      	orrs	r3, r2
 8008442:	d102      	bne.n	800844a <_printf_float+0x29e>
 8008444:	6823      	ldr	r3, [r4, #0]
 8008446:	07d9      	lsls	r1, r3, #31
 8008448:	d5d8      	bpl.n	80083fc <_printf_float+0x250>
 800844a:	ee18 3a10 	vmov	r3, s16
 800844e:	4652      	mov	r2, sl
 8008450:	4631      	mov	r1, r6
 8008452:	4628      	mov	r0, r5
 8008454:	47b8      	blx	r7
 8008456:	3001      	adds	r0, #1
 8008458:	f43f af09 	beq.w	800826e <_printf_float+0xc2>
 800845c:	f04f 0900 	mov.w	r9, #0
 8008460:	f104 0a1a 	add.w	sl, r4, #26
 8008464:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008466:	425b      	negs	r3, r3
 8008468:	454b      	cmp	r3, r9
 800846a:	dc01      	bgt.n	8008470 <_printf_float+0x2c4>
 800846c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800846e:	e792      	b.n	8008396 <_printf_float+0x1ea>
 8008470:	2301      	movs	r3, #1
 8008472:	4652      	mov	r2, sl
 8008474:	4631      	mov	r1, r6
 8008476:	4628      	mov	r0, r5
 8008478:	47b8      	blx	r7
 800847a:	3001      	adds	r0, #1
 800847c:	f43f aef7 	beq.w	800826e <_printf_float+0xc2>
 8008480:	f109 0901 	add.w	r9, r9, #1
 8008484:	e7ee      	b.n	8008464 <_printf_float+0x2b8>
 8008486:	bf00      	nop
 8008488:	7fefffff 	.word	0x7fefffff
 800848c:	0800b4a8 	.word	0x0800b4a8
 8008490:	0800b4ac 	.word	0x0800b4ac
 8008494:	0800b4b4 	.word	0x0800b4b4
 8008498:	0800b4b0 	.word	0x0800b4b0
 800849c:	0800b4b8 	.word	0x0800b4b8
 80084a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80084a4:	429a      	cmp	r2, r3
 80084a6:	bfa8      	it	ge
 80084a8:	461a      	movge	r2, r3
 80084aa:	2a00      	cmp	r2, #0
 80084ac:	4691      	mov	r9, r2
 80084ae:	dc37      	bgt.n	8008520 <_printf_float+0x374>
 80084b0:	f04f 0b00 	mov.w	fp, #0
 80084b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80084b8:	f104 021a 	add.w	r2, r4, #26
 80084bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80084be:	9305      	str	r3, [sp, #20]
 80084c0:	eba3 0309 	sub.w	r3, r3, r9
 80084c4:	455b      	cmp	r3, fp
 80084c6:	dc33      	bgt.n	8008530 <_printf_float+0x384>
 80084c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80084cc:	429a      	cmp	r2, r3
 80084ce:	db3b      	blt.n	8008548 <_printf_float+0x39c>
 80084d0:	6823      	ldr	r3, [r4, #0]
 80084d2:	07da      	lsls	r2, r3, #31
 80084d4:	d438      	bmi.n	8008548 <_printf_float+0x39c>
 80084d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084d8:	9b05      	ldr	r3, [sp, #20]
 80084da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80084dc:	1ad3      	subs	r3, r2, r3
 80084de:	eba2 0901 	sub.w	r9, r2, r1
 80084e2:	4599      	cmp	r9, r3
 80084e4:	bfa8      	it	ge
 80084e6:	4699      	movge	r9, r3
 80084e8:	f1b9 0f00 	cmp.w	r9, #0
 80084ec:	dc35      	bgt.n	800855a <_printf_float+0x3ae>
 80084ee:	f04f 0800 	mov.w	r8, #0
 80084f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80084f6:	f104 0a1a 	add.w	sl, r4, #26
 80084fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80084fe:	1a9b      	subs	r3, r3, r2
 8008500:	eba3 0309 	sub.w	r3, r3, r9
 8008504:	4543      	cmp	r3, r8
 8008506:	f77f af79 	ble.w	80083fc <_printf_float+0x250>
 800850a:	2301      	movs	r3, #1
 800850c:	4652      	mov	r2, sl
 800850e:	4631      	mov	r1, r6
 8008510:	4628      	mov	r0, r5
 8008512:	47b8      	blx	r7
 8008514:	3001      	adds	r0, #1
 8008516:	f43f aeaa 	beq.w	800826e <_printf_float+0xc2>
 800851a:	f108 0801 	add.w	r8, r8, #1
 800851e:	e7ec      	b.n	80084fa <_printf_float+0x34e>
 8008520:	4613      	mov	r3, r2
 8008522:	4631      	mov	r1, r6
 8008524:	4642      	mov	r2, r8
 8008526:	4628      	mov	r0, r5
 8008528:	47b8      	blx	r7
 800852a:	3001      	adds	r0, #1
 800852c:	d1c0      	bne.n	80084b0 <_printf_float+0x304>
 800852e:	e69e      	b.n	800826e <_printf_float+0xc2>
 8008530:	2301      	movs	r3, #1
 8008532:	4631      	mov	r1, r6
 8008534:	4628      	mov	r0, r5
 8008536:	9205      	str	r2, [sp, #20]
 8008538:	47b8      	blx	r7
 800853a:	3001      	adds	r0, #1
 800853c:	f43f ae97 	beq.w	800826e <_printf_float+0xc2>
 8008540:	9a05      	ldr	r2, [sp, #20]
 8008542:	f10b 0b01 	add.w	fp, fp, #1
 8008546:	e7b9      	b.n	80084bc <_printf_float+0x310>
 8008548:	ee18 3a10 	vmov	r3, s16
 800854c:	4652      	mov	r2, sl
 800854e:	4631      	mov	r1, r6
 8008550:	4628      	mov	r0, r5
 8008552:	47b8      	blx	r7
 8008554:	3001      	adds	r0, #1
 8008556:	d1be      	bne.n	80084d6 <_printf_float+0x32a>
 8008558:	e689      	b.n	800826e <_printf_float+0xc2>
 800855a:	9a05      	ldr	r2, [sp, #20]
 800855c:	464b      	mov	r3, r9
 800855e:	4442      	add	r2, r8
 8008560:	4631      	mov	r1, r6
 8008562:	4628      	mov	r0, r5
 8008564:	47b8      	blx	r7
 8008566:	3001      	adds	r0, #1
 8008568:	d1c1      	bne.n	80084ee <_printf_float+0x342>
 800856a:	e680      	b.n	800826e <_printf_float+0xc2>
 800856c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800856e:	2a01      	cmp	r2, #1
 8008570:	dc01      	bgt.n	8008576 <_printf_float+0x3ca>
 8008572:	07db      	lsls	r3, r3, #31
 8008574:	d538      	bpl.n	80085e8 <_printf_float+0x43c>
 8008576:	2301      	movs	r3, #1
 8008578:	4642      	mov	r2, r8
 800857a:	4631      	mov	r1, r6
 800857c:	4628      	mov	r0, r5
 800857e:	47b8      	blx	r7
 8008580:	3001      	adds	r0, #1
 8008582:	f43f ae74 	beq.w	800826e <_printf_float+0xc2>
 8008586:	ee18 3a10 	vmov	r3, s16
 800858a:	4652      	mov	r2, sl
 800858c:	4631      	mov	r1, r6
 800858e:	4628      	mov	r0, r5
 8008590:	47b8      	blx	r7
 8008592:	3001      	adds	r0, #1
 8008594:	f43f ae6b 	beq.w	800826e <_printf_float+0xc2>
 8008598:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800859c:	2200      	movs	r2, #0
 800859e:	2300      	movs	r3, #0
 80085a0:	f7f8 fa6a 	bl	8000a78 <__aeabi_dcmpeq>
 80085a4:	b9d8      	cbnz	r0, 80085de <_printf_float+0x432>
 80085a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085a8:	f108 0201 	add.w	r2, r8, #1
 80085ac:	3b01      	subs	r3, #1
 80085ae:	4631      	mov	r1, r6
 80085b0:	4628      	mov	r0, r5
 80085b2:	47b8      	blx	r7
 80085b4:	3001      	adds	r0, #1
 80085b6:	d10e      	bne.n	80085d6 <_printf_float+0x42a>
 80085b8:	e659      	b.n	800826e <_printf_float+0xc2>
 80085ba:	2301      	movs	r3, #1
 80085bc:	4652      	mov	r2, sl
 80085be:	4631      	mov	r1, r6
 80085c0:	4628      	mov	r0, r5
 80085c2:	47b8      	blx	r7
 80085c4:	3001      	adds	r0, #1
 80085c6:	f43f ae52 	beq.w	800826e <_printf_float+0xc2>
 80085ca:	f108 0801 	add.w	r8, r8, #1
 80085ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085d0:	3b01      	subs	r3, #1
 80085d2:	4543      	cmp	r3, r8
 80085d4:	dcf1      	bgt.n	80085ba <_printf_float+0x40e>
 80085d6:	464b      	mov	r3, r9
 80085d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80085dc:	e6dc      	b.n	8008398 <_printf_float+0x1ec>
 80085de:	f04f 0800 	mov.w	r8, #0
 80085e2:	f104 0a1a 	add.w	sl, r4, #26
 80085e6:	e7f2      	b.n	80085ce <_printf_float+0x422>
 80085e8:	2301      	movs	r3, #1
 80085ea:	4642      	mov	r2, r8
 80085ec:	e7df      	b.n	80085ae <_printf_float+0x402>
 80085ee:	2301      	movs	r3, #1
 80085f0:	464a      	mov	r2, r9
 80085f2:	4631      	mov	r1, r6
 80085f4:	4628      	mov	r0, r5
 80085f6:	47b8      	blx	r7
 80085f8:	3001      	adds	r0, #1
 80085fa:	f43f ae38 	beq.w	800826e <_printf_float+0xc2>
 80085fe:	f108 0801 	add.w	r8, r8, #1
 8008602:	68e3      	ldr	r3, [r4, #12]
 8008604:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008606:	1a5b      	subs	r3, r3, r1
 8008608:	4543      	cmp	r3, r8
 800860a:	dcf0      	bgt.n	80085ee <_printf_float+0x442>
 800860c:	e6fa      	b.n	8008404 <_printf_float+0x258>
 800860e:	f04f 0800 	mov.w	r8, #0
 8008612:	f104 0919 	add.w	r9, r4, #25
 8008616:	e7f4      	b.n	8008602 <_printf_float+0x456>

08008618 <_printf_common>:
 8008618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800861c:	4616      	mov	r6, r2
 800861e:	4699      	mov	r9, r3
 8008620:	688a      	ldr	r2, [r1, #8]
 8008622:	690b      	ldr	r3, [r1, #16]
 8008624:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008628:	4293      	cmp	r3, r2
 800862a:	bfb8      	it	lt
 800862c:	4613      	movlt	r3, r2
 800862e:	6033      	str	r3, [r6, #0]
 8008630:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008634:	4607      	mov	r7, r0
 8008636:	460c      	mov	r4, r1
 8008638:	b10a      	cbz	r2, 800863e <_printf_common+0x26>
 800863a:	3301      	adds	r3, #1
 800863c:	6033      	str	r3, [r6, #0]
 800863e:	6823      	ldr	r3, [r4, #0]
 8008640:	0699      	lsls	r1, r3, #26
 8008642:	bf42      	ittt	mi
 8008644:	6833      	ldrmi	r3, [r6, #0]
 8008646:	3302      	addmi	r3, #2
 8008648:	6033      	strmi	r3, [r6, #0]
 800864a:	6825      	ldr	r5, [r4, #0]
 800864c:	f015 0506 	ands.w	r5, r5, #6
 8008650:	d106      	bne.n	8008660 <_printf_common+0x48>
 8008652:	f104 0a19 	add.w	sl, r4, #25
 8008656:	68e3      	ldr	r3, [r4, #12]
 8008658:	6832      	ldr	r2, [r6, #0]
 800865a:	1a9b      	subs	r3, r3, r2
 800865c:	42ab      	cmp	r3, r5
 800865e:	dc26      	bgt.n	80086ae <_printf_common+0x96>
 8008660:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008664:	1e13      	subs	r3, r2, #0
 8008666:	6822      	ldr	r2, [r4, #0]
 8008668:	bf18      	it	ne
 800866a:	2301      	movne	r3, #1
 800866c:	0692      	lsls	r2, r2, #26
 800866e:	d42b      	bmi.n	80086c8 <_printf_common+0xb0>
 8008670:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008674:	4649      	mov	r1, r9
 8008676:	4638      	mov	r0, r7
 8008678:	47c0      	blx	r8
 800867a:	3001      	adds	r0, #1
 800867c:	d01e      	beq.n	80086bc <_printf_common+0xa4>
 800867e:	6823      	ldr	r3, [r4, #0]
 8008680:	68e5      	ldr	r5, [r4, #12]
 8008682:	6832      	ldr	r2, [r6, #0]
 8008684:	f003 0306 	and.w	r3, r3, #6
 8008688:	2b04      	cmp	r3, #4
 800868a:	bf08      	it	eq
 800868c:	1aad      	subeq	r5, r5, r2
 800868e:	68a3      	ldr	r3, [r4, #8]
 8008690:	6922      	ldr	r2, [r4, #16]
 8008692:	bf0c      	ite	eq
 8008694:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008698:	2500      	movne	r5, #0
 800869a:	4293      	cmp	r3, r2
 800869c:	bfc4      	itt	gt
 800869e:	1a9b      	subgt	r3, r3, r2
 80086a0:	18ed      	addgt	r5, r5, r3
 80086a2:	2600      	movs	r6, #0
 80086a4:	341a      	adds	r4, #26
 80086a6:	42b5      	cmp	r5, r6
 80086a8:	d11a      	bne.n	80086e0 <_printf_common+0xc8>
 80086aa:	2000      	movs	r0, #0
 80086ac:	e008      	b.n	80086c0 <_printf_common+0xa8>
 80086ae:	2301      	movs	r3, #1
 80086b0:	4652      	mov	r2, sl
 80086b2:	4649      	mov	r1, r9
 80086b4:	4638      	mov	r0, r7
 80086b6:	47c0      	blx	r8
 80086b8:	3001      	adds	r0, #1
 80086ba:	d103      	bne.n	80086c4 <_printf_common+0xac>
 80086bc:	f04f 30ff 	mov.w	r0, #4294967295
 80086c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086c4:	3501      	adds	r5, #1
 80086c6:	e7c6      	b.n	8008656 <_printf_common+0x3e>
 80086c8:	18e1      	adds	r1, r4, r3
 80086ca:	1c5a      	adds	r2, r3, #1
 80086cc:	2030      	movs	r0, #48	; 0x30
 80086ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80086d2:	4422      	add	r2, r4
 80086d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80086d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80086dc:	3302      	adds	r3, #2
 80086de:	e7c7      	b.n	8008670 <_printf_common+0x58>
 80086e0:	2301      	movs	r3, #1
 80086e2:	4622      	mov	r2, r4
 80086e4:	4649      	mov	r1, r9
 80086e6:	4638      	mov	r0, r7
 80086e8:	47c0      	blx	r8
 80086ea:	3001      	adds	r0, #1
 80086ec:	d0e6      	beq.n	80086bc <_printf_common+0xa4>
 80086ee:	3601      	adds	r6, #1
 80086f0:	e7d9      	b.n	80086a6 <_printf_common+0x8e>
	...

080086f4 <_printf_i>:
 80086f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086f8:	460c      	mov	r4, r1
 80086fa:	4691      	mov	r9, r2
 80086fc:	7e27      	ldrb	r7, [r4, #24]
 80086fe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008700:	2f78      	cmp	r7, #120	; 0x78
 8008702:	4680      	mov	r8, r0
 8008704:	469a      	mov	sl, r3
 8008706:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800870a:	d807      	bhi.n	800871c <_printf_i+0x28>
 800870c:	2f62      	cmp	r7, #98	; 0x62
 800870e:	d80a      	bhi.n	8008726 <_printf_i+0x32>
 8008710:	2f00      	cmp	r7, #0
 8008712:	f000 80d8 	beq.w	80088c6 <_printf_i+0x1d2>
 8008716:	2f58      	cmp	r7, #88	; 0x58
 8008718:	f000 80a3 	beq.w	8008862 <_printf_i+0x16e>
 800871c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008720:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008724:	e03a      	b.n	800879c <_printf_i+0xa8>
 8008726:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800872a:	2b15      	cmp	r3, #21
 800872c:	d8f6      	bhi.n	800871c <_printf_i+0x28>
 800872e:	a001      	add	r0, pc, #4	; (adr r0, 8008734 <_printf_i+0x40>)
 8008730:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008734:	0800878d 	.word	0x0800878d
 8008738:	080087a1 	.word	0x080087a1
 800873c:	0800871d 	.word	0x0800871d
 8008740:	0800871d 	.word	0x0800871d
 8008744:	0800871d 	.word	0x0800871d
 8008748:	0800871d 	.word	0x0800871d
 800874c:	080087a1 	.word	0x080087a1
 8008750:	0800871d 	.word	0x0800871d
 8008754:	0800871d 	.word	0x0800871d
 8008758:	0800871d 	.word	0x0800871d
 800875c:	0800871d 	.word	0x0800871d
 8008760:	080088ad 	.word	0x080088ad
 8008764:	080087d1 	.word	0x080087d1
 8008768:	0800888f 	.word	0x0800888f
 800876c:	0800871d 	.word	0x0800871d
 8008770:	0800871d 	.word	0x0800871d
 8008774:	080088cf 	.word	0x080088cf
 8008778:	0800871d 	.word	0x0800871d
 800877c:	080087d1 	.word	0x080087d1
 8008780:	0800871d 	.word	0x0800871d
 8008784:	0800871d 	.word	0x0800871d
 8008788:	08008897 	.word	0x08008897
 800878c:	680b      	ldr	r3, [r1, #0]
 800878e:	1d1a      	adds	r2, r3, #4
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	600a      	str	r2, [r1, #0]
 8008794:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008798:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800879c:	2301      	movs	r3, #1
 800879e:	e0a3      	b.n	80088e8 <_printf_i+0x1f4>
 80087a0:	6825      	ldr	r5, [r4, #0]
 80087a2:	6808      	ldr	r0, [r1, #0]
 80087a4:	062e      	lsls	r6, r5, #24
 80087a6:	f100 0304 	add.w	r3, r0, #4
 80087aa:	d50a      	bpl.n	80087c2 <_printf_i+0xce>
 80087ac:	6805      	ldr	r5, [r0, #0]
 80087ae:	600b      	str	r3, [r1, #0]
 80087b0:	2d00      	cmp	r5, #0
 80087b2:	da03      	bge.n	80087bc <_printf_i+0xc8>
 80087b4:	232d      	movs	r3, #45	; 0x2d
 80087b6:	426d      	negs	r5, r5
 80087b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087bc:	485e      	ldr	r0, [pc, #376]	; (8008938 <_printf_i+0x244>)
 80087be:	230a      	movs	r3, #10
 80087c0:	e019      	b.n	80087f6 <_printf_i+0x102>
 80087c2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80087c6:	6805      	ldr	r5, [r0, #0]
 80087c8:	600b      	str	r3, [r1, #0]
 80087ca:	bf18      	it	ne
 80087cc:	b22d      	sxthne	r5, r5
 80087ce:	e7ef      	b.n	80087b0 <_printf_i+0xbc>
 80087d0:	680b      	ldr	r3, [r1, #0]
 80087d2:	6825      	ldr	r5, [r4, #0]
 80087d4:	1d18      	adds	r0, r3, #4
 80087d6:	6008      	str	r0, [r1, #0]
 80087d8:	0628      	lsls	r0, r5, #24
 80087da:	d501      	bpl.n	80087e0 <_printf_i+0xec>
 80087dc:	681d      	ldr	r5, [r3, #0]
 80087de:	e002      	b.n	80087e6 <_printf_i+0xf2>
 80087e0:	0669      	lsls	r1, r5, #25
 80087e2:	d5fb      	bpl.n	80087dc <_printf_i+0xe8>
 80087e4:	881d      	ldrh	r5, [r3, #0]
 80087e6:	4854      	ldr	r0, [pc, #336]	; (8008938 <_printf_i+0x244>)
 80087e8:	2f6f      	cmp	r7, #111	; 0x6f
 80087ea:	bf0c      	ite	eq
 80087ec:	2308      	moveq	r3, #8
 80087ee:	230a      	movne	r3, #10
 80087f0:	2100      	movs	r1, #0
 80087f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80087f6:	6866      	ldr	r6, [r4, #4]
 80087f8:	60a6      	str	r6, [r4, #8]
 80087fa:	2e00      	cmp	r6, #0
 80087fc:	bfa2      	ittt	ge
 80087fe:	6821      	ldrge	r1, [r4, #0]
 8008800:	f021 0104 	bicge.w	r1, r1, #4
 8008804:	6021      	strge	r1, [r4, #0]
 8008806:	b90d      	cbnz	r5, 800880c <_printf_i+0x118>
 8008808:	2e00      	cmp	r6, #0
 800880a:	d04d      	beq.n	80088a8 <_printf_i+0x1b4>
 800880c:	4616      	mov	r6, r2
 800880e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008812:	fb03 5711 	mls	r7, r3, r1, r5
 8008816:	5dc7      	ldrb	r7, [r0, r7]
 8008818:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800881c:	462f      	mov	r7, r5
 800881e:	42bb      	cmp	r3, r7
 8008820:	460d      	mov	r5, r1
 8008822:	d9f4      	bls.n	800880e <_printf_i+0x11a>
 8008824:	2b08      	cmp	r3, #8
 8008826:	d10b      	bne.n	8008840 <_printf_i+0x14c>
 8008828:	6823      	ldr	r3, [r4, #0]
 800882a:	07df      	lsls	r7, r3, #31
 800882c:	d508      	bpl.n	8008840 <_printf_i+0x14c>
 800882e:	6923      	ldr	r3, [r4, #16]
 8008830:	6861      	ldr	r1, [r4, #4]
 8008832:	4299      	cmp	r1, r3
 8008834:	bfde      	ittt	le
 8008836:	2330      	movle	r3, #48	; 0x30
 8008838:	f806 3c01 	strble.w	r3, [r6, #-1]
 800883c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008840:	1b92      	subs	r2, r2, r6
 8008842:	6122      	str	r2, [r4, #16]
 8008844:	f8cd a000 	str.w	sl, [sp]
 8008848:	464b      	mov	r3, r9
 800884a:	aa03      	add	r2, sp, #12
 800884c:	4621      	mov	r1, r4
 800884e:	4640      	mov	r0, r8
 8008850:	f7ff fee2 	bl	8008618 <_printf_common>
 8008854:	3001      	adds	r0, #1
 8008856:	d14c      	bne.n	80088f2 <_printf_i+0x1fe>
 8008858:	f04f 30ff 	mov.w	r0, #4294967295
 800885c:	b004      	add	sp, #16
 800885e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008862:	4835      	ldr	r0, [pc, #212]	; (8008938 <_printf_i+0x244>)
 8008864:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008868:	6823      	ldr	r3, [r4, #0]
 800886a:	680e      	ldr	r6, [r1, #0]
 800886c:	061f      	lsls	r7, r3, #24
 800886e:	f856 5b04 	ldr.w	r5, [r6], #4
 8008872:	600e      	str	r6, [r1, #0]
 8008874:	d514      	bpl.n	80088a0 <_printf_i+0x1ac>
 8008876:	07d9      	lsls	r1, r3, #31
 8008878:	bf44      	itt	mi
 800887a:	f043 0320 	orrmi.w	r3, r3, #32
 800887e:	6023      	strmi	r3, [r4, #0]
 8008880:	b91d      	cbnz	r5, 800888a <_printf_i+0x196>
 8008882:	6823      	ldr	r3, [r4, #0]
 8008884:	f023 0320 	bic.w	r3, r3, #32
 8008888:	6023      	str	r3, [r4, #0]
 800888a:	2310      	movs	r3, #16
 800888c:	e7b0      	b.n	80087f0 <_printf_i+0xfc>
 800888e:	6823      	ldr	r3, [r4, #0]
 8008890:	f043 0320 	orr.w	r3, r3, #32
 8008894:	6023      	str	r3, [r4, #0]
 8008896:	2378      	movs	r3, #120	; 0x78
 8008898:	4828      	ldr	r0, [pc, #160]	; (800893c <_printf_i+0x248>)
 800889a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800889e:	e7e3      	b.n	8008868 <_printf_i+0x174>
 80088a0:	065e      	lsls	r6, r3, #25
 80088a2:	bf48      	it	mi
 80088a4:	b2ad      	uxthmi	r5, r5
 80088a6:	e7e6      	b.n	8008876 <_printf_i+0x182>
 80088a8:	4616      	mov	r6, r2
 80088aa:	e7bb      	b.n	8008824 <_printf_i+0x130>
 80088ac:	680b      	ldr	r3, [r1, #0]
 80088ae:	6826      	ldr	r6, [r4, #0]
 80088b0:	6960      	ldr	r0, [r4, #20]
 80088b2:	1d1d      	adds	r5, r3, #4
 80088b4:	600d      	str	r5, [r1, #0]
 80088b6:	0635      	lsls	r5, r6, #24
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	d501      	bpl.n	80088c0 <_printf_i+0x1cc>
 80088bc:	6018      	str	r0, [r3, #0]
 80088be:	e002      	b.n	80088c6 <_printf_i+0x1d2>
 80088c0:	0671      	lsls	r1, r6, #25
 80088c2:	d5fb      	bpl.n	80088bc <_printf_i+0x1c8>
 80088c4:	8018      	strh	r0, [r3, #0]
 80088c6:	2300      	movs	r3, #0
 80088c8:	6123      	str	r3, [r4, #16]
 80088ca:	4616      	mov	r6, r2
 80088cc:	e7ba      	b.n	8008844 <_printf_i+0x150>
 80088ce:	680b      	ldr	r3, [r1, #0]
 80088d0:	1d1a      	adds	r2, r3, #4
 80088d2:	600a      	str	r2, [r1, #0]
 80088d4:	681e      	ldr	r6, [r3, #0]
 80088d6:	6862      	ldr	r2, [r4, #4]
 80088d8:	2100      	movs	r1, #0
 80088da:	4630      	mov	r0, r6
 80088dc:	f7f7 fc58 	bl	8000190 <memchr>
 80088e0:	b108      	cbz	r0, 80088e6 <_printf_i+0x1f2>
 80088e2:	1b80      	subs	r0, r0, r6
 80088e4:	6060      	str	r0, [r4, #4]
 80088e6:	6863      	ldr	r3, [r4, #4]
 80088e8:	6123      	str	r3, [r4, #16]
 80088ea:	2300      	movs	r3, #0
 80088ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088f0:	e7a8      	b.n	8008844 <_printf_i+0x150>
 80088f2:	6923      	ldr	r3, [r4, #16]
 80088f4:	4632      	mov	r2, r6
 80088f6:	4649      	mov	r1, r9
 80088f8:	4640      	mov	r0, r8
 80088fa:	47d0      	blx	sl
 80088fc:	3001      	adds	r0, #1
 80088fe:	d0ab      	beq.n	8008858 <_printf_i+0x164>
 8008900:	6823      	ldr	r3, [r4, #0]
 8008902:	079b      	lsls	r3, r3, #30
 8008904:	d413      	bmi.n	800892e <_printf_i+0x23a>
 8008906:	68e0      	ldr	r0, [r4, #12]
 8008908:	9b03      	ldr	r3, [sp, #12]
 800890a:	4298      	cmp	r0, r3
 800890c:	bfb8      	it	lt
 800890e:	4618      	movlt	r0, r3
 8008910:	e7a4      	b.n	800885c <_printf_i+0x168>
 8008912:	2301      	movs	r3, #1
 8008914:	4632      	mov	r2, r6
 8008916:	4649      	mov	r1, r9
 8008918:	4640      	mov	r0, r8
 800891a:	47d0      	blx	sl
 800891c:	3001      	adds	r0, #1
 800891e:	d09b      	beq.n	8008858 <_printf_i+0x164>
 8008920:	3501      	adds	r5, #1
 8008922:	68e3      	ldr	r3, [r4, #12]
 8008924:	9903      	ldr	r1, [sp, #12]
 8008926:	1a5b      	subs	r3, r3, r1
 8008928:	42ab      	cmp	r3, r5
 800892a:	dcf2      	bgt.n	8008912 <_printf_i+0x21e>
 800892c:	e7eb      	b.n	8008906 <_printf_i+0x212>
 800892e:	2500      	movs	r5, #0
 8008930:	f104 0619 	add.w	r6, r4, #25
 8008934:	e7f5      	b.n	8008922 <_printf_i+0x22e>
 8008936:	bf00      	nop
 8008938:	0800b4ba 	.word	0x0800b4ba
 800893c:	0800b4cb 	.word	0x0800b4cb

08008940 <_sbrk_r>:
 8008940:	b538      	push	{r3, r4, r5, lr}
 8008942:	4d06      	ldr	r5, [pc, #24]	; (800895c <_sbrk_r+0x1c>)
 8008944:	2300      	movs	r3, #0
 8008946:	4604      	mov	r4, r0
 8008948:	4608      	mov	r0, r1
 800894a:	602b      	str	r3, [r5, #0]
 800894c:	f7f9 fe78 	bl	8002640 <_sbrk>
 8008950:	1c43      	adds	r3, r0, #1
 8008952:	d102      	bne.n	800895a <_sbrk_r+0x1a>
 8008954:	682b      	ldr	r3, [r5, #0]
 8008956:	b103      	cbz	r3, 800895a <_sbrk_r+0x1a>
 8008958:	6023      	str	r3, [r4, #0]
 800895a:	bd38      	pop	{r3, r4, r5, pc}
 800895c:	20000ca0 	.word	0x20000ca0

08008960 <siprintf>:
 8008960:	b40e      	push	{r1, r2, r3}
 8008962:	b500      	push	{lr}
 8008964:	b09c      	sub	sp, #112	; 0x70
 8008966:	ab1d      	add	r3, sp, #116	; 0x74
 8008968:	9002      	str	r0, [sp, #8]
 800896a:	9006      	str	r0, [sp, #24]
 800896c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008970:	4809      	ldr	r0, [pc, #36]	; (8008998 <siprintf+0x38>)
 8008972:	9107      	str	r1, [sp, #28]
 8008974:	9104      	str	r1, [sp, #16]
 8008976:	4909      	ldr	r1, [pc, #36]	; (800899c <siprintf+0x3c>)
 8008978:	f853 2b04 	ldr.w	r2, [r3], #4
 800897c:	9105      	str	r1, [sp, #20]
 800897e:	6800      	ldr	r0, [r0, #0]
 8008980:	9301      	str	r3, [sp, #4]
 8008982:	a902      	add	r1, sp, #8
 8008984:	f001 fa8c 	bl	8009ea0 <_svfiprintf_r>
 8008988:	9b02      	ldr	r3, [sp, #8]
 800898a:	2200      	movs	r2, #0
 800898c:	701a      	strb	r2, [r3, #0]
 800898e:	b01c      	add	sp, #112	; 0x70
 8008990:	f85d eb04 	ldr.w	lr, [sp], #4
 8008994:	b003      	add	sp, #12
 8008996:	4770      	bx	lr
 8008998:	20000010 	.word	0x20000010
 800899c:	ffff0208 	.word	0xffff0208

080089a0 <strcat>:
 80089a0:	b510      	push	{r4, lr}
 80089a2:	4602      	mov	r2, r0
 80089a4:	7814      	ldrb	r4, [r2, #0]
 80089a6:	4613      	mov	r3, r2
 80089a8:	3201      	adds	r2, #1
 80089aa:	2c00      	cmp	r4, #0
 80089ac:	d1fa      	bne.n	80089a4 <strcat+0x4>
 80089ae:	3b01      	subs	r3, #1
 80089b0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089b4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80089b8:	2a00      	cmp	r2, #0
 80089ba:	d1f9      	bne.n	80089b0 <strcat+0x10>
 80089bc:	bd10      	pop	{r4, pc}

080089be <quorem>:
 80089be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089c2:	6903      	ldr	r3, [r0, #16]
 80089c4:	690c      	ldr	r4, [r1, #16]
 80089c6:	42a3      	cmp	r3, r4
 80089c8:	4607      	mov	r7, r0
 80089ca:	f2c0 8081 	blt.w	8008ad0 <quorem+0x112>
 80089ce:	3c01      	subs	r4, #1
 80089d0:	f101 0814 	add.w	r8, r1, #20
 80089d4:	f100 0514 	add.w	r5, r0, #20
 80089d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80089dc:	9301      	str	r3, [sp, #4]
 80089de:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80089e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80089e6:	3301      	adds	r3, #1
 80089e8:	429a      	cmp	r2, r3
 80089ea:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80089ee:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80089f2:	fbb2 f6f3 	udiv	r6, r2, r3
 80089f6:	d331      	bcc.n	8008a5c <quorem+0x9e>
 80089f8:	f04f 0e00 	mov.w	lr, #0
 80089fc:	4640      	mov	r0, r8
 80089fe:	46ac      	mov	ip, r5
 8008a00:	46f2      	mov	sl, lr
 8008a02:	f850 2b04 	ldr.w	r2, [r0], #4
 8008a06:	b293      	uxth	r3, r2
 8008a08:	fb06 e303 	mla	r3, r6, r3, lr
 8008a0c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	ebaa 0303 	sub.w	r3, sl, r3
 8008a16:	0c12      	lsrs	r2, r2, #16
 8008a18:	f8dc a000 	ldr.w	sl, [ip]
 8008a1c:	fb06 e202 	mla	r2, r6, r2, lr
 8008a20:	fa13 f38a 	uxtah	r3, r3, sl
 8008a24:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008a28:	fa1f fa82 	uxth.w	sl, r2
 8008a2c:	f8dc 2000 	ldr.w	r2, [ip]
 8008a30:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008a34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a3e:	4581      	cmp	r9, r0
 8008a40:	f84c 3b04 	str.w	r3, [ip], #4
 8008a44:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008a48:	d2db      	bcs.n	8008a02 <quorem+0x44>
 8008a4a:	f855 300b 	ldr.w	r3, [r5, fp]
 8008a4e:	b92b      	cbnz	r3, 8008a5c <quorem+0x9e>
 8008a50:	9b01      	ldr	r3, [sp, #4]
 8008a52:	3b04      	subs	r3, #4
 8008a54:	429d      	cmp	r5, r3
 8008a56:	461a      	mov	r2, r3
 8008a58:	d32e      	bcc.n	8008ab8 <quorem+0xfa>
 8008a5a:	613c      	str	r4, [r7, #16]
 8008a5c:	4638      	mov	r0, r7
 8008a5e:	f001 f8b5 	bl	8009bcc <__mcmp>
 8008a62:	2800      	cmp	r0, #0
 8008a64:	db24      	blt.n	8008ab0 <quorem+0xf2>
 8008a66:	3601      	adds	r6, #1
 8008a68:	4628      	mov	r0, r5
 8008a6a:	f04f 0c00 	mov.w	ip, #0
 8008a6e:	f858 2b04 	ldr.w	r2, [r8], #4
 8008a72:	f8d0 e000 	ldr.w	lr, [r0]
 8008a76:	b293      	uxth	r3, r2
 8008a78:	ebac 0303 	sub.w	r3, ip, r3
 8008a7c:	0c12      	lsrs	r2, r2, #16
 8008a7e:	fa13 f38e 	uxtah	r3, r3, lr
 8008a82:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008a86:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a90:	45c1      	cmp	r9, r8
 8008a92:	f840 3b04 	str.w	r3, [r0], #4
 8008a96:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008a9a:	d2e8      	bcs.n	8008a6e <quorem+0xb0>
 8008a9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008aa0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008aa4:	b922      	cbnz	r2, 8008ab0 <quorem+0xf2>
 8008aa6:	3b04      	subs	r3, #4
 8008aa8:	429d      	cmp	r5, r3
 8008aaa:	461a      	mov	r2, r3
 8008aac:	d30a      	bcc.n	8008ac4 <quorem+0x106>
 8008aae:	613c      	str	r4, [r7, #16]
 8008ab0:	4630      	mov	r0, r6
 8008ab2:	b003      	add	sp, #12
 8008ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ab8:	6812      	ldr	r2, [r2, #0]
 8008aba:	3b04      	subs	r3, #4
 8008abc:	2a00      	cmp	r2, #0
 8008abe:	d1cc      	bne.n	8008a5a <quorem+0x9c>
 8008ac0:	3c01      	subs	r4, #1
 8008ac2:	e7c7      	b.n	8008a54 <quorem+0x96>
 8008ac4:	6812      	ldr	r2, [r2, #0]
 8008ac6:	3b04      	subs	r3, #4
 8008ac8:	2a00      	cmp	r2, #0
 8008aca:	d1f0      	bne.n	8008aae <quorem+0xf0>
 8008acc:	3c01      	subs	r4, #1
 8008ace:	e7eb      	b.n	8008aa8 <quorem+0xea>
 8008ad0:	2000      	movs	r0, #0
 8008ad2:	e7ee      	b.n	8008ab2 <quorem+0xf4>
 8008ad4:	0000      	movs	r0, r0
	...

08008ad8 <_dtoa_r>:
 8008ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008adc:	ed2d 8b02 	vpush	{d8}
 8008ae0:	ec57 6b10 	vmov	r6, r7, d0
 8008ae4:	b095      	sub	sp, #84	; 0x54
 8008ae6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008ae8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008aec:	9105      	str	r1, [sp, #20]
 8008aee:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008af2:	4604      	mov	r4, r0
 8008af4:	9209      	str	r2, [sp, #36]	; 0x24
 8008af6:	930f      	str	r3, [sp, #60]	; 0x3c
 8008af8:	b975      	cbnz	r5, 8008b18 <_dtoa_r+0x40>
 8008afa:	2010      	movs	r0, #16
 8008afc:	f7ff f9ee 	bl	8007edc <malloc>
 8008b00:	4602      	mov	r2, r0
 8008b02:	6260      	str	r0, [r4, #36]	; 0x24
 8008b04:	b920      	cbnz	r0, 8008b10 <_dtoa_r+0x38>
 8008b06:	4bb2      	ldr	r3, [pc, #712]	; (8008dd0 <_dtoa_r+0x2f8>)
 8008b08:	21ea      	movs	r1, #234	; 0xea
 8008b0a:	48b2      	ldr	r0, [pc, #712]	; (8008dd4 <_dtoa_r+0x2fc>)
 8008b0c:	f001 fac8 	bl	800a0a0 <__assert_func>
 8008b10:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008b14:	6005      	str	r5, [r0, #0]
 8008b16:	60c5      	str	r5, [r0, #12]
 8008b18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b1a:	6819      	ldr	r1, [r3, #0]
 8008b1c:	b151      	cbz	r1, 8008b34 <_dtoa_r+0x5c>
 8008b1e:	685a      	ldr	r2, [r3, #4]
 8008b20:	604a      	str	r2, [r1, #4]
 8008b22:	2301      	movs	r3, #1
 8008b24:	4093      	lsls	r3, r2
 8008b26:	608b      	str	r3, [r1, #8]
 8008b28:	4620      	mov	r0, r4
 8008b2a:	f000 fe11 	bl	8009750 <_Bfree>
 8008b2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b30:	2200      	movs	r2, #0
 8008b32:	601a      	str	r2, [r3, #0]
 8008b34:	1e3b      	subs	r3, r7, #0
 8008b36:	bfb9      	ittee	lt
 8008b38:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008b3c:	9303      	strlt	r3, [sp, #12]
 8008b3e:	2300      	movge	r3, #0
 8008b40:	f8c8 3000 	strge.w	r3, [r8]
 8008b44:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008b48:	4ba3      	ldr	r3, [pc, #652]	; (8008dd8 <_dtoa_r+0x300>)
 8008b4a:	bfbc      	itt	lt
 8008b4c:	2201      	movlt	r2, #1
 8008b4e:	f8c8 2000 	strlt.w	r2, [r8]
 8008b52:	ea33 0309 	bics.w	r3, r3, r9
 8008b56:	d11b      	bne.n	8008b90 <_dtoa_r+0xb8>
 8008b58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008b5a:	f242 730f 	movw	r3, #9999	; 0x270f
 8008b5e:	6013      	str	r3, [r2, #0]
 8008b60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b64:	4333      	orrs	r3, r6
 8008b66:	f000 857a 	beq.w	800965e <_dtoa_r+0xb86>
 8008b6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b6c:	b963      	cbnz	r3, 8008b88 <_dtoa_r+0xb0>
 8008b6e:	4b9b      	ldr	r3, [pc, #620]	; (8008ddc <_dtoa_r+0x304>)
 8008b70:	e024      	b.n	8008bbc <_dtoa_r+0xe4>
 8008b72:	4b9b      	ldr	r3, [pc, #620]	; (8008de0 <_dtoa_r+0x308>)
 8008b74:	9300      	str	r3, [sp, #0]
 8008b76:	3308      	adds	r3, #8
 8008b78:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008b7a:	6013      	str	r3, [r2, #0]
 8008b7c:	9800      	ldr	r0, [sp, #0]
 8008b7e:	b015      	add	sp, #84	; 0x54
 8008b80:	ecbd 8b02 	vpop	{d8}
 8008b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b88:	4b94      	ldr	r3, [pc, #592]	; (8008ddc <_dtoa_r+0x304>)
 8008b8a:	9300      	str	r3, [sp, #0]
 8008b8c:	3303      	adds	r3, #3
 8008b8e:	e7f3      	b.n	8008b78 <_dtoa_r+0xa0>
 8008b90:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008b94:	2200      	movs	r2, #0
 8008b96:	ec51 0b17 	vmov	r0, r1, d7
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008ba0:	f7f7 ff6a 	bl	8000a78 <__aeabi_dcmpeq>
 8008ba4:	4680      	mov	r8, r0
 8008ba6:	b158      	cbz	r0, 8008bc0 <_dtoa_r+0xe8>
 8008ba8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008baa:	2301      	movs	r3, #1
 8008bac:	6013      	str	r3, [r2, #0]
 8008bae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	f000 8551 	beq.w	8009658 <_dtoa_r+0xb80>
 8008bb6:	488b      	ldr	r0, [pc, #556]	; (8008de4 <_dtoa_r+0x30c>)
 8008bb8:	6018      	str	r0, [r3, #0]
 8008bba:	1e43      	subs	r3, r0, #1
 8008bbc:	9300      	str	r3, [sp, #0]
 8008bbe:	e7dd      	b.n	8008b7c <_dtoa_r+0xa4>
 8008bc0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008bc4:	aa12      	add	r2, sp, #72	; 0x48
 8008bc6:	a913      	add	r1, sp, #76	; 0x4c
 8008bc8:	4620      	mov	r0, r4
 8008bca:	f001 f8a3 	bl	8009d14 <__d2b>
 8008bce:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008bd2:	4683      	mov	fp, r0
 8008bd4:	2d00      	cmp	r5, #0
 8008bd6:	d07c      	beq.n	8008cd2 <_dtoa_r+0x1fa>
 8008bd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bda:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008bde:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008be2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008be6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008bea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008bee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008bf2:	4b7d      	ldr	r3, [pc, #500]	; (8008de8 <_dtoa_r+0x310>)
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	4630      	mov	r0, r6
 8008bf8:	4639      	mov	r1, r7
 8008bfa:	f7f7 fb1d 	bl	8000238 <__aeabi_dsub>
 8008bfe:	a36e      	add	r3, pc, #440	; (adr r3, 8008db8 <_dtoa_r+0x2e0>)
 8008c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c04:	f7f7 fcd0 	bl	80005a8 <__aeabi_dmul>
 8008c08:	a36d      	add	r3, pc, #436	; (adr r3, 8008dc0 <_dtoa_r+0x2e8>)
 8008c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c0e:	f7f7 fb15 	bl	800023c <__adddf3>
 8008c12:	4606      	mov	r6, r0
 8008c14:	4628      	mov	r0, r5
 8008c16:	460f      	mov	r7, r1
 8008c18:	f7f7 fc5c 	bl	80004d4 <__aeabi_i2d>
 8008c1c:	a36a      	add	r3, pc, #424	; (adr r3, 8008dc8 <_dtoa_r+0x2f0>)
 8008c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c22:	f7f7 fcc1 	bl	80005a8 <__aeabi_dmul>
 8008c26:	4602      	mov	r2, r0
 8008c28:	460b      	mov	r3, r1
 8008c2a:	4630      	mov	r0, r6
 8008c2c:	4639      	mov	r1, r7
 8008c2e:	f7f7 fb05 	bl	800023c <__adddf3>
 8008c32:	4606      	mov	r6, r0
 8008c34:	460f      	mov	r7, r1
 8008c36:	f7f7 ff67 	bl	8000b08 <__aeabi_d2iz>
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	4682      	mov	sl, r0
 8008c3e:	2300      	movs	r3, #0
 8008c40:	4630      	mov	r0, r6
 8008c42:	4639      	mov	r1, r7
 8008c44:	f7f7 ff22 	bl	8000a8c <__aeabi_dcmplt>
 8008c48:	b148      	cbz	r0, 8008c5e <_dtoa_r+0x186>
 8008c4a:	4650      	mov	r0, sl
 8008c4c:	f7f7 fc42 	bl	80004d4 <__aeabi_i2d>
 8008c50:	4632      	mov	r2, r6
 8008c52:	463b      	mov	r3, r7
 8008c54:	f7f7 ff10 	bl	8000a78 <__aeabi_dcmpeq>
 8008c58:	b908      	cbnz	r0, 8008c5e <_dtoa_r+0x186>
 8008c5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c5e:	f1ba 0f16 	cmp.w	sl, #22
 8008c62:	d854      	bhi.n	8008d0e <_dtoa_r+0x236>
 8008c64:	4b61      	ldr	r3, [pc, #388]	; (8008dec <_dtoa_r+0x314>)
 8008c66:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c6e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008c72:	f7f7 ff0b 	bl	8000a8c <__aeabi_dcmplt>
 8008c76:	2800      	cmp	r0, #0
 8008c78:	d04b      	beq.n	8008d12 <_dtoa_r+0x23a>
 8008c7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c7e:	2300      	movs	r3, #0
 8008c80:	930e      	str	r3, [sp, #56]	; 0x38
 8008c82:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008c84:	1b5d      	subs	r5, r3, r5
 8008c86:	1e6b      	subs	r3, r5, #1
 8008c88:	9304      	str	r3, [sp, #16]
 8008c8a:	bf43      	ittte	mi
 8008c8c:	2300      	movmi	r3, #0
 8008c8e:	f1c5 0801 	rsbmi	r8, r5, #1
 8008c92:	9304      	strmi	r3, [sp, #16]
 8008c94:	f04f 0800 	movpl.w	r8, #0
 8008c98:	f1ba 0f00 	cmp.w	sl, #0
 8008c9c:	db3b      	blt.n	8008d16 <_dtoa_r+0x23e>
 8008c9e:	9b04      	ldr	r3, [sp, #16]
 8008ca0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008ca4:	4453      	add	r3, sl
 8008ca6:	9304      	str	r3, [sp, #16]
 8008ca8:	2300      	movs	r3, #0
 8008caa:	9306      	str	r3, [sp, #24]
 8008cac:	9b05      	ldr	r3, [sp, #20]
 8008cae:	2b09      	cmp	r3, #9
 8008cb0:	d869      	bhi.n	8008d86 <_dtoa_r+0x2ae>
 8008cb2:	2b05      	cmp	r3, #5
 8008cb4:	bfc4      	itt	gt
 8008cb6:	3b04      	subgt	r3, #4
 8008cb8:	9305      	strgt	r3, [sp, #20]
 8008cba:	9b05      	ldr	r3, [sp, #20]
 8008cbc:	f1a3 0302 	sub.w	r3, r3, #2
 8008cc0:	bfcc      	ite	gt
 8008cc2:	2500      	movgt	r5, #0
 8008cc4:	2501      	movle	r5, #1
 8008cc6:	2b03      	cmp	r3, #3
 8008cc8:	d869      	bhi.n	8008d9e <_dtoa_r+0x2c6>
 8008cca:	e8df f003 	tbb	[pc, r3]
 8008cce:	4e2c      	.short	0x4e2c
 8008cd0:	5a4c      	.short	0x5a4c
 8008cd2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008cd6:	441d      	add	r5, r3
 8008cd8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008cdc:	2b20      	cmp	r3, #32
 8008cde:	bfc1      	itttt	gt
 8008ce0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008ce4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008ce8:	fa09 f303 	lslgt.w	r3, r9, r3
 8008cec:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008cf0:	bfda      	itte	le
 8008cf2:	f1c3 0320 	rsble	r3, r3, #32
 8008cf6:	fa06 f003 	lslle.w	r0, r6, r3
 8008cfa:	4318      	orrgt	r0, r3
 8008cfc:	f7f7 fbda 	bl	80004b4 <__aeabi_ui2d>
 8008d00:	2301      	movs	r3, #1
 8008d02:	4606      	mov	r6, r0
 8008d04:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008d08:	3d01      	subs	r5, #1
 8008d0a:	9310      	str	r3, [sp, #64]	; 0x40
 8008d0c:	e771      	b.n	8008bf2 <_dtoa_r+0x11a>
 8008d0e:	2301      	movs	r3, #1
 8008d10:	e7b6      	b.n	8008c80 <_dtoa_r+0x1a8>
 8008d12:	900e      	str	r0, [sp, #56]	; 0x38
 8008d14:	e7b5      	b.n	8008c82 <_dtoa_r+0x1aa>
 8008d16:	f1ca 0300 	rsb	r3, sl, #0
 8008d1a:	9306      	str	r3, [sp, #24]
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	eba8 080a 	sub.w	r8, r8, sl
 8008d22:	930d      	str	r3, [sp, #52]	; 0x34
 8008d24:	e7c2      	b.n	8008cac <_dtoa_r+0x1d4>
 8008d26:	2300      	movs	r3, #0
 8008d28:	9308      	str	r3, [sp, #32]
 8008d2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	dc39      	bgt.n	8008da4 <_dtoa_r+0x2cc>
 8008d30:	f04f 0901 	mov.w	r9, #1
 8008d34:	f8cd 9004 	str.w	r9, [sp, #4]
 8008d38:	464b      	mov	r3, r9
 8008d3a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008d3e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008d40:	2200      	movs	r2, #0
 8008d42:	6042      	str	r2, [r0, #4]
 8008d44:	2204      	movs	r2, #4
 8008d46:	f102 0614 	add.w	r6, r2, #20
 8008d4a:	429e      	cmp	r6, r3
 8008d4c:	6841      	ldr	r1, [r0, #4]
 8008d4e:	d92f      	bls.n	8008db0 <_dtoa_r+0x2d8>
 8008d50:	4620      	mov	r0, r4
 8008d52:	f000 fcbd 	bl	80096d0 <_Balloc>
 8008d56:	9000      	str	r0, [sp, #0]
 8008d58:	2800      	cmp	r0, #0
 8008d5a:	d14b      	bne.n	8008df4 <_dtoa_r+0x31c>
 8008d5c:	4b24      	ldr	r3, [pc, #144]	; (8008df0 <_dtoa_r+0x318>)
 8008d5e:	4602      	mov	r2, r0
 8008d60:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008d64:	e6d1      	b.n	8008b0a <_dtoa_r+0x32>
 8008d66:	2301      	movs	r3, #1
 8008d68:	e7de      	b.n	8008d28 <_dtoa_r+0x250>
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	9308      	str	r3, [sp, #32]
 8008d6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d70:	eb0a 0903 	add.w	r9, sl, r3
 8008d74:	f109 0301 	add.w	r3, r9, #1
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	9301      	str	r3, [sp, #4]
 8008d7c:	bfb8      	it	lt
 8008d7e:	2301      	movlt	r3, #1
 8008d80:	e7dd      	b.n	8008d3e <_dtoa_r+0x266>
 8008d82:	2301      	movs	r3, #1
 8008d84:	e7f2      	b.n	8008d6c <_dtoa_r+0x294>
 8008d86:	2501      	movs	r5, #1
 8008d88:	2300      	movs	r3, #0
 8008d8a:	9305      	str	r3, [sp, #20]
 8008d8c:	9508      	str	r5, [sp, #32]
 8008d8e:	f04f 39ff 	mov.w	r9, #4294967295
 8008d92:	2200      	movs	r2, #0
 8008d94:	f8cd 9004 	str.w	r9, [sp, #4]
 8008d98:	2312      	movs	r3, #18
 8008d9a:	9209      	str	r2, [sp, #36]	; 0x24
 8008d9c:	e7cf      	b.n	8008d3e <_dtoa_r+0x266>
 8008d9e:	2301      	movs	r3, #1
 8008da0:	9308      	str	r3, [sp, #32]
 8008da2:	e7f4      	b.n	8008d8e <_dtoa_r+0x2b6>
 8008da4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008da8:	f8cd 9004 	str.w	r9, [sp, #4]
 8008dac:	464b      	mov	r3, r9
 8008dae:	e7c6      	b.n	8008d3e <_dtoa_r+0x266>
 8008db0:	3101      	adds	r1, #1
 8008db2:	6041      	str	r1, [r0, #4]
 8008db4:	0052      	lsls	r2, r2, #1
 8008db6:	e7c6      	b.n	8008d46 <_dtoa_r+0x26e>
 8008db8:	636f4361 	.word	0x636f4361
 8008dbc:	3fd287a7 	.word	0x3fd287a7
 8008dc0:	8b60c8b3 	.word	0x8b60c8b3
 8008dc4:	3fc68a28 	.word	0x3fc68a28
 8008dc8:	509f79fb 	.word	0x509f79fb
 8008dcc:	3fd34413 	.word	0x3fd34413
 8008dd0:	0800b4e9 	.word	0x0800b4e9
 8008dd4:	0800b500 	.word	0x0800b500
 8008dd8:	7ff00000 	.word	0x7ff00000
 8008ddc:	0800b4e5 	.word	0x0800b4e5
 8008de0:	0800b4dc 	.word	0x0800b4dc
 8008de4:	0800b4b9 	.word	0x0800b4b9
 8008de8:	3ff80000 	.word	0x3ff80000
 8008dec:	0800b5f8 	.word	0x0800b5f8
 8008df0:	0800b55f 	.word	0x0800b55f
 8008df4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008df6:	9a00      	ldr	r2, [sp, #0]
 8008df8:	601a      	str	r2, [r3, #0]
 8008dfa:	9b01      	ldr	r3, [sp, #4]
 8008dfc:	2b0e      	cmp	r3, #14
 8008dfe:	f200 80ad 	bhi.w	8008f5c <_dtoa_r+0x484>
 8008e02:	2d00      	cmp	r5, #0
 8008e04:	f000 80aa 	beq.w	8008f5c <_dtoa_r+0x484>
 8008e08:	f1ba 0f00 	cmp.w	sl, #0
 8008e0c:	dd36      	ble.n	8008e7c <_dtoa_r+0x3a4>
 8008e0e:	4ac3      	ldr	r2, [pc, #780]	; (800911c <_dtoa_r+0x644>)
 8008e10:	f00a 030f 	and.w	r3, sl, #15
 8008e14:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008e18:	ed93 7b00 	vldr	d7, [r3]
 8008e1c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008e20:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008e24:	eeb0 8a47 	vmov.f32	s16, s14
 8008e28:	eef0 8a67 	vmov.f32	s17, s15
 8008e2c:	d016      	beq.n	8008e5c <_dtoa_r+0x384>
 8008e2e:	4bbc      	ldr	r3, [pc, #752]	; (8009120 <_dtoa_r+0x648>)
 8008e30:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008e34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008e38:	f7f7 fce0 	bl	80007fc <__aeabi_ddiv>
 8008e3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e40:	f007 070f 	and.w	r7, r7, #15
 8008e44:	2503      	movs	r5, #3
 8008e46:	4eb6      	ldr	r6, [pc, #728]	; (8009120 <_dtoa_r+0x648>)
 8008e48:	b957      	cbnz	r7, 8008e60 <_dtoa_r+0x388>
 8008e4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e4e:	ec53 2b18 	vmov	r2, r3, d8
 8008e52:	f7f7 fcd3 	bl	80007fc <__aeabi_ddiv>
 8008e56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e5a:	e029      	b.n	8008eb0 <_dtoa_r+0x3d8>
 8008e5c:	2502      	movs	r5, #2
 8008e5e:	e7f2      	b.n	8008e46 <_dtoa_r+0x36e>
 8008e60:	07f9      	lsls	r1, r7, #31
 8008e62:	d508      	bpl.n	8008e76 <_dtoa_r+0x39e>
 8008e64:	ec51 0b18 	vmov	r0, r1, d8
 8008e68:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008e6c:	f7f7 fb9c 	bl	80005a8 <__aeabi_dmul>
 8008e70:	ec41 0b18 	vmov	d8, r0, r1
 8008e74:	3501      	adds	r5, #1
 8008e76:	107f      	asrs	r7, r7, #1
 8008e78:	3608      	adds	r6, #8
 8008e7a:	e7e5      	b.n	8008e48 <_dtoa_r+0x370>
 8008e7c:	f000 80a6 	beq.w	8008fcc <_dtoa_r+0x4f4>
 8008e80:	f1ca 0600 	rsb	r6, sl, #0
 8008e84:	4ba5      	ldr	r3, [pc, #660]	; (800911c <_dtoa_r+0x644>)
 8008e86:	4fa6      	ldr	r7, [pc, #664]	; (8009120 <_dtoa_r+0x648>)
 8008e88:	f006 020f 	and.w	r2, r6, #15
 8008e8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e94:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008e98:	f7f7 fb86 	bl	80005a8 <__aeabi_dmul>
 8008e9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ea0:	1136      	asrs	r6, r6, #4
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	2502      	movs	r5, #2
 8008ea6:	2e00      	cmp	r6, #0
 8008ea8:	f040 8085 	bne.w	8008fb6 <_dtoa_r+0x4de>
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d1d2      	bne.n	8008e56 <_dtoa_r+0x37e>
 8008eb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	f000 808c 	beq.w	8008fd0 <_dtoa_r+0x4f8>
 8008eb8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008ebc:	4b99      	ldr	r3, [pc, #612]	; (8009124 <_dtoa_r+0x64c>)
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	4630      	mov	r0, r6
 8008ec2:	4639      	mov	r1, r7
 8008ec4:	f7f7 fde2 	bl	8000a8c <__aeabi_dcmplt>
 8008ec8:	2800      	cmp	r0, #0
 8008eca:	f000 8081 	beq.w	8008fd0 <_dtoa_r+0x4f8>
 8008ece:	9b01      	ldr	r3, [sp, #4]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d07d      	beq.n	8008fd0 <_dtoa_r+0x4f8>
 8008ed4:	f1b9 0f00 	cmp.w	r9, #0
 8008ed8:	dd3c      	ble.n	8008f54 <_dtoa_r+0x47c>
 8008eda:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008ede:	9307      	str	r3, [sp, #28]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	4b91      	ldr	r3, [pc, #580]	; (8009128 <_dtoa_r+0x650>)
 8008ee4:	4630      	mov	r0, r6
 8008ee6:	4639      	mov	r1, r7
 8008ee8:	f7f7 fb5e 	bl	80005a8 <__aeabi_dmul>
 8008eec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ef0:	3501      	adds	r5, #1
 8008ef2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008ef6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008efa:	4628      	mov	r0, r5
 8008efc:	f7f7 faea 	bl	80004d4 <__aeabi_i2d>
 8008f00:	4632      	mov	r2, r6
 8008f02:	463b      	mov	r3, r7
 8008f04:	f7f7 fb50 	bl	80005a8 <__aeabi_dmul>
 8008f08:	4b88      	ldr	r3, [pc, #544]	; (800912c <_dtoa_r+0x654>)
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	f7f7 f996 	bl	800023c <__adddf3>
 8008f10:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008f14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f18:	9303      	str	r3, [sp, #12]
 8008f1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d15c      	bne.n	8008fda <_dtoa_r+0x502>
 8008f20:	4b83      	ldr	r3, [pc, #524]	; (8009130 <_dtoa_r+0x658>)
 8008f22:	2200      	movs	r2, #0
 8008f24:	4630      	mov	r0, r6
 8008f26:	4639      	mov	r1, r7
 8008f28:	f7f7 f986 	bl	8000238 <__aeabi_dsub>
 8008f2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f30:	4606      	mov	r6, r0
 8008f32:	460f      	mov	r7, r1
 8008f34:	f7f7 fdc8 	bl	8000ac8 <__aeabi_dcmpgt>
 8008f38:	2800      	cmp	r0, #0
 8008f3a:	f040 8296 	bne.w	800946a <_dtoa_r+0x992>
 8008f3e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008f42:	4630      	mov	r0, r6
 8008f44:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f48:	4639      	mov	r1, r7
 8008f4a:	f7f7 fd9f 	bl	8000a8c <__aeabi_dcmplt>
 8008f4e:	2800      	cmp	r0, #0
 8008f50:	f040 8288 	bne.w	8009464 <_dtoa_r+0x98c>
 8008f54:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008f58:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008f5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	f2c0 8158 	blt.w	8009214 <_dtoa_r+0x73c>
 8008f64:	f1ba 0f0e 	cmp.w	sl, #14
 8008f68:	f300 8154 	bgt.w	8009214 <_dtoa_r+0x73c>
 8008f6c:	4b6b      	ldr	r3, [pc, #428]	; (800911c <_dtoa_r+0x644>)
 8008f6e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008f72:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	f280 80e3 	bge.w	8009144 <_dtoa_r+0x66c>
 8008f7e:	9b01      	ldr	r3, [sp, #4]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	f300 80df 	bgt.w	8009144 <_dtoa_r+0x66c>
 8008f86:	f040 826d 	bne.w	8009464 <_dtoa_r+0x98c>
 8008f8a:	4b69      	ldr	r3, [pc, #420]	; (8009130 <_dtoa_r+0x658>)
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	4640      	mov	r0, r8
 8008f90:	4649      	mov	r1, r9
 8008f92:	f7f7 fb09 	bl	80005a8 <__aeabi_dmul>
 8008f96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f9a:	f7f7 fd8b 	bl	8000ab4 <__aeabi_dcmpge>
 8008f9e:	9e01      	ldr	r6, [sp, #4]
 8008fa0:	4637      	mov	r7, r6
 8008fa2:	2800      	cmp	r0, #0
 8008fa4:	f040 8243 	bne.w	800942e <_dtoa_r+0x956>
 8008fa8:	9d00      	ldr	r5, [sp, #0]
 8008faa:	2331      	movs	r3, #49	; 0x31
 8008fac:	f805 3b01 	strb.w	r3, [r5], #1
 8008fb0:	f10a 0a01 	add.w	sl, sl, #1
 8008fb4:	e23f      	b.n	8009436 <_dtoa_r+0x95e>
 8008fb6:	07f2      	lsls	r2, r6, #31
 8008fb8:	d505      	bpl.n	8008fc6 <_dtoa_r+0x4ee>
 8008fba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fbe:	f7f7 faf3 	bl	80005a8 <__aeabi_dmul>
 8008fc2:	3501      	adds	r5, #1
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	1076      	asrs	r6, r6, #1
 8008fc8:	3708      	adds	r7, #8
 8008fca:	e76c      	b.n	8008ea6 <_dtoa_r+0x3ce>
 8008fcc:	2502      	movs	r5, #2
 8008fce:	e76f      	b.n	8008eb0 <_dtoa_r+0x3d8>
 8008fd0:	9b01      	ldr	r3, [sp, #4]
 8008fd2:	f8cd a01c 	str.w	sl, [sp, #28]
 8008fd6:	930c      	str	r3, [sp, #48]	; 0x30
 8008fd8:	e78d      	b.n	8008ef6 <_dtoa_r+0x41e>
 8008fda:	9900      	ldr	r1, [sp, #0]
 8008fdc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008fde:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008fe0:	4b4e      	ldr	r3, [pc, #312]	; (800911c <_dtoa_r+0x644>)
 8008fe2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008fe6:	4401      	add	r1, r0
 8008fe8:	9102      	str	r1, [sp, #8]
 8008fea:	9908      	ldr	r1, [sp, #32]
 8008fec:	eeb0 8a47 	vmov.f32	s16, s14
 8008ff0:	eef0 8a67 	vmov.f32	s17, s15
 8008ff4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ff8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008ffc:	2900      	cmp	r1, #0
 8008ffe:	d045      	beq.n	800908c <_dtoa_r+0x5b4>
 8009000:	494c      	ldr	r1, [pc, #304]	; (8009134 <_dtoa_r+0x65c>)
 8009002:	2000      	movs	r0, #0
 8009004:	f7f7 fbfa 	bl	80007fc <__aeabi_ddiv>
 8009008:	ec53 2b18 	vmov	r2, r3, d8
 800900c:	f7f7 f914 	bl	8000238 <__aeabi_dsub>
 8009010:	9d00      	ldr	r5, [sp, #0]
 8009012:	ec41 0b18 	vmov	d8, r0, r1
 8009016:	4639      	mov	r1, r7
 8009018:	4630      	mov	r0, r6
 800901a:	f7f7 fd75 	bl	8000b08 <__aeabi_d2iz>
 800901e:	900c      	str	r0, [sp, #48]	; 0x30
 8009020:	f7f7 fa58 	bl	80004d4 <__aeabi_i2d>
 8009024:	4602      	mov	r2, r0
 8009026:	460b      	mov	r3, r1
 8009028:	4630      	mov	r0, r6
 800902a:	4639      	mov	r1, r7
 800902c:	f7f7 f904 	bl	8000238 <__aeabi_dsub>
 8009030:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009032:	3330      	adds	r3, #48	; 0x30
 8009034:	f805 3b01 	strb.w	r3, [r5], #1
 8009038:	ec53 2b18 	vmov	r2, r3, d8
 800903c:	4606      	mov	r6, r0
 800903e:	460f      	mov	r7, r1
 8009040:	f7f7 fd24 	bl	8000a8c <__aeabi_dcmplt>
 8009044:	2800      	cmp	r0, #0
 8009046:	d165      	bne.n	8009114 <_dtoa_r+0x63c>
 8009048:	4632      	mov	r2, r6
 800904a:	463b      	mov	r3, r7
 800904c:	4935      	ldr	r1, [pc, #212]	; (8009124 <_dtoa_r+0x64c>)
 800904e:	2000      	movs	r0, #0
 8009050:	f7f7 f8f2 	bl	8000238 <__aeabi_dsub>
 8009054:	ec53 2b18 	vmov	r2, r3, d8
 8009058:	f7f7 fd18 	bl	8000a8c <__aeabi_dcmplt>
 800905c:	2800      	cmp	r0, #0
 800905e:	f040 80b9 	bne.w	80091d4 <_dtoa_r+0x6fc>
 8009062:	9b02      	ldr	r3, [sp, #8]
 8009064:	429d      	cmp	r5, r3
 8009066:	f43f af75 	beq.w	8008f54 <_dtoa_r+0x47c>
 800906a:	4b2f      	ldr	r3, [pc, #188]	; (8009128 <_dtoa_r+0x650>)
 800906c:	ec51 0b18 	vmov	r0, r1, d8
 8009070:	2200      	movs	r2, #0
 8009072:	f7f7 fa99 	bl	80005a8 <__aeabi_dmul>
 8009076:	4b2c      	ldr	r3, [pc, #176]	; (8009128 <_dtoa_r+0x650>)
 8009078:	ec41 0b18 	vmov	d8, r0, r1
 800907c:	2200      	movs	r2, #0
 800907e:	4630      	mov	r0, r6
 8009080:	4639      	mov	r1, r7
 8009082:	f7f7 fa91 	bl	80005a8 <__aeabi_dmul>
 8009086:	4606      	mov	r6, r0
 8009088:	460f      	mov	r7, r1
 800908a:	e7c4      	b.n	8009016 <_dtoa_r+0x53e>
 800908c:	ec51 0b17 	vmov	r0, r1, d7
 8009090:	f7f7 fa8a 	bl	80005a8 <__aeabi_dmul>
 8009094:	9b02      	ldr	r3, [sp, #8]
 8009096:	9d00      	ldr	r5, [sp, #0]
 8009098:	930c      	str	r3, [sp, #48]	; 0x30
 800909a:	ec41 0b18 	vmov	d8, r0, r1
 800909e:	4639      	mov	r1, r7
 80090a0:	4630      	mov	r0, r6
 80090a2:	f7f7 fd31 	bl	8000b08 <__aeabi_d2iz>
 80090a6:	9011      	str	r0, [sp, #68]	; 0x44
 80090a8:	f7f7 fa14 	bl	80004d4 <__aeabi_i2d>
 80090ac:	4602      	mov	r2, r0
 80090ae:	460b      	mov	r3, r1
 80090b0:	4630      	mov	r0, r6
 80090b2:	4639      	mov	r1, r7
 80090b4:	f7f7 f8c0 	bl	8000238 <__aeabi_dsub>
 80090b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80090ba:	3330      	adds	r3, #48	; 0x30
 80090bc:	f805 3b01 	strb.w	r3, [r5], #1
 80090c0:	9b02      	ldr	r3, [sp, #8]
 80090c2:	429d      	cmp	r5, r3
 80090c4:	4606      	mov	r6, r0
 80090c6:	460f      	mov	r7, r1
 80090c8:	f04f 0200 	mov.w	r2, #0
 80090cc:	d134      	bne.n	8009138 <_dtoa_r+0x660>
 80090ce:	4b19      	ldr	r3, [pc, #100]	; (8009134 <_dtoa_r+0x65c>)
 80090d0:	ec51 0b18 	vmov	r0, r1, d8
 80090d4:	f7f7 f8b2 	bl	800023c <__adddf3>
 80090d8:	4602      	mov	r2, r0
 80090da:	460b      	mov	r3, r1
 80090dc:	4630      	mov	r0, r6
 80090de:	4639      	mov	r1, r7
 80090e0:	f7f7 fcf2 	bl	8000ac8 <__aeabi_dcmpgt>
 80090e4:	2800      	cmp	r0, #0
 80090e6:	d175      	bne.n	80091d4 <_dtoa_r+0x6fc>
 80090e8:	ec53 2b18 	vmov	r2, r3, d8
 80090ec:	4911      	ldr	r1, [pc, #68]	; (8009134 <_dtoa_r+0x65c>)
 80090ee:	2000      	movs	r0, #0
 80090f0:	f7f7 f8a2 	bl	8000238 <__aeabi_dsub>
 80090f4:	4602      	mov	r2, r0
 80090f6:	460b      	mov	r3, r1
 80090f8:	4630      	mov	r0, r6
 80090fa:	4639      	mov	r1, r7
 80090fc:	f7f7 fcc6 	bl	8000a8c <__aeabi_dcmplt>
 8009100:	2800      	cmp	r0, #0
 8009102:	f43f af27 	beq.w	8008f54 <_dtoa_r+0x47c>
 8009106:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009108:	1e6b      	subs	r3, r5, #1
 800910a:	930c      	str	r3, [sp, #48]	; 0x30
 800910c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009110:	2b30      	cmp	r3, #48	; 0x30
 8009112:	d0f8      	beq.n	8009106 <_dtoa_r+0x62e>
 8009114:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009118:	e04a      	b.n	80091b0 <_dtoa_r+0x6d8>
 800911a:	bf00      	nop
 800911c:	0800b5f8 	.word	0x0800b5f8
 8009120:	0800b5d0 	.word	0x0800b5d0
 8009124:	3ff00000 	.word	0x3ff00000
 8009128:	40240000 	.word	0x40240000
 800912c:	401c0000 	.word	0x401c0000
 8009130:	40140000 	.word	0x40140000
 8009134:	3fe00000 	.word	0x3fe00000
 8009138:	4baf      	ldr	r3, [pc, #700]	; (80093f8 <_dtoa_r+0x920>)
 800913a:	f7f7 fa35 	bl	80005a8 <__aeabi_dmul>
 800913e:	4606      	mov	r6, r0
 8009140:	460f      	mov	r7, r1
 8009142:	e7ac      	b.n	800909e <_dtoa_r+0x5c6>
 8009144:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009148:	9d00      	ldr	r5, [sp, #0]
 800914a:	4642      	mov	r2, r8
 800914c:	464b      	mov	r3, r9
 800914e:	4630      	mov	r0, r6
 8009150:	4639      	mov	r1, r7
 8009152:	f7f7 fb53 	bl	80007fc <__aeabi_ddiv>
 8009156:	f7f7 fcd7 	bl	8000b08 <__aeabi_d2iz>
 800915a:	9002      	str	r0, [sp, #8]
 800915c:	f7f7 f9ba 	bl	80004d4 <__aeabi_i2d>
 8009160:	4642      	mov	r2, r8
 8009162:	464b      	mov	r3, r9
 8009164:	f7f7 fa20 	bl	80005a8 <__aeabi_dmul>
 8009168:	4602      	mov	r2, r0
 800916a:	460b      	mov	r3, r1
 800916c:	4630      	mov	r0, r6
 800916e:	4639      	mov	r1, r7
 8009170:	f7f7 f862 	bl	8000238 <__aeabi_dsub>
 8009174:	9e02      	ldr	r6, [sp, #8]
 8009176:	9f01      	ldr	r7, [sp, #4]
 8009178:	3630      	adds	r6, #48	; 0x30
 800917a:	f805 6b01 	strb.w	r6, [r5], #1
 800917e:	9e00      	ldr	r6, [sp, #0]
 8009180:	1bae      	subs	r6, r5, r6
 8009182:	42b7      	cmp	r7, r6
 8009184:	4602      	mov	r2, r0
 8009186:	460b      	mov	r3, r1
 8009188:	d137      	bne.n	80091fa <_dtoa_r+0x722>
 800918a:	f7f7 f857 	bl	800023c <__adddf3>
 800918e:	4642      	mov	r2, r8
 8009190:	464b      	mov	r3, r9
 8009192:	4606      	mov	r6, r0
 8009194:	460f      	mov	r7, r1
 8009196:	f7f7 fc97 	bl	8000ac8 <__aeabi_dcmpgt>
 800919a:	b9c8      	cbnz	r0, 80091d0 <_dtoa_r+0x6f8>
 800919c:	4642      	mov	r2, r8
 800919e:	464b      	mov	r3, r9
 80091a0:	4630      	mov	r0, r6
 80091a2:	4639      	mov	r1, r7
 80091a4:	f7f7 fc68 	bl	8000a78 <__aeabi_dcmpeq>
 80091a8:	b110      	cbz	r0, 80091b0 <_dtoa_r+0x6d8>
 80091aa:	9b02      	ldr	r3, [sp, #8]
 80091ac:	07d9      	lsls	r1, r3, #31
 80091ae:	d40f      	bmi.n	80091d0 <_dtoa_r+0x6f8>
 80091b0:	4620      	mov	r0, r4
 80091b2:	4659      	mov	r1, fp
 80091b4:	f000 facc 	bl	8009750 <_Bfree>
 80091b8:	2300      	movs	r3, #0
 80091ba:	702b      	strb	r3, [r5, #0]
 80091bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80091be:	f10a 0001 	add.w	r0, sl, #1
 80091c2:	6018      	str	r0, [r3, #0]
 80091c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	f43f acd8 	beq.w	8008b7c <_dtoa_r+0xa4>
 80091cc:	601d      	str	r5, [r3, #0]
 80091ce:	e4d5      	b.n	8008b7c <_dtoa_r+0xa4>
 80091d0:	f8cd a01c 	str.w	sl, [sp, #28]
 80091d4:	462b      	mov	r3, r5
 80091d6:	461d      	mov	r5, r3
 80091d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80091dc:	2a39      	cmp	r2, #57	; 0x39
 80091de:	d108      	bne.n	80091f2 <_dtoa_r+0x71a>
 80091e0:	9a00      	ldr	r2, [sp, #0]
 80091e2:	429a      	cmp	r2, r3
 80091e4:	d1f7      	bne.n	80091d6 <_dtoa_r+0x6fe>
 80091e6:	9a07      	ldr	r2, [sp, #28]
 80091e8:	9900      	ldr	r1, [sp, #0]
 80091ea:	3201      	adds	r2, #1
 80091ec:	9207      	str	r2, [sp, #28]
 80091ee:	2230      	movs	r2, #48	; 0x30
 80091f0:	700a      	strb	r2, [r1, #0]
 80091f2:	781a      	ldrb	r2, [r3, #0]
 80091f4:	3201      	adds	r2, #1
 80091f6:	701a      	strb	r2, [r3, #0]
 80091f8:	e78c      	b.n	8009114 <_dtoa_r+0x63c>
 80091fa:	4b7f      	ldr	r3, [pc, #508]	; (80093f8 <_dtoa_r+0x920>)
 80091fc:	2200      	movs	r2, #0
 80091fe:	f7f7 f9d3 	bl	80005a8 <__aeabi_dmul>
 8009202:	2200      	movs	r2, #0
 8009204:	2300      	movs	r3, #0
 8009206:	4606      	mov	r6, r0
 8009208:	460f      	mov	r7, r1
 800920a:	f7f7 fc35 	bl	8000a78 <__aeabi_dcmpeq>
 800920e:	2800      	cmp	r0, #0
 8009210:	d09b      	beq.n	800914a <_dtoa_r+0x672>
 8009212:	e7cd      	b.n	80091b0 <_dtoa_r+0x6d8>
 8009214:	9a08      	ldr	r2, [sp, #32]
 8009216:	2a00      	cmp	r2, #0
 8009218:	f000 80c4 	beq.w	80093a4 <_dtoa_r+0x8cc>
 800921c:	9a05      	ldr	r2, [sp, #20]
 800921e:	2a01      	cmp	r2, #1
 8009220:	f300 80a8 	bgt.w	8009374 <_dtoa_r+0x89c>
 8009224:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009226:	2a00      	cmp	r2, #0
 8009228:	f000 80a0 	beq.w	800936c <_dtoa_r+0x894>
 800922c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009230:	9e06      	ldr	r6, [sp, #24]
 8009232:	4645      	mov	r5, r8
 8009234:	9a04      	ldr	r2, [sp, #16]
 8009236:	2101      	movs	r1, #1
 8009238:	441a      	add	r2, r3
 800923a:	4620      	mov	r0, r4
 800923c:	4498      	add	r8, r3
 800923e:	9204      	str	r2, [sp, #16]
 8009240:	f000 fb42 	bl	80098c8 <__i2b>
 8009244:	4607      	mov	r7, r0
 8009246:	2d00      	cmp	r5, #0
 8009248:	dd0b      	ble.n	8009262 <_dtoa_r+0x78a>
 800924a:	9b04      	ldr	r3, [sp, #16]
 800924c:	2b00      	cmp	r3, #0
 800924e:	dd08      	ble.n	8009262 <_dtoa_r+0x78a>
 8009250:	42ab      	cmp	r3, r5
 8009252:	9a04      	ldr	r2, [sp, #16]
 8009254:	bfa8      	it	ge
 8009256:	462b      	movge	r3, r5
 8009258:	eba8 0803 	sub.w	r8, r8, r3
 800925c:	1aed      	subs	r5, r5, r3
 800925e:	1ad3      	subs	r3, r2, r3
 8009260:	9304      	str	r3, [sp, #16]
 8009262:	9b06      	ldr	r3, [sp, #24]
 8009264:	b1fb      	cbz	r3, 80092a6 <_dtoa_r+0x7ce>
 8009266:	9b08      	ldr	r3, [sp, #32]
 8009268:	2b00      	cmp	r3, #0
 800926a:	f000 809f 	beq.w	80093ac <_dtoa_r+0x8d4>
 800926e:	2e00      	cmp	r6, #0
 8009270:	dd11      	ble.n	8009296 <_dtoa_r+0x7be>
 8009272:	4639      	mov	r1, r7
 8009274:	4632      	mov	r2, r6
 8009276:	4620      	mov	r0, r4
 8009278:	f000 fbe2 	bl	8009a40 <__pow5mult>
 800927c:	465a      	mov	r2, fp
 800927e:	4601      	mov	r1, r0
 8009280:	4607      	mov	r7, r0
 8009282:	4620      	mov	r0, r4
 8009284:	f000 fb36 	bl	80098f4 <__multiply>
 8009288:	4659      	mov	r1, fp
 800928a:	9007      	str	r0, [sp, #28]
 800928c:	4620      	mov	r0, r4
 800928e:	f000 fa5f 	bl	8009750 <_Bfree>
 8009292:	9b07      	ldr	r3, [sp, #28]
 8009294:	469b      	mov	fp, r3
 8009296:	9b06      	ldr	r3, [sp, #24]
 8009298:	1b9a      	subs	r2, r3, r6
 800929a:	d004      	beq.n	80092a6 <_dtoa_r+0x7ce>
 800929c:	4659      	mov	r1, fp
 800929e:	4620      	mov	r0, r4
 80092a0:	f000 fbce 	bl	8009a40 <__pow5mult>
 80092a4:	4683      	mov	fp, r0
 80092a6:	2101      	movs	r1, #1
 80092a8:	4620      	mov	r0, r4
 80092aa:	f000 fb0d 	bl	80098c8 <__i2b>
 80092ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	4606      	mov	r6, r0
 80092b4:	dd7c      	ble.n	80093b0 <_dtoa_r+0x8d8>
 80092b6:	461a      	mov	r2, r3
 80092b8:	4601      	mov	r1, r0
 80092ba:	4620      	mov	r0, r4
 80092bc:	f000 fbc0 	bl	8009a40 <__pow5mult>
 80092c0:	9b05      	ldr	r3, [sp, #20]
 80092c2:	2b01      	cmp	r3, #1
 80092c4:	4606      	mov	r6, r0
 80092c6:	dd76      	ble.n	80093b6 <_dtoa_r+0x8de>
 80092c8:	2300      	movs	r3, #0
 80092ca:	9306      	str	r3, [sp, #24]
 80092cc:	6933      	ldr	r3, [r6, #16]
 80092ce:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80092d2:	6918      	ldr	r0, [r3, #16]
 80092d4:	f000 faa8 	bl	8009828 <__hi0bits>
 80092d8:	f1c0 0020 	rsb	r0, r0, #32
 80092dc:	9b04      	ldr	r3, [sp, #16]
 80092de:	4418      	add	r0, r3
 80092e0:	f010 001f 	ands.w	r0, r0, #31
 80092e4:	f000 8086 	beq.w	80093f4 <_dtoa_r+0x91c>
 80092e8:	f1c0 0320 	rsb	r3, r0, #32
 80092ec:	2b04      	cmp	r3, #4
 80092ee:	dd7f      	ble.n	80093f0 <_dtoa_r+0x918>
 80092f0:	f1c0 001c 	rsb	r0, r0, #28
 80092f4:	9b04      	ldr	r3, [sp, #16]
 80092f6:	4403      	add	r3, r0
 80092f8:	4480      	add	r8, r0
 80092fa:	4405      	add	r5, r0
 80092fc:	9304      	str	r3, [sp, #16]
 80092fe:	f1b8 0f00 	cmp.w	r8, #0
 8009302:	dd05      	ble.n	8009310 <_dtoa_r+0x838>
 8009304:	4659      	mov	r1, fp
 8009306:	4642      	mov	r2, r8
 8009308:	4620      	mov	r0, r4
 800930a:	f000 fbf3 	bl	8009af4 <__lshift>
 800930e:	4683      	mov	fp, r0
 8009310:	9b04      	ldr	r3, [sp, #16]
 8009312:	2b00      	cmp	r3, #0
 8009314:	dd05      	ble.n	8009322 <_dtoa_r+0x84a>
 8009316:	4631      	mov	r1, r6
 8009318:	461a      	mov	r2, r3
 800931a:	4620      	mov	r0, r4
 800931c:	f000 fbea 	bl	8009af4 <__lshift>
 8009320:	4606      	mov	r6, r0
 8009322:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009324:	2b00      	cmp	r3, #0
 8009326:	d069      	beq.n	80093fc <_dtoa_r+0x924>
 8009328:	4631      	mov	r1, r6
 800932a:	4658      	mov	r0, fp
 800932c:	f000 fc4e 	bl	8009bcc <__mcmp>
 8009330:	2800      	cmp	r0, #0
 8009332:	da63      	bge.n	80093fc <_dtoa_r+0x924>
 8009334:	2300      	movs	r3, #0
 8009336:	4659      	mov	r1, fp
 8009338:	220a      	movs	r2, #10
 800933a:	4620      	mov	r0, r4
 800933c:	f000 fa2a 	bl	8009794 <__multadd>
 8009340:	9b08      	ldr	r3, [sp, #32]
 8009342:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009346:	4683      	mov	fp, r0
 8009348:	2b00      	cmp	r3, #0
 800934a:	f000 818f 	beq.w	800966c <_dtoa_r+0xb94>
 800934e:	4639      	mov	r1, r7
 8009350:	2300      	movs	r3, #0
 8009352:	220a      	movs	r2, #10
 8009354:	4620      	mov	r0, r4
 8009356:	f000 fa1d 	bl	8009794 <__multadd>
 800935a:	f1b9 0f00 	cmp.w	r9, #0
 800935e:	4607      	mov	r7, r0
 8009360:	f300 808e 	bgt.w	8009480 <_dtoa_r+0x9a8>
 8009364:	9b05      	ldr	r3, [sp, #20]
 8009366:	2b02      	cmp	r3, #2
 8009368:	dc50      	bgt.n	800940c <_dtoa_r+0x934>
 800936a:	e089      	b.n	8009480 <_dtoa_r+0x9a8>
 800936c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800936e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009372:	e75d      	b.n	8009230 <_dtoa_r+0x758>
 8009374:	9b01      	ldr	r3, [sp, #4]
 8009376:	1e5e      	subs	r6, r3, #1
 8009378:	9b06      	ldr	r3, [sp, #24]
 800937a:	42b3      	cmp	r3, r6
 800937c:	bfbf      	itttt	lt
 800937e:	9b06      	ldrlt	r3, [sp, #24]
 8009380:	9606      	strlt	r6, [sp, #24]
 8009382:	1af2      	sublt	r2, r6, r3
 8009384:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8009386:	bfb6      	itet	lt
 8009388:	189b      	addlt	r3, r3, r2
 800938a:	1b9e      	subge	r6, r3, r6
 800938c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800938e:	9b01      	ldr	r3, [sp, #4]
 8009390:	bfb8      	it	lt
 8009392:	2600      	movlt	r6, #0
 8009394:	2b00      	cmp	r3, #0
 8009396:	bfb5      	itete	lt
 8009398:	eba8 0503 	sublt.w	r5, r8, r3
 800939c:	9b01      	ldrge	r3, [sp, #4]
 800939e:	2300      	movlt	r3, #0
 80093a0:	4645      	movge	r5, r8
 80093a2:	e747      	b.n	8009234 <_dtoa_r+0x75c>
 80093a4:	9e06      	ldr	r6, [sp, #24]
 80093a6:	9f08      	ldr	r7, [sp, #32]
 80093a8:	4645      	mov	r5, r8
 80093aa:	e74c      	b.n	8009246 <_dtoa_r+0x76e>
 80093ac:	9a06      	ldr	r2, [sp, #24]
 80093ae:	e775      	b.n	800929c <_dtoa_r+0x7c4>
 80093b0:	9b05      	ldr	r3, [sp, #20]
 80093b2:	2b01      	cmp	r3, #1
 80093b4:	dc18      	bgt.n	80093e8 <_dtoa_r+0x910>
 80093b6:	9b02      	ldr	r3, [sp, #8]
 80093b8:	b9b3      	cbnz	r3, 80093e8 <_dtoa_r+0x910>
 80093ba:	9b03      	ldr	r3, [sp, #12]
 80093bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80093c0:	b9a3      	cbnz	r3, 80093ec <_dtoa_r+0x914>
 80093c2:	9b03      	ldr	r3, [sp, #12]
 80093c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80093c8:	0d1b      	lsrs	r3, r3, #20
 80093ca:	051b      	lsls	r3, r3, #20
 80093cc:	b12b      	cbz	r3, 80093da <_dtoa_r+0x902>
 80093ce:	9b04      	ldr	r3, [sp, #16]
 80093d0:	3301      	adds	r3, #1
 80093d2:	9304      	str	r3, [sp, #16]
 80093d4:	f108 0801 	add.w	r8, r8, #1
 80093d8:	2301      	movs	r3, #1
 80093da:	9306      	str	r3, [sp, #24]
 80093dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093de:	2b00      	cmp	r3, #0
 80093e0:	f47f af74 	bne.w	80092cc <_dtoa_r+0x7f4>
 80093e4:	2001      	movs	r0, #1
 80093e6:	e779      	b.n	80092dc <_dtoa_r+0x804>
 80093e8:	2300      	movs	r3, #0
 80093ea:	e7f6      	b.n	80093da <_dtoa_r+0x902>
 80093ec:	9b02      	ldr	r3, [sp, #8]
 80093ee:	e7f4      	b.n	80093da <_dtoa_r+0x902>
 80093f0:	d085      	beq.n	80092fe <_dtoa_r+0x826>
 80093f2:	4618      	mov	r0, r3
 80093f4:	301c      	adds	r0, #28
 80093f6:	e77d      	b.n	80092f4 <_dtoa_r+0x81c>
 80093f8:	40240000 	.word	0x40240000
 80093fc:	9b01      	ldr	r3, [sp, #4]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	dc38      	bgt.n	8009474 <_dtoa_r+0x99c>
 8009402:	9b05      	ldr	r3, [sp, #20]
 8009404:	2b02      	cmp	r3, #2
 8009406:	dd35      	ble.n	8009474 <_dtoa_r+0x99c>
 8009408:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800940c:	f1b9 0f00 	cmp.w	r9, #0
 8009410:	d10d      	bne.n	800942e <_dtoa_r+0x956>
 8009412:	4631      	mov	r1, r6
 8009414:	464b      	mov	r3, r9
 8009416:	2205      	movs	r2, #5
 8009418:	4620      	mov	r0, r4
 800941a:	f000 f9bb 	bl	8009794 <__multadd>
 800941e:	4601      	mov	r1, r0
 8009420:	4606      	mov	r6, r0
 8009422:	4658      	mov	r0, fp
 8009424:	f000 fbd2 	bl	8009bcc <__mcmp>
 8009428:	2800      	cmp	r0, #0
 800942a:	f73f adbd 	bgt.w	8008fa8 <_dtoa_r+0x4d0>
 800942e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009430:	9d00      	ldr	r5, [sp, #0]
 8009432:	ea6f 0a03 	mvn.w	sl, r3
 8009436:	f04f 0800 	mov.w	r8, #0
 800943a:	4631      	mov	r1, r6
 800943c:	4620      	mov	r0, r4
 800943e:	f000 f987 	bl	8009750 <_Bfree>
 8009442:	2f00      	cmp	r7, #0
 8009444:	f43f aeb4 	beq.w	80091b0 <_dtoa_r+0x6d8>
 8009448:	f1b8 0f00 	cmp.w	r8, #0
 800944c:	d005      	beq.n	800945a <_dtoa_r+0x982>
 800944e:	45b8      	cmp	r8, r7
 8009450:	d003      	beq.n	800945a <_dtoa_r+0x982>
 8009452:	4641      	mov	r1, r8
 8009454:	4620      	mov	r0, r4
 8009456:	f000 f97b 	bl	8009750 <_Bfree>
 800945a:	4639      	mov	r1, r7
 800945c:	4620      	mov	r0, r4
 800945e:	f000 f977 	bl	8009750 <_Bfree>
 8009462:	e6a5      	b.n	80091b0 <_dtoa_r+0x6d8>
 8009464:	2600      	movs	r6, #0
 8009466:	4637      	mov	r7, r6
 8009468:	e7e1      	b.n	800942e <_dtoa_r+0x956>
 800946a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800946c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009470:	4637      	mov	r7, r6
 8009472:	e599      	b.n	8008fa8 <_dtoa_r+0x4d0>
 8009474:	9b08      	ldr	r3, [sp, #32]
 8009476:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800947a:	2b00      	cmp	r3, #0
 800947c:	f000 80fd 	beq.w	800967a <_dtoa_r+0xba2>
 8009480:	2d00      	cmp	r5, #0
 8009482:	dd05      	ble.n	8009490 <_dtoa_r+0x9b8>
 8009484:	4639      	mov	r1, r7
 8009486:	462a      	mov	r2, r5
 8009488:	4620      	mov	r0, r4
 800948a:	f000 fb33 	bl	8009af4 <__lshift>
 800948e:	4607      	mov	r7, r0
 8009490:	9b06      	ldr	r3, [sp, #24]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d05c      	beq.n	8009550 <_dtoa_r+0xa78>
 8009496:	6879      	ldr	r1, [r7, #4]
 8009498:	4620      	mov	r0, r4
 800949a:	f000 f919 	bl	80096d0 <_Balloc>
 800949e:	4605      	mov	r5, r0
 80094a0:	b928      	cbnz	r0, 80094ae <_dtoa_r+0x9d6>
 80094a2:	4b80      	ldr	r3, [pc, #512]	; (80096a4 <_dtoa_r+0xbcc>)
 80094a4:	4602      	mov	r2, r0
 80094a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80094aa:	f7ff bb2e 	b.w	8008b0a <_dtoa_r+0x32>
 80094ae:	693a      	ldr	r2, [r7, #16]
 80094b0:	3202      	adds	r2, #2
 80094b2:	0092      	lsls	r2, r2, #2
 80094b4:	f107 010c 	add.w	r1, r7, #12
 80094b8:	300c      	adds	r0, #12
 80094ba:	f7fe fd17 	bl	8007eec <memcpy>
 80094be:	2201      	movs	r2, #1
 80094c0:	4629      	mov	r1, r5
 80094c2:	4620      	mov	r0, r4
 80094c4:	f000 fb16 	bl	8009af4 <__lshift>
 80094c8:	9b00      	ldr	r3, [sp, #0]
 80094ca:	3301      	adds	r3, #1
 80094cc:	9301      	str	r3, [sp, #4]
 80094ce:	9b00      	ldr	r3, [sp, #0]
 80094d0:	444b      	add	r3, r9
 80094d2:	9307      	str	r3, [sp, #28]
 80094d4:	9b02      	ldr	r3, [sp, #8]
 80094d6:	f003 0301 	and.w	r3, r3, #1
 80094da:	46b8      	mov	r8, r7
 80094dc:	9306      	str	r3, [sp, #24]
 80094de:	4607      	mov	r7, r0
 80094e0:	9b01      	ldr	r3, [sp, #4]
 80094e2:	4631      	mov	r1, r6
 80094e4:	3b01      	subs	r3, #1
 80094e6:	4658      	mov	r0, fp
 80094e8:	9302      	str	r3, [sp, #8]
 80094ea:	f7ff fa68 	bl	80089be <quorem>
 80094ee:	4603      	mov	r3, r0
 80094f0:	3330      	adds	r3, #48	; 0x30
 80094f2:	9004      	str	r0, [sp, #16]
 80094f4:	4641      	mov	r1, r8
 80094f6:	4658      	mov	r0, fp
 80094f8:	9308      	str	r3, [sp, #32]
 80094fa:	f000 fb67 	bl	8009bcc <__mcmp>
 80094fe:	463a      	mov	r2, r7
 8009500:	4681      	mov	r9, r0
 8009502:	4631      	mov	r1, r6
 8009504:	4620      	mov	r0, r4
 8009506:	f000 fb7d 	bl	8009c04 <__mdiff>
 800950a:	68c2      	ldr	r2, [r0, #12]
 800950c:	9b08      	ldr	r3, [sp, #32]
 800950e:	4605      	mov	r5, r0
 8009510:	bb02      	cbnz	r2, 8009554 <_dtoa_r+0xa7c>
 8009512:	4601      	mov	r1, r0
 8009514:	4658      	mov	r0, fp
 8009516:	f000 fb59 	bl	8009bcc <__mcmp>
 800951a:	9b08      	ldr	r3, [sp, #32]
 800951c:	4602      	mov	r2, r0
 800951e:	4629      	mov	r1, r5
 8009520:	4620      	mov	r0, r4
 8009522:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8009526:	f000 f913 	bl	8009750 <_Bfree>
 800952a:	9b05      	ldr	r3, [sp, #20]
 800952c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800952e:	9d01      	ldr	r5, [sp, #4]
 8009530:	ea43 0102 	orr.w	r1, r3, r2
 8009534:	9b06      	ldr	r3, [sp, #24]
 8009536:	430b      	orrs	r3, r1
 8009538:	9b08      	ldr	r3, [sp, #32]
 800953a:	d10d      	bne.n	8009558 <_dtoa_r+0xa80>
 800953c:	2b39      	cmp	r3, #57	; 0x39
 800953e:	d029      	beq.n	8009594 <_dtoa_r+0xabc>
 8009540:	f1b9 0f00 	cmp.w	r9, #0
 8009544:	dd01      	ble.n	800954a <_dtoa_r+0xa72>
 8009546:	9b04      	ldr	r3, [sp, #16]
 8009548:	3331      	adds	r3, #49	; 0x31
 800954a:	9a02      	ldr	r2, [sp, #8]
 800954c:	7013      	strb	r3, [r2, #0]
 800954e:	e774      	b.n	800943a <_dtoa_r+0x962>
 8009550:	4638      	mov	r0, r7
 8009552:	e7b9      	b.n	80094c8 <_dtoa_r+0x9f0>
 8009554:	2201      	movs	r2, #1
 8009556:	e7e2      	b.n	800951e <_dtoa_r+0xa46>
 8009558:	f1b9 0f00 	cmp.w	r9, #0
 800955c:	db06      	blt.n	800956c <_dtoa_r+0xa94>
 800955e:	9905      	ldr	r1, [sp, #20]
 8009560:	ea41 0909 	orr.w	r9, r1, r9
 8009564:	9906      	ldr	r1, [sp, #24]
 8009566:	ea59 0101 	orrs.w	r1, r9, r1
 800956a:	d120      	bne.n	80095ae <_dtoa_r+0xad6>
 800956c:	2a00      	cmp	r2, #0
 800956e:	ddec      	ble.n	800954a <_dtoa_r+0xa72>
 8009570:	4659      	mov	r1, fp
 8009572:	2201      	movs	r2, #1
 8009574:	4620      	mov	r0, r4
 8009576:	9301      	str	r3, [sp, #4]
 8009578:	f000 fabc 	bl	8009af4 <__lshift>
 800957c:	4631      	mov	r1, r6
 800957e:	4683      	mov	fp, r0
 8009580:	f000 fb24 	bl	8009bcc <__mcmp>
 8009584:	2800      	cmp	r0, #0
 8009586:	9b01      	ldr	r3, [sp, #4]
 8009588:	dc02      	bgt.n	8009590 <_dtoa_r+0xab8>
 800958a:	d1de      	bne.n	800954a <_dtoa_r+0xa72>
 800958c:	07da      	lsls	r2, r3, #31
 800958e:	d5dc      	bpl.n	800954a <_dtoa_r+0xa72>
 8009590:	2b39      	cmp	r3, #57	; 0x39
 8009592:	d1d8      	bne.n	8009546 <_dtoa_r+0xa6e>
 8009594:	9a02      	ldr	r2, [sp, #8]
 8009596:	2339      	movs	r3, #57	; 0x39
 8009598:	7013      	strb	r3, [r2, #0]
 800959a:	462b      	mov	r3, r5
 800959c:	461d      	mov	r5, r3
 800959e:	3b01      	subs	r3, #1
 80095a0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80095a4:	2a39      	cmp	r2, #57	; 0x39
 80095a6:	d050      	beq.n	800964a <_dtoa_r+0xb72>
 80095a8:	3201      	adds	r2, #1
 80095aa:	701a      	strb	r2, [r3, #0]
 80095ac:	e745      	b.n	800943a <_dtoa_r+0x962>
 80095ae:	2a00      	cmp	r2, #0
 80095b0:	dd03      	ble.n	80095ba <_dtoa_r+0xae2>
 80095b2:	2b39      	cmp	r3, #57	; 0x39
 80095b4:	d0ee      	beq.n	8009594 <_dtoa_r+0xabc>
 80095b6:	3301      	adds	r3, #1
 80095b8:	e7c7      	b.n	800954a <_dtoa_r+0xa72>
 80095ba:	9a01      	ldr	r2, [sp, #4]
 80095bc:	9907      	ldr	r1, [sp, #28]
 80095be:	f802 3c01 	strb.w	r3, [r2, #-1]
 80095c2:	428a      	cmp	r2, r1
 80095c4:	d02a      	beq.n	800961c <_dtoa_r+0xb44>
 80095c6:	4659      	mov	r1, fp
 80095c8:	2300      	movs	r3, #0
 80095ca:	220a      	movs	r2, #10
 80095cc:	4620      	mov	r0, r4
 80095ce:	f000 f8e1 	bl	8009794 <__multadd>
 80095d2:	45b8      	cmp	r8, r7
 80095d4:	4683      	mov	fp, r0
 80095d6:	f04f 0300 	mov.w	r3, #0
 80095da:	f04f 020a 	mov.w	r2, #10
 80095de:	4641      	mov	r1, r8
 80095e0:	4620      	mov	r0, r4
 80095e2:	d107      	bne.n	80095f4 <_dtoa_r+0xb1c>
 80095e4:	f000 f8d6 	bl	8009794 <__multadd>
 80095e8:	4680      	mov	r8, r0
 80095ea:	4607      	mov	r7, r0
 80095ec:	9b01      	ldr	r3, [sp, #4]
 80095ee:	3301      	adds	r3, #1
 80095f0:	9301      	str	r3, [sp, #4]
 80095f2:	e775      	b.n	80094e0 <_dtoa_r+0xa08>
 80095f4:	f000 f8ce 	bl	8009794 <__multadd>
 80095f8:	4639      	mov	r1, r7
 80095fa:	4680      	mov	r8, r0
 80095fc:	2300      	movs	r3, #0
 80095fe:	220a      	movs	r2, #10
 8009600:	4620      	mov	r0, r4
 8009602:	f000 f8c7 	bl	8009794 <__multadd>
 8009606:	4607      	mov	r7, r0
 8009608:	e7f0      	b.n	80095ec <_dtoa_r+0xb14>
 800960a:	f1b9 0f00 	cmp.w	r9, #0
 800960e:	9a00      	ldr	r2, [sp, #0]
 8009610:	bfcc      	ite	gt
 8009612:	464d      	movgt	r5, r9
 8009614:	2501      	movle	r5, #1
 8009616:	4415      	add	r5, r2
 8009618:	f04f 0800 	mov.w	r8, #0
 800961c:	4659      	mov	r1, fp
 800961e:	2201      	movs	r2, #1
 8009620:	4620      	mov	r0, r4
 8009622:	9301      	str	r3, [sp, #4]
 8009624:	f000 fa66 	bl	8009af4 <__lshift>
 8009628:	4631      	mov	r1, r6
 800962a:	4683      	mov	fp, r0
 800962c:	f000 face 	bl	8009bcc <__mcmp>
 8009630:	2800      	cmp	r0, #0
 8009632:	dcb2      	bgt.n	800959a <_dtoa_r+0xac2>
 8009634:	d102      	bne.n	800963c <_dtoa_r+0xb64>
 8009636:	9b01      	ldr	r3, [sp, #4]
 8009638:	07db      	lsls	r3, r3, #31
 800963a:	d4ae      	bmi.n	800959a <_dtoa_r+0xac2>
 800963c:	462b      	mov	r3, r5
 800963e:	461d      	mov	r5, r3
 8009640:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009644:	2a30      	cmp	r2, #48	; 0x30
 8009646:	d0fa      	beq.n	800963e <_dtoa_r+0xb66>
 8009648:	e6f7      	b.n	800943a <_dtoa_r+0x962>
 800964a:	9a00      	ldr	r2, [sp, #0]
 800964c:	429a      	cmp	r2, r3
 800964e:	d1a5      	bne.n	800959c <_dtoa_r+0xac4>
 8009650:	f10a 0a01 	add.w	sl, sl, #1
 8009654:	2331      	movs	r3, #49	; 0x31
 8009656:	e779      	b.n	800954c <_dtoa_r+0xa74>
 8009658:	4b13      	ldr	r3, [pc, #76]	; (80096a8 <_dtoa_r+0xbd0>)
 800965a:	f7ff baaf 	b.w	8008bbc <_dtoa_r+0xe4>
 800965e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009660:	2b00      	cmp	r3, #0
 8009662:	f47f aa86 	bne.w	8008b72 <_dtoa_r+0x9a>
 8009666:	4b11      	ldr	r3, [pc, #68]	; (80096ac <_dtoa_r+0xbd4>)
 8009668:	f7ff baa8 	b.w	8008bbc <_dtoa_r+0xe4>
 800966c:	f1b9 0f00 	cmp.w	r9, #0
 8009670:	dc03      	bgt.n	800967a <_dtoa_r+0xba2>
 8009672:	9b05      	ldr	r3, [sp, #20]
 8009674:	2b02      	cmp	r3, #2
 8009676:	f73f aec9 	bgt.w	800940c <_dtoa_r+0x934>
 800967a:	9d00      	ldr	r5, [sp, #0]
 800967c:	4631      	mov	r1, r6
 800967e:	4658      	mov	r0, fp
 8009680:	f7ff f99d 	bl	80089be <quorem>
 8009684:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009688:	f805 3b01 	strb.w	r3, [r5], #1
 800968c:	9a00      	ldr	r2, [sp, #0]
 800968e:	1aaa      	subs	r2, r5, r2
 8009690:	4591      	cmp	r9, r2
 8009692:	ddba      	ble.n	800960a <_dtoa_r+0xb32>
 8009694:	4659      	mov	r1, fp
 8009696:	2300      	movs	r3, #0
 8009698:	220a      	movs	r2, #10
 800969a:	4620      	mov	r0, r4
 800969c:	f000 f87a 	bl	8009794 <__multadd>
 80096a0:	4683      	mov	fp, r0
 80096a2:	e7eb      	b.n	800967c <_dtoa_r+0xba4>
 80096a4:	0800b55f 	.word	0x0800b55f
 80096a8:	0800b4b8 	.word	0x0800b4b8
 80096ac:	0800b4dc 	.word	0x0800b4dc

080096b0 <_localeconv_r>:
 80096b0:	4800      	ldr	r0, [pc, #0]	; (80096b4 <_localeconv_r+0x4>)
 80096b2:	4770      	bx	lr
 80096b4:	20000164 	.word	0x20000164

080096b8 <__malloc_lock>:
 80096b8:	4801      	ldr	r0, [pc, #4]	; (80096c0 <__malloc_lock+0x8>)
 80096ba:	f000 bd22 	b.w	800a102 <__retarget_lock_acquire_recursive>
 80096be:	bf00      	nop
 80096c0:	20000ca8 	.word	0x20000ca8

080096c4 <__malloc_unlock>:
 80096c4:	4801      	ldr	r0, [pc, #4]	; (80096cc <__malloc_unlock+0x8>)
 80096c6:	f000 bd1d 	b.w	800a104 <__retarget_lock_release_recursive>
 80096ca:	bf00      	nop
 80096cc:	20000ca8 	.word	0x20000ca8

080096d0 <_Balloc>:
 80096d0:	b570      	push	{r4, r5, r6, lr}
 80096d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80096d4:	4604      	mov	r4, r0
 80096d6:	460d      	mov	r5, r1
 80096d8:	b976      	cbnz	r6, 80096f8 <_Balloc+0x28>
 80096da:	2010      	movs	r0, #16
 80096dc:	f7fe fbfe 	bl	8007edc <malloc>
 80096e0:	4602      	mov	r2, r0
 80096e2:	6260      	str	r0, [r4, #36]	; 0x24
 80096e4:	b920      	cbnz	r0, 80096f0 <_Balloc+0x20>
 80096e6:	4b18      	ldr	r3, [pc, #96]	; (8009748 <_Balloc+0x78>)
 80096e8:	4818      	ldr	r0, [pc, #96]	; (800974c <_Balloc+0x7c>)
 80096ea:	2166      	movs	r1, #102	; 0x66
 80096ec:	f000 fcd8 	bl	800a0a0 <__assert_func>
 80096f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80096f4:	6006      	str	r6, [r0, #0]
 80096f6:	60c6      	str	r6, [r0, #12]
 80096f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80096fa:	68f3      	ldr	r3, [r6, #12]
 80096fc:	b183      	cbz	r3, 8009720 <_Balloc+0x50>
 80096fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009700:	68db      	ldr	r3, [r3, #12]
 8009702:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009706:	b9b8      	cbnz	r0, 8009738 <_Balloc+0x68>
 8009708:	2101      	movs	r1, #1
 800970a:	fa01 f605 	lsl.w	r6, r1, r5
 800970e:	1d72      	adds	r2, r6, #5
 8009710:	0092      	lsls	r2, r2, #2
 8009712:	4620      	mov	r0, r4
 8009714:	f000 fb5a 	bl	8009dcc <_calloc_r>
 8009718:	b160      	cbz	r0, 8009734 <_Balloc+0x64>
 800971a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800971e:	e00e      	b.n	800973e <_Balloc+0x6e>
 8009720:	2221      	movs	r2, #33	; 0x21
 8009722:	2104      	movs	r1, #4
 8009724:	4620      	mov	r0, r4
 8009726:	f000 fb51 	bl	8009dcc <_calloc_r>
 800972a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800972c:	60f0      	str	r0, [r6, #12]
 800972e:	68db      	ldr	r3, [r3, #12]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d1e4      	bne.n	80096fe <_Balloc+0x2e>
 8009734:	2000      	movs	r0, #0
 8009736:	bd70      	pop	{r4, r5, r6, pc}
 8009738:	6802      	ldr	r2, [r0, #0]
 800973a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800973e:	2300      	movs	r3, #0
 8009740:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009744:	e7f7      	b.n	8009736 <_Balloc+0x66>
 8009746:	bf00      	nop
 8009748:	0800b4e9 	.word	0x0800b4e9
 800974c:	0800b570 	.word	0x0800b570

08009750 <_Bfree>:
 8009750:	b570      	push	{r4, r5, r6, lr}
 8009752:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009754:	4605      	mov	r5, r0
 8009756:	460c      	mov	r4, r1
 8009758:	b976      	cbnz	r6, 8009778 <_Bfree+0x28>
 800975a:	2010      	movs	r0, #16
 800975c:	f7fe fbbe 	bl	8007edc <malloc>
 8009760:	4602      	mov	r2, r0
 8009762:	6268      	str	r0, [r5, #36]	; 0x24
 8009764:	b920      	cbnz	r0, 8009770 <_Bfree+0x20>
 8009766:	4b09      	ldr	r3, [pc, #36]	; (800978c <_Bfree+0x3c>)
 8009768:	4809      	ldr	r0, [pc, #36]	; (8009790 <_Bfree+0x40>)
 800976a:	218a      	movs	r1, #138	; 0x8a
 800976c:	f000 fc98 	bl	800a0a0 <__assert_func>
 8009770:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009774:	6006      	str	r6, [r0, #0]
 8009776:	60c6      	str	r6, [r0, #12]
 8009778:	b13c      	cbz	r4, 800978a <_Bfree+0x3a>
 800977a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800977c:	6862      	ldr	r2, [r4, #4]
 800977e:	68db      	ldr	r3, [r3, #12]
 8009780:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009784:	6021      	str	r1, [r4, #0]
 8009786:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800978a:	bd70      	pop	{r4, r5, r6, pc}
 800978c:	0800b4e9 	.word	0x0800b4e9
 8009790:	0800b570 	.word	0x0800b570

08009794 <__multadd>:
 8009794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009798:	690e      	ldr	r6, [r1, #16]
 800979a:	4607      	mov	r7, r0
 800979c:	4698      	mov	r8, r3
 800979e:	460c      	mov	r4, r1
 80097a0:	f101 0014 	add.w	r0, r1, #20
 80097a4:	2300      	movs	r3, #0
 80097a6:	6805      	ldr	r5, [r0, #0]
 80097a8:	b2a9      	uxth	r1, r5
 80097aa:	fb02 8101 	mla	r1, r2, r1, r8
 80097ae:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80097b2:	0c2d      	lsrs	r5, r5, #16
 80097b4:	fb02 c505 	mla	r5, r2, r5, ip
 80097b8:	b289      	uxth	r1, r1
 80097ba:	3301      	adds	r3, #1
 80097bc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80097c0:	429e      	cmp	r6, r3
 80097c2:	f840 1b04 	str.w	r1, [r0], #4
 80097c6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80097ca:	dcec      	bgt.n	80097a6 <__multadd+0x12>
 80097cc:	f1b8 0f00 	cmp.w	r8, #0
 80097d0:	d022      	beq.n	8009818 <__multadd+0x84>
 80097d2:	68a3      	ldr	r3, [r4, #8]
 80097d4:	42b3      	cmp	r3, r6
 80097d6:	dc19      	bgt.n	800980c <__multadd+0x78>
 80097d8:	6861      	ldr	r1, [r4, #4]
 80097da:	4638      	mov	r0, r7
 80097dc:	3101      	adds	r1, #1
 80097de:	f7ff ff77 	bl	80096d0 <_Balloc>
 80097e2:	4605      	mov	r5, r0
 80097e4:	b928      	cbnz	r0, 80097f2 <__multadd+0x5e>
 80097e6:	4602      	mov	r2, r0
 80097e8:	4b0d      	ldr	r3, [pc, #52]	; (8009820 <__multadd+0x8c>)
 80097ea:	480e      	ldr	r0, [pc, #56]	; (8009824 <__multadd+0x90>)
 80097ec:	21b5      	movs	r1, #181	; 0xb5
 80097ee:	f000 fc57 	bl	800a0a0 <__assert_func>
 80097f2:	6922      	ldr	r2, [r4, #16]
 80097f4:	3202      	adds	r2, #2
 80097f6:	f104 010c 	add.w	r1, r4, #12
 80097fa:	0092      	lsls	r2, r2, #2
 80097fc:	300c      	adds	r0, #12
 80097fe:	f7fe fb75 	bl	8007eec <memcpy>
 8009802:	4621      	mov	r1, r4
 8009804:	4638      	mov	r0, r7
 8009806:	f7ff ffa3 	bl	8009750 <_Bfree>
 800980a:	462c      	mov	r4, r5
 800980c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009810:	3601      	adds	r6, #1
 8009812:	f8c3 8014 	str.w	r8, [r3, #20]
 8009816:	6126      	str	r6, [r4, #16]
 8009818:	4620      	mov	r0, r4
 800981a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800981e:	bf00      	nop
 8009820:	0800b55f 	.word	0x0800b55f
 8009824:	0800b570 	.word	0x0800b570

08009828 <__hi0bits>:
 8009828:	0c03      	lsrs	r3, r0, #16
 800982a:	041b      	lsls	r3, r3, #16
 800982c:	b9d3      	cbnz	r3, 8009864 <__hi0bits+0x3c>
 800982e:	0400      	lsls	r0, r0, #16
 8009830:	2310      	movs	r3, #16
 8009832:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009836:	bf04      	itt	eq
 8009838:	0200      	lsleq	r0, r0, #8
 800983a:	3308      	addeq	r3, #8
 800983c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009840:	bf04      	itt	eq
 8009842:	0100      	lsleq	r0, r0, #4
 8009844:	3304      	addeq	r3, #4
 8009846:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800984a:	bf04      	itt	eq
 800984c:	0080      	lsleq	r0, r0, #2
 800984e:	3302      	addeq	r3, #2
 8009850:	2800      	cmp	r0, #0
 8009852:	db05      	blt.n	8009860 <__hi0bits+0x38>
 8009854:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009858:	f103 0301 	add.w	r3, r3, #1
 800985c:	bf08      	it	eq
 800985e:	2320      	moveq	r3, #32
 8009860:	4618      	mov	r0, r3
 8009862:	4770      	bx	lr
 8009864:	2300      	movs	r3, #0
 8009866:	e7e4      	b.n	8009832 <__hi0bits+0xa>

08009868 <__lo0bits>:
 8009868:	6803      	ldr	r3, [r0, #0]
 800986a:	f013 0207 	ands.w	r2, r3, #7
 800986e:	4601      	mov	r1, r0
 8009870:	d00b      	beq.n	800988a <__lo0bits+0x22>
 8009872:	07da      	lsls	r2, r3, #31
 8009874:	d424      	bmi.n	80098c0 <__lo0bits+0x58>
 8009876:	0798      	lsls	r0, r3, #30
 8009878:	bf49      	itett	mi
 800987a:	085b      	lsrmi	r3, r3, #1
 800987c:	089b      	lsrpl	r3, r3, #2
 800987e:	2001      	movmi	r0, #1
 8009880:	600b      	strmi	r3, [r1, #0]
 8009882:	bf5c      	itt	pl
 8009884:	600b      	strpl	r3, [r1, #0]
 8009886:	2002      	movpl	r0, #2
 8009888:	4770      	bx	lr
 800988a:	b298      	uxth	r0, r3
 800988c:	b9b0      	cbnz	r0, 80098bc <__lo0bits+0x54>
 800988e:	0c1b      	lsrs	r3, r3, #16
 8009890:	2010      	movs	r0, #16
 8009892:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009896:	bf04      	itt	eq
 8009898:	0a1b      	lsreq	r3, r3, #8
 800989a:	3008      	addeq	r0, #8
 800989c:	071a      	lsls	r2, r3, #28
 800989e:	bf04      	itt	eq
 80098a0:	091b      	lsreq	r3, r3, #4
 80098a2:	3004      	addeq	r0, #4
 80098a4:	079a      	lsls	r2, r3, #30
 80098a6:	bf04      	itt	eq
 80098a8:	089b      	lsreq	r3, r3, #2
 80098aa:	3002      	addeq	r0, #2
 80098ac:	07da      	lsls	r2, r3, #31
 80098ae:	d403      	bmi.n	80098b8 <__lo0bits+0x50>
 80098b0:	085b      	lsrs	r3, r3, #1
 80098b2:	f100 0001 	add.w	r0, r0, #1
 80098b6:	d005      	beq.n	80098c4 <__lo0bits+0x5c>
 80098b8:	600b      	str	r3, [r1, #0]
 80098ba:	4770      	bx	lr
 80098bc:	4610      	mov	r0, r2
 80098be:	e7e8      	b.n	8009892 <__lo0bits+0x2a>
 80098c0:	2000      	movs	r0, #0
 80098c2:	4770      	bx	lr
 80098c4:	2020      	movs	r0, #32
 80098c6:	4770      	bx	lr

080098c8 <__i2b>:
 80098c8:	b510      	push	{r4, lr}
 80098ca:	460c      	mov	r4, r1
 80098cc:	2101      	movs	r1, #1
 80098ce:	f7ff feff 	bl	80096d0 <_Balloc>
 80098d2:	4602      	mov	r2, r0
 80098d4:	b928      	cbnz	r0, 80098e2 <__i2b+0x1a>
 80098d6:	4b05      	ldr	r3, [pc, #20]	; (80098ec <__i2b+0x24>)
 80098d8:	4805      	ldr	r0, [pc, #20]	; (80098f0 <__i2b+0x28>)
 80098da:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80098de:	f000 fbdf 	bl	800a0a0 <__assert_func>
 80098e2:	2301      	movs	r3, #1
 80098e4:	6144      	str	r4, [r0, #20]
 80098e6:	6103      	str	r3, [r0, #16]
 80098e8:	bd10      	pop	{r4, pc}
 80098ea:	bf00      	nop
 80098ec:	0800b55f 	.word	0x0800b55f
 80098f0:	0800b570 	.word	0x0800b570

080098f4 <__multiply>:
 80098f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098f8:	4614      	mov	r4, r2
 80098fa:	690a      	ldr	r2, [r1, #16]
 80098fc:	6923      	ldr	r3, [r4, #16]
 80098fe:	429a      	cmp	r2, r3
 8009900:	bfb8      	it	lt
 8009902:	460b      	movlt	r3, r1
 8009904:	460d      	mov	r5, r1
 8009906:	bfbc      	itt	lt
 8009908:	4625      	movlt	r5, r4
 800990a:	461c      	movlt	r4, r3
 800990c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009910:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009914:	68ab      	ldr	r3, [r5, #8]
 8009916:	6869      	ldr	r1, [r5, #4]
 8009918:	eb0a 0709 	add.w	r7, sl, r9
 800991c:	42bb      	cmp	r3, r7
 800991e:	b085      	sub	sp, #20
 8009920:	bfb8      	it	lt
 8009922:	3101      	addlt	r1, #1
 8009924:	f7ff fed4 	bl	80096d0 <_Balloc>
 8009928:	b930      	cbnz	r0, 8009938 <__multiply+0x44>
 800992a:	4602      	mov	r2, r0
 800992c:	4b42      	ldr	r3, [pc, #264]	; (8009a38 <__multiply+0x144>)
 800992e:	4843      	ldr	r0, [pc, #268]	; (8009a3c <__multiply+0x148>)
 8009930:	f240 115d 	movw	r1, #349	; 0x15d
 8009934:	f000 fbb4 	bl	800a0a0 <__assert_func>
 8009938:	f100 0614 	add.w	r6, r0, #20
 800993c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009940:	4633      	mov	r3, r6
 8009942:	2200      	movs	r2, #0
 8009944:	4543      	cmp	r3, r8
 8009946:	d31e      	bcc.n	8009986 <__multiply+0x92>
 8009948:	f105 0c14 	add.w	ip, r5, #20
 800994c:	f104 0314 	add.w	r3, r4, #20
 8009950:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009954:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009958:	9202      	str	r2, [sp, #8]
 800995a:	ebac 0205 	sub.w	r2, ip, r5
 800995e:	3a15      	subs	r2, #21
 8009960:	f022 0203 	bic.w	r2, r2, #3
 8009964:	3204      	adds	r2, #4
 8009966:	f105 0115 	add.w	r1, r5, #21
 800996a:	458c      	cmp	ip, r1
 800996c:	bf38      	it	cc
 800996e:	2204      	movcc	r2, #4
 8009970:	9201      	str	r2, [sp, #4]
 8009972:	9a02      	ldr	r2, [sp, #8]
 8009974:	9303      	str	r3, [sp, #12]
 8009976:	429a      	cmp	r2, r3
 8009978:	d808      	bhi.n	800998c <__multiply+0x98>
 800997a:	2f00      	cmp	r7, #0
 800997c:	dc55      	bgt.n	8009a2a <__multiply+0x136>
 800997e:	6107      	str	r7, [r0, #16]
 8009980:	b005      	add	sp, #20
 8009982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009986:	f843 2b04 	str.w	r2, [r3], #4
 800998a:	e7db      	b.n	8009944 <__multiply+0x50>
 800998c:	f8b3 a000 	ldrh.w	sl, [r3]
 8009990:	f1ba 0f00 	cmp.w	sl, #0
 8009994:	d020      	beq.n	80099d8 <__multiply+0xe4>
 8009996:	f105 0e14 	add.w	lr, r5, #20
 800999a:	46b1      	mov	r9, r6
 800999c:	2200      	movs	r2, #0
 800999e:	f85e 4b04 	ldr.w	r4, [lr], #4
 80099a2:	f8d9 b000 	ldr.w	fp, [r9]
 80099a6:	b2a1      	uxth	r1, r4
 80099a8:	fa1f fb8b 	uxth.w	fp, fp
 80099ac:	fb0a b101 	mla	r1, sl, r1, fp
 80099b0:	4411      	add	r1, r2
 80099b2:	f8d9 2000 	ldr.w	r2, [r9]
 80099b6:	0c24      	lsrs	r4, r4, #16
 80099b8:	0c12      	lsrs	r2, r2, #16
 80099ba:	fb0a 2404 	mla	r4, sl, r4, r2
 80099be:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80099c2:	b289      	uxth	r1, r1
 80099c4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80099c8:	45f4      	cmp	ip, lr
 80099ca:	f849 1b04 	str.w	r1, [r9], #4
 80099ce:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80099d2:	d8e4      	bhi.n	800999e <__multiply+0xaa>
 80099d4:	9901      	ldr	r1, [sp, #4]
 80099d6:	5072      	str	r2, [r6, r1]
 80099d8:	9a03      	ldr	r2, [sp, #12]
 80099da:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80099de:	3304      	adds	r3, #4
 80099e0:	f1b9 0f00 	cmp.w	r9, #0
 80099e4:	d01f      	beq.n	8009a26 <__multiply+0x132>
 80099e6:	6834      	ldr	r4, [r6, #0]
 80099e8:	f105 0114 	add.w	r1, r5, #20
 80099ec:	46b6      	mov	lr, r6
 80099ee:	f04f 0a00 	mov.w	sl, #0
 80099f2:	880a      	ldrh	r2, [r1, #0]
 80099f4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80099f8:	fb09 b202 	mla	r2, r9, r2, fp
 80099fc:	4492      	add	sl, r2
 80099fe:	b2a4      	uxth	r4, r4
 8009a00:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009a04:	f84e 4b04 	str.w	r4, [lr], #4
 8009a08:	f851 4b04 	ldr.w	r4, [r1], #4
 8009a0c:	f8be 2000 	ldrh.w	r2, [lr]
 8009a10:	0c24      	lsrs	r4, r4, #16
 8009a12:	fb09 2404 	mla	r4, r9, r4, r2
 8009a16:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009a1a:	458c      	cmp	ip, r1
 8009a1c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009a20:	d8e7      	bhi.n	80099f2 <__multiply+0xfe>
 8009a22:	9a01      	ldr	r2, [sp, #4]
 8009a24:	50b4      	str	r4, [r6, r2]
 8009a26:	3604      	adds	r6, #4
 8009a28:	e7a3      	b.n	8009972 <__multiply+0x7e>
 8009a2a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d1a5      	bne.n	800997e <__multiply+0x8a>
 8009a32:	3f01      	subs	r7, #1
 8009a34:	e7a1      	b.n	800997a <__multiply+0x86>
 8009a36:	bf00      	nop
 8009a38:	0800b55f 	.word	0x0800b55f
 8009a3c:	0800b570 	.word	0x0800b570

08009a40 <__pow5mult>:
 8009a40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a44:	4615      	mov	r5, r2
 8009a46:	f012 0203 	ands.w	r2, r2, #3
 8009a4a:	4606      	mov	r6, r0
 8009a4c:	460f      	mov	r7, r1
 8009a4e:	d007      	beq.n	8009a60 <__pow5mult+0x20>
 8009a50:	4c25      	ldr	r4, [pc, #148]	; (8009ae8 <__pow5mult+0xa8>)
 8009a52:	3a01      	subs	r2, #1
 8009a54:	2300      	movs	r3, #0
 8009a56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009a5a:	f7ff fe9b 	bl	8009794 <__multadd>
 8009a5e:	4607      	mov	r7, r0
 8009a60:	10ad      	asrs	r5, r5, #2
 8009a62:	d03d      	beq.n	8009ae0 <__pow5mult+0xa0>
 8009a64:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009a66:	b97c      	cbnz	r4, 8009a88 <__pow5mult+0x48>
 8009a68:	2010      	movs	r0, #16
 8009a6a:	f7fe fa37 	bl	8007edc <malloc>
 8009a6e:	4602      	mov	r2, r0
 8009a70:	6270      	str	r0, [r6, #36]	; 0x24
 8009a72:	b928      	cbnz	r0, 8009a80 <__pow5mult+0x40>
 8009a74:	4b1d      	ldr	r3, [pc, #116]	; (8009aec <__pow5mult+0xac>)
 8009a76:	481e      	ldr	r0, [pc, #120]	; (8009af0 <__pow5mult+0xb0>)
 8009a78:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009a7c:	f000 fb10 	bl	800a0a0 <__assert_func>
 8009a80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a84:	6004      	str	r4, [r0, #0]
 8009a86:	60c4      	str	r4, [r0, #12]
 8009a88:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009a8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009a90:	b94c      	cbnz	r4, 8009aa6 <__pow5mult+0x66>
 8009a92:	f240 2171 	movw	r1, #625	; 0x271
 8009a96:	4630      	mov	r0, r6
 8009a98:	f7ff ff16 	bl	80098c8 <__i2b>
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009aa2:	4604      	mov	r4, r0
 8009aa4:	6003      	str	r3, [r0, #0]
 8009aa6:	f04f 0900 	mov.w	r9, #0
 8009aaa:	07eb      	lsls	r3, r5, #31
 8009aac:	d50a      	bpl.n	8009ac4 <__pow5mult+0x84>
 8009aae:	4639      	mov	r1, r7
 8009ab0:	4622      	mov	r2, r4
 8009ab2:	4630      	mov	r0, r6
 8009ab4:	f7ff ff1e 	bl	80098f4 <__multiply>
 8009ab8:	4639      	mov	r1, r7
 8009aba:	4680      	mov	r8, r0
 8009abc:	4630      	mov	r0, r6
 8009abe:	f7ff fe47 	bl	8009750 <_Bfree>
 8009ac2:	4647      	mov	r7, r8
 8009ac4:	106d      	asrs	r5, r5, #1
 8009ac6:	d00b      	beq.n	8009ae0 <__pow5mult+0xa0>
 8009ac8:	6820      	ldr	r0, [r4, #0]
 8009aca:	b938      	cbnz	r0, 8009adc <__pow5mult+0x9c>
 8009acc:	4622      	mov	r2, r4
 8009ace:	4621      	mov	r1, r4
 8009ad0:	4630      	mov	r0, r6
 8009ad2:	f7ff ff0f 	bl	80098f4 <__multiply>
 8009ad6:	6020      	str	r0, [r4, #0]
 8009ad8:	f8c0 9000 	str.w	r9, [r0]
 8009adc:	4604      	mov	r4, r0
 8009ade:	e7e4      	b.n	8009aaa <__pow5mult+0x6a>
 8009ae0:	4638      	mov	r0, r7
 8009ae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ae6:	bf00      	nop
 8009ae8:	0800b6c0 	.word	0x0800b6c0
 8009aec:	0800b4e9 	.word	0x0800b4e9
 8009af0:	0800b570 	.word	0x0800b570

08009af4 <__lshift>:
 8009af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009af8:	460c      	mov	r4, r1
 8009afa:	6849      	ldr	r1, [r1, #4]
 8009afc:	6923      	ldr	r3, [r4, #16]
 8009afe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009b02:	68a3      	ldr	r3, [r4, #8]
 8009b04:	4607      	mov	r7, r0
 8009b06:	4691      	mov	r9, r2
 8009b08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009b0c:	f108 0601 	add.w	r6, r8, #1
 8009b10:	42b3      	cmp	r3, r6
 8009b12:	db0b      	blt.n	8009b2c <__lshift+0x38>
 8009b14:	4638      	mov	r0, r7
 8009b16:	f7ff fddb 	bl	80096d0 <_Balloc>
 8009b1a:	4605      	mov	r5, r0
 8009b1c:	b948      	cbnz	r0, 8009b32 <__lshift+0x3e>
 8009b1e:	4602      	mov	r2, r0
 8009b20:	4b28      	ldr	r3, [pc, #160]	; (8009bc4 <__lshift+0xd0>)
 8009b22:	4829      	ldr	r0, [pc, #164]	; (8009bc8 <__lshift+0xd4>)
 8009b24:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009b28:	f000 faba 	bl	800a0a0 <__assert_func>
 8009b2c:	3101      	adds	r1, #1
 8009b2e:	005b      	lsls	r3, r3, #1
 8009b30:	e7ee      	b.n	8009b10 <__lshift+0x1c>
 8009b32:	2300      	movs	r3, #0
 8009b34:	f100 0114 	add.w	r1, r0, #20
 8009b38:	f100 0210 	add.w	r2, r0, #16
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	4553      	cmp	r3, sl
 8009b40:	db33      	blt.n	8009baa <__lshift+0xb6>
 8009b42:	6920      	ldr	r0, [r4, #16]
 8009b44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009b48:	f104 0314 	add.w	r3, r4, #20
 8009b4c:	f019 091f 	ands.w	r9, r9, #31
 8009b50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009b54:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009b58:	d02b      	beq.n	8009bb2 <__lshift+0xbe>
 8009b5a:	f1c9 0e20 	rsb	lr, r9, #32
 8009b5e:	468a      	mov	sl, r1
 8009b60:	2200      	movs	r2, #0
 8009b62:	6818      	ldr	r0, [r3, #0]
 8009b64:	fa00 f009 	lsl.w	r0, r0, r9
 8009b68:	4302      	orrs	r2, r0
 8009b6a:	f84a 2b04 	str.w	r2, [sl], #4
 8009b6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b72:	459c      	cmp	ip, r3
 8009b74:	fa22 f20e 	lsr.w	r2, r2, lr
 8009b78:	d8f3      	bhi.n	8009b62 <__lshift+0x6e>
 8009b7a:	ebac 0304 	sub.w	r3, ip, r4
 8009b7e:	3b15      	subs	r3, #21
 8009b80:	f023 0303 	bic.w	r3, r3, #3
 8009b84:	3304      	adds	r3, #4
 8009b86:	f104 0015 	add.w	r0, r4, #21
 8009b8a:	4584      	cmp	ip, r0
 8009b8c:	bf38      	it	cc
 8009b8e:	2304      	movcc	r3, #4
 8009b90:	50ca      	str	r2, [r1, r3]
 8009b92:	b10a      	cbz	r2, 8009b98 <__lshift+0xa4>
 8009b94:	f108 0602 	add.w	r6, r8, #2
 8009b98:	3e01      	subs	r6, #1
 8009b9a:	4638      	mov	r0, r7
 8009b9c:	612e      	str	r6, [r5, #16]
 8009b9e:	4621      	mov	r1, r4
 8009ba0:	f7ff fdd6 	bl	8009750 <_Bfree>
 8009ba4:	4628      	mov	r0, r5
 8009ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009baa:	f842 0f04 	str.w	r0, [r2, #4]!
 8009bae:	3301      	adds	r3, #1
 8009bb0:	e7c5      	b.n	8009b3e <__lshift+0x4a>
 8009bb2:	3904      	subs	r1, #4
 8009bb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bb8:	f841 2f04 	str.w	r2, [r1, #4]!
 8009bbc:	459c      	cmp	ip, r3
 8009bbe:	d8f9      	bhi.n	8009bb4 <__lshift+0xc0>
 8009bc0:	e7ea      	b.n	8009b98 <__lshift+0xa4>
 8009bc2:	bf00      	nop
 8009bc4:	0800b55f 	.word	0x0800b55f
 8009bc8:	0800b570 	.word	0x0800b570

08009bcc <__mcmp>:
 8009bcc:	b530      	push	{r4, r5, lr}
 8009bce:	6902      	ldr	r2, [r0, #16]
 8009bd0:	690c      	ldr	r4, [r1, #16]
 8009bd2:	1b12      	subs	r2, r2, r4
 8009bd4:	d10e      	bne.n	8009bf4 <__mcmp+0x28>
 8009bd6:	f100 0314 	add.w	r3, r0, #20
 8009bda:	3114      	adds	r1, #20
 8009bdc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009be0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009be4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009be8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009bec:	42a5      	cmp	r5, r4
 8009bee:	d003      	beq.n	8009bf8 <__mcmp+0x2c>
 8009bf0:	d305      	bcc.n	8009bfe <__mcmp+0x32>
 8009bf2:	2201      	movs	r2, #1
 8009bf4:	4610      	mov	r0, r2
 8009bf6:	bd30      	pop	{r4, r5, pc}
 8009bf8:	4283      	cmp	r3, r0
 8009bfa:	d3f3      	bcc.n	8009be4 <__mcmp+0x18>
 8009bfc:	e7fa      	b.n	8009bf4 <__mcmp+0x28>
 8009bfe:	f04f 32ff 	mov.w	r2, #4294967295
 8009c02:	e7f7      	b.n	8009bf4 <__mcmp+0x28>

08009c04 <__mdiff>:
 8009c04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c08:	460c      	mov	r4, r1
 8009c0a:	4606      	mov	r6, r0
 8009c0c:	4611      	mov	r1, r2
 8009c0e:	4620      	mov	r0, r4
 8009c10:	4617      	mov	r7, r2
 8009c12:	f7ff ffdb 	bl	8009bcc <__mcmp>
 8009c16:	1e05      	subs	r5, r0, #0
 8009c18:	d110      	bne.n	8009c3c <__mdiff+0x38>
 8009c1a:	4629      	mov	r1, r5
 8009c1c:	4630      	mov	r0, r6
 8009c1e:	f7ff fd57 	bl	80096d0 <_Balloc>
 8009c22:	b930      	cbnz	r0, 8009c32 <__mdiff+0x2e>
 8009c24:	4b39      	ldr	r3, [pc, #228]	; (8009d0c <__mdiff+0x108>)
 8009c26:	4602      	mov	r2, r0
 8009c28:	f240 2132 	movw	r1, #562	; 0x232
 8009c2c:	4838      	ldr	r0, [pc, #224]	; (8009d10 <__mdiff+0x10c>)
 8009c2e:	f000 fa37 	bl	800a0a0 <__assert_func>
 8009c32:	2301      	movs	r3, #1
 8009c34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009c38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c3c:	bfa4      	itt	ge
 8009c3e:	463b      	movge	r3, r7
 8009c40:	4627      	movge	r7, r4
 8009c42:	4630      	mov	r0, r6
 8009c44:	6879      	ldr	r1, [r7, #4]
 8009c46:	bfa6      	itte	ge
 8009c48:	461c      	movge	r4, r3
 8009c4a:	2500      	movge	r5, #0
 8009c4c:	2501      	movlt	r5, #1
 8009c4e:	f7ff fd3f 	bl	80096d0 <_Balloc>
 8009c52:	b920      	cbnz	r0, 8009c5e <__mdiff+0x5a>
 8009c54:	4b2d      	ldr	r3, [pc, #180]	; (8009d0c <__mdiff+0x108>)
 8009c56:	4602      	mov	r2, r0
 8009c58:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009c5c:	e7e6      	b.n	8009c2c <__mdiff+0x28>
 8009c5e:	693e      	ldr	r6, [r7, #16]
 8009c60:	60c5      	str	r5, [r0, #12]
 8009c62:	6925      	ldr	r5, [r4, #16]
 8009c64:	f107 0114 	add.w	r1, r7, #20
 8009c68:	f104 0914 	add.w	r9, r4, #20
 8009c6c:	f100 0e14 	add.w	lr, r0, #20
 8009c70:	f107 0210 	add.w	r2, r7, #16
 8009c74:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009c78:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009c7c:	46f2      	mov	sl, lr
 8009c7e:	2700      	movs	r7, #0
 8009c80:	f859 3b04 	ldr.w	r3, [r9], #4
 8009c84:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009c88:	fa1f f883 	uxth.w	r8, r3
 8009c8c:	fa17 f78b 	uxtah	r7, r7, fp
 8009c90:	0c1b      	lsrs	r3, r3, #16
 8009c92:	eba7 0808 	sub.w	r8, r7, r8
 8009c96:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009c9a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009c9e:	fa1f f888 	uxth.w	r8, r8
 8009ca2:	141f      	asrs	r7, r3, #16
 8009ca4:	454d      	cmp	r5, r9
 8009ca6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009caa:	f84a 3b04 	str.w	r3, [sl], #4
 8009cae:	d8e7      	bhi.n	8009c80 <__mdiff+0x7c>
 8009cb0:	1b2b      	subs	r3, r5, r4
 8009cb2:	3b15      	subs	r3, #21
 8009cb4:	f023 0303 	bic.w	r3, r3, #3
 8009cb8:	3304      	adds	r3, #4
 8009cba:	3415      	adds	r4, #21
 8009cbc:	42a5      	cmp	r5, r4
 8009cbe:	bf38      	it	cc
 8009cc0:	2304      	movcc	r3, #4
 8009cc2:	4419      	add	r1, r3
 8009cc4:	4473      	add	r3, lr
 8009cc6:	469e      	mov	lr, r3
 8009cc8:	460d      	mov	r5, r1
 8009cca:	4565      	cmp	r5, ip
 8009ccc:	d30e      	bcc.n	8009cec <__mdiff+0xe8>
 8009cce:	f10c 0203 	add.w	r2, ip, #3
 8009cd2:	1a52      	subs	r2, r2, r1
 8009cd4:	f022 0203 	bic.w	r2, r2, #3
 8009cd8:	3903      	subs	r1, #3
 8009cda:	458c      	cmp	ip, r1
 8009cdc:	bf38      	it	cc
 8009cde:	2200      	movcc	r2, #0
 8009ce0:	441a      	add	r2, r3
 8009ce2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009ce6:	b17b      	cbz	r3, 8009d08 <__mdiff+0x104>
 8009ce8:	6106      	str	r6, [r0, #16]
 8009cea:	e7a5      	b.n	8009c38 <__mdiff+0x34>
 8009cec:	f855 8b04 	ldr.w	r8, [r5], #4
 8009cf0:	fa17 f488 	uxtah	r4, r7, r8
 8009cf4:	1422      	asrs	r2, r4, #16
 8009cf6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009cfa:	b2a4      	uxth	r4, r4
 8009cfc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009d00:	f84e 4b04 	str.w	r4, [lr], #4
 8009d04:	1417      	asrs	r7, r2, #16
 8009d06:	e7e0      	b.n	8009cca <__mdiff+0xc6>
 8009d08:	3e01      	subs	r6, #1
 8009d0a:	e7ea      	b.n	8009ce2 <__mdiff+0xde>
 8009d0c:	0800b55f 	.word	0x0800b55f
 8009d10:	0800b570 	.word	0x0800b570

08009d14 <__d2b>:
 8009d14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009d18:	4689      	mov	r9, r1
 8009d1a:	2101      	movs	r1, #1
 8009d1c:	ec57 6b10 	vmov	r6, r7, d0
 8009d20:	4690      	mov	r8, r2
 8009d22:	f7ff fcd5 	bl	80096d0 <_Balloc>
 8009d26:	4604      	mov	r4, r0
 8009d28:	b930      	cbnz	r0, 8009d38 <__d2b+0x24>
 8009d2a:	4602      	mov	r2, r0
 8009d2c:	4b25      	ldr	r3, [pc, #148]	; (8009dc4 <__d2b+0xb0>)
 8009d2e:	4826      	ldr	r0, [pc, #152]	; (8009dc8 <__d2b+0xb4>)
 8009d30:	f240 310a 	movw	r1, #778	; 0x30a
 8009d34:	f000 f9b4 	bl	800a0a0 <__assert_func>
 8009d38:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009d3c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009d40:	bb35      	cbnz	r5, 8009d90 <__d2b+0x7c>
 8009d42:	2e00      	cmp	r6, #0
 8009d44:	9301      	str	r3, [sp, #4]
 8009d46:	d028      	beq.n	8009d9a <__d2b+0x86>
 8009d48:	4668      	mov	r0, sp
 8009d4a:	9600      	str	r6, [sp, #0]
 8009d4c:	f7ff fd8c 	bl	8009868 <__lo0bits>
 8009d50:	9900      	ldr	r1, [sp, #0]
 8009d52:	b300      	cbz	r0, 8009d96 <__d2b+0x82>
 8009d54:	9a01      	ldr	r2, [sp, #4]
 8009d56:	f1c0 0320 	rsb	r3, r0, #32
 8009d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8009d5e:	430b      	orrs	r3, r1
 8009d60:	40c2      	lsrs	r2, r0
 8009d62:	6163      	str	r3, [r4, #20]
 8009d64:	9201      	str	r2, [sp, #4]
 8009d66:	9b01      	ldr	r3, [sp, #4]
 8009d68:	61a3      	str	r3, [r4, #24]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	bf14      	ite	ne
 8009d6e:	2202      	movne	r2, #2
 8009d70:	2201      	moveq	r2, #1
 8009d72:	6122      	str	r2, [r4, #16]
 8009d74:	b1d5      	cbz	r5, 8009dac <__d2b+0x98>
 8009d76:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009d7a:	4405      	add	r5, r0
 8009d7c:	f8c9 5000 	str.w	r5, [r9]
 8009d80:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009d84:	f8c8 0000 	str.w	r0, [r8]
 8009d88:	4620      	mov	r0, r4
 8009d8a:	b003      	add	sp, #12
 8009d8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009d94:	e7d5      	b.n	8009d42 <__d2b+0x2e>
 8009d96:	6161      	str	r1, [r4, #20]
 8009d98:	e7e5      	b.n	8009d66 <__d2b+0x52>
 8009d9a:	a801      	add	r0, sp, #4
 8009d9c:	f7ff fd64 	bl	8009868 <__lo0bits>
 8009da0:	9b01      	ldr	r3, [sp, #4]
 8009da2:	6163      	str	r3, [r4, #20]
 8009da4:	2201      	movs	r2, #1
 8009da6:	6122      	str	r2, [r4, #16]
 8009da8:	3020      	adds	r0, #32
 8009daa:	e7e3      	b.n	8009d74 <__d2b+0x60>
 8009dac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009db0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009db4:	f8c9 0000 	str.w	r0, [r9]
 8009db8:	6918      	ldr	r0, [r3, #16]
 8009dba:	f7ff fd35 	bl	8009828 <__hi0bits>
 8009dbe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009dc2:	e7df      	b.n	8009d84 <__d2b+0x70>
 8009dc4:	0800b55f 	.word	0x0800b55f
 8009dc8:	0800b570 	.word	0x0800b570

08009dcc <_calloc_r>:
 8009dcc:	b513      	push	{r0, r1, r4, lr}
 8009dce:	434a      	muls	r2, r1
 8009dd0:	4611      	mov	r1, r2
 8009dd2:	9201      	str	r2, [sp, #4]
 8009dd4:	f7fe f8f0 	bl	8007fb8 <_malloc_r>
 8009dd8:	4604      	mov	r4, r0
 8009dda:	b118      	cbz	r0, 8009de4 <_calloc_r+0x18>
 8009ddc:	9a01      	ldr	r2, [sp, #4]
 8009dde:	2100      	movs	r1, #0
 8009de0:	f7fe f892 	bl	8007f08 <memset>
 8009de4:	4620      	mov	r0, r4
 8009de6:	b002      	add	sp, #8
 8009de8:	bd10      	pop	{r4, pc}

08009dea <__ssputs_r>:
 8009dea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dee:	688e      	ldr	r6, [r1, #8]
 8009df0:	429e      	cmp	r6, r3
 8009df2:	4682      	mov	sl, r0
 8009df4:	460c      	mov	r4, r1
 8009df6:	4690      	mov	r8, r2
 8009df8:	461f      	mov	r7, r3
 8009dfa:	d838      	bhi.n	8009e6e <__ssputs_r+0x84>
 8009dfc:	898a      	ldrh	r2, [r1, #12]
 8009dfe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009e02:	d032      	beq.n	8009e6a <__ssputs_r+0x80>
 8009e04:	6825      	ldr	r5, [r4, #0]
 8009e06:	6909      	ldr	r1, [r1, #16]
 8009e08:	eba5 0901 	sub.w	r9, r5, r1
 8009e0c:	6965      	ldr	r5, [r4, #20]
 8009e0e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e12:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009e16:	3301      	adds	r3, #1
 8009e18:	444b      	add	r3, r9
 8009e1a:	106d      	asrs	r5, r5, #1
 8009e1c:	429d      	cmp	r5, r3
 8009e1e:	bf38      	it	cc
 8009e20:	461d      	movcc	r5, r3
 8009e22:	0553      	lsls	r3, r2, #21
 8009e24:	d531      	bpl.n	8009e8a <__ssputs_r+0xa0>
 8009e26:	4629      	mov	r1, r5
 8009e28:	f7fe f8c6 	bl	8007fb8 <_malloc_r>
 8009e2c:	4606      	mov	r6, r0
 8009e2e:	b950      	cbnz	r0, 8009e46 <__ssputs_r+0x5c>
 8009e30:	230c      	movs	r3, #12
 8009e32:	f8ca 3000 	str.w	r3, [sl]
 8009e36:	89a3      	ldrh	r3, [r4, #12]
 8009e38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e3c:	81a3      	strh	r3, [r4, #12]
 8009e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8009e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e46:	6921      	ldr	r1, [r4, #16]
 8009e48:	464a      	mov	r2, r9
 8009e4a:	f7fe f84f 	bl	8007eec <memcpy>
 8009e4e:	89a3      	ldrh	r3, [r4, #12]
 8009e50:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e58:	81a3      	strh	r3, [r4, #12]
 8009e5a:	6126      	str	r6, [r4, #16]
 8009e5c:	6165      	str	r5, [r4, #20]
 8009e5e:	444e      	add	r6, r9
 8009e60:	eba5 0509 	sub.w	r5, r5, r9
 8009e64:	6026      	str	r6, [r4, #0]
 8009e66:	60a5      	str	r5, [r4, #8]
 8009e68:	463e      	mov	r6, r7
 8009e6a:	42be      	cmp	r6, r7
 8009e6c:	d900      	bls.n	8009e70 <__ssputs_r+0x86>
 8009e6e:	463e      	mov	r6, r7
 8009e70:	4632      	mov	r2, r6
 8009e72:	6820      	ldr	r0, [r4, #0]
 8009e74:	4641      	mov	r1, r8
 8009e76:	f000 f958 	bl	800a12a <memmove>
 8009e7a:	68a3      	ldr	r3, [r4, #8]
 8009e7c:	6822      	ldr	r2, [r4, #0]
 8009e7e:	1b9b      	subs	r3, r3, r6
 8009e80:	4432      	add	r2, r6
 8009e82:	60a3      	str	r3, [r4, #8]
 8009e84:	6022      	str	r2, [r4, #0]
 8009e86:	2000      	movs	r0, #0
 8009e88:	e7db      	b.n	8009e42 <__ssputs_r+0x58>
 8009e8a:	462a      	mov	r2, r5
 8009e8c:	f000 f967 	bl	800a15e <_realloc_r>
 8009e90:	4606      	mov	r6, r0
 8009e92:	2800      	cmp	r0, #0
 8009e94:	d1e1      	bne.n	8009e5a <__ssputs_r+0x70>
 8009e96:	6921      	ldr	r1, [r4, #16]
 8009e98:	4650      	mov	r0, sl
 8009e9a:	f7fe f83d 	bl	8007f18 <_free_r>
 8009e9e:	e7c7      	b.n	8009e30 <__ssputs_r+0x46>

08009ea0 <_svfiprintf_r>:
 8009ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ea4:	4698      	mov	r8, r3
 8009ea6:	898b      	ldrh	r3, [r1, #12]
 8009ea8:	061b      	lsls	r3, r3, #24
 8009eaa:	b09d      	sub	sp, #116	; 0x74
 8009eac:	4607      	mov	r7, r0
 8009eae:	460d      	mov	r5, r1
 8009eb0:	4614      	mov	r4, r2
 8009eb2:	d50e      	bpl.n	8009ed2 <_svfiprintf_r+0x32>
 8009eb4:	690b      	ldr	r3, [r1, #16]
 8009eb6:	b963      	cbnz	r3, 8009ed2 <_svfiprintf_r+0x32>
 8009eb8:	2140      	movs	r1, #64	; 0x40
 8009eba:	f7fe f87d 	bl	8007fb8 <_malloc_r>
 8009ebe:	6028      	str	r0, [r5, #0]
 8009ec0:	6128      	str	r0, [r5, #16]
 8009ec2:	b920      	cbnz	r0, 8009ece <_svfiprintf_r+0x2e>
 8009ec4:	230c      	movs	r3, #12
 8009ec6:	603b      	str	r3, [r7, #0]
 8009ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8009ecc:	e0d1      	b.n	800a072 <_svfiprintf_r+0x1d2>
 8009ece:	2340      	movs	r3, #64	; 0x40
 8009ed0:	616b      	str	r3, [r5, #20]
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	9309      	str	r3, [sp, #36]	; 0x24
 8009ed6:	2320      	movs	r3, #32
 8009ed8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009edc:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ee0:	2330      	movs	r3, #48	; 0x30
 8009ee2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a08c <_svfiprintf_r+0x1ec>
 8009ee6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009eea:	f04f 0901 	mov.w	r9, #1
 8009eee:	4623      	mov	r3, r4
 8009ef0:	469a      	mov	sl, r3
 8009ef2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ef6:	b10a      	cbz	r2, 8009efc <_svfiprintf_r+0x5c>
 8009ef8:	2a25      	cmp	r2, #37	; 0x25
 8009efa:	d1f9      	bne.n	8009ef0 <_svfiprintf_r+0x50>
 8009efc:	ebba 0b04 	subs.w	fp, sl, r4
 8009f00:	d00b      	beq.n	8009f1a <_svfiprintf_r+0x7a>
 8009f02:	465b      	mov	r3, fp
 8009f04:	4622      	mov	r2, r4
 8009f06:	4629      	mov	r1, r5
 8009f08:	4638      	mov	r0, r7
 8009f0a:	f7ff ff6e 	bl	8009dea <__ssputs_r>
 8009f0e:	3001      	adds	r0, #1
 8009f10:	f000 80aa 	beq.w	800a068 <_svfiprintf_r+0x1c8>
 8009f14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f16:	445a      	add	r2, fp
 8009f18:	9209      	str	r2, [sp, #36]	; 0x24
 8009f1a:	f89a 3000 	ldrb.w	r3, [sl]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	f000 80a2 	beq.w	800a068 <_svfiprintf_r+0x1c8>
 8009f24:	2300      	movs	r3, #0
 8009f26:	f04f 32ff 	mov.w	r2, #4294967295
 8009f2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f2e:	f10a 0a01 	add.w	sl, sl, #1
 8009f32:	9304      	str	r3, [sp, #16]
 8009f34:	9307      	str	r3, [sp, #28]
 8009f36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f3a:	931a      	str	r3, [sp, #104]	; 0x68
 8009f3c:	4654      	mov	r4, sl
 8009f3e:	2205      	movs	r2, #5
 8009f40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f44:	4851      	ldr	r0, [pc, #324]	; (800a08c <_svfiprintf_r+0x1ec>)
 8009f46:	f7f6 f923 	bl	8000190 <memchr>
 8009f4a:	9a04      	ldr	r2, [sp, #16]
 8009f4c:	b9d8      	cbnz	r0, 8009f86 <_svfiprintf_r+0xe6>
 8009f4e:	06d0      	lsls	r0, r2, #27
 8009f50:	bf44      	itt	mi
 8009f52:	2320      	movmi	r3, #32
 8009f54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f58:	0711      	lsls	r1, r2, #28
 8009f5a:	bf44      	itt	mi
 8009f5c:	232b      	movmi	r3, #43	; 0x2b
 8009f5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f62:	f89a 3000 	ldrb.w	r3, [sl]
 8009f66:	2b2a      	cmp	r3, #42	; 0x2a
 8009f68:	d015      	beq.n	8009f96 <_svfiprintf_r+0xf6>
 8009f6a:	9a07      	ldr	r2, [sp, #28]
 8009f6c:	4654      	mov	r4, sl
 8009f6e:	2000      	movs	r0, #0
 8009f70:	f04f 0c0a 	mov.w	ip, #10
 8009f74:	4621      	mov	r1, r4
 8009f76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f7a:	3b30      	subs	r3, #48	; 0x30
 8009f7c:	2b09      	cmp	r3, #9
 8009f7e:	d94e      	bls.n	800a01e <_svfiprintf_r+0x17e>
 8009f80:	b1b0      	cbz	r0, 8009fb0 <_svfiprintf_r+0x110>
 8009f82:	9207      	str	r2, [sp, #28]
 8009f84:	e014      	b.n	8009fb0 <_svfiprintf_r+0x110>
 8009f86:	eba0 0308 	sub.w	r3, r0, r8
 8009f8a:	fa09 f303 	lsl.w	r3, r9, r3
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	9304      	str	r3, [sp, #16]
 8009f92:	46a2      	mov	sl, r4
 8009f94:	e7d2      	b.n	8009f3c <_svfiprintf_r+0x9c>
 8009f96:	9b03      	ldr	r3, [sp, #12]
 8009f98:	1d19      	adds	r1, r3, #4
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	9103      	str	r1, [sp, #12]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	bfbb      	ittet	lt
 8009fa2:	425b      	neglt	r3, r3
 8009fa4:	f042 0202 	orrlt.w	r2, r2, #2
 8009fa8:	9307      	strge	r3, [sp, #28]
 8009faa:	9307      	strlt	r3, [sp, #28]
 8009fac:	bfb8      	it	lt
 8009fae:	9204      	strlt	r2, [sp, #16]
 8009fb0:	7823      	ldrb	r3, [r4, #0]
 8009fb2:	2b2e      	cmp	r3, #46	; 0x2e
 8009fb4:	d10c      	bne.n	8009fd0 <_svfiprintf_r+0x130>
 8009fb6:	7863      	ldrb	r3, [r4, #1]
 8009fb8:	2b2a      	cmp	r3, #42	; 0x2a
 8009fba:	d135      	bne.n	800a028 <_svfiprintf_r+0x188>
 8009fbc:	9b03      	ldr	r3, [sp, #12]
 8009fbe:	1d1a      	adds	r2, r3, #4
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	9203      	str	r2, [sp, #12]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	bfb8      	it	lt
 8009fc8:	f04f 33ff 	movlt.w	r3, #4294967295
 8009fcc:	3402      	adds	r4, #2
 8009fce:	9305      	str	r3, [sp, #20]
 8009fd0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a09c <_svfiprintf_r+0x1fc>
 8009fd4:	7821      	ldrb	r1, [r4, #0]
 8009fd6:	2203      	movs	r2, #3
 8009fd8:	4650      	mov	r0, sl
 8009fda:	f7f6 f8d9 	bl	8000190 <memchr>
 8009fde:	b140      	cbz	r0, 8009ff2 <_svfiprintf_r+0x152>
 8009fe0:	2340      	movs	r3, #64	; 0x40
 8009fe2:	eba0 000a 	sub.w	r0, r0, sl
 8009fe6:	fa03 f000 	lsl.w	r0, r3, r0
 8009fea:	9b04      	ldr	r3, [sp, #16]
 8009fec:	4303      	orrs	r3, r0
 8009fee:	3401      	adds	r4, #1
 8009ff0:	9304      	str	r3, [sp, #16]
 8009ff2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ff6:	4826      	ldr	r0, [pc, #152]	; (800a090 <_svfiprintf_r+0x1f0>)
 8009ff8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ffc:	2206      	movs	r2, #6
 8009ffe:	f7f6 f8c7 	bl	8000190 <memchr>
 800a002:	2800      	cmp	r0, #0
 800a004:	d038      	beq.n	800a078 <_svfiprintf_r+0x1d8>
 800a006:	4b23      	ldr	r3, [pc, #140]	; (800a094 <_svfiprintf_r+0x1f4>)
 800a008:	bb1b      	cbnz	r3, 800a052 <_svfiprintf_r+0x1b2>
 800a00a:	9b03      	ldr	r3, [sp, #12]
 800a00c:	3307      	adds	r3, #7
 800a00e:	f023 0307 	bic.w	r3, r3, #7
 800a012:	3308      	adds	r3, #8
 800a014:	9303      	str	r3, [sp, #12]
 800a016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a018:	4433      	add	r3, r6
 800a01a:	9309      	str	r3, [sp, #36]	; 0x24
 800a01c:	e767      	b.n	8009eee <_svfiprintf_r+0x4e>
 800a01e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a022:	460c      	mov	r4, r1
 800a024:	2001      	movs	r0, #1
 800a026:	e7a5      	b.n	8009f74 <_svfiprintf_r+0xd4>
 800a028:	2300      	movs	r3, #0
 800a02a:	3401      	adds	r4, #1
 800a02c:	9305      	str	r3, [sp, #20]
 800a02e:	4619      	mov	r1, r3
 800a030:	f04f 0c0a 	mov.w	ip, #10
 800a034:	4620      	mov	r0, r4
 800a036:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a03a:	3a30      	subs	r2, #48	; 0x30
 800a03c:	2a09      	cmp	r2, #9
 800a03e:	d903      	bls.n	800a048 <_svfiprintf_r+0x1a8>
 800a040:	2b00      	cmp	r3, #0
 800a042:	d0c5      	beq.n	8009fd0 <_svfiprintf_r+0x130>
 800a044:	9105      	str	r1, [sp, #20]
 800a046:	e7c3      	b.n	8009fd0 <_svfiprintf_r+0x130>
 800a048:	fb0c 2101 	mla	r1, ip, r1, r2
 800a04c:	4604      	mov	r4, r0
 800a04e:	2301      	movs	r3, #1
 800a050:	e7f0      	b.n	800a034 <_svfiprintf_r+0x194>
 800a052:	ab03      	add	r3, sp, #12
 800a054:	9300      	str	r3, [sp, #0]
 800a056:	462a      	mov	r2, r5
 800a058:	4b0f      	ldr	r3, [pc, #60]	; (800a098 <_svfiprintf_r+0x1f8>)
 800a05a:	a904      	add	r1, sp, #16
 800a05c:	4638      	mov	r0, r7
 800a05e:	f7fe f8a5 	bl	80081ac <_printf_float>
 800a062:	1c42      	adds	r2, r0, #1
 800a064:	4606      	mov	r6, r0
 800a066:	d1d6      	bne.n	800a016 <_svfiprintf_r+0x176>
 800a068:	89ab      	ldrh	r3, [r5, #12]
 800a06a:	065b      	lsls	r3, r3, #25
 800a06c:	f53f af2c 	bmi.w	8009ec8 <_svfiprintf_r+0x28>
 800a070:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a072:	b01d      	add	sp, #116	; 0x74
 800a074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a078:	ab03      	add	r3, sp, #12
 800a07a:	9300      	str	r3, [sp, #0]
 800a07c:	462a      	mov	r2, r5
 800a07e:	4b06      	ldr	r3, [pc, #24]	; (800a098 <_svfiprintf_r+0x1f8>)
 800a080:	a904      	add	r1, sp, #16
 800a082:	4638      	mov	r0, r7
 800a084:	f7fe fb36 	bl	80086f4 <_printf_i>
 800a088:	e7eb      	b.n	800a062 <_svfiprintf_r+0x1c2>
 800a08a:	bf00      	nop
 800a08c:	0800b6cc 	.word	0x0800b6cc
 800a090:	0800b6d6 	.word	0x0800b6d6
 800a094:	080081ad 	.word	0x080081ad
 800a098:	08009deb 	.word	0x08009deb
 800a09c:	0800b6d2 	.word	0x0800b6d2

0800a0a0 <__assert_func>:
 800a0a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a0a2:	4614      	mov	r4, r2
 800a0a4:	461a      	mov	r2, r3
 800a0a6:	4b09      	ldr	r3, [pc, #36]	; (800a0cc <__assert_func+0x2c>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4605      	mov	r5, r0
 800a0ac:	68d8      	ldr	r0, [r3, #12]
 800a0ae:	b14c      	cbz	r4, 800a0c4 <__assert_func+0x24>
 800a0b0:	4b07      	ldr	r3, [pc, #28]	; (800a0d0 <__assert_func+0x30>)
 800a0b2:	9100      	str	r1, [sp, #0]
 800a0b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a0b8:	4906      	ldr	r1, [pc, #24]	; (800a0d4 <__assert_func+0x34>)
 800a0ba:	462b      	mov	r3, r5
 800a0bc:	f000 f80e 	bl	800a0dc <fiprintf>
 800a0c0:	f000 fa9a 	bl	800a5f8 <abort>
 800a0c4:	4b04      	ldr	r3, [pc, #16]	; (800a0d8 <__assert_func+0x38>)
 800a0c6:	461c      	mov	r4, r3
 800a0c8:	e7f3      	b.n	800a0b2 <__assert_func+0x12>
 800a0ca:	bf00      	nop
 800a0cc:	20000010 	.word	0x20000010
 800a0d0:	0800b6dd 	.word	0x0800b6dd
 800a0d4:	0800b6ea 	.word	0x0800b6ea
 800a0d8:	0800b718 	.word	0x0800b718

0800a0dc <fiprintf>:
 800a0dc:	b40e      	push	{r1, r2, r3}
 800a0de:	b503      	push	{r0, r1, lr}
 800a0e0:	4601      	mov	r1, r0
 800a0e2:	ab03      	add	r3, sp, #12
 800a0e4:	4805      	ldr	r0, [pc, #20]	; (800a0fc <fiprintf+0x20>)
 800a0e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0ea:	6800      	ldr	r0, [r0, #0]
 800a0ec:	9301      	str	r3, [sp, #4]
 800a0ee:	f000 f885 	bl	800a1fc <_vfiprintf_r>
 800a0f2:	b002      	add	sp, #8
 800a0f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a0f8:	b003      	add	sp, #12
 800a0fa:	4770      	bx	lr
 800a0fc:	20000010 	.word	0x20000010

0800a100 <__retarget_lock_init_recursive>:
 800a100:	4770      	bx	lr

0800a102 <__retarget_lock_acquire_recursive>:
 800a102:	4770      	bx	lr

0800a104 <__retarget_lock_release_recursive>:
 800a104:	4770      	bx	lr

0800a106 <__ascii_mbtowc>:
 800a106:	b082      	sub	sp, #8
 800a108:	b901      	cbnz	r1, 800a10c <__ascii_mbtowc+0x6>
 800a10a:	a901      	add	r1, sp, #4
 800a10c:	b142      	cbz	r2, 800a120 <__ascii_mbtowc+0x1a>
 800a10e:	b14b      	cbz	r3, 800a124 <__ascii_mbtowc+0x1e>
 800a110:	7813      	ldrb	r3, [r2, #0]
 800a112:	600b      	str	r3, [r1, #0]
 800a114:	7812      	ldrb	r2, [r2, #0]
 800a116:	1e10      	subs	r0, r2, #0
 800a118:	bf18      	it	ne
 800a11a:	2001      	movne	r0, #1
 800a11c:	b002      	add	sp, #8
 800a11e:	4770      	bx	lr
 800a120:	4610      	mov	r0, r2
 800a122:	e7fb      	b.n	800a11c <__ascii_mbtowc+0x16>
 800a124:	f06f 0001 	mvn.w	r0, #1
 800a128:	e7f8      	b.n	800a11c <__ascii_mbtowc+0x16>

0800a12a <memmove>:
 800a12a:	4288      	cmp	r0, r1
 800a12c:	b510      	push	{r4, lr}
 800a12e:	eb01 0402 	add.w	r4, r1, r2
 800a132:	d902      	bls.n	800a13a <memmove+0x10>
 800a134:	4284      	cmp	r4, r0
 800a136:	4623      	mov	r3, r4
 800a138:	d807      	bhi.n	800a14a <memmove+0x20>
 800a13a:	1e43      	subs	r3, r0, #1
 800a13c:	42a1      	cmp	r1, r4
 800a13e:	d008      	beq.n	800a152 <memmove+0x28>
 800a140:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a144:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a148:	e7f8      	b.n	800a13c <memmove+0x12>
 800a14a:	4402      	add	r2, r0
 800a14c:	4601      	mov	r1, r0
 800a14e:	428a      	cmp	r2, r1
 800a150:	d100      	bne.n	800a154 <memmove+0x2a>
 800a152:	bd10      	pop	{r4, pc}
 800a154:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a158:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a15c:	e7f7      	b.n	800a14e <memmove+0x24>

0800a15e <_realloc_r>:
 800a15e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a160:	4607      	mov	r7, r0
 800a162:	4614      	mov	r4, r2
 800a164:	460e      	mov	r6, r1
 800a166:	b921      	cbnz	r1, 800a172 <_realloc_r+0x14>
 800a168:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a16c:	4611      	mov	r1, r2
 800a16e:	f7fd bf23 	b.w	8007fb8 <_malloc_r>
 800a172:	b922      	cbnz	r2, 800a17e <_realloc_r+0x20>
 800a174:	f7fd fed0 	bl	8007f18 <_free_r>
 800a178:	4625      	mov	r5, r4
 800a17a:	4628      	mov	r0, r5
 800a17c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a17e:	f000 fc5f 	bl	800aa40 <_malloc_usable_size_r>
 800a182:	42a0      	cmp	r0, r4
 800a184:	d20f      	bcs.n	800a1a6 <_realloc_r+0x48>
 800a186:	4621      	mov	r1, r4
 800a188:	4638      	mov	r0, r7
 800a18a:	f7fd ff15 	bl	8007fb8 <_malloc_r>
 800a18e:	4605      	mov	r5, r0
 800a190:	2800      	cmp	r0, #0
 800a192:	d0f2      	beq.n	800a17a <_realloc_r+0x1c>
 800a194:	4631      	mov	r1, r6
 800a196:	4622      	mov	r2, r4
 800a198:	f7fd fea8 	bl	8007eec <memcpy>
 800a19c:	4631      	mov	r1, r6
 800a19e:	4638      	mov	r0, r7
 800a1a0:	f7fd feba 	bl	8007f18 <_free_r>
 800a1a4:	e7e9      	b.n	800a17a <_realloc_r+0x1c>
 800a1a6:	4635      	mov	r5, r6
 800a1a8:	e7e7      	b.n	800a17a <_realloc_r+0x1c>

0800a1aa <__sfputc_r>:
 800a1aa:	6893      	ldr	r3, [r2, #8]
 800a1ac:	3b01      	subs	r3, #1
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	b410      	push	{r4}
 800a1b2:	6093      	str	r3, [r2, #8]
 800a1b4:	da08      	bge.n	800a1c8 <__sfputc_r+0x1e>
 800a1b6:	6994      	ldr	r4, [r2, #24]
 800a1b8:	42a3      	cmp	r3, r4
 800a1ba:	db01      	blt.n	800a1c0 <__sfputc_r+0x16>
 800a1bc:	290a      	cmp	r1, #10
 800a1be:	d103      	bne.n	800a1c8 <__sfputc_r+0x1e>
 800a1c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1c4:	f000 b94a 	b.w	800a45c <__swbuf_r>
 800a1c8:	6813      	ldr	r3, [r2, #0]
 800a1ca:	1c58      	adds	r0, r3, #1
 800a1cc:	6010      	str	r0, [r2, #0]
 800a1ce:	7019      	strb	r1, [r3, #0]
 800a1d0:	4608      	mov	r0, r1
 800a1d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1d6:	4770      	bx	lr

0800a1d8 <__sfputs_r>:
 800a1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1da:	4606      	mov	r6, r0
 800a1dc:	460f      	mov	r7, r1
 800a1de:	4614      	mov	r4, r2
 800a1e0:	18d5      	adds	r5, r2, r3
 800a1e2:	42ac      	cmp	r4, r5
 800a1e4:	d101      	bne.n	800a1ea <__sfputs_r+0x12>
 800a1e6:	2000      	movs	r0, #0
 800a1e8:	e007      	b.n	800a1fa <__sfputs_r+0x22>
 800a1ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1ee:	463a      	mov	r2, r7
 800a1f0:	4630      	mov	r0, r6
 800a1f2:	f7ff ffda 	bl	800a1aa <__sfputc_r>
 800a1f6:	1c43      	adds	r3, r0, #1
 800a1f8:	d1f3      	bne.n	800a1e2 <__sfputs_r+0xa>
 800a1fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a1fc <_vfiprintf_r>:
 800a1fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a200:	460d      	mov	r5, r1
 800a202:	b09d      	sub	sp, #116	; 0x74
 800a204:	4614      	mov	r4, r2
 800a206:	4698      	mov	r8, r3
 800a208:	4606      	mov	r6, r0
 800a20a:	b118      	cbz	r0, 800a214 <_vfiprintf_r+0x18>
 800a20c:	6983      	ldr	r3, [r0, #24]
 800a20e:	b90b      	cbnz	r3, 800a214 <_vfiprintf_r+0x18>
 800a210:	f000 fb14 	bl	800a83c <__sinit>
 800a214:	4b89      	ldr	r3, [pc, #548]	; (800a43c <_vfiprintf_r+0x240>)
 800a216:	429d      	cmp	r5, r3
 800a218:	d11b      	bne.n	800a252 <_vfiprintf_r+0x56>
 800a21a:	6875      	ldr	r5, [r6, #4]
 800a21c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a21e:	07d9      	lsls	r1, r3, #31
 800a220:	d405      	bmi.n	800a22e <_vfiprintf_r+0x32>
 800a222:	89ab      	ldrh	r3, [r5, #12]
 800a224:	059a      	lsls	r2, r3, #22
 800a226:	d402      	bmi.n	800a22e <_vfiprintf_r+0x32>
 800a228:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a22a:	f7ff ff6a 	bl	800a102 <__retarget_lock_acquire_recursive>
 800a22e:	89ab      	ldrh	r3, [r5, #12]
 800a230:	071b      	lsls	r3, r3, #28
 800a232:	d501      	bpl.n	800a238 <_vfiprintf_r+0x3c>
 800a234:	692b      	ldr	r3, [r5, #16]
 800a236:	b9eb      	cbnz	r3, 800a274 <_vfiprintf_r+0x78>
 800a238:	4629      	mov	r1, r5
 800a23a:	4630      	mov	r0, r6
 800a23c:	f000 f96e 	bl	800a51c <__swsetup_r>
 800a240:	b1c0      	cbz	r0, 800a274 <_vfiprintf_r+0x78>
 800a242:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a244:	07dc      	lsls	r4, r3, #31
 800a246:	d50e      	bpl.n	800a266 <_vfiprintf_r+0x6a>
 800a248:	f04f 30ff 	mov.w	r0, #4294967295
 800a24c:	b01d      	add	sp, #116	; 0x74
 800a24e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a252:	4b7b      	ldr	r3, [pc, #492]	; (800a440 <_vfiprintf_r+0x244>)
 800a254:	429d      	cmp	r5, r3
 800a256:	d101      	bne.n	800a25c <_vfiprintf_r+0x60>
 800a258:	68b5      	ldr	r5, [r6, #8]
 800a25a:	e7df      	b.n	800a21c <_vfiprintf_r+0x20>
 800a25c:	4b79      	ldr	r3, [pc, #484]	; (800a444 <_vfiprintf_r+0x248>)
 800a25e:	429d      	cmp	r5, r3
 800a260:	bf08      	it	eq
 800a262:	68f5      	ldreq	r5, [r6, #12]
 800a264:	e7da      	b.n	800a21c <_vfiprintf_r+0x20>
 800a266:	89ab      	ldrh	r3, [r5, #12]
 800a268:	0598      	lsls	r0, r3, #22
 800a26a:	d4ed      	bmi.n	800a248 <_vfiprintf_r+0x4c>
 800a26c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a26e:	f7ff ff49 	bl	800a104 <__retarget_lock_release_recursive>
 800a272:	e7e9      	b.n	800a248 <_vfiprintf_r+0x4c>
 800a274:	2300      	movs	r3, #0
 800a276:	9309      	str	r3, [sp, #36]	; 0x24
 800a278:	2320      	movs	r3, #32
 800a27a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a27e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a282:	2330      	movs	r3, #48	; 0x30
 800a284:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a448 <_vfiprintf_r+0x24c>
 800a288:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a28c:	f04f 0901 	mov.w	r9, #1
 800a290:	4623      	mov	r3, r4
 800a292:	469a      	mov	sl, r3
 800a294:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a298:	b10a      	cbz	r2, 800a29e <_vfiprintf_r+0xa2>
 800a29a:	2a25      	cmp	r2, #37	; 0x25
 800a29c:	d1f9      	bne.n	800a292 <_vfiprintf_r+0x96>
 800a29e:	ebba 0b04 	subs.w	fp, sl, r4
 800a2a2:	d00b      	beq.n	800a2bc <_vfiprintf_r+0xc0>
 800a2a4:	465b      	mov	r3, fp
 800a2a6:	4622      	mov	r2, r4
 800a2a8:	4629      	mov	r1, r5
 800a2aa:	4630      	mov	r0, r6
 800a2ac:	f7ff ff94 	bl	800a1d8 <__sfputs_r>
 800a2b0:	3001      	adds	r0, #1
 800a2b2:	f000 80aa 	beq.w	800a40a <_vfiprintf_r+0x20e>
 800a2b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2b8:	445a      	add	r2, fp
 800a2ba:	9209      	str	r2, [sp, #36]	; 0x24
 800a2bc:	f89a 3000 	ldrb.w	r3, [sl]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	f000 80a2 	beq.w	800a40a <_vfiprintf_r+0x20e>
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	f04f 32ff 	mov.w	r2, #4294967295
 800a2cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2d0:	f10a 0a01 	add.w	sl, sl, #1
 800a2d4:	9304      	str	r3, [sp, #16]
 800a2d6:	9307      	str	r3, [sp, #28]
 800a2d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a2dc:	931a      	str	r3, [sp, #104]	; 0x68
 800a2de:	4654      	mov	r4, sl
 800a2e0:	2205      	movs	r2, #5
 800a2e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2e6:	4858      	ldr	r0, [pc, #352]	; (800a448 <_vfiprintf_r+0x24c>)
 800a2e8:	f7f5 ff52 	bl	8000190 <memchr>
 800a2ec:	9a04      	ldr	r2, [sp, #16]
 800a2ee:	b9d8      	cbnz	r0, 800a328 <_vfiprintf_r+0x12c>
 800a2f0:	06d1      	lsls	r1, r2, #27
 800a2f2:	bf44      	itt	mi
 800a2f4:	2320      	movmi	r3, #32
 800a2f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2fa:	0713      	lsls	r3, r2, #28
 800a2fc:	bf44      	itt	mi
 800a2fe:	232b      	movmi	r3, #43	; 0x2b
 800a300:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a304:	f89a 3000 	ldrb.w	r3, [sl]
 800a308:	2b2a      	cmp	r3, #42	; 0x2a
 800a30a:	d015      	beq.n	800a338 <_vfiprintf_r+0x13c>
 800a30c:	9a07      	ldr	r2, [sp, #28]
 800a30e:	4654      	mov	r4, sl
 800a310:	2000      	movs	r0, #0
 800a312:	f04f 0c0a 	mov.w	ip, #10
 800a316:	4621      	mov	r1, r4
 800a318:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a31c:	3b30      	subs	r3, #48	; 0x30
 800a31e:	2b09      	cmp	r3, #9
 800a320:	d94e      	bls.n	800a3c0 <_vfiprintf_r+0x1c4>
 800a322:	b1b0      	cbz	r0, 800a352 <_vfiprintf_r+0x156>
 800a324:	9207      	str	r2, [sp, #28]
 800a326:	e014      	b.n	800a352 <_vfiprintf_r+0x156>
 800a328:	eba0 0308 	sub.w	r3, r0, r8
 800a32c:	fa09 f303 	lsl.w	r3, r9, r3
 800a330:	4313      	orrs	r3, r2
 800a332:	9304      	str	r3, [sp, #16]
 800a334:	46a2      	mov	sl, r4
 800a336:	e7d2      	b.n	800a2de <_vfiprintf_r+0xe2>
 800a338:	9b03      	ldr	r3, [sp, #12]
 800a33a:	1d19      	adds	r1, r3, #4
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	9103      	str	r1, [sp, #12]
 800a340:	2b00      	cmp	r3, #0
 800a342:	bfbb      	ittet	lt
 800a344:	425b      	neglt	r3, r3
 800a346:	f042 0202 	orrlt.w	r2, r2, #2
 800a34a:	9307      	strge	r3, [sp, #28]
 800a34c:	9307      	strlt	r3, [sp, #28]
 800a34e:	bfb8      	it	lt
 800a350:	9204      	strlt	r2, [sp, #16]
 800a352:	7823      	ldrb	r3, [r4, #0]
 800a354:	2b2e      	cmp	r3, #46	; 0x2e
 800a356:	d10c      	bne.n	800a372 <_vfiprintf_r+0x176>
 800a358:	7863      	ldrb	r3, [r4, #1]
 800a35a:	2b2a      	cmp	r3, #42	; 0x2a
 800a35c:	d135      	bne.n	800a3ca <_vfiprintf_r+0x1ce>
 800a35e:	9b03      	ldr	r3, [sp, #12]
 800a360:	1d1a      	adds	r2, r3, #4
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	9203      	str	r2, [sp, #12]
 800a366:	2b00      	cmp	r3, #0
 800a368:	bfb8      	it	lt
 800a36a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a36e:	3402      	adds	r4, #2
 800a370:	9305      	str	r3, [sp, #20]
 800a372:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a458 <_vfiprintf_r+0x25c>
 800a376:	7821      	ldrb	r1, [r4, #0]
 800a378:	2203      	movs	r2, #3
 800a37a:	4650      	mov	r0, sl
 800a37c:	f7f5 ff08 	bl	8000190 <memchr>
 800a380:	b140      	cbz	r0, 800a394 <_vfiprintf_r+0x198>
 800a382:	2340      	movs	r3, #64	; 0x40
 800a384:	eba0 000a 	sub.w	r0, r0, sl
 800a388:	fa03 f000 	lsl.w	r0, r3, r0
 800a38c:	9b04      	ldr	r3, [sp, #16]
 800a38e:	4303      	orrs	r3, r0
 800a390:	3401      	adds	r4, #1
 800a392:	9304      	str	r3, [sp, #16]
 800a394:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a398:	482c      	ldr	r0, [pc, #176]	; (800a44c <_vfiprintf_r+0x250>)
 800a39a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a39e:	2206      	movs	r2, #6
 800a3a0:	f7f5 fef6 	bl	8000190 <memchr>
 800a3a4:	2800      	cmp	r0, #0
 800a3a6:	d03f      	beq.n	800a428 <_vfiprintf_r+0x22c>
 800a3a8:	4b29      	ldr	r3, [pc, #164]	; (800a450 <_vfiprintf_r+0x254>)
 800a3aa:	bb1b      	cbnz	r3, 800a3f4 <_vfiprintf_r+0x1f8>
 800a3ac:	9b03      	ldr	r3, [sp, #12]
 800a3ae:	3307      	adds	r3, #7
 800a3b0:	f023 0307 	bic.w	r3, r3, #7
 800a3b4:	3308      	adds	r3, #8
 800a3b6:	9303      	str	r3, [sp, #12]
 800a3b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3ba:	443b      	add	r3, r7
 800a3bc:	9309      	str	r3, [sp, #36]	; 0x24
 800a3be:	e767      	b.n	800a290 <_vfiprintf_r+0x94>
 800a3c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3c4:	460c      	mov	r4, r1
 800a3c6:	2001      	movs	r0, #1
 800a3c8:	e7a5      	b.n	800a316 <_vfiprintf_r+0x11a>
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	3401      	adds	r4, #1
 800a3ce:	9305      	str	r3, [sp, #20]
 800a3d0:	4619      	mov	r1, r3
 800a3d2:	f04f 0c0a 	mov.w	ip, #10
 800a3d6:	4620      	mov	r0, r4
 800a3d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3dc:	3a30      	subs	r2, #48	; 0x30
 800a3de:	2a09      	cmp	r2, #9
 800a3e0:	d903      	bls.n	800a3ea <_vfiprintf_r+0x1ee>
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d0c5      	beq.n	800a372 <_vfiprintf_r+0x176>
 800a3e6:	9105      	str	r1, [sp, #20]
 800a3e8:	e7c3      	b.n	800a372 <_vfiprintf_r+0x176>
 800a3ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3ee:	4604      	mov	r4, r0
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	e7f0      	b.n	800a3d6 <_vfiprintf_r+0x1da>
 800a3f4:	ab03      	add	r3, sp, #12
 800a3f6:	9300      	str	r3, [sp, #0]
 800a3f8:	462a      	mov	r2, r5
 800a3fa:	4b16      	ldr	r3, [pc, #88]	; (800a454 <_vfiprintf_r+0x258>)
 800a3fc:	a904      	add	r1, sp, #16
 800a3fe:	4630      	mov	r0, r6
 800a400:	f7fd fed4 	bl	80081ac <_printf_float>
 800a404:	4607      	mov	r7, r0
 800a406:	1c78      	adds	r0, r7, #1
 800a408:	d1d6      	bne.n	800a3b8 <_vfiprintf_r+0x1bc>
 800a40a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a40c:	07d9      	lsls	r1, r3, #31
 800a40e:	d405      	bmi.n	800a41c <_vfiprintf_r+0x220>
 800a410:	89ab      	ldrh	r3, [r5, #12]
 800a412:	059a      	lsls	r2, r3, #22
 800a414:	d402      	bmi.n	800a41c <_vfiprintf_r+0x220>
 800a416:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a418:	f7ff fe74 	bl	800a104 <__retarget_lock_release_recursive>
 800a41c:	89ab      	ldrh	r3, [r5, #12]
 800a41e:	065b      	lsls	r3, r3, #25
 800a420:	f53f af12 	bmi.w	800a248 <_vfiprintf_r+0x4c>
 800a424:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a426:	e711      	b.n	800a24c <_vfiprintf_r+0x50>
 800a428:	ab03      	add	r3, sp, #12
 800a42a:	9300      	str	r3, [sp, #0]
 800a42c:	462a      	mov	r2, r5
 800a42e:	4b09      	ldr	r3, [pc, #36]	; (800a454 <_vfiprintf_r+0x258>)
 800a430:	a904      	add	r1, sp, #16
 800a432:	4630      	mov	r0, r6
 800a434:	f7fe f95e 	bl	80086f4 <_printf_i>
 800a438:	e7e4      	b.n	800a404 <_vfiprintf_r+0x208>
 800a43a:	bf00      	nop
 800a43c:	0800b844 	.word	0x0800b844
 800a440:	0800b864 	.word	0x0800b864
 800a444:	0800b824 	.word	0x0800b824
 800a448:	0800b6cc 	.word	0x0800b6cc
 800a44c:	0800b6d6 	.word	0x0800b6d6
 800a450:	080081ad 	.word	0x080081ad
 800a454:	0800a1d9 	.word	0x0800a1d9
 800a458:	0800b6d2 	.word	0x0800b6d2

0800a45c <__swbuf_r>:
 800a45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a45e:	460e      	mov	r6, r1
 800a460:	4614      	mov	r4, r2
 800a462:	4605      	mov	r5, r0
 800a464:	b118      	cbz	r0, 800a46e <__swbuf_r+0x12>
 800a466:	6983      	ldr	r3, [r0, #24]
 800a468:	b90b      	cbnz	r3, 800a46e <__swbuf_r+0x12>
 800a46a:	f000 f9e7 	bl	800a83c <__sinit>
 800a46e:	4b21      	ldr	r3, [pc, #132]	; (800a4f4 <__swbuf_r+0x98>)
 800a470:	429c      	cmp	r4, r3
 800a472:	d12b      	bne.n	800a4cc <__swbuf_r+0x70>
 800a474:	686c      	ldr	r4, [r5, #4]
 800a476:	69a3      	ldr	r3, [r4, #24]
 800a478:	60a3      	str	r3, [r4, #8]
 800a47a:	89a3      	ldrh	r3, [r4, #12]
 800a47c:	071a      	lsls	r2, r3, #28
 800a47e:	d52f      	bpl.n	800a4e0 <__swbuf_r+0x84>
 800a480:	6923      	ldr	r3, [r4, #16]
 800a482:	b36b      	cbz	r3, 800a4e0 <__swbuf_r+0x84>
 800a484:	6923      	ldr	r3, [r4, #16]
 800a486:	6820      	ldr	r0, [r4, #0]
 800a488:	1ac0      	subs	r0, r0, r3
 800a48a:	6963      	ldr	r3, [r4, #20]
 800a48c:	b2f6      	uxtb	r6, r6
 800a48e:	4283      	cmp	r3, r0
 800a490:	4637      	mov	r7, r6
 800a492:	dc04      	bgt.n	800a49e <__swbuf_r+0x42>
 800a494:	4621      	mov	r1, r4
 800a496:	4628      	mov	r0, r5
 800a498:	f000 f93c 	bl	800a714 <_fflush_r>
 800a49c:	bb30      	cbnz	r0, 800a4ec <__swbuf_r+0x90>
 800a49e:	68a3      	ldr	r3, [r4, #8]
 800a4a0:	3b01      	subs	r3, #1
 800a4a2:	60a3      	str	r3, [r4, #8]
 800a4a4:	6823      	ldr	r3, [r4, #0]
 800a4a6:	1c5a      	adds	r2, r3, #1
 800a4a8:	6022      	str	r2, [r4, #0]
 800a4aa:	701e      	strb	r6, [r3, #0]
 800a4ac:	6963      	ldr	r3, [r4, #20]
 800a4ae:	3001      	adds	r0, #1
 800a4b0:	4283      	cmp	r3, r0
 800a4b2:	d004      	beq.n	800a4be <__swbuf_r+0x62>
 800a4b4:	89a3      	ldrh	r3, [r4, #12]
 800a4b6:	07db      	lsls	r3, r3, #31
 800a4b8:	d506      	bpl.n	800a4c8 <__swbuf_r+0x6c>
 800a4ba:	2e0a      	cmp	r6, #10
 800a4bc:	d104      	bne.n	800a4c8 <__swbuf_r+0x6c>
 800a4be:	4621      	mov	r1, r4
 800a4c0:	4628      	mov	r0, r5
 800a4c2:	f000 f927 	bl	800a714 <_fflush_r>
 800a4c6:	b988      	cbnz	r0, 800a4ec <__swbuf_r+0x90>
 800a4c8:	4638      	mov	r0, r7
 800a4ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4cc:	4b0a      	ldr	r3, [pc, #40]	; (800a4f8 <__swbuf_r+0x9c>)
 800a4ce:	429c      	cmp	r4, r3
 800a4d0:	d101      	bne.n	800a4d6 <__swbuf_r+0x7a>
 800a4d2:	68ac      	ldr	r4, [r5, #8]
 800a4d4:	e7cf      	b.n	800a476 <__swbuf_r+0x1a>
 800a4d6:	4b09      	ldr	r3, [pc, #36]	; (800a4fc <__swbuf_r+0xa0>)
 800a4d8:	429c      	cmp	r4, r3
 800a4da:	bf08      	it	eq
 800a4dc:	68ec      	ldreq	r4, [r5, #12]
 800a4de:	e7ca      	b.n	800a476 <__swbuf_r+0x1a>
 800a4e0:	4621      	mov	r1, r4
 800a4e2:	4628      	mov	r0, r5
 800a4e4:	f000 f81a 	bl	800a51c <__swsetup_r>
 800a4e8:	2800      	cmp	r0, #0
 800a4ea:	d0cb      	beq.n	800a484 <__swbuf_r+0x28>
 800a4ec:	f04f 37ff 	mov.w	r7, #4294967295
 800a4f0:	e7ea      	b.n	800a4c8 <__swbuf_r+0x6c>
 800a4f2:	bf00      	nop
 800a4f4:	0800b844 	.word	0x0800b844
 800a4f8:	0800b864 	.word	0x0800b864
 800a4fc:	0800b824 	.word	0x0800b824

0800a500 <__ascii_wctomb>:
 800a500:	b149      	cbz	r1, 800a516 <__ascii_wctomb+0x16>
 800a502:	2aff      	cmp	r2, #255	; 0xff
 800a504:	bf85      	ittet	hi
 800a506:	238a      	movhi	r3, #138	; 0x8a
 800a508:	6003      	strhi	r3, [r0, #0]
 800a50a:	700a      	strbls	r2, [r1, #0]
 800a50c:	f04f 30ff 	movhi.w	r0, #4294967295
 800a510:	bf98      	it	ls
 800a512:	2001      	movls	r0, #1
 800a514:	4770      	bx	lr
 800a516:	4608      	mov	r0, r1
 800a518:	4770      	bx	lr
	...

0800a51c <__swsetup_r>:
 800a51c:	4b32      	ldr	r3, [pc, #200]	; (800a5e8 <__swsetup_r+0xcc>)
 800a51e:	b570      	push	{r4, r5, r6, lr}
 800a520:	681d      	ldr	r5, [r3, #0]
 800a522:	4606      	mov	r6, r0
 800a524:	460c      	mov	r4, r1
 800a526:	b125      	cbz	r5, 800a532 <__swsetup_r+0x16>
 800a528:	69ab      	ldr	r3, [r5, #24]
 800a52a:	b913      	cbnz	r3, 800a532 <__swsetup_r+0x16>
 800a52c:	4628      	mov	r0, r5
 800a52e:	f000 f985 	bl	800a83c <__sinit>
 800a532:	4b2e      	ldr	r3, [pc, #184]	; (800a5ec <__swsetup_r+0xd0>)
 800a534:	429c      	cmp	r4, r3
 800a536:	d10f      	bne.n	800a558 <__swsetup_r+0x3c>
 800a538:	686c      	ldr	r4, [r5, #4]
 800a53a:	89a3      	ldrh	r3, [r4, #12]
 800a53c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a540:	0719      	lsls	r1, r3, #28
 800a542:	d42c      	bmi.n	800a59e <__swsetup_r+0x82>
 800a544:	06dd      	lsls	r5, r3, #27
 800a546:	d411      	bmi.n	800a56c <__swsetup_r+0x50>
 800a548:	2309      	movs	r3, #9
 800a54a:	6033      	str	r3, [r6, #0]
 800a54c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a550:	81a3      	strh	r3, [r4, #12]
 800a552:	f04f 30ff 	mov.w	r0, #4294967295
 800a556:	e03e      	b.n	800a5d6 <__swsetup_r+0xba>
 800a558:	4b25      	ldr	r3, [pc, #148]	; (800a5f0 <__swsetup_r+0xd4>)
 800a55a:	429c      	cmp	r4, r3
 800a55c:	d101      	bne.n	800a562 <__swsetup_r+0x46>
 800a55e:	68ac      	ldr	r4, [r5, #8]
 800a560:	e7eb      	b.n	800a53a <__swsetup_r+0x1e>
 800a562:	4b24      	ldr	r3, [pc, #144]	; (800a5f4 <__swsetup_r+0xd8>)
 800a564:	429c      	cmp	r4, r3
 800a566:	bf08      	it	eq
 800a568:	68ec      	ldreq	r4, [r5, #12]
 800a56a:	e7e6      	b.n	800a53a <__swsetup_r+0x1e>
 800a56c:	0758      	lsls	r0, r3, #29
 800a56e:	d512      	bpl.n	800a596 <__swsetup_r+0x7a>
 800a570:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a572:	b141      	cbz	r1, 800a586 <__swsetup_r+0x6a>
 800a574:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a578:	4299      	cmp	r1, r3
 800a57a:	d002      	beq.n	800a582 <__swsetup_r+0x66>
 800a57c:	4630      	mov	r0, r6
 800a57e:	f7fd fccb 	bl	8007f18 <_free_r>
 800a582:	2300      	movs	r3, #0
 800a584:	6363      	str	r3, [r4, #52]	; 0x34
 800a586:	89a3      	ldrh	r3, [r4, #12]
 800a588:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a58c:	81a3      	strh	r3, [r4, #12]
 800a58e:	2300      	movs	r3, #0
 800a590:	6063      	str	r3, [r4, #4]
 800a592:	6923      	ldr	r3, [r4, #16]
 800a594:	6023      	str	r3, [r4, #0]
 800a596:	89a3      	ldrh	r3, [r4, #12]
 800a598:	f043 0308 	orr.w	r3, r3, #8
 800a59c:	81a3      	strh	r3, [r4, #12]
 800a59e:	6923      	ldr	r3, [r4, #16]
 800a5a0:	b94b      	cbnz	r3, 800a5b6 <__swsetup_r+0x9a>
 800a5a2:	89a3      	ldrh	r3, [r4, #12]
 800a5a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a5a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5ac:	d003      	beq.n	800a5b6 <__swsetup_r+0x9a>
 800a5ae:	4621      	mov	r1, r4
 800a5b0:	4630      	mov	r0, r6
 800a5b2:	f000 fa05 	bl	800a9c0 <__smakebuf_r>
 800a5b6:	89a0      	ldrh	r0, [r4, #12]
 800a5b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a5bc:	f010 0301 	ands.w	r3, r0, #1
 800a5c0:	d00a      	beq.n	800a5d8 <__swsetup_r+0xbc>
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	60a3      	str	r3, [r4, #8]
 800a5c6:	6963      	ldr	r3, [r4, #20]
 800a5c8:	425b      	negs	r3, r3
 800a5ca:	61a3      	str	r3, [r4, #24]
 800a5cc:	6923      	ldr	r3, [r4, #16]
 800a5ce:	b943      	cbnz	r3, 800a5e2 <__swsetup_r+0xc6>
 800a5d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a5d4:	d1ba      	bne.n	800a54c <__swsetup_r+0x30>
 800a5d6:	bd70      	pop	{r4, r5, r6, pc}
 800a5d8:	0781      	lsls	r1, r0, #30
 800a5da:	bf58      	it	pl
 800a5dc:	6963      	ldrpl	r3, [r4, #20]
 800a5de:	60a3      	str	r3, [r4, #8]
 800a5e0:	e7f4      	b.n	800a5cc <__swsetup_r+0xb0>
 800a5e2:	2000      	movs	r0, #0
 800a5e4:	e7f7      	b.n	800a5d6 <__swsetup_r+0xba>
 800a5e6:	bf00      	nop
 800a5e8:	20000010 	.word	0x20000010
 800a5ec:	0800b844 	.word	0x0800b844
 800a5f0:	0800b864 	.word	0x0800b864
 800a5f4:	0800b824 	.word	0x0800b824

0800a5f8 <abort>:
 800a5f8:	b508      	push	{r3, lr}
 800a5fa:	2006      	movs	r0, #6
 800a5fc:	f000 fa50 	bl	800aaa0 <raise>
 800a600:	2001      	movs	r0, #1
 800a602:	f7f7 ffa5 	bl	8002550 <_exit>
	...

0800a608 <__sflush_r>:
 800a608:	898a      	ldrh	r2, [r1, #12]
 800a60a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a60e:	4605      	mov	r5, r0
 800a610:	0710      	lsls	r0, r2, #28
 800a612:	460c      	mov	r4, r1
 800a614:	d458      	bmi.n	800a6c8 <__sflush_r+0xc0>
 800a616:	684b      	ldr	r3, [r1, #4]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	dc05      	bgt.n	800a628 <__sflush_r+0x20>
 800a61c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a61e:	2b00      	cmp	r3, #0
 800a620:	dc02      	bgt.n	800a628 <__sflush_r+0x20>
 800a622:	2000      	movs	r0, #0
 800a624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a628:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a62a:	2e00      	cmp	r6, #0
 800a62c:	d0f9      	beq.n	800a622 <__sflush_r+0x1a>
 800a62e:	2300      	movs	r3, #0
 800a630:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a634:	682f      	ldr	r7, [r5, #0]
 800a636:	602b      	str	r3, [r5, #0]
 800a638:	d032      	beq.n	800a6a0 <__sflush_r+0x98>
 800a63a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a63c:	89a3      	ldrh	r3, [r4, #12]
 800a63e:	075a      	lsls	r2, r3, #29
 800a640:	d505      	bpl.n	800a64e <__sflush_r+0x46>
 800a642:	6863      	ldr	r3, [r4, #4]
 800a644:	1ac0      	subs	r0, r0, r3
 800a646:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a648:	b10b      	cbz	r3, 800a64e <__sflush_r+0x46>
 800a64a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a64c:	1ac0      	subs	r0, r0, r3
 800a64e:	2300      	movs	r3, #0
 800a650:	4602      	mov	r2, r0
 800a652:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a654:	6a21      	ldr	r1, [r4, #32]
 800a656:	4628      	mov	r0, r5
 800a658:	47b0      	blx	r6
 800a65a:	1c43      	adds	r3, r0, #1
 800a65c:	89a3      	ldrh	r3, [r4, #12]
 800a65e:	d106      	bne.n	800a66e <__sflush_r+0x66>
 800a660:	6829      	ldr	r1, [r5, #0]
 800a662:	291d      	cmp	r1, #29
 800a664:	d82c      	bhi.n	800a6c0 <__sflush_r+0xb8>
 800a666:	4a2a      	ldr	r2, [pc, #168]	; (800a710 <__sflush_r+0x108>)
 800a668:	40ca      	lsrs	r2, r1
 800a66a:	07d6      	lsls	r6, r2, #31
 800a66c:	d528      	bpl.n	800a6c0 <__sflush_r+0xb8>
 800a66e:	2200      	movs	r2, #0
 800a670:	6062      	str	r2, [r4, #4]
 800a672:	04d9      	lsls	r1, r3, #19
 800a674:	6922      	ldr	r2, [r4, #16]
 800a676:	6022      	str	r2, [r4, #0]
 800a678:	d504      	bpl.n	800a684 <__sflush_r+0x7c>
 800a67a:	1c42      	adds	r2, r0, #1
 800a67c:	d101      	bne.n	800a682 <__sflush_r+0x7a>
 800a67e:	682b      	ldr	r3, [r5, #0]
 800a680:	b903      	cbnz	r3, 800a684 <__sflush_r+0x7c>
 800a682:	6560      	str	r0, [r4, #84]	; 0x54
 800a684:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a686:	602f      	str	r7, [r5, #0]
 800a688:	2900      	cmp	r1, #0
 800a68a:	d0ca      	beq.n	800a622 <__sflush_r+0x1a>
 800a68c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a690:	4299      	cmp	r1, r3
 800a692:	d002      	beq.n	800a69a <__sflush_r+0x92>
 800a694:	4628      	mov	r0, r5
 800a696:	f7fd fc3f 	bl	8007f18 <_free_r>
 800a69a:	2000      	movs	r0, #0
 800a69c:	6360      	str	r0, [r4, #52]	; 0x34
 800a69e:	e7c1      	b.n	800a624 <__sflush_r+0x1c>
 800a6a0:	6a21      	ldr	r1, [r4, #32]
 800a6a2:	2301      	movs	r3, #1
 800a6a4:	4628      	mov	r0, r5
 800a6a6:	47b0      	blx	r6
 800a6a8:	1c41      	adds	r1, r0, #1
 800a6aa:	d1c7      	bne.n	800a63c <__sflush_r+0x34>
 800a6ac:	682b      	ldr	r3, [r5, #0]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d0c4      	beq.n	800a63c <__sflush_r+0x34>
 800a6b2:	2b1d      	cmp	r3, #29
 800a6b4:	d001      	beq.n	800a6ba <__sflush_r+0xb2>
 800a6b6:	2b16      	cmp	r3, #22
 800a6b8:	d101      	bne.n	800a6be <__sflush_r+0xb6>
 800a6ba:	602f      	str	r7, [r5, #0]
 800a6bc:	e7b1      	b.n	800a622 <__sflush_r+0x1a>
 800a6be:	89a3      	ldrh	r3, [r4, #12]
 800a6c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6c4:	81a3      	strh	r3, [r4, #12]
 800a6c6:	e7ad      	b.n	800a624 <__sflush_r+0x1c>
 800a6c8:	690f      	ldr	r7, [r1, #16]
 800a6ca:	2f00      	cmp	r7, #0
 800a6cc:	d0a9      	beq.n	800a622 <__sflush_r+0x1a>
 800a6ce:	0793      	lsls	r3, r2, #30
 800a6d0:	680e      	ldr	r6, [r1, #0]
 800a6d2:	bf08      	it	eq
 800a6d4:	694b      	ldreq	r3, [r1, #20]
 800a6d6:	600f      	str	r7, [r1, #0]
 800a6d8:	bf18      	it	ne
 800a6da:	2300      	movne	r3, #0
 800a6dc:	eba6 0807 	sub.w	r8, r6, r7
 800a6e0:	608b      	str	r3, [r1, #8]
 800a6e2:	f1b8 0f00 	cmp.w	r8, #0
 800a6e6:	dd9c      	ble.n	800a622 <__sflush_r+0x1a>
 800a6e8:	6a21      	ldr	r1, [r4, #32]
 800a6ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a6ec:	4643      	mov	r3, r8
 800a6ee:	463a      	mov	r2, r7
 800a6f0:	4628      	mov	r0, r5
 800a6f2:	47b0      	blx	r6
 800a6f4:	2800      	cmp	r0, #0
 800a6f6:	dc06      	bgt.n	800a706 <__sflush_r+0xfe>
 800a6f8:	89a3      	ldrh	r3, [r4, #12]
 800a6fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6fe:	81a3      	strh	r3, [r4, #12]
 800a700:	f04f 30ff 	mov.w	r0, #4294967295
 800a704:	e78e      	b.n	800a624 <__sflush_r+0x1c>
 800a706:	4407      	add	r7, r0
 800a708:	eba8 0800 	sub.w	r8, r8, r0
 800a70c:	e7e9      	b.n	800a6e2 <__sflush_r+0xda>
 800a70e:	bf00      	nop
 800a710:	20400001 	.word	0x20400001

0800a714 <_fflush_r>:
 800a714:	b538      	push	{r3, r4, r5, lr}
 800a716:	690b      	ldr	r3, [r1, #16]
 800a718:	4605      	mov	r5, r0
 800a71a:	460c      	mov	r4, r1
 800a71c:	b913      	cbnz	r3, 800a724 <_fflush_r+0x10>
 800a71e:	2500      	movs	r5, #0
 800a720:	4628      	mov	r0, r5
 800a722:	bd38      	pop	{r3, r4, r5, pc}
 800a724:	b118      	cbz	r0, 800a72e <_fflush_r+0x1a>
 800a726:	6983      	ldr	r3, [r0, #24]
 800a728:	b90b      	cbnz	r3, 800a72e <_fflush_r+0x1a>
 800a72a:	f000 f887 	bl	800a83c <__sinit>
 800a72e:	4b14      	ldr	r3, [pc, #80]	; (800a780 <_fflush_r+0x6c>)
 800a730:	429c      	cmp	r4, r3
 800a732:	d11b      	bne.n	800a76c <_fflush_r+0x58>
 800a734:	686c      	ldr	r4, [r5, #4]
 800a736:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d0ef      	beq.n	800a71e <_fflush_r+0xa>
 800a73e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a740:	07d0      	lsls	r0, r2, #31
 800a742:	d404      	bmi.n	800a74e <_fflush_r+0x3a>
 800a744:	0599      	lsls	r1, r3, #22
 800a746:	d402      	bmi.n	800a74e <_fflush_r+0x3a>
 800a748:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a74a:	f7ff fcda 	bl	800a102 <__retarget_lock_acquire_recursive>
 800a74e:	4628      	mov	r0, r5
 800a750:	4621      	mov	r1, r4
 800a752:	f7ff ff59 	bl	800a608 <__sflush_r>
 800a756:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a758:	07da      	lsls	r2, r3, #31
 800a75a:	4605      	mov	r5, r0
 800a75c:	d4e0      	bmi.n	800a720 <_fflush_r+0xc>
 800a75e:	89a3      	ldrh	r3, [r4, #12]
 800a760:	059b      	lsls	r3, r3, #22
 800a762:	d4dd      	bmi.n	800a720 <_fflush_r+0xc>
 800a764:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a766:	f7ff fccd 	bl	800a104 <__retarget_lock_release_recursive>
 800a76a:	e7d9      	b.n	800a720 <_fflush_r+0xc>
 800a76c:	4b05      	ldr	r3, [pc, #20]	; (800a784 <_fflush_r+0x70>)
 800a76e:	429c      	cmp	r4, r3
 800a770:	d101      	bne.n	800a776 <_fflush_r+0x62>
 800a772:	68ac      	ldr	r4, [r5, #8]
 800a774:	e7df      	b.n	800a736 <_fflush_r+0x22>
 800a776:	4b04      	ldr	r3, [pc, #16]	; (800a788 <_fflush_r+0x74>)
 800a778:	429c      	cmp	r4, r3
 800a77a:	bf08      	it	eq
 800a77c:	68ec      	ldreq	r4, [r5, #12]
 800a77e:	e7da      	b.n	800a736 <_fflush_r+0x22>
 800a780:	0800b844 	.word	0x0800b844
 800a784:	0800b864 	.word	0x0800b864
 800a788:	0800b824 	.word	0x0800b824

0800a78c <std>:
 800a78c:	2300      	movs	r3, #0
 800a78e:	b510      	push	{r4, lr}
 800a790:	4604      	mov	r4, r0
 800a792:	e9c0 3300 	strd	r3, r3, [r0]
 800a796:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a79a:	6083      	str	r3, [r0, #8]
 800a79c:	8181      	strh	r1, [r0, #12]
 800a79e:	6643      	str	r3, [r0, #100]	; 0x64
 800a7a0:	81c2      	strh	r2, [r0, #14]
 800a7a2:	6183      	str	r3, [r0, #24]
 800a7a4:	4619      	mov	r1, r3
 800a7a6:	2208      	movs	r2, #8
 800a7a8:	305c      	adds	r0, #92	; 0x5c
 800a7aa:	f7fd fbad 	bl	8007f08 <memset>
 800a7ae:	4b05      	ldr	r3, [pc, #20]	; (800a7c4 <std+0x38>)
 800a7b0:	6263      	str	r3, [r4, #36]	; 0x24
 800a7b2:	4b05      	ldr	r3, [pc, #20]	; (800a7c8 <std+0x3c>)
 800a7b4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a7b6:	4b05      	ldr	r3, [pc, #20]	; (800a7cc <std+0x40>)
 800a7b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a7ba:	4b05      	ldr	r3, [pc, #20]	; (800a7d0 <std+0x44>)
 800a7bc:	6224      	str	r4, [r4, #32]
 800a7be:	6323      	str	r3, [r4, #48]	; 0x30
 800a7c0:	bd10      	pop	{r4, pc}
 800a7c2:	bf00      	nop
 800a7c4:	0800aad9 	.word	0x0800aad9
 800a7c8:	0800aafb 	.word	0x0800aafb
 800a7cc:	0800ab33 	.word	0x0800ab33
 800a7d0:	0800ab57 	.word	0x0800ab57

0800a7d4 <_cleanup_r>:
 800a7d4:	4901      	ldr	r1, [pc, #4]	; (800a7dc <_cleanup_r+0x8>)
 800a7d6:	f000 b8af 	b.w	800a938 <_fwalk_reent>
 800a7da:	bf00      	nop
 800a7dc:	0800a715 	.word	0x0800a715

0800a7e0 <__sfmoreglue>:
 800a7e0:	b570      	push	{r4, r5, r6, lr}
 800a7e2:	1e4a      	subs	r2, r1, #1
 800a7e4:	2568      	movs	r5, #104	; 0x68
 800a7e6:	4355      	muls	r5, r2
 800a7e8:	460e      	mov	r6, r1
 800a7ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a7ee:	f7fd fbe3 	bl	8007fb8 <_malloc_r>
 800a7f2:	4604      	mov	r4, r0
 800a7f4:	b140      	cbz	r0, 800a808 <__sfmoreglue+0x28>
 800a7f6:	2100      	movs	r1, #0
 800a7f8:	e9c0 1600 	strd	r1, r6, [r0]
 800a7fc:	300c      	adds	r0, #12
 800a7fe:	60a0      	str	r0, [r4, #8]
 800a800:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a804:	f7fd fb80 	bl	8007f08 <memset>
 800a808:	4620      	mov	r0, r4
 800a80a:	bd70      	pop	{r4, r5, r6, pc}

0800a80c <__sfp_lock_acquire>:
 800a80c:	4801      	ldr	r0, [pc, #4]	; (800a814 <__sfp_lock_acquire+0x8>)
 800a80e:	f7ff bc78 	b.w	800a102 <__retarget_lock_acquire_recursive>
 800a812:	bf00      	nop
 800a814:	20000cac 	.word	0x20000cac

0800a818 <__sfp_lock_release>:
 800a818:	4801      	ldr	r0, [pc, #4]	; (800a820 <__sfp_lock_release+0x8>)
 800a81a:	f7ff bc73 	b.w	800a104 <__retarget_lock_release_recursive>
 800a81e:	bf00      	nop
 800a820:	20000cac 	.word	0x20000cac

0800a824 <__sinit_lock_acquire>:
 800a824:	4801      	ldr	r0, [pc, #4]	; (800a82c <__sinit_lock_acquire+0x8>)
 800a826:	f7ff bc6c 	b.w	800a102 <__retarget_lock_acquire_recursive>
 800a82a:	bf00      	nop
 800a82c:	20000ca7 	.word	0x20000ca7

0800a830 <__sinit_lock_release>:
 800a830:	4801      	ldr	r0, [pc, #4]	; (800a838 <__sinit_lock_release+0x8>)
 800a832:	f7ff bc67 	b.w	800a104 <__retarget_lock_release_recursive>
 800a836:	bf00      	nop
 800a838:	20000ca7 	.word	0x20000ca7

0800a83c <__sinit>:
 800a83c:	b510      	push	{r4, lr}
 800a83e:	4604      	mov	r4, r0
 800a840:	f7ff fff0 	bl	800a824 <__sinit_lock_acquire>
 800a844:	69a3      	ldr	r3, [r4, #24]
 800a846:	b11b      	cbz	r3, 800a850 <__sinit+0x14>
 800a848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a84c:	f7ff bff0 	b.w	800a830 <__sinit_lock_release>
 800a850:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a854:	6523      	str	r3, [r4, #80]	; 0x50
 800a856:	4b13      	ldr	r3, [pc, #76]	; (800a8a4 <__sinit+0x68>)
 800a858:	4a13      	ldr	r2, [pc, #76]	; (800a8a8 <__sinit+0x6c>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a85e:	42a3      	cmp	r3, r4
 800a860:	bf04      	itt	eq
 800a862:	2301      	moveq	r3, #1
 800a864:	61a3      	streq	r3, [r4, #24]
 800a866:	4620      	mov	r0, r4
 800a868:	f000 f820 	bl	800a8ac <__sfp>
 800a86c:	6060      	str	r0, [r4, #4]
 800a86e:	4620      	mov	r0, r4
 800a870:	f000 f81c 	bl	800a8ac <__sfp>
 800a874:	60a0      	str	r0, [r4, #8]
 800a876:	4620      	mov	r0, r4
 800a878:	f000 f818 	bl	800a8ac <__sfp>
 800a87c:	2200      	movs	r2, #0
 800a87e:	60e0      	str	r0, [r4, #12]
 800a880:	2104      	movs	r1, #4
 800a882:	6860      	ldr	r0, [r4, #4]
 800a884:	f7ff ff82 	bl	800a78c <std>
 800a888:	68a0      	ldr	r0, [r4, #8]
 800a88a:	2201      	movs	r2, #1
 800a88c:	2109      	movs	r1, #9
 800a88e:	f7ff ff7d 	bl	800a78c <std>
 800a892:	68e0      	ldr	r0, [r4, #12]
 800a894:	2202      	movs	r2, #2
 800a896:	2112      	movs	r1, #18
 800a898:	f7ff ff78 	bl	800a78c <std>
 800a89c:	2301      	movs	r3, #1
 800a89e:	61a3      	str	r3, [r4, #24]
 800a8a0:	e7d2      	b.n	800a848 <__sinit+0xc>
 800a8a2:	bf00      	nop
 800a8a4:	0800b4a4 	.word	0x0800b4a4
 800a8a8:	0800a7d5 	.word	0x0800a7d5

0800a8ac <__sfp>:
 800a8ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ae:	4607      	mov	r7, r0
 800a8b0:	f7ff ffac 	bl	800a80c <__sfp_lock_acquire>
 800a8b4:	4b1e      	ldr	r3, [pc, #120]	; (800a930 <__sfp+0x84>)
 800a8b6:	681e      	ldr	r6, [r3, #0]
 800a8b8:	69b3      	ldr	r3, [r6, #24]
 800a8ba:	b913      	cbnz	r3, 800a8c2 <__sfp+0x16>
 800a8bc:	4630      	mov	r0, r6
 800a8be:	f7ff ffbd 	bl	800a83c <__sinit>
 800a8c2:	3648      	adds	r6, #72	; 0x48
 800a8c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a8c8:	3b01      	subs	r3, #1
 800a8ca:	d503      	bpl.n	800a8d4 <__sfp+0x28>
 800a8cc:	6833      	ldr	r3, [r6, #0]
 800a8ce:	b30b      	cbz	r3, 800a914 <__sfp+0x68>
 800a8d0:	6836      	ldr	r6, [r6, #0]
 800a8d2:	e7f7      	b.n	800a8c4 <__sfp+0x18>
 800a8d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a8d8:	b9d5      	cbnz	r5, 800a910 <__sfp+0x64>
 800a8da:	4b16      	ldr	r3, [pc, #88]	; (800a934 <__sfp+0x88>)
 800a8dc:	60e3      	str	r3, [r4, #12]
 800a8de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a8e2:	6665      	str	r5, [r4, #100]	; 0x64
 800a8e4:	f7ff fc0c 	bl	800a100 <__retarget_lock_init_recursive>
 800a8e8:	f7ff ff96 	bl	800a818 <__sfp_lock_release>
 800a8ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a8f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a8f4:	6025      	str	r5, [r4, #0]
 800a8f6:	61a5      	str	r5, [r4, #24]
 800a8f8:	2208      	movs	r2, #8
 800a8fa:	4629      	mov	r1, r5
 800a8fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a900:	f7fd fb02 	bl	8007f08 <memset>
 800a904:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a908:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a90c:	4620      	mov	r0, r4
 800a90e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a910:	3468      	adds	r4, #104	; 0x68
 800a912:	e7d9      	b.n	800a8c8 <__sfp+0x1c>
 800a914:	2104      	movs	r1, #4
 800a916:	4638      	mov	r0, r7
 800a918:	f7ff ff62 	bl	800a7e0 <__sfmoreglue>
 800a91c:	4604      	mov	r4, r0
 800a91e:	6030      	str	r0, [r6, #0]
 800a920:	2800      	cmp	r0, #0
 800a922:	d1d5      	bne.n	800a8d0 <__sfp+0x24>
 800a924:	f7ff ff78 	bl	800a818 <__sfp_lock_release>
 800a928:	230c      	movs	r3, #12
 800a92a:	603b      	str	r3, [r7, #0]
 800a92c:	e7ee      	b.n	800a90c <__sfp+0x60>
 800a92e:	bf00      	nop
 800a930:	0800b4a4 	.word	0x0800b4a4
 800a934:	ffff0001 	.word	0xffff0001

0800a938 <_fwalk_reent>:
 800a938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a93c:	4606      	mov	r6, r0
 800a93e:	4688      	mov	r8, r1
 800a940:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a944:	2700      	movs	r7, #0
 800a946:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a94a:	f1b9 0901 	subs.w	r9, r9, #1
 800a94e:	d505      	bpl.n	800a95c <_fwalk_reent+0x24>
 800a950:	6824      	ldr	r4, [r4, #0]
 800a952:	2c00      	cmp	r4, #0
 800a954:	d1f7      	bne.n	800a946 <_fwalk_reent+0xe>
 800a956:	4638      	mov	r0, r7
 800a958:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a95c:	89ab      	ldrh	r3, [r5, #12]
 800a95e:	2b01      	cmp	r3, #1
 800a960:	d907      	bls.n	800a972 <_fwalk_reent+0x3a>
 800a962:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a966:	3301      	adds	r3, #1
 800a968:	d003      	beq.n	800a972 <_fwalk_reent+0x3a>
 800a96a:	4629      	mov	r1, r5
 800a96c:	4630      	mov	r0, r6
 800a96e:	47c0      	blx	r8
 800a970:	4307      	orrs	r7, r0
 800a972:	3568      	adds	r5, #104	; 0x68
 800a974:	e7e9      	b.n	800a94a <_fwalk_reent+0x12>

0800a976 <__swhatbuf_r>:
 800a976:	b570      	push	{r4, r5, r6, lr}
 800a978:	460e      	mov	r6, r1
 800a97a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a97e:	2900      	cmp	r1, #0
 800a980:	b096      	sub	sp, #88	; 0x58
 800a982:	4614      	mov	r4, r2
 800a984:	461d      	mov	r5, r3
 800a986:	da07      	bge.n	800a998 <__swhatbuf_r+0x22>
 800a988:	2300      	movs	r3, #0
 800a98a:	602b      	str	r3, [r5, #0]
 800a98c:	89b3      	ldrh	r3, [r6, #12]
 800a98e:	061a      	lsls	r2, r3, #24
 800a990:	d410      	bmi.n	800a9b4 <__swhatbuf_r+0x3e>
 800a992:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a996:	e00e      	b.n	800a9b6 <__swhatbuf_r+0x40>
 800a998:	466a      	mov	r2, sp
 800a99a:	f000 f903 	bl	800aba4 <_fstat_r>
 800a99e:	2800      	cmp	r0, #0
 800a9a0:	dbf2      	blt.n	800a988 <__swhatbuf_r+0x12>
 800a9a2:	9a01      	ldr	r2, [sp, #4]
 800a9a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a9a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a9ac:	425a      	negs	r2, r3
 800a9ae:	415a      	adcs	r2, r3
 800a9b0:	602a      	str	r2, [r5, #0]
 800a9b2:	e7ee      	b.n	800a992 <__swhatbuf_r+0x1c>
 800a9b4:	2340      	movs	r3, #64	; 0x40
 800a9b6:	2000      	movs	r0, #0
 800a9b8:	6023      	str	r3, [r4, #0]
 800a9ba:	b016      	add	sp, #88	; 0x58
 800a9bc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a9c0 <__smakebuf_r>:
 800a9c0:	898b      	ldrh	r3, [r1, #12]
 800a9c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a9c4:	079d      	lsls	r5, r3, #30
 800a9c6:	4606      	mov	r6, r0
 800a9c8:	460c      	mov	r4, r1
 800a9ca:	d507      	bpl.n	800a9dc <__smakebuf_r+0x1c>
 800a9cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a9d0:	6023      	str	r3, [r4, #0]
 800a9d2:	6123      	str	r3, [r4, #16]
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	6163      	str	r3, [r4, #20]
 800a9d8:	b002      	add	sp, #8
 800a9da:	bd70      	pop	{r4, r5, r6, pc}
 800a9dc:	ab01      	add	r3, sp, #4
 800a9de:	466a      	mov	r2, sp
 800a9e0:	f7ff ffc9 	bl	800a976 <__swhatbuf_r>
 800a9e4:	9900      	ldr	r1, [sp, #0]
 800a9e6:	4605      	mov	r5, r0
 800a9e8:	4630      	mov	r0, r6
 800a9ea:	f7fd fae5 	bl	8007fb8 <_malloc_r>
 800a9ee:	b948      	cbnz	r0, 800aa04 <__smakebuf_r+0x44>
 800a9f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9f4:	059a      	lsls	r2, r3, #22
 800a9f6:	d4ef      	bmi.n	800a9d8 <__smakebuf_r+0x18>
 800a9f8:	f023 0303 	bic.w	r3, r3, #3
 800a9fc:	f043 0302 	orr.w	r3, r3, #2
 800aa00:	81a3      	strh	r3, [r4, #12]
 800aa02:	e7e3      	b.n	800a9cc <__smakebuf_r+0xc>
 800aa04:	4b0d      	ldr	r3, [pc, #52]	; (800aa3c <__smakebuf_r+0x7c>)
 800aa06:	62b3      	str	r3, [r6, #40]	; 0x28
 800aa08:	89a3      	ldrh	r3, [r4, #12]
 800aa0a:	6020      	str	r0, [r4, #0]
 800aa0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa10:	81a3      	strh	r3, [r4, #12]
 800aa12:	9b00      	ldr	r3, [sp, #0]
 800aa14:	6163      	str	r3, [r4, #20]
 800aa16:	9b01      	ldr	r3, [sp, #4]
 800aa18:	6120      	str	r0, [r4, #16]
 800aa1a:	b15b      	cbz	r3, 800aa34 <__smakebuf_r+0x74>
 800aa1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa20:	4630      	mov	r0, r6
 800aa22:	f000 f8d1 	bl	800abc8 <_isatty_r>
 800aa26:	b128      	cbz	r0, 800aa34 <__smakebuf_r+0x74>
 800aa28:	89a3      	ldrh	r3, [r4, #12]
 800aa2a:	f023 0303 	bic.w	r3, r3, #3
 800aa2e:	f043 0301 	orr.w	r3, r3, #1
 800aa32:	81a3      	strh	r3, [r4, #12]
 800aa34:	89a0      	ldrh	r0, [r4, #12]
 800aa36:	4305      	orrs	r5, r0
 800aa38:	81a5      	strh	r5, [r4, #12]
 800aa3a:	e7cd      	b.n	800a9d8 <__smakebuf_r+0x18>
 800aa3c:	0800a7d5 	.word	0x0800a7d5

0800aa40 <_malloc_usable_size_r>:
 800aa40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa44:	1f18      	subs	r0, r3, #4
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	bfbc      	itt	lt
 800aa4a:	580b      	ldrlt	r3, [r1, r0]
 800aa4c:	18c0      	addlt	r0, r0, r3
 800aa4e:	4770      	bx	lr

0800aa50 <_raise_r>:
 800aa50:	291f      	cmp	r1, #31
 800aa52:	b538      	push	{r3, r4, r5, lr}
 800aa54:	4604      	mov	r4, r0
 800aa56:	460d      	mov	r5, r1
 800aa58:	d904      	bls.n	800aa64 <_raise_r+0x14>
 800aa5a:	2316      	movs	r3, #22
 800aa5c:	6003      	str	r3, [r0, #0]
 800aa5e:	f04f 30ff 	mov.w	r0, #4294967295
 800aa62:	bd38      	pop	{r3, r4, r5, pc}
 800aa64:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800aa66:	b112      	cbz	r2, 800aa6e <_raise_r+0x1e>
 800aa68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aa6c:	b94b      	cbnz	r3, 800aa82 <_raise_r+0x32>
 800aa6e:	4620      	mov	r0, r4
 800aa70:	f000 f830 	bl	800aad4 <_getpid_r>
 800aa74:	462a      	mov	r2, r5
 800aa76:	4601      	mov	r1, r0
 800aa78:	4620      	mov	r0, r4
 800aa7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa7e:	f000 b817 	b.w	800aab0 <_kill_r>
 800aa82:	2b01      	cmp	r3, #1
 800aa84:	d00a      	beq.n	800aa9c <_raise_r+0x4c>
 800aa86:	1c59      	adds	r1, r3, #1
 800aa88:	d103      	bne.n	800aa92 <_raise_r+0x42>
 800aa8a:	2316      	movs	r3, #22
 800aa8c:	6003      	str	r3, [r0, #0]
 800aa8e:	2001      	movs	r0, #1
 800aa90:	e7e7      	b.n	800aa62 <_raise_r+0x12>
 800aa92:	2400      	movs	r4, #0
 800aa94:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aa98:	4628      	mov	r0, r5
 800aa9a:	4798      	blx	r3
 800aa9c:	2000      	movs	r0, #0
 800aa9e:	e7e0      	b.n	800aa62 <_raise_r+0x12>

0800aaa0 <raise>:
 800aaa0:	4b02      	ldr	r3, [pc, #8]	; (800aaac <raise+0xc>)
 800aaa2:	4601      	mov	r1, r0
 800aaa4:	6818      	ldr	r0, [r3, #0]
 800aaa6:	f7ff bfd3 	b.w	800aa50 <_raise_r>
 800aaaa:	bf00      	nop
 800aaac:	20000010 	.word	0x20000010

0800aab0 <_kill_r>:
 800aab0:	b538      	push	{r3, r4, r5, lr}
 800aab2:	4d07      	ldr	r5, [pc, #28]	; (800aad0 <_kill_r+0x20>)
 800aab4:	2300      	movs	r3, #0
 800aab6:	4604      	mov	r4, r0
 800aab8:	4608      	mov	r0, r1
 800aaba:	4611      	mov	r1, r2
 800aabc:	602b      	str	r3, [r5, #0]
 800aabe:	f7f7 fd37 	bl	8002530 <_kill>
 800aac2:	1c43      	adds	r3, r0, #1
 800aac4:	d102      	bne.n	800aacc <_kill_r+0x1c>
 800aac6:	682b      	ldr	r3, [r5, #0]
 800aac8:	b103      	cbz	r3, 800aacc <_kill_r+0x1c>
 800aaca:	6023      	str	r3, [r4, #0]
 800aacc:	bd38      	pop	{r3, r4, r5, pc}
 800aace:	bf00      	nop
 800aad0:	20000ca0 	.word	0x20000ca0

0800aad4 <_getpid_r>:
 800aad4:	f7f7 bd24 	b.w	8002520 <_getpid>

0800aad8 <__sread>:
 800aad8:	b510      	push	{r4, lr}
 800aada:	460c      	mov	r4, r1
 800aadc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aae0:	f000 f894 	bl	800ac0c <_read_r>
 800aae4:	2800      	cmp	r0, #0
 800aae6:	bfab      	itete	ge
 800aae8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aaea:	89a3      	ldrhlt	r3, [r4, #12]
 800aaec:	181b      	addge	r3, r3, r0
 800aaee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aaf2:	bfac      	ite	ge
 800aaf4:	6563      	strge	r3, [r4, #84]	; 0x54
 800aaf6:	81a3      	strhlt	r3, [r4, #12]
 800aaf8:	bd10      	pop	{r4, pc}

0800aafa <__swrite>:
 800aafa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aafe:	461f      	mov	r7, r3
 800ab00:	898b      	ldrh	r3, [r1, #12]
 800ab02:	05db      	lsls	r3, r3, #23
 800ab04:	4605      	mov	r5, r0
 800ab06:	460c      	mov	r4, r1
 800ab08:	4616      	mov	r6, r2
 800ab0a:	d505      	bpl.n	800ab18 <__swrite+0x1e>
 800ab0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab10:	2302      	movs	r3, #2
 800ab12:	2200      	movs	r2, #0
 800ab14:	f000 f868 	bl	800abe8 <_lseek_r>
 800ab18:	89a3      	ldrh	r3, [r4, #12]
 800ab1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab22:	81a3      	strh	r3, [r4, #12]
 800ab24:	4632      	mov	r2, r6
 800ab26:	463b      	mov	r3, r7
 800ab28:	4628      	mov	r0, r5
 800ab2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab2e:	f000 b817 	b.w	800ab60 <_write_r>

0800ab32 <__sseek>:
 800ab32:	b510      	push	{r4, lr}
 800ab34:	460c      	mov	r4, r1
 800ab36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab3a:	f000 f855 	bl	800abe8 <_lseek_r>
 800ab3e:	1c43      	adds	r3, r0, #1
 800ab40:	89a3      	ldrh	r3, [r4, #12]
 800ab42:	bf15      	itete	ne
 800ab44:	6560      	strne	r0, [r4, #84]	; 0x54
 800ab46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ab4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ab4e:	81a3      	strheq	r3, [r4, #12]
 800ab50:	bf18      	it	ne
 800ab52:	81a3      	strhne	r3, [r4, #12]
 800ab54:	bd10      	pop	{r4, pc}

0800ab56 <__sclose>:
 800ab56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab5a:	f000 b813 	b.w	800ab84 <_close_r>
	...

0800ab60 <_write_r>:
 800ab60:	b538      	push	{r3, r4, r5, lr}
 800ab62:	4d07      	ldr	r5, [pc, #28]	; (800ab80 <_write_r+0x20>)
 800ab64:	4604      	mov	r4, r0
 800ab66:	4608      	mov	r0, r1
 800ab68:	4611      	mov	r1, r2
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	602a      	str	r2, [r5, #0]
 800ab6e:	461a      	mov	r2, r3
 800ab70:	f7f7 fd15 	bl	800259e <_write>
 800ab74:	1c43      	adds	r3, r0, #1
 800ab76:	d102      	bne.n	800ab7e <_write_r+0x1e>
 800ab78:	682b      	ldr	r3, [r5, #0]
 800ab7a:	b103      	cbz	r3, 800ab7e <_write_r+0x1e>
 800ab7c:	6023      	str	r3, [r4, #0]
 800ab7e:	bd38      	pop	{r3, r4, r5, pc}
 800ab80:	20000ca0 	.word	0x20000ca0

0800ab84 <_close_r>:
 800ab84:	b538      	push	{r3, r4, r5, lr}
 800ab86:	4d06      	ldr	r5, [pc, #24]	; (800aba0 <_close_r+0x1c>)
 800ab88:	2300      	movs	r3, #0
 800ab8a:	4604      	mov	r4, r0
 800ab8c:	4608      	mov	r0, r1
 800ab8e:	602b      	str	r3, [r5, #0]
 800ab90:	f7f7 fd21 	bl	80025d6 <_close>
 800ab94:	1c43      	adds	r3, r0, #1
 800ab96:	d102      	bne.n	800ab9e <_close_r+0x1a>
 800ab98:	682b      	ldr	r3, [r5, #0]
 800ab9a:	b103      	cbz	r3, 800ab9e <_close_r+0x1a>
 800ab9c:	6023      	str	r3, [r4, #0]
 800ab9e:	bd38      	pop	{r3, r4, r5, pc}
 800aba0:	20000ca0 	.word	0x20000ca0

0800aba4 <_fstat_r>:
 800aba4:	b538      	push	{r3, r4, r5, lr}
 800aba6:	4d07      	ldr	r5, [pc, #28]	; (800abc4 <_fstat_r+0x20>)
 800aba8:	2300      	movs	r3, #0
 800abaa:	4604      	mov	r4, r0
 800abac:	4608      	mov	r0, r1
 800abae:	4611      	mov	r1, r2
 800abb0:	602b      	str	r3, [r5, #0]
 800abb2:	f7f7 fd1c 	bl	80025ee <_fstat>
 800abb6:	1c43      	adds	r3, r0, #1
 800abb8:	d102      	bne.n	800abc0 <_fstat_r+0x1c>
 800abba:	682b      	ldr	r3, [r5, #0]
 800abbc:	b103      	cbz	r3, 800abc0 <_fstat_r+0x1c>
 800abbe:	6023      	str	r3, [r4, #0]
 800abc0:	bd38      	pop	{r3, r4, r5, pc}
 800abc2:	bf00      	nop
 800abc4:	20000ca0 	.word	0x20000ca0

0800abc8 <_isatty_r>:
 800abc8:	b538      	push	{r3, r4, r5, lr}
 800abca:	4d06      	ldr	r5, [pc, #24]	; (800abe4 <_isatty_r+0x1c>)
 800abcc:	2300      	movs	r3, #0
 800abce:	4604      	mov	r4, r0
 800abd0:	4608      	mov	r0, r1
 800abd2:	602b      	str	r3, [r5, #0]
 800abd4:	f7f7 fd1b 	bl	800260e <_isatty>
 800abd8:	1c43      	adds	r3, r0, #1
 800abda:	d102      	bne.n	800abe2 <_isatty_r+0x1a>
 800abdc:	682b      	ldr	r3, [r5, #0]
 800abde:	b103      	cbz	r3, 800abe2 <_isatty_r+0x1a>
 800abe0:	6023      	str	r3, [r4, #0]
 800abe2:	bd38      	pop	{r3, r4, r5, pc}
 800abe4:	20000ca0 	.word	0x20000ca0

0800abe8 <_lseek_r>:
 800abe8:	b538      	push	{r3, r4, r5, lr}
 800abea:	4d07      	ldr	r5, [pc, #28]	; (800ac08 <_lseek_r+0x20>)
 800abec:	4604      	mov	r4, r0
 800abee:	4608      	mov	r0, r1
 800abf0:	4611      	mov	r1, r2
 800abf2:	2200      	movs	r2, #0
 800abf4:	602a      	str	r2, [r5, #0]
 800abf6:	461a      	mov	r2, r3
 800abf8:	f7f7 fd14 	bl	8002624 <_lseek>
 800abfc:	1c43      	adds	r3, r0, #1
 800abfe:	d102      	bne.n	800ac06 <_lseek_r+0x1e>
 800ac00:	682b      	ldr	r3, [r5, #0]
 800ac02:	b103      	cbz	r3, 800ac06 <_lseek_r+0x1e>
 800ac04:	6023      	str	r3, [r4, #0]
 800ac06:	bd38      	pop	{r3, r4, r5, pc}
 800ac08:	20000ca0 	.word	0x20000ca0

0800ac0c <_read_r>:
 800ac0c:	b538      	push	{r3, r4, r5, lr}
 800ac0e:	4d07      	ldr	r5, [pc, #28]	; (800ac2c <_read_r+0x20>)
 800ac10:	4604      	mov	r4, r0
 800ac12:	4608      	mov	r0, r1
 800ac14:	4611      	mov	r1, r2
 800ac16:	2200      	movs	r2, #0
 800ac18:	602a      	str	r2, [r5, #0]
 800ac1a:	461a      	mov	r2, r3
 800ac1c:	f7f7 fca2 	bl	8002564 <_read>
 800ac20:	1c43      	adds	r3, r0, #1
 800ac22:	d102      	bne.n	800ac2a <_read_r+0x1e>
 800ac24:	682b      	ldr	r3, [r5, #0]
 800ac26:	b103      	cbz	r3, 800ac2a <_read_r+0x1e>
 800ac28:	6023      	str	r3, [r4, #0]
 800ac2a:	bd38      	pop	{r3, r4, r5, pc}
 800ac2c:	20000ca0 	.word	0x20000ca0

0800ac30 <_init>:
 800ac30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac32:	bf00      	nop
 800ac34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac36:	bc08      	pop	{r3}
 800ac38:	469e      	mov	lr, r3
 800ac3a:	4770      	bx	lr

0800ac3c <_fini>:
 800ac3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac3e:	bf00      	nop
 800ac40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac42:	bc08      	pop	{r3}
 800ac44:	469e      	mov	lr, r3
 800ac46:	4770      	bx	lr
