
MicrocontrollerApplication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac88  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000050c  0800adc8  0800adc8  0001adc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b2d4  0800b2d4  0001b2d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b2dc  0800b2dc  0001b2dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b2e0  0800b2e0  0001b2e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  20000004  0800b2e4  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002804  200001e0  0800b4c0  000201e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200029e4  0800b4c0  000229e4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   000218b3  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003a6f  00000000  00000000  00041ac3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001b68  00000000  00000000  00045538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001a00  00000000  00000000  000470a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00021ade  00000000  00000000  00048aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001d0de  00000000  00000000  0006a57e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000d2176  00000000  00000000  0008765c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001597d2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000086e8  00000000  00000000  00159828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e0 	.word	0x200001e0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800adb0 	.word	0x0800adb0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e4 	.word	0x200001e4
 800017c:	0800adb0 	.word	0x0800adb0

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_ldivmod>:
 8000bf8:	b97b      	cbnz	r3, 8000c1a <__aeabi_ldivmod+0x22>
 8000bfa:	b972      	cbnz	r2, 8000c1a <__aeabi_ldivmod+0x22>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bfbe      	ittt	lt
 8000c00:	2000      	movlt	r0, #0
 8000c02:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c06:	e006      	blt.n	8000c16 <__aeabi_ldivmod+0x1e>
 8000c08:	bf08      	it	eq
 8000c0a:	2800      	cmpeq	r0, #0
 8000c0c:	bf1c      	itt	ne
 8000c0e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c12:	f04f 30ff 	movne.w	r0, #4294967295
 8000c16:	f000 b9b9 	b.w	8000f8c <__aeabi_idiv0>
 8000c1a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c1e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c22:	2900      	cmp	r1, #0
 8000c24:	db09      	blt.n	8000c3a <__aeabi_ldivmod+0x42>
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	db1a      	blt.n	8000c60 <__aeabi_ldivmod+0x68>
 8000c2a:	f000 f84d 	bl	8000cc8 <__udivmoddi4>
 8000c2e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c36:	b004      	add	sp, #16
 8000c38:	4770      	bx	lr
 8000c3a:	4240      	negs	r0, r0
 8000c3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	db1b      	blt.n	8000c7c <__aeabi_ldivmod+0x84>
 8000c44:	f000 f840 	bl	8000cc8 <__udivmoddi4>
 8000c48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c50:	b004      	add	sp, #16
 8000c52:	4240      	negs	r0, r0
 8000c54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c58:	4252      	negs	r2, r2
 8000c5a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c5e:	4770      	bx	lr
 8000c60:	4252      	negs	r2, r2
 8000c62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c66:	f000 f82f 	bl	8000cc8 <__udivmoddi4>
 8000c6a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c72:	b004      	add	sp, #16
 8000c74:	4240      	negs	r0, r0
 8000c76:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7a:	4770      	bx	lr
 8000c7c:	4252      	negs	r2, r2
 8000c7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c82:	f000 f821 	bl	8000cc8 <__udivmoddi4>
 8000c86:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c8e:	b004      	add	sp, #16
 8000c90:	4252      	negs	r2, r2
 8000c92:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b96e 	b.w	8000f8c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468c      	mov	ip, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8083 	bne.w	8000dde <__udivmoddi4+0x116>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4617      	mov	r7, r2
 8000cdc:	d947      	bls.n	8000d6e <__udivmoddi4+0xa6>
 8000cde:	fab2 f282 	clz	r2, r2
 8000ce2:	b142      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	f1c2 0020 	rsb	r0, r2, #32
 8000ce8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cec:	4091      	lsls	r1, r2
 8000cee:	4097      	lsls	r7, r2
 8000cf0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbbc f6f8 	udiv	r6, ip, r8
 8000d00:	fa1f fe87 	uxth.w	lr, r7
 8000d04:	fb08 c116 	mls	r1, r8, r6, ip
 8000d08:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18fb      	adds	r3, r7, r3
 8000d16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1a:	f080 8119 	bcs.w	8000f50 <__udivmoddi4+0x288>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8116 	bls.w	8000f50 <__udivmoddi4+0x288>
 8000d24:	3e02      	subs	r6, #2
 8000d26:	443b      	add	r3, r7
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d30:	fb08 3310 	mls	r3, r8, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d3c:	45a6      	cmp	lr, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	193c      	adds	r4, r7, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8105 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d4a:	45a6      	cmp	lr, r4
 8000d4c:	f240 8102 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d50:	3802      	subs	r0, #2
 8000d52:	443c      	add	r4, r7
 8000d54:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d58:	eba4 040e 	sub.w	r4, r4, lr
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	b11d      	cbz	r5, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c5 4300 	strd	r4, r3, [r5]
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	b902      	cbnz	r2, 8000d72 <__udivmoddi4+0xaa>
 8000d70:	deff      	udf	#255	; 0xff
 8000d72:	fab2 f282 	clz	r2, r2
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	d150      	bne.n	8000e1c <__udivmoddi4+0x154>
 8000d7a:	1bcb      	subs	r3, r1, r7
 8000d7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d80:	fa1f f887 	uxth.w	r8, r7
 8000d84:	2601      	movs	r6, #1
 8000d86:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d8a:	0c21      	lsrs	r1, r4, #16
 8000d8c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb08 f30c 	mul.w	r3, r8, ip
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0xe2>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	f200 80e9 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1ac9      	subs	r1, r1, r3
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000db8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x10c>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x10a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80d9 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e7bf      	b.n	8000d5e <__udivmoddi4+0x96>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0x12e>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80b1 	beq.w	8000f4a <__udivmoddi4+0x282>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x1cc>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0x140>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80b8 	bhi.w	8000f78 <__udivmoddi4+0x2b0>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	468c      	mov	ip, r1
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0a8      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000e16:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e1a:	e7a5      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f603 	lsr.w	r6, r0, r3
 8000e24:	4097      	lsls	r7, r2
 8000e26:	fa01 f002 	lsl.w	r0, r1, r2
 8000e2a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e2e:	40d9      	lsrs	r1, r3
 8000e30:	4330      	orrs	r0, r6
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e38:	fa1f f887 	uxth.w	r8, r7
 8000e3c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e44:	fb06 f108 	mul.w	r1, r6, r8
 8000e48:	4299      	cmp	r1, r3
 8000e4a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e4e:	d909      	bls.n	8000e64 <__udivmoddi4+0x19c>
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e56:	f080 808d 	bcs.w	8000f74 <__udivmoddi4+0x2ac>
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	f240 808a 	bls.w	8000f74 <__udivmoddi4+0x2ac>
 8000e60:	3e02      	subs	r6, #2
 8000e62:	443b      	add	r3, r7
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b281      	uxth	r1, r0
 8000e68:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e6c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e74:	fb00 f308 	mul.w	r3, r0, r8
 8000e78:	428b      	cmp	r3, r1
 8000e7a:	d907      	bls.n	8000e8c <__udivmoddi4+0x1c4>
 8000e7c:	1879      	adds	r1, r7, r1
 8000e7e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e82:	d273      	bcs.n	8000f6c <__udivmoddi4+0x2a4>
 8000e84:	428b      	cmp	r3, r1
 8000e86:	d971      	bls.n	8000f6c <__udivmoddi4+0x2a4>
 8000e88:	3802      	subs	r0, #2
 8000e8a:	4439      	add	r1, r7
 8000e8c:	1acb      	subs	r3, r1, r3
 8000e8e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e92:	e778      	b.n	8000d86 <__udivmoddi4+0xbe>
 8000e94:	f1c6 0c20 	rsb	ip, r6, #32
 8000e98:	fa03 f406 	lsl.w	r4, r3, r6
 8000e9c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ea0:	431c      	orrs	r4, r3
 8000ea2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000eae:	fa21 f10c 	lsr.w	r1, r1, ip
 8000eb2:	431f      	orrs	r7, r3
 8000eb4:	0c3b      	lsrs	r3, r7, #16
 8000eb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eba:	fa1f f884 	uxth.w	r8, r4
 8000ebe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ec2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ec6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eca:	458a      	cmp	sl, r1
 8000ecc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x220>
 8000ed6:	1861      	adds	r1, r4, r1
 8000ed8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000edc:	d248      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000ede:	458a      	cmp	sl, r1
 8000ee0:	d946      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000ee2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ee6:	4421      	add	r1, r4
 8000ee8:	eba1 010a 	sub.w	r1, r1, sl
 8000eec:	b2bf      	uxth	r7, r7
 8000eee:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ef2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ef6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000efa:	fb00 f808 	mul.w	r8, r0, r8
 8000efe:	45b8      	cmp	r8, r7
 8000f00:	d907      	bls.n	8000f12 <__udivmoddi4+0x24a>
 8000f02:	19e7      	adds	r7, r4, r7
 8000f04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f08:	d22e      	bcs.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0a:	45b8      	cmp	r8, r7
 8000f0c:	d92c      	bls.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0e:	3802      	subs	r0, #2
 8000f10:	4427      	add	r7, r4
 8000f12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f16:	eba7 0708 	sub.w	r7, r7, r8
 8000f1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f1e:	454f      	cmp	r7, r9
 8000f20:	46c6      	mov	lr, r8
 8000f22:	4649      	mov	r1, r9
 8000f24:	d31a      	bcc.n	8000f5c <__udivmoddi4+0x294>
 8000f26:	d017      	beq.n	8000f58 <__udivmoddi4+0x290>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x27a>
 8000f2a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f2e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f32:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f36:	40f2      	lsrs	r2, r6
 8000f38:	ea4c 0202 	orr.w	r2, ip, r2
 8000f3c:	40f7      	lsrs	r7, r6
 8000f3e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f42:	2600      	movs	r6, #0
 8000f44:	4631      	mov	r1, r6
 8000f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e70b      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6fd      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f58:	4543      	cmp	r3, r8
 8000f5a:	d2e5      	bcs.n	8000f28 <__udivmoddi4+0x260>
 8000f5c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f60:	eb69 0104 	sbc.w	r1, r9, r4
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7df      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e7d2      	b.n	8000f12 <__udivmoddi4+0x24a>
 8000f6c:	4660      	mov	r0, ip
 8000f6e:	e78d      	b.n	8000e8c <__udivmoddi4+0x1c4>
 8000f70:	4681      	mov	r9, r0
 8000f72:	e7b9      	b.n	8000ee8 <__udivmoddi4+0x220>
 8000f74:	4666      	mov	r6, ip
 8000f76:	e775      	b.n	8000e64 <__udivmoddi4+0x19c>
 8000f78:	4630      	mov	r0, r6
 8000f7a:	e74a      	b.n	8000e12 <__udivmoddi4+0x14a>
 8000f7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f80:	4439      	add	r1, r7
 8000f82:	e713      	b.n	8000dac <__udivmoddi4+0xe4>
 8000f84:	3802      	subs	r0, #2
 8000f86:	443c      	add	r4, r7
 8000f88:	e724      	b.n	8000dd4 <__udivmoddi4+0x10c>
 8000f8a:	bf00      	nop

08000f8c <__aeabi_idiv0>:
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <DWT_Init>:
#endif

//#############################################################################################
TIM_HandleTypeDef htim2;
__STATIC_INLINE void DWT_Init(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // allow to use counter
 8000f94:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <DWT_Init+0x28>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	4a07      	ldr	r2, [pc, #28]	; (8000fb8 <DWT_Init+0x28>)
 8000f9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f9e:	60d3      	str	r3, [r2, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   // start counter
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <DWT_Init+0x2c>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a05      	ldr	r2, [pc, #20]	; (8000fbc <DWT_Init+0x2c>)
 8000fa6:	f043 0301 	orr.w	r3, r3, #1
 8000faa:	6013      	str	r3, [r2, #0]
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	e000edf0 	.word	0xe000edf0
 8000fbc:	e0001000 	.word	0xe0001000

08000fc0 <hx711_delay_us>:
void hx711_delay_us(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
	uint32_t delay = _HX711_DELAY_US_LOOP;
 8000fc6:	2304      	movs	r3, #4
 8000fc8:	607b      	str	r3, [r7, #4]
	  while (delay > 0)
 8000fca:	e006      	b.n	8000fda <hx711_delay_us+0x1a>
	  {
	    delay--;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	607b      	str	r3, [r7, #4]
	    asm("NOP"); asm("NOP"); asm("NOP"); asm("NOP");
 8000fd2:	bf00      	nop
 8000fd4:	bf00      	nop
 8000fd6:	bf00      	nop
 8000fd8:	bf00      	nop
	  while (delay > 0)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d1f5      	bne.n	8000fcc <hx711_delay_us+0xc>
	  }

}
 8000fe0:	bf00      	nop
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <hx711_lock>:
//#############################################################################################
void hx711_lock(hx711_t *hx711)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b082      	sub	sp, #8
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
  while (hx711->lock)
 8000ff6:	e002      	b.n	8000ffe <hx711_lock+0x10>
    hx711_delay(1);
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	f001 fce9 	bl	80029d0 <HAL_Delay>
  while (hx711->lock)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	7d1b      	ldrb	r3, [r3, #20]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d1f8      	bne.n	8000ff8 <hx711_lock+0xa>
  hx711->lock = 1;      
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2201      	movs	r2, #1
 800100a:	751a      	strb	r2, [r3, #20]
}
 800100c:	bf00      	nop
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <hx711_unlock>:
//#############################################################################################
void hx711_unlock(hx711_t *hx711)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  hx711->lock = 0;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2200      	movs	r2, #0
 8001020:	751a      	strb	r2, [r3, #20]
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <hx711_init>:
//#############################################################################################
void hx711_init(hx711_t *hx711, GPIO_TypeDef *clk_gpio, uint16_t clk_pin, GPIO_TypeDef *dat_gpio, uint16_t dat_pin)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b08a      	sub	sp, #40	; 0x28
 8001032:	af00      	add	r7, sp, #0
 8001034:	60f8      	str	r0, [r7, #12]
 8001036:	60b9      	str	r1, [r7, #8]
 8001038:	603b      	str	r3, [r7, #0]
 800103a:	4613      	mov	r3, r2
 800103c:	80fb      	strh	r3, [r7, #6]
  DWT_Init();
 800103e:	f7ff ffa7 	bl	8000f90 <DWT_Init>
  hx711_lock(hx711);
 8001042:	68f8      	ldr	r0, [r7, #12]
 8001044:	f7ff ffd3 	bl	8000fee <hx711_lock>
  hx711->clk_gpio = clk_gpio;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	68ba      	ldr	r2, [r7, #8]
 800104c:	601a      	str	r2, [r3, #0]
  hx711->clk_pin = clk_pin;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	88fa      	ldrh	r2, [r7, #6]
 8001052:	811a      	strh	r2, [r3, #8]
  hx711->dat_gpio = dat_gpio;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	683a      	ldr	r2, [r7, #0]
 8001058:	605a      	str	r2, [r3, #4]
  hx711->dat_pin = dat_pin;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800105e:	815a      	strh	r2, [r3, #10]
  
  GPIO_InitTypeDef  gpio = {0};
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
  gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8001070:	2301      	movs	r3, #1
 8001072:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8001078:	2302      	movs	r3, #2
 800107a:	623b      	str	r3, [r7, #32]
  gpio.Pin = clk_pin;
 800107c:	88fb      	ldrh	r3, [r7, #6]
 800107e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(clk_gpio, &gpio);
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	4619      	mov	r1, r3
 8001086:	68b8      	ldr	r0, [r7, #8]
 8001088:	f002 ff88 	bl	8003f9c <HAL_GPIO_Init>
  gpio.Mode = GPIO_MODE_INPUT;
 800108c:	2300      	movs	r3, #0
 800108e:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_PULLUP;
 8001090:	2301      	movs	r3, #1
 8001092:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8001094:	2302      	movs	r3, #2
 8001096:	623b      	str	r3, [r7, #32]
  gpio.Pin = dat_pin;
 8001098:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800109a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(dat_gpio, &gpio);
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	4619      	mov	r1, r3
 80010a2:	6838      	ldr	r0, [r7, #0]
 80010a4:	f002 ff7a 	bl	8003f9c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	6818      	ldr	r0, [r3, #0]
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	891b      	ldrh	r3, [r3, #8]
 80010b0:	2201      	movs	r2, #1
 80010b2:	4619      	mov	r1, r3
 80010b4:	f003 f8f2 	bl	800429c <HAL_GPIO_WritePin>
  hx711_delay(10);
 80010b8:	200a      	movs	r0, #10
 80010ba:	f001 fc89 	bl	80029d0 <HAL_Delay>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	6818      	ldr	r0, [r3, #0]
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	891b      	ldrh	r3, [r3, #8]
 80010c6:	2200      	movs	r2, #0
 80010c8:	4619      	mov	r1, r3
 80010ca:	f003 f8e7 	bl	800429c <HAL_GPIO_WritePin>
  hx711_delay(10);  
 80010ce:	200a      	movs	r0, #10
 80010d0:	f001 fc7e 	bl	80029d0 <HAL_Delay>
  hx711_value(hx711);
 80010d4:	68f8      	ldr	r0, [r7, #12]
 80010d6:	f000 f80a 	bl	80010ee <hx711_value>
  hx711_value(hx711);
 80010da:	68f8      	ldr	r0, [r7, #12]
 80010dc:	f000 f807 	bl	80010ee <hx711_value>
  hx711_unlock(hx711); 
 80010e0:	68f8      	ldr	r0, [r7, #12]
 80010e2:	f7ff ff97 	bl	8001014 <hx711_unlock>
}
 80010e6:	bf00      	nop
 80010e8:	3728      	adds	r7, #40	; 0x28
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <hx711_value>:
//#############################################################################################
int32_t hx711_value(hx711_t *hx711)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b086      	sub	sp, #24
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
  uint32_t data = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	617b      	str	r3, [r7, #20]
  uint32_t  startTime = HAL_GetTick();
 80010fa:	f001 fc51 	bl	80029a0 <HAL_GetTick>
 80010fe:	60f8      	str	r0, [r7, #12]
  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8001100:	e00b      	b.n	800111a <hx711_value+0x2c>
  {
    hx711_delay(1);
 8001102:	2001      	movs	r0, #1
 8001104:	f001 fc64 	bl	80029d0 <HAL_Delay>
    if(HAL_GetTick() - startTime > 150)
 8001108:	f001 fc4a 	bl	80029a0 <HAL_GetTick>
 800110c:	4602      	mov	r2, r0
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	2b96      	cmp	r3, #150	; 0x96
 8001114:	d901      	bls.n	800111a <hx711_value+0x2c>
      return 0;
 8001116:	2300      	movs	r3, #0
 8001118:	e055      	b.n	80011c6 <hx711_value+0xd8>
  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685a      	ldr	r2, [r3, #4]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	895b      	ldrh	r3, [r3, #10]
 8001122:	4619      	mov	r1, r3
 8001124:	4610      	mov	r0, r2
 8001126:	f003 f8a1 	bl	800426c <HAL_GPIO_ReadPin>
 800112a:	4603      	mov	r3, r0
 800112c:	2b01      	cmp	r3, #1
 800112e:	d0e8      	beq.n	8001102 <hx711_value+0x14>
  }
  for(int8_t i=0; i<24 ; i++)
 8001130:	2300      	movs	r3, #0
 8001132:	74fb      	strb	r3, [r7, #19]
 8001134:	e02a      	b.n	800118c <hx711_value+0x9e>
  {
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);   
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6818      	ldr	r0, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	891b      	ldrh	r3, [r3, #8]
 800113e:	2201      	movs	r2, #1
 8001140:	4619      	mov	r1, r3
 8001142:	f003 f8ab 	bl	800429c <HAL_GPIO_WritePin>
    hx711_delay_us();
 8001146:	f7ff ff3b 	bl	8000fc0 <hx711_delay_us>
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6818      	ldr	r0, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	891b      	ldrh	r3, [r3, #8]
 8001152:	2200      	movs	r2, #0
 8001154:	4619      	mov	r1, r3
 8001156:	f003 f8a1 	bl	800429c <HAL_GPIO_WritePin>
    hx711_delay_us();
 800115a:	f7ff ff31 	bl	8000fc0 <hx711_delay_us>
    data = data << 1;    
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	617b      	str	r3, [r7, #20]
    if(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685a      	ldr	r2, [r3, #4]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	895b      	ldrh	r3, [r3, #10]
 800116c:	4619      	mov	r1, r3
 800116e:	4610      	mov	r0, r2
 8001170:	f003 f87c 	bl	800426c <HAL_GPIO_ReadPin>
 8001174:	4603      	mov	r3, r0
 8001176:	2b01      	cmp	r3, #1
 8001178:	d102      	bne.n	8001180 <hx711_value+0x92>
      data ++;
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	3301      	adds	r3, #1
 800117e:	617b      	str	r3, [r7, #20]
  for(int8_t i=0; i<24 ; i++)
 8001180:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001184:	b2db      	uxtb	r3, r3
 8001186:	3301      	adds	r3, #1
 8001188:	b2db      	uxtb	r3, r3
 800118a:	74fb      	strb	r3, [r7, #19]
 800118c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001190:	2b17      	cmp	r3, #23
 8001192:	ddd0      	ble.n	8001136 <hx711_value+0x48>
  }
  data = data ^ 0x800000; 
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 800119a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);   
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6818      	ldr	r0, [r3, #0]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	891b      	ldrh	r3, [r3, #8]
 80011a4:	2201      	movs	r2, #1
 80011a6:	4619      	mov	r1, r3
 80011a8:	f003 f878 	bl	800429c <HAL_GPIO_WritePin>
  hx711_delay_us();
 80011ac:	f7ff ff08 	bl	8000fc0 <hx711_delay_us>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6818      	ldr	r0, [r3, #0]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	891b      	ldrh	r3, [r3, #8]
 80011b8:	2200      	movs	r2, #0
 80011ba:	4619      	mov	r1, r3
 80011bc:	f003 f86e 	bl	800429c <HAL_GPIO_WritePin>
  hx711_delay_us();
 80011c0:	f7ff fefe 	bl	8000fc0 <hx711_delay_us>
  return data;    
 80011c4:	697b      	ldr	r3, [r7, #20]
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3718      	adds	r7, #24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <hx711_tare>:
  hx711_unlock(hx711);
  return answer;
}
//#############################################################################################
void hx711_tare(hx711_t *hx711, uint16_t sample)
{
 80011ce:	b5b0      	push	{r4, r5, r7, lr}
 80011d0:	b086      	sub	sp, #24
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
 80011d6:	460b      	mov	r3, r1
 80011d8:	807b      	strh	r3, [r7, #2]
  hx711_lock(hx711);
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f7ff ff07 	bl	8000fee <hx711_lock>
  int64_t  ave = 0;
 80011e0:	f04f 0200 	mov.w	r2, #0
 80011e4:	f04f 0300 	mov.w	r3, #0
 80011e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for(uint16_t i=0 ; i<sample ; i++)
 80011ec:	2300      	movs	r3, #0
 80011ee:	81fb      	strh	r3, [r7, #14]
 80011f0:	e013      	b.n	800121a <hx711_tare+0x4c>
  {
    ave += hx711_value(hx711);
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f7ff ff7b 	bl	80010ee <hx711_value>
 80011f8:	4603      	mov	r3, r0
 80011fa:	461a      	mov	r2, r3
 80011fc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001200:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001204:	1884      	adds	r4, r0, r2
 8001206:	eb41 0503 	adc.w	r5, r1, r3
 800120a:	e9c7 4504 	strd	r4, r5, [r7, #16]
    hx711_delay(5);
 800120e:	2005      	movs	r0, #5
 8001210:	f001 fbde 	bl	80029d0 <HAL_Delay>
  for(uint16_t i=0 ; i<sample ; i++)
 8001214:	89fb      	ldrh	r3, [r7, #14]
 8001216:	3301      	adds	r3, #1
 8001218:	81fb      	strh	r3, [r7, #14]
 800121a:	89fa      	ldrh	r2, [r7, #14]
 800121c:	887b      	ldrh	r3, [r7, #2]
 800121e:	429a      	cmp	r2, r3
 8001220:	d3e7      	bcc.n	80011f2 <hx711_tare+0x24>
  }
  hx711->offset = (int32_t)(ave / sample);
 8001222:	887a      	ldrh	r2, [r7, #2]
 8001224:	f04f 0300 	mov.w	r3, #0
 8001228:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800122c:	f7ff fce4 	bl	8000bf8 <__aeabi_ldivmod>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	60da      	str	r2, [r3, #12]
  hx711_unlock(hx711);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff feeb 	bl	8001014 <hx711_unlock>
}
 800123e:	bf00      	nop
 8001240:	3718      	adds	r7, #24
 8001242:	46bd      	mov	sp, r7
 8001244:	bdb0      	pop	{r4, r5, r7, pc}

08001246 <hx711_weight>:
  hx711->coef = (load_raw - noload_raw) / scale;  
  hx711_unlock(hx711);
}
//#############################################################################################
float hx711_weight(hx711_t *hx711, uint16_t sample)
{
 8001246:	b5b0      	push	{r4, r5, r7, lr}
 8001248:	b088      	sub	sp, #32
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
 800124e:	460b      	mov	r3, r1
 8001250:	807b      	strh	r3, [r7, #2]
  hx711_lock(hx711);
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7ff fecb 	bl	8000fee <hx711_lock>
  int64_t  ave = 0;
 8001258:	f04f 0200 	mov.w	r2, #0
 800125c:	f04f 0300 	mov.w	r3, #0
 8001260:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for(uint16_t i=0 ; i<sample ; i++)
 8001264:	2300      	movs	r3, #0
 8001266:	82fb      	strh	r3, [r7, #22]
 8001268:	e013      	b.n	8001292 <hx711_weight+0x4c>
  {
    ave += hx711_value(hx711);
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f7ff ff3f 	bl	80010ee <hx711_value>
 8001270:	4603      	mov	r3, r0
 8001272:	461a      	mov	r2, r3
 8001274:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001278:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800127c:	1884      	adds	r4, r0, r2
 800127e:	eb41 0503 	adc.w	r5, r1, r3
 8001282:	e9c7 4506 	strd	r4, r5, [r7, #24]
    hx711_delay(5);
 8001286:	2005      	movs	r0, #5
 8001288:	f001 fba2 	bl	80029d0 <HAL_Delay>
  for(uint16_t i=0 ; i<sample ; i++)
 800128c:	8afb      	ldrh	r3, [r7, #22]
 800128e:	3301      	adds	r3, #1
 8001290:	82fb      	strh	r3, [r7, #22]
 8001292:	8afa      	ldrh	r2, [r7, #22]
 8001294:	887b      	ldrh	r3, [r7, #2]
 8001296:	429a      	cmp	r2, r3
 8001298:	d3e7      	bcc.n	800126a <hx711_weight+0x24>
  }
  int32_t data = (int32_t)(ave / sample);
 800129a:	887a      	ldrh	r2, [r7, #2]
 800129c:	f04f 0300 	mov.w	r3, #0
 80012a0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80012a4:	f7ff fca8 	bl	8000bf8 <__aeabi_ldivmod>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	4613      	mov	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
  float answer =  (data - hx711->offset) / hx711->coef;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	ee07 3a90 	vmov	s15, r3
 80012bc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	ed93 7a04 	vldr	s14, [r3, #16]
 80012c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012ca:	edc7 7a03 	vstr	s15, [r7, #12]
  hx711_unlock(hx711);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff fea0 	bl	8001014 <hx711_unlock>
  return answer;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	ee07 3a90 	vmov	s15, r3
}
 80012da:	eeb0 0a67 	vmov.f32	s0, s15
 80012de:	3720      	adds	r7, #32
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bdb0      	pop	{r4, r5, r7, pc}

080012e4 <hx711_coef_set>:
//#############################################################################################
void hx711_coef_set(hx711_t *hx711, float coef)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	ed87 0a00 	vstr	s0, [r7]
  hx711->coef = coef;  
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	683a      	ldr	r2, [r7, #0]
 80012f4:	611a      	str	r2, [r3, #16]
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001302:	b480      	push	{r7}
 8001304:	b083      	sub	sp, #12
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800130a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800130e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001312:	f023 0218 	bic.w	r2, r3, #24
 8001316:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4313      	orrs	r3, r2
 800131e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800132e:	b480      	push	{r7}
 8001330:	b085      	sub	sp, #20
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001336:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800133a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800133c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4313      	orrs	r3, r2
 8001344:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001346:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800134a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4013      	ands	r3, r2
 8001350:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001352:	68fb      	ldr	r3, [r7, #12]
}
 8001354:	bf00      	nop
 8001356:	3714      	adds	r7, #20
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800136c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800136e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4313      	orrs	r3, r2
 8001376:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001378:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800137c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4013      	ands	r3, r2
 8001382:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001384:	68fb      	ldr	r3, [r7, #12]
}
 8001386:	bf00      	nop
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
	...

08001394 <MPU6050_Init>:
int16_t Gyro_Z_RAW = 0;

float Ax, Ay, Az, Gx, Gy, Gz;

void MPU6050_Init (void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	// check device ID

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,CHECK_REG,1, &check, 1, 1000);
 800139a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800139e:	9302      	str	r3, [sp, #8]
 80013a0:	2301      	movs	r3, #1
 80013a2:	9301      	str	r3, [sp, #4]
 80013a4:	1dfb      	adds	r3, r7, #7
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	2301      	movs	r3, #1
 80013aa:	2275      	movs	r2, #117	; 0x75
 80013ac:	21d0      	movs	r1, #208	; 0xd0
 80013ae:	4823      	ldr	r0, [pc, #140]	; (800143c <MPU6050_Init+0xa8>)
 80013b0:	f003 f930 	bl	8004614 <HAL_I2C_Mem_Read>

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	2b68      	cmp	r3, #104	; 0x68
 80013b8:	d13b      	bne.n	8001432 <MPU6050_Init+0x9e>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 80013be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013c2:	9302      	str	r3, [sp, #8]
 80013c4:	2301      	movs	r3, #1
 80013c6:	9301      	str	r3, [sp, #4]
 80013c8:	1dbb      	adds	r3, r7, #6
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	2301      	movs	r3, #1
 80013ce:	226b      	movs	r2, #107	; 0x6b
 80013d0:	21d0      	movs	r1, #208	; 0xd0
 80013d2:	481a      	ldr	r0, [pc, #104]	; (800143c <MPU6050_Init+0xa8>)
 80013d4:	f003 f80a 	bl	80043ec <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 80013d8:	2307      	movs	r3, #7
 80013da:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 80013dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e0:	9302      	str	r3, [sp, #8]
 80013e2:	2301      	movs	r3, #1
 80013e4:	9301      	str	r3, [sp, #4]
 80013e6:	1dbb      	adds	r3, r7, #6
 80013e8:	9300      	str	r3, [sp, #0]
 80013ea:	2301      	movs	r3, #1
 80013ec:	2219      	movs	r2, #25
 80013ee:	21d0      	movs	r1, #208	; 0xd0
 80013f0:	4812      	ldr	r0, [pc, #72]	; (800143c <MPU6050_Init+0xa8>)
 80013f2:	f002 fffb 	bl	80043ec <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
		Data = 0x00;
 80013f6:	2300      	movs	r3, #0
 80013f8:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 80013fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013fe:	9302      	str	r3, [sp, #8]
 8001400:	2301      	movs	r3, #1
 8001402:	9301      	str	r3, [sp, #4]
 8001404:	1dbb      	adds	r3, r7, #6
 8001406:	9300      	str	r3, [sp, #0]
 8001408:	2301      	movs	r3, #1
 800140a:	221c      	movs	r2, #28
 800140c:	21d0      	movs	r1, #208	; 0xd0
 800140e:	480b      	ldr	r0, [pc, #44]	; (800143c <MPU6050_Init+0xa8>)
 8001410:	f002 ffec 	bl	80043ec <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
		Data = 0x00;
 8001414:	2300      	movs	r3, #0
 8001416:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8001418:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800141c:	9302      	str	r3, [sp, #8]
 800141e:	2301      	movs	r3, #1
 8001420:	9301      	str	r3, [sp, #4]
 8001422:	1dbb      	adds	r3, r7, #6
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	2301      	movs	r3, #1
 8001428:	221b      	movs	r2, #27
 800142a:	21d0      	movs	r1, #208	; 0xd0
 800142c:	4803      	ldr	r0, [pc, #12]	; (800143c <MPU6050_Init+0xa8>)
 800142e:	f002 ffdd 	bl	80043ec <HAL_I2C_Mem_Write>
	}

}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	200004fc 	.word	0x200004fc

08001440 <MPU6050_Read_Accel>:


void MPU6050_Read_Accel (void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8001446:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800144a:	9302      	str	r3, [sp, #8]
 800144c:	2306      	movs	r3, #6
 800144e:	9301      	str	r3, [sp, #4]
 8001450:	463b      	mov	r3, r7
 8001452:	9300      	str	r3, [sp, #0]
 8001454:	2301      	movs	r3, #1
 8001456:	223b      	movs	r2, #59	; 0x3b
 8001458:	21d0      	movs	r1, #208	; 0xd0
 800145a:	482f      	ldr	r0, [pc, #188]	; (8001518 <MPU6050_Read_Accel+0xd8>)
 800145c:	f003 f8da 	bl	8004614 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8001460:	783b      	ldrb	r3, [r7, #0]
 8001462:	021b      	lsls	r3, r3, #8
 8001464:	b21a      	sxth	r2, r3
 8001466:	787b      	ldrb	r3, [r7, #1]
 8001468:	b21b      	sxth	r3, r3
 800146a:	4313      	orrs	r3, r2
 800146c:	b21a      	sxth	r2, r3
 800146e:	4b2b      	ldr	r3, [pc, #172]	; (800151c <MPU6050_Read_Accel+0xdc>)
 8001470:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8001472:	78bb      	ldrb	r3, [r7, #2]
 8001474:	021b      	lsls	r3, r3, #8
 8001476:	b21a      	sxth	r2, r3
 8001478:	78fb      	ldrb	r3, [r7, #3]
 800147a:	b21b      	sxth	r3, r3
 800147c:	4313      	orrs	r3, r2
 800147e:	b21a      	sxth	r2, r3
 8001480:	4b27      	ldr	r3, [pc, #156]	; (8001520 <MPU6050_Read_Accel+0xe0>)
 8001482:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8001484:	793b      	ldrb	r3, [r7, #4]
 8001486:	021b      	lsls	r3, r3, #8
 8001488:	b21a      	sxth	r2, r3
 800148a:	797b      	ldrb	r3, [r7, #5]
 800148c:	b21b      	sxth	r3, r3
 800148e:	4313      	orrs	r3, r2
 8001490:	b21a      	sxth	r2, r3
 8001492:	4b24      	ldr	r3, [pc, #144]	; (8001524 <MPU6050_Read_Accel+0xe4>)
 8001494:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	Ax = Accel_X_RAW/16384.0;
 8001496:	4b21      	ldr	r3, [pc, #132]	; (800151c <MPU6050_Read_Accel+0xdc>)
 8001498:	f9b3 3000 	ldrsh.w	r3, [r3]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff f819 	bl	80004d4 <__aeabi_i2d>
 80014a2:	f04f 0200 	mov.w	r2, #0
 80014a6:	4b20      	ldr	r3, [pc, #128]	; (8001528 <MPU6050_Read_Accel+0xe8>)
 80014a8:	f7ff f9a8 	bl	80007fc <__aeabi_ddiv>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	4610      	mov	r0, r2
 80014b2:	4619      	mov	r1, r3
 80014b4:	f7ff fb50 	bl	8000b58 <__aeabi_d2f>
 80014b8:	4603      	mov	r3, r0
 80014ba:	4a1c      	ldr	r2, [pc, #112]	; (800152c <MPU6050_Read_Accel+0xec>)
 80014bc:	6013      	str	r3, [r2, #0]
	Ay = Accel_Y_RAW/16384.0;
 80014be:	4b18      	ldr	r3, [pc, #96]	; (8001520 <MPU6050_Read_Accel+0xe0>)
 80014c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff f805 	bl	80004d4 <__aeabi_i2d>
 80014ca:	f04f 0200 	mov.w	r2, #0
 80014ce:	4b16      	ldr	r3, [pc, #88]	; (8001528 <MPU6050_Read_Accel+0xe8>)
 80014d0:	f7ff f994 	bl	80007fc <__aeabi_ddiv>
 80014d4:	4602      	mov	r2, r0
 80014d6:	460b      	mov	r3, r1
 80014d8:	4610      	mov	r0, r2
 80014da:	4619      	mov	r1, r3
 80014dc:	f7ff fb3c 	bl	8000b58 <__aeabi_d2f>
 80014e0:	4603      	mov	r3, r0
 80014e2:	4a13      	ldr	r2, [pc, #76]	; (8001530 <MPU6050_Read_Accel+0xf0>)
 80014e4:	6013      	str	r3, [r2, #0]
	Az = Accel_Z_RAW/16384.0;
 80014e6:	4b0f      	ldr	r3, [pc, #60]	; (8001524 <MPU6050_Read_Accel+0xe4>)
 80014e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7fe fff1 	bl	80004d4 <__aeabi_i2d>
 80014f2:	f04f 0200 	mov.w	r2, #0
 80014f6:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <MPU6050_Read_Accel+0xe8>)
 80014f8:	f7ff f980 	bl	80007fc <__aeabi_ddiv>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	4610      	mov	r0, r2
 8001502:	4619      	mov	r1, r3
 8001504:	f7ff fb28 	bl	8000b58 <__aeabi_d2f>
 8001508:	4603      	mov	r3, r0
 800150a:	4a0a      	ldr	r2, [pc, #40]	; (8001534 <MPU6050_Read_Accel+0xf4>)
 800150c:	6013      	str	r3, [r2, #0]
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	200004fc 	.word	0x200004fc
 800151c:	200001fc 	.word	0x200001fc
 8001520:	200001fe 	.word	0x200001fe
 8001524:	20000200 	.word	0x20000200
 8001528:	40d00000 	.word	0x40d00000
 800152c:	20000964 	.word	0x20000964
 8001530:	20000564 	.word	0x20000564
 8001534:	20000968 	.word	0x20000968

08001538 <MPU6050_Read_Gyro>:


void MPU6050_Read_Gyro (void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from GYRO_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 800153e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001542:	9302      	str	r3, [sp, #8]
 8001544:	2306      	movs	r3, #6
 8001546:	9301      	str	r3, [sp, #4]
 8001548:	463b      	mov	r3, r7
 800154a:	9300      	str	r3, [sp, #0]
 800154c:	2301      	movs	r3, #1
 800154e:	2243      	movs	r2, #67	; 0x43
 8001550:	21d0      	movs	r1, #208	; 0xd0
 8001552:	4831      	ldr	r0, [pc, #196]	; (8001618 <MPU6050_Read_Gyro+0xe0>)
 8001554:	f003 f85e 	bl	8004614 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8001558:	783b      	ldrb	r3, [r7, #0]
 800155a:	021b      	lsls	r3, r3, #8
 800155c:	b21a      	sxth	r2, r3
 800155e:	787b      	ldrb	r3, [r7, #1]
 8001560:	b21b      	sxth	r3, r3
 8001562:	4313      	orrs	r3, r2
 8001564:	b21a      	sxth	r2, r3
 8001566:	4b2d      	ldr	r3, [pc, #180]	; (800161c <MPU6050_Read_Gyro+0xe4>)
 8001568:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 800156a:	78bb      	ldrb	r3, [r7, #2]
 800156c:	021b      	lsls	r3, r3, #8
 800156e:	b21a      	sxth	r2, r3
 8001570:	78fb      	ldrb	r3, [r7, #3]
 8001572:	b21b      	sxth	r3, r3
 8001574:	4313      	orrs	r3, r2
 8001576:	b21a      	sxth	r2, r3
 8001578:	4b29      	ldr	r3, [pc, #164]	; (8001620 <MPU6050_Read_Gyro+0xe8>)
 800157a:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 800157c:	793b      	ldrb	r3, [r7, #4]
 800157e:	021b      	lsls	r3, r3, #8
 8001580:	b21a      	sxth	r2, r3
 8001582:	797b      	ldrb	r3, [r7, #5]
 8001584:	b21b      	sxth	r3, r3
 8001586:	4313      	orrs	r3, r2
 8001588:	b21a      	sxth	r2, r3
 800158a:	4b26      	ldr	r3, [pc, #152]	; (8001624 <MPU6050_Read_Gyro+0xec>)
 800158c:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into dps (�/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	Gx = Gyro_X_RAW/131.0;
 800158e:	4b23      	ldr	r3, [pc, #140]	; (800161c <MPU6050_Read_Gyro+0xe4>)
 8001590:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001594:	4618      	mov	r0, r3
 8001596:	f7fe ff9d 	bl	80004d4 <__aeabi_i2d>
 800159a:	a31d      	add	r3, pc, #116	; (adr r3, 8001610 <MPU6050_Read_Gyro+0xd8>)
 800159c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a0:	f7ff f92c 	bl	80007fc <__aeabi_ddiv>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	4610      	mov	r0, r2
 80015aa:	4619      	mov	r1, r3
 80015ac:	f7ff fad4 	bl	8000b58 <__aeabi_d2f>
 80015b0:	4603      	mov	r3, r0
 80015b2:	4a1d      	ldr	r2, [pc, #116]	; (8001628 <MPU6050_Read_Gyro+0xf0>)
 80015b4:	6013      	str	r3, [r2, #0]
	Gy = Gyro_Y_RAW/131.0;
 80015b6:	4b1a      	ldr	r3, [pc, #104]	; (8001620 <MPU6050_Read_Gyro+0xe8>)
 80015b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7fe ff89 	bl	80004d4 <__aeabi_i2d>
 80015c2:	a313      	add	r3, pc, #76	; (adr r3, 8001610 <MPU6050_Read_Gyro+0xd8>)
 80015c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c8:	f7ff f918 	bl	80007fc <__aeabi_ddiv>
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	4610      	mov	r0, r2
 80015d2:	4619      	mov	r1, r3
 80015d4:	f7ff fac0 	bl	8000b58 <__aeabi_d2f>
 80015d8:	4603      	mov	r3, r0
 80015da:	4a14      	ldr	r2, [pc, #80]	; (800162c <MPU6050_Read_Gyro+0xf4>)
 80015dc:	6013      	str	r3, [r2, #0]
	Gz = Gyro_Z_RAW/131.0;
 80015de:	4b11      	ldr	r3, [pc, #68]	; (8001624 <MPU6050_Read_Gyro+0xec>)
 80015e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7fe ff75 	bl	80004d4 <__aeabi_i2d>
 80015ea:	a309      	add	r3, pc, #36	; (adr r3, 8001610 <MPU6050_Read_Gyro+0xd8>)
 80015ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f0:	f7ff f904 	bl	80007fc <__aeabi_ddiv>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	4610      	mov	r0, r2
 80015fa:	4619      	mov	r1, r3
 80015fc:	f7ff faac 	bl	8000b58 <__aeabi_d2f>
 8001600:	4603      	mov	r3, r0
 8001602:	4a0b      	ldr	r2, [pc, #44]	; (8001630 <MPU6050_Read_Gyro+0xf8>)
 8001604:	6013      	str	r3, [r2, #0]
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	00000000 	.word	0x00000000
 8001614:	40606000 	.word	0x40606000
 8001618:	200004fc 	.word	0x200004fc
 800161c:	20000202 	.word	0x20000202
 8001620:	20000204 	.word	0x20000204
 8001624:	20000206 	.word	0x20000206
 8001628:	20000260 	.word	0x20000260
 800162c:	2000056c 	.word	0x2000056c
 8001630:	2000297c 	.word	0x2000297c

08001634 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001634:	b590      	push	{r4, r7, lr}
 8001636:	f2ad 4dbc 	subw	sp, sp, #1212	; 0x4bc
 800163a:	afa2      	add	r7, sp, #648	; 0x288
	char buf[4];
	float weight;
	int loadcellCounter;

	//The microcontroller is booting up
	if(set_state(&state, STARTUP) == false)
 800163c:	2101      	movs	r1, #1
 800163e:	48cf      	ldr	r0, [pc, #828]	; (800197c <main+0x348>)
 8001640:	f000 fdb2 	bl	80021a8 <set_state>
 8001644:	4603      	mov	r3, r0
 8001646:	2b01      	cmp	r3, #1
 8001648:	d101      	bne.n	800164e <main+0x1a>
	{
		Error_Handler();
 800164a:	f000 fd29 	bl	80020a0 <Error_Handler>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800164e:	f001 f973 	bl	8002938 <HAL_Init>

  /* USER CODE BEGIN Init */

	//Begin to configure the mcu
	if(set_state(&state, CONFIGURING) == false)
 8001652:	2102      	movs	r1, #2
 8001654:	48c9      	ldr	r0, [pc, #804]	; (800197c <main+0x348>)
 8001656:	f000 fda7 	bl	80021a8 <set_state>
 800165a:	4603      	mov	r3, r0
 800165c:	2b01      	cmp	r3, #1
 800165e:	d101      	bne.n	8001664 <main+0x30>
	{
		Error_Handler();
 8001660:	f000 fd1e 	bl	80020a0 <Error_Handler>
	}
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001664:	f000 fa96 	bl	8001b94 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	HAL_Delay (5000);
 8001668:	f241 3088 	movw	r0, #5000	; 0x1388
 800166c:	f001 f9b0 	bl	80029d0 <HAL_Delay>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001670:	f000 fcaa 	bl	8001fc8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001674:	f000 fb02 	bl	8001c7c <MX_ADC1_Init>
  MX_DMA_Init();
 8001678:	f000 fc94 	bl	8001fa4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800167c:	f000 fc44 	bl	8001f08 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001680:	f000 fbf4 	bl	8001e6c <MX_TIM2_Init>
  MX_I2C1_Init();
 8001684:	f000 fb58 	bl	8001d38 <MX_I2C1_Init>
  MX_RTC_Init();
 8001688:	f000 fb94 	bl	8001db4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 800168c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001690:	49bb      	ldr	r1, [pc, #748]	; (8001980 <main+0x34c>)
 8001692:	48bc      	ldr	r0, [pc, #752]	; (8001984 <main+0x350>)
 8001694:	f001 fdd2 	bl	800323c <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim2);
 8001698:	48bb      	ldr	r0, [pc, #748]	; (8001988 <main+0x354>)
 800169a:	f005 fae5 	bl	8006c68 <HAL_TIM_Base_Start>

	hx711_init(&loadcell, GPIOB, GPIO_PIN_5, GPIOB, GPIO_PIN_0);
 800169e:	2301      	movs	r3, #1
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	4bba      	ldr	r3, [pc, #744]	; (800198c <main+0x358>)
 80016a4:	2220      	movs	r2, #32
 80016a6:	49b9      	ldr	r1, [pc, #740]	; (800198c <main+0x358>)
 80016a8:	48b9      	ldr	r0, [pc, #740]	; (8001990 <main+0x35c>)
 80016aa:	f7ff fcc0 	bl	800102e <hx711_init>
	hx711_coef_set(&loadcell, 1000000); // read after calibration
 80016ae:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 8001994 <main+0x360>
 80016b2:	48b7      	ldr	r0, [pc, #732]	; (8001990 <main+0x35c>)
 80016b4:	f7ff fe16 	bl	80012e4 <hx711_coef_set>
	hx711_tare(&loadcell, 10);
 80016b8:	210a      	movs	r1, #10
 80016ba:	48b5      	ldr	r0, [pc, #724]	; (8001990 <main+0x35c>)
 80016bc:	f7ff fd87 	bl	80011ce <hx711_tare>

	MPU6050_Init();
 80016c0:	f7ff fe68 	bl	8001394 <MPU6050_Init>
	packet_queue* queue = create_queue();
 80016c4:	f000 fcf1 	bl	80020aa <create_queue>
 80016c8:	f8c7 0228 	str.w	r0, [r7, #552]	; 0x228


	//AROUND HERE WOULD BE BLUETOOTH INITIALIZATION
	if(set_state(&state, SEARCHING) == false)
 80016cc:	2103      	movs	r1, #3
 80016ce:	48ab      	ldr	r0, [pc, #684]	; (800197c <main+0x348>)
 80016d0:	f000 fd6a 	bl	80021a8 <set_state>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d101      	bne.n	80016de <main+0xaa>
	{
		Error_Handler();
 80016da:	f000 fce1 	bl	80020a0 <Error_Handler>
	}
	if(set_state(&state, CONNECTING) == false)
 80016de:	2104      	movs	r1, #4
 80016e0:	48a6      	ldr	r0, [pc, #664]	; (800197c <main+0x348>)
 80016e2:	f000 fd61 	bl	80021a8 <set_state>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d101      	bne.n	80016f0 <main+0xbc>
	{
		Error_Handler();
 80016ec:	f000 fcd8 	bl	80020a0 <Error_Handler>
	}
	if(set_state(&state, READY) == false)
 80016f0:	2105      	movs	r1, #5
 80016f2:	48a2      	ldr	r0, [pc, #648]	; (800197c <main+0x348>)
 80016f4:	f000 fd58 	bl	80021a8 <set_state>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d101      	bne.n	8001702 <main+0xce>
	{
		Error_Handler();
 80016fe:	f000 fccf 	bl	80020a0 <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	loadcellCounter=0;
 8001702:	2300      	movs	r3, #0
 8001704:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c

	while (1)
	{
		char transmitString[300]="";
 8001708:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	3304      	adds	r3, #4
 8001712:	f44f 7294 	mov.w	r2, #296	; 0x128
 8001716:	2100      	movs	r1, #0
 8001718:	4618      	mov	r0, r3
 800171a:	f006 fcb5 	bl	8008088 <memset>
		uint32_t time1 = HAL_GetTick();
 800171e:	f001 f93f 	bl	80029a0 <HAL_GetTick>
 8001722:	f8c7 0224 	str.w	r0, [r7, #548]	; 0x224
		sprintf(msg, "%i, ", time1);
 8001726:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800172a:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 800172e:	499a      	ldr	r1, [pc, #616]	; (8001998 <main+0x364>)
 8001730:	4618      	mov	r0, r3
 8001732:	f007 f9d5 	bl	8008ae0 <siprintf>
		strcat(transmitString,msg);
 8001736:	f507 7204 	add.w	r2, r7, #528	; 0x210
 800173a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800173e:	4611      	mov	r1, r2
 8001740:	4618      	mov	r0, r3
 8001742:	f007 f9ed 	bl	8008b20 <strcat>
		char _date[100];

		RTC_DateTypeDef gDate;
		RTC_TimeTypeDef gTime;
		/* Get the RTC current Time */
		HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8001746:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 800174a:	2200      	movs	r2, #0
 800174c:	4619      	mov	r1, r3
 800174e:	4893      	ldr	r0, [pc, #588]	; (800199c <main+0x368>)
 8001750:	f005 f84f 	bl	80067f2 <HAL_RTC_GetTime>
		/* Get the RTC current Date */
		HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8001754:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001758:	2200      	movs	r2, #0
 800175a:	4619      	mov	r1, r3
 800175c:	488f      	ldr	r0, [pc, #572]	; (800199c <main+0x368>)
 800175e:	f005 f952 	bl	8006a06 <HAL_RTC_GetDate>
		/* Display time Format: hh:mm:ss */
		sprintf((char*)_time,"%02d:%02d:%02d",gTime.Hours, gTime.Minutes, gTime.Seconds);
 8001762:	f897 31f4 	ldrb.w	r3, [r7, #500]	; 0x1f4
 8001766:	461a      	mov	r2, r3
 8001768:	f897 31f5 	ldrb.w	r3, [r7, #501]	; 0x1f5
 800176c:	4619      	mov	r1, r3
 800176e:	f897 31f6 	ldrb.w	r3, [r7, #502]	; 0x1f6
 8001772:	4638      	mov	r0, r7
 8001774:	9300      	str	r3, [sp, #0]
 8001776:	460b      	mov	r3, r1
 8001778:	4989      	ldr	r1, [pc, #548]	; (80019a0 <main+0x36c>)
 800177a:	f007 f9b1 	bl	8008ae0 <siprintf>
		/* Display date Format: dd-mm-yy */
		sprintf((char*)_date,"%02d-%02d-%2d",gDate.Date, gDate.Month, 2000 + gDate.Year);
 800177e:	f897 320a 	ldrb.w	r3, [r7, #522]	; 0x20a
 8001782:	461a      	mov	r2, r3
 8001784:	f897 3209 	ldrb.w	r3, [r7, #521]	; 0x209
 8001788:	4619      	mov	r1, r3
 800178a:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 800178e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001792:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8001796:	9300      	str	r3, [sp, #0]
 8001798:	460b      	mov	r3, r1
 800179a:	4982      	ldr	r1, [pc, #520]	; (80019a4 <main+0x370>)
 800179c:	f007 f9a0 	bl	8008ae0 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)_time, strlen(_time), HAL_MAX_DELAY);
 80017a0:	463b      	mov	r3, r7
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7fe fcec 	bl	8000180 <strlen>
 80017a8:	4603      	mov	r3, r0
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	4639      	mov	r1, r7
 80017ae:	f04f 33ff 	mov.w	r3, #4294967295
 80017b2:	487d      	ldr	r0, [pc, #500]	; (80019a8 <main+0x374>)
 80017b4:	f005 fed4 	bl	8007560 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t*)_date, strlen(_date), HAL_MAX_DELAY);
 80017b8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80017bc:	4618      	mov	r0, r3
 80017be:	f7fe fcdf 	bl	8000180 <strlen>
 80017c2:	4603      	mov	r3, r0
 80017c4:	b29a      	uxth	r2, r3
 80017c6:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80017ca:	f04f 33ff 	mov.w	r3, #4294967295
 80017ce:	4876      	ldr	r0, [pc, #472]	; (80019a8 <main+0x374>)
 80017d0:	f005 fec6 	bl	8007560 <HAL_UART_Transmit>

		HAL_Delay(2000);
 80017d4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80017d8:	f001 f8fa 	bl	80029d0 <HAL_Delay>
		//Get ADC value

		sConfig.Channel= ADC_CHANNEL_9;
 80017dc:	4b73      	ldr	r3, [pc, #460]	; (80019ac <main+0x378>)
 80017de:	4a74      	ldr	r2, [pc, #464]	; (80019b0 <main+0x37c>)
 80017e0:	601a      	str	r2, [r3, #0]
		HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80017e2:	4972      	ldr	r1, [pc, #456]	; (80019ac <main+0x378>)
 80017e4:	4867      	ldr	r0, [pc, #412]	; (8001984 <main+0x350>)
 80017e6:	f001 fdcb 	bl	8003380 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc1);
 80017ea:	4866      	ldr	r0, [pc, #408]	; (8001984 <main+0x350>)
 80017ec:	f001 fc20 	bl	8003030 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80017f0:	f04f 31ff 	mov.w	r1, #4294967295
 80017f4:	4863      	ldr	r0, [pc, #396]	; (8001984 <main+0x350>)
 80017f6:	f001 fc94 	bl	8003122 <HAL_ADC_PollForConversion>
		raw_ecg_val = HAL_ADC_GetValue(&hadc1);
 80017fa:	4862      	ldr	r0, [pc, #392]	; (8001984 <main+0x350>)
 80017fc:	f001 fd94 	bl	8003328 <HAL_ADC_GetValue>
 8001800:	4603      	mov	r3, r0
 8001802:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
		HAL_ADC_Stop(&hadc1);
 8001806:	485f      	ldr	r0, [pc, #380]	; (8001984 <main+0x350>)
 8001808:	f001 fc58 	bl	80030bc <HAL_ADC_Stop>

		global_flags.ecg_ready = 0x01;
 800180c:	4a69      	ldr	r2, [pc, #420]	; (80019b4 <main+0x380>)
 800180e:	7853      	ldrb	r3, [r2, #1]
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	7053      	strb	r3, [r2, #1]

		//Convert to string and print
		sprintf(msg, "%hu, ", raw_ecg_val);
 8001816:	f8b7 2222 	ldrh.w	r2, [r7, #546]	; 0x222
 800181a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800181e:	4966      	ldr	r1, [pc, #408]	; (80019b8 <main+0x384>)
 8001820:	4618      	mov	r0, r3
 8001822:	f007 f95d 	bl	8008ae0 <siprintf>
		strcat(transmitString,msg);
 8001826:	f507 7204 	add.w	r2, r7, #528	; 0x210
 800182a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800182e:	4611      	mov	r1, r2
 8001830:	4618      	mov	r0, r3
 8001832:	f007 f975 	bl	8008b20 <strcat>



		//	 //Get ADC value
		sConfig.Channel= ADC_CHANNEL_5;
 8001836:	4b5d      	ldr	r3, [pc, #372]	; (80019ac <main+0x378>)
 8001838:	4a60      	ldr	r2, [pc, #384]	; (80019bc <main+0x388>)
 800183a:	601a      	str	r2, [r3, #0]
		HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800183c:	495b      	ldr	r1, [pc, #364]	; (80019ac <main+0x378>)
 800183e:	4851      	ldr	r0, [pc, #324]	; (8001984 <main+0x350>)
 8001840:	f001 fd9e 	bl	8003380 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc1);
 8001844:	484f      	ldr	r0, [pc, #316]	; (8001984 <main+0x350>)
 8001846:	f001 fbf3 	bl	8003030 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800184a:	f04f 31ff 	mov.w	r1, #4294967295
 800184e:	484d      	ldr	r0, [pc, #308]	; (8001984 <main+0x350>)
 8001850:	f001 fc67 	bl	8003122 <HAL_ADC_PollForConversion>
		raw_heart_val = HAL_ADC_GetValue(&hadc1);
 8001854:	484b      	ldr	r0, [pc, #300]	; (8001984 <main+0x350>)
 8001856:	f001 fd67 	bl	8003328 <HAL_ADC_GetValue>
 800185a:	4603      	mov	r3, r0
 800185c:	f8a7 3220 	strh.w	r3, [r7, #544]	; 0x220
		HAL_ADC_Stop(&hadc1);
 8001860:	4848      	ldr	r0, [pc, #288]	; (8001984 <main+0x350>)
 8001862:	f001 fc2b 	bl	80030bc <HAL_ADC_Stop>

		global_flags.emg_ready = 0x01;
 8001866:	4a53      	ldr	r2, [pc, #332]	; (80019b4 <main+0x380>)
 8001868:	7853      	ldrb	r3, [r2, #1]
 800186a:	f043 0302 	orr.w	r3, r3, #2
 800186e:	7053      	strb	r3, [r2, #1]

		//Convert to string and print
		sprintf(msg, "%hu, ", raw_heart_val);
 8001870:	f8b7 2220 	ldrh.w	r2, [r7, #544]	; 0x220
 8001874:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001878:	494f      	ldr	r1, [pc, #316]	; (80019b8 <main+0x384>)
 800187a:	4618      	mov	r0, r3
 800187c:	f007 f930 	bl	8008ae0 <siprintf>
		strcat(transmitString,msg);
 8001880:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8001884:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001888:	4611      	mov	r1, r2
 800188a:	4618      	mov	r0, r3
 800188c:	f007 f948 	bl	8008b20 <strcat>


		//Read from the accelerometer and Gyroscope
		// read the Accelerometer and Gyro values

		MPU6050_Read_Accel();
 8001890:	f7ff fdd6 	bl	8001440 <MPU6050_Read_Accel>
		MPU6050_Read_Gyro();
 8001894:	f7ff fe50 	bl	8001538 <MPU6050_Read_Gyro>

		pl.accelx_s[sample_cnt] = Ax;
 8001898:	4b49      	ldr	r3, [pc, #292]	; (80019c0 <main+0x38c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a49      	ldr	r2, [pc, #292]	; (80019c4 <main+0x390>)
 800189e:	6812      	ldr	r2, [r2, #0]
 80018a0:	4949      	ldr	r1, [pc, #292]	; (80019c8 <main+0x394>)
 80018a2:	3320      	adds	r3, #32
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	440b      	add	r3, r1
 80018a8:	3304      	adds	r3, #4
 80018aa:	601a      	str	r2, [r3, #0]
		pl.accely_s[sample_cnt] = Ay;
 80018ac:	4b44      	ldr	r3, [pc, #272]	; (80019c0 <main+0x38c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a46      	ldr	r2, [pc, #280]	; (80019cc <main+0x398>)
 80018b2:	6812      	ldr	r2, [r2, #0]
 80018b4:	4944      	ldr	r1, [pc, #272]	; (80019c8 <main+0x394>)
 80018b6:	3340      	adds	r3, #64	; 0x40
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	440b      	add	r3, r1
 80018bc:	3304      	adds	r3, #4
 80018be:	601a      	str	r2, [r3, #0]
		pl.gyrox_s[sample_cnt] = Gx;
 80018c0:	4b3f      	ldr	r3, [pc, #252]	; (80019c0 <main+0x38c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a42      	ldr	r2, [pc, #264]	; (80019d0 <main+0x39c>)
 80018c6:	6812      	ldr	r2, [r2, #0]
 80018c8:	493f      	ldr	r1, [pc, #252]	; (80019c8 <main+0x394>)
 80018ca:	3360      	adds	r3, #96	; 0x60
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	440b      	add	r3, r1
 80018d0:	3304      	adds	r3, #4
 80018d2:	601a      	str	r2, [r3, #0]
		pl.gyroy_s[sample_cnt] = Gy;
 80018d4:	4b3a      	ldr	r3, [pc, #232]	; (80019c0 <main+0x38c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a3e      	ldr	r2, [pc, #248]	; (80019d4 <main+0x3a0>)
 80018da:	6812      	ldr	r2, [r2, #0]
 80018dc:	493a      	ldr	r1, [pc, #232]	; (80019c8 <main+0x394>)
 80018de:	3380      	adds	r3, #128	; 0x80
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	440b      	add	r3, r1
 80018e4:	3304      	adds	r3, #4
 80018e6:	601a      	str	r2, [r3, #0]

		global_flags.accel_ready = 0x01;
 80018e8:	4a32      	ldr	r2, [pc, #200]	; (80019b4 <main+0x380>)
 80018ea:	7853      	ldrb	r3, [r2, #1]
 80018ec:	f043 0308 	orr.w	r3, r3, #8
 80018f0:	7053      	strb	r3, [r2, #1]
		global_flags.gyro_ready = 0x01;
 80018f2:	4a30      	ldr	r2, [pc, #192]	; (80019b4 <main+0x380>)
 80018f4:	7853      	ldrb	r3, [r2, #1]
 80018f6:	f043 0310 	orr.w	r3, r3, #16
 80018fa:	7053      	strb	r3, [r2, #1]

		// print the Acceleration and Gyro values on the LCD 20x4

		sprintf(buf, "%f, ", Ax);
 80018fc:	4b31      	ldr	r3, [pc, #196]	; (80019c4 <main+0x390>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4618      	mov	r0, r3
 8001902:	f7fe fdf9 	bl	80004f8 <__aeabi_f2d>
 8001906:	4602      	mov	r2, r0
 8001908:	460b      	mov	r3, r1
 800190a:	f507 7003 	add.w	r0, r7, #524	; 0x20c
 800190e:	4932      	ldr	r1, [pc, #200]	; (80019d8 <main+0x3a4>)
 8001910:	f007 f8e6 	bl	8008ae0 <siprintf>
		strcat(transmitString,buf);
 8001914:	f507 7203 	add.w	r2, r7, #524	; 0x20c
 8001918:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800191c:	4611      	mov	r1, r2
 800191e:	4618      	mov	r0, r3
 8001920:	f007 f8fe 	bl	8008b20 <strcat>
		sprintf(buf, "%f, ", Ay);
 8001924:	4b29      	ldr	r3, [pc, #164]	; (80019cc <main+0x398>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4618      	mov	r0, r3
 800192a:	f7fe fde5 	bl	80004f8 <__aeabi_f2d>
 800192e:	4602      	mov	r2, r0
 8001930:	460b      	mov	r3, r1
 8001932:	f507 7003 	add.w	r0, r7, #524	; 0x20c
 8001936:	4928      	ldr	r1, [pc, #160]	; (80019d8 <main+0x3a4>)
 8001938:	f007 f8d2 	bl	8008ae0 <siprintf>
		strcat(transmitString,buf);
 800193c:	f507 7203 	add.w	r2, r7, #524	; 0x20c
 8001940:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001944:	4611      	mov	r1, r2
 8001946:	4618      	mov	r0, r3
 8001948:	f007 f8ea 	bl	8008b20 <strcat>
		sprintf(buf, "%f, ", Az);
 800194c:	4b23      	ldr	r3, [pc, #140]	; (80019dc <main+0x3a8>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f7fe fdd1 	bl	80004f8 <__aeabi_f2d>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	f507 7003 	add.w	r0, r7, #524	; 0x20c
 800195e:	491e      	ldr	r1, [pc, #120]	; (80019d8 <main+0x3a4>)
 8001960:	f007 f8be 	bl	8008ae0 <siprintf>
		strcat(transmitString,buf);
 8001964:	f507 7203 	add.w	r2, r7, #524	; 0x20c
 8001968:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800196c:	4611      	mov	r1, r2
 800196e:	4618      	mov	r0, r3
 8001970:	f007 f8d6 	bl	8008b20 <strcat>
		sprintf(buf, "%f, ", Gx);
 8001974:	4b16      	ldr	r3, [pc, #88]	; (80019d0 <main+0x39c>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4618      	mov	r0, r3
 800197a:	e031      	b.n	80019e0 <main+0x3ac>
 800197c:	20000560 	.word	0x20000560
 8001980:	2000097c 	.word	0x2000097c
 8001984:	20000570 	.word	0x20000570
 8001988:	20000214 	.word	0x20000214
 800198c:	48000400 	.word	0x48000400
 8001990:	20000548 	.word	0x20000548
 8001994:	49742400 	.word	0x49742400
 8001998:	0800adc8 	.word	0x0800adc8
 800199c:	20000940 	.word	0x20000940
 80019a0:	0800add0 	.word	0x0800add0
 80019a4:	0800ade0 	.word	0x0800ade0
 80019a8:	200005c8 	.word	0x200005c8
 80019ac:	2000096c 	.word	0x2000096c
 80019b0:	24000200 	.word	0x24000200
 80019b4:	20000264 	.word	0x20000264
 80019b8:	0800adf0 	.word	0x0800adf0
 80019bc:	14000020 	.word	0x14000020
 80019c0:	200005c4 	.word	0x200005c4
 80019c4:	20000964 	.word	0x20000964
 80019c8:	20000658 	.word	0x20000658
 80019cc:	20000564 	.word	0x20000564
 80019d0:	20000260 	.word	0x20000260
 80019d4:	2000056c 	.word	0x2000056c
 80019d8:	0800adf8 	.word	0x0800adf8
 80019dc:	20000968 	.word	0x20000968
 80019e0:	f7fe fd8a 	bl	80004f8 <__aeabi_f2d>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	f507 7003 	add.w	r0, r7, #524	; 0x20c
 80019ec:	495d      	ldr	r1, [pc, #372]	; (8001b64 <main+0x530>)
 80019ee:	f007 f877 	bl	8008ae0 <siprintf>
		strcat(transmitString,buf);
 80019f2:	f507 7203 	add.w	r2, r7, #524	; 0x20c
 80019f6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80019fa:	4611      	mov	r1, r2
 80019fc:	4618      	mov	r0, r3
 80019fe:	f007 f88f 	bl	8008b20 <strcat>
		sprintf(buf, "%f, ", Gy);
 8001a02:	4b59      	ldr	r3, [pc, #356]	; (8001b68 <main+0x534>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7fe fd76 	bl	80004f8 <__aeabi_f2d>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	f507 7003 	add.w	r0, r7, #524	; 0x20c
 8001a14:	4953      	ldr	r1, [pc, #332]	; (8001b64 <main+0x530>)
 8001a16:	f007 f863 	bl	8008ae0 <siprintf>
		strcat(transmitString,buf);
 8001a1a:	f507 7203 	add.w	r2, r7, #524	; 0x20c
 8001a1e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001a22:	4611      	mov	r1, r2
 8001a24:	4618      	mov	r0, r3
 8001a26:	f007 f87b 	bl	8008b20 <strcat>
		sprintf(buf, "%f, ", Gz);
 8001a2a:	4b50      	ldr	r3, [pc, #320]	; (8001b6c <main+0x538>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7fe fd62 	bl	80004f8 <__aeabi_f2d>
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	f507 7003 	add.w	r0, r7, #524	; 0x20c
 8001a3c:	4949      	ldr	r1, [pc, #292]	; (8001b64 <main+0x530>)
 8001a3e:	f007 f84f 	bl	8008ae0 <siprintf>
		strcat(transmitString,buf);
 8001a42:	f507 7203 	add.w	r2, r7, #524	; 0x20c
 8001a46:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001a4a:	4611      	mov	r1, r2
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f007 f867 	bl	8008b20 <strcat>

		// Get value from the load cell amplifier
		//Only read the load cell value every 10000 samples
		loadcellCounter++;
 8001a52:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001a56:	3301      	adds	r3, #1
 8001a58:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
		if(loadcellCounter > 10000){
 8001a5c:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001a60:	f242 7210 	movw	r2, #10000	; 0x2710
 8001a64:	4293      	cmp	r3, r2
 8001a66:	dd1b      	ble.n	8001aa0 <main+0x46c>
			weight = hx711_weight(&loadcell, 10);
 8001a68:	210a      	movs	r1, #10
 8001a6a:	4841      	ldr	r0, [pc, #260]	; (8001b70 <main+0x53c>)
 8001a6c:	f7ff fbeb 	bl	8001246 <hx711_weight>
 8001a70:	ed87 0a87 	vstr	s0, [r7, #540]	; 0x21c
			global_flags.force_ready == 0x01;

			//Convert to string and print
			sprintf(msg, "  %f,", weight);
 8001a74:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 8001a78:	f7fe fd3e 	bl	80004f8 <__aeabi_f2d>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	f507 7004 	add.w	r0, r7, #528	; 0x210
 8001a84:	493b      	ldr	r1, [pc, #236]	; (8001b74 <main+0x540>)
 8001a86:	f007 f82b 	bl	8008ae0 <siprintf>
			strcat(transmitString,msg);
 8001a8a:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8001a8e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001a92:	4611      	mov	r1, r2
 8001a94:	4618      	mov	r0, r3
 8001a96:	f007 f843 	bl	8008b20 <strcat>
			loadcellCounter = 0;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
		}

		sprintf(msg, "%\r\n");
 8001aa0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001aa4:	4934      	ldr	r1, [pc, #208]	; (8001b78 <main+0x544>)
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f007 f81a 	bl	8008ae0 <siprintf>
		strcat(transmitString,msg);
 8001aac:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8001ab0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001ab4:	4611      	mov	r1, r2
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f007 f832 	bl	8008b20 <strcat>
		HAL_UART_Transmit(&huart1, (uint8_t*)transmitString, strlen(transmitString), HAL_MAX_DELAY);
 8001abc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7fe fb5d 	bl	8000180 <strlen>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8001ace:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad2:	482a      	ldr	r0, [pc, #168]	; (8001b7c <main+0x548>)
 8001ad4:	f005 fd44 	bl	8007560 <HAL_UART_Transmit>


		if(sample_cnt % 32 == 0 && global_flags.sensor_contents >= 0x01) //32 loops have occurred and at least 1 sensor has 1 value in it
 8001ad8:	4b29      	ldr	r3, [pc, #164]	; (8001b80 <main+0x54c>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 031f 	and.w	r3, r3, #31
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d139      	bne.n	8001b58 <main+0x524>
 8001ae4:	4b27      	ldr	r3, [pc, #156]	; (8001b84 <main+0x550>)
 8001ae6:	785b      	ldrb	r3, [r3, #1]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d035      	beq.n	8001b58 <main+0x524>
		{
			pl.payload_size = global_flags.sensor_contents; //bit mask
 8001aec:	4b25      	ldr	r3, [pc, #148]	; (8001b84 <main+0x550>)
 8001aee:	785a      	ldrb	r2, [r3, #1]
 8001af0:	4b25      	ldr	r3, [pc, #148]	; (8001b88 <main+0x554>)
 8001af2:	f883 2284 	strb.w	r2, [r3, #644]	; 0x284
			pkt.payload = pl;
 8001af6:	4b25      	ldr	r3, [pc, #148]	; (8001b8c <main+0x558>)
 8001af8:	4a23      	ldr	r2, [pc, #140]	; (8001b88 <main+0x554>)
 8001afa:	3304      	adds	r3, #4
 8001afc:	4611      	mov	r1, r2
 8001afe:	f44f 7222 	mov.w	r2, #648	; 0x288
 8001b02:	4618      	mov	r0, r3
 8001b04:	f006 fab2 	bl	800806c <memcpy>
			pkt.state = (uint8_t) state; //save the current state;
 8001b08:	4b21      	ldr	r3, [pc, #132]	; (8001b90 <main+0x55c>)
 8001b0a:	f993 3000 	ldrsb.w	r3, [r3]
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	b2d9      	uxtb	r1, r3
 8001b14:	4a1d      	ldr	r2, [pc, #116]	; (8001b8c <main+0x558>)
 8001b16:	7813      	ldrb	r3, [r2, #0]
 8001b18:	f361 0303 	bfi	r3, r1, #0, #4
 8001b1c:	7013      	strb	r3, [r2, #0]
			pkt.packet_size = sizeof(packet_t);
 8001b1e:	4b1b      	ldr	r3, [pc, #108]	; (8001b8c <main+0x558>)
 8001b20:	f44f 7225 	mov.w	r2, #660	; 0x294
 8001b24:	f8a3 2290 	strh.w	r2, [r3, #656]	; 0x290
			pkt.packet_num = sample_cnt;
 8001b28:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <main+0x54c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	4b17      	ldr	r3, [pc, #92]	; (8001b8c <main+0x558>)
 8001b30:	f8a3 228e 	strh.w	r2, [r3, #654]	; 0x28e

			add_packet(queue, pkt); //add packet to queue
 8001b34:	4c15      	ldr	r4, [pc, #84]	; (8001b8c <main+0x558>)
 8001b36:	4668      	mov	r0, sp
 8001b38:	f104 030c 	add.w	r3, r4, #12
 8001b3c:	f44f 7222 	mov.w	r2, #648	; 0x288
 8001b40:	4619      	mov	r1, r3
 8001b42:	f006 fa93 	bl	800806c <memcpy>
 8001b46:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001b4a:	f8d7 0228 	ldr.w	r0, [r7, #552]	; 0x228
 8001b4e:	f000 fae5 	bl	800211c <add_packet>

			global_flags.sensor_contents = 0x00; //reset all packet ready values
 8001b52:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <main+0x550>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	705a      	strb	r2, [r3, #1]
		}

		sample_cnt ++;
 8001b58:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <main+0x54c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	4a08      	ldr	r2, [pc, #32]	; (8001b80 <main+0x54c>)
 8001b60:	6013      	str	r3, [r2, #0]
	{
 8001b62:	e5d1      	b.n	8001708 <main+0xd4>
 8001b64:	0800adf8 	.word	0x0800adf8
 8001b68:	2000056c 	.word	0x2000056c
 8001b6c:	2000297c 	.word	0x2000297c
 8001b70:	20000548 	.word	0x20000548
 8001b74:	0800ae00 	.word	0x0800ae00
 8001b78:	0800ae08 	.word	0x0800ae08
 8001b7c:	200005c8 	.word	0x200005c8
 8001b80:	200005c4 	.word	0x200005c4
 8001b84:	20000264 	.word	0x20000264
 8001b88:	20000658 	.word	0x20000658
 8001b8c:	20000268 	.word	0x20000268
 8001b90:	20000560 	.word	0x20000560

08001b94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b0a4      	sub	sp, #144	; 0x90
 8001b98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b9a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b9e:	2244      	movs	r2, #68	; 0x44
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f006 fa70 	bl	8008088 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ba8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
 8001bb6:	611a      	str	r2, [r3, #16]
 8001bb8:	615a      	str	r2, [r3, #20]
 8001bba:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bbc:	463b      	mov	r3, r7
 8001bbe:	2230      	movs	r2, #48	; 0x30
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f006 fa60 	bl	8008088 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001bc8:	f003 f902 	bl	8004dd0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001bcc:	2000      	movs	r0, #0
 8001bce:	f7ff fb98 	bl	8001302 <LL_RCC_LSE_SetDriveCapability>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8001bd2:	2326      	movs	r3, #38	; 0x26
 8001bd4:	64fb      	str	r3, [r7, #76]	; 0x4c
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bde:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001be0:	2301      	movs	r3, #1
 8001be2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001be4:	2340      	movs	r3, #64	; 0x40
 8001be6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001be8:	2300      	movs	r3, #0
 8001bea:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001bec:	2360      	movs	r3, #96	; 0x60
 8001bee:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bf4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f003 fc47 	bl	800548c <HAL_RCC_OscConfig>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001c04:	f000 fa4c 	bl	80020a0 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001c08:	236f      	movs	r3, #111	; 0x6f
 8001c0a:	633b      	str	r3, [r7, #48]	; 0x30
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c10:	2300      	movs	r3, #0
 8001c12:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c14:	2300      	movs	r3, #0
 8001c16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001c20:	2300      	movs	r3, #0
 8001c22:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001c24:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c28:	2100      	movs	r1, #0
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f003 ff7c 	bl	8005b28 <HAL_RCC_ClockConfig>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001c36:	f000 fa33 	bl	80020a0 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RTC
 8001c3a:	f642 4305 	movw	r3, #11269	; 0x2c05
 8001c3e:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001c40:	2300      	movs	r3, #0
 8001c42:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001c44:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001c48:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_HSI;
 8001c4a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001c4e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001c50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c54:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001c56:	2300      	movs	r3, #0
 8001c58:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001c5a:	2310      	movs	r3, #16
 8001c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c5e:	463b      	mov	r3, r7
 8001c60:	4618      	mov	r0, r3
 8001c62:	f004 fb68 	bl	8006336 <HAL_RCCEx_PeriphCLKConfig>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8001c6c:	f000 fa18 	bl	80020a0 <Error_Handler>
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001c70:	f004 fc57 	bl	8006522 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001c74:	bf00      	nop
 8001c76:	3790      	adds	r7, #144	; 0x90
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c82:	1d3b      	adds	r3, r7, #4
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001c8c:	4b27      	ldr	r3, [pc, #156]	; (8001d2c <MX_ADC1_Init+0xb0>)
 8001c8e:	4a28      	ldr	r2, [pc, #160]	; (8001d30 <MX_ADC1_Init+0xb4>)
 8001c90:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001c92:	4b26      	ldr	r3, [pc, #152]	; (8001d2c <MX_ADC1_Init+0xb0>)
 8001c94:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001c98:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8001c9a:	4b24      	ldr	r3, [pc, #144]	; (8001d2c <MX_ADC1_Init+0xb0>)
 8001c9c:	2210      	movs	r2, #16
 8001c9e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ca0:	4b22      	ldr	r3, [pc, #136]	; (8001d2c <MX_ADC1_Init+0xb0>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001ca6:	4b21      	ldr	r3, [pc, #132]	; (8001d2c <MX_ADC1_Init+0xb0>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001cac:	4b1f      	ldr	r3, [pc, #124]	; (8001d2c <MX_ADC1_Init+0xb0>)
 8001cae:	2204      	movs	r2, #4
 8001cb0:	615a      	str	r2, [r3, #20]
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8001cb2:	4b1e      	ldr	r3, [pc, #120]	; (8001d2c <MX_ADC1_Init+0xb0>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8001cb8:	4b1c      	ldr	r3, [pc, #112]	; (8001d2c <MX_ADC1_Init+0xb0>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001cbe:	4b1b      	ldr	r3, [pc, #108]	; (8001d2c <MX_ADC1_Init+0xb0>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001cc4:	4b19      	ldr	r3, [pc, #100]	; (8001d2c <MX_ADC1_Init+0xb0>)
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8001cca:	4b18      	ldr	r3, [pc, #96]	; (8001d2c <MX_ADC1_Init+0xb0>)
 8001ccc:	2201      	movs	r2, #1
 8001cce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001cd0:	4b16      	ldr	r3, [pc, #88]	; (8001d2c <MX_ADC1_Init+0xb0>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001cd8:	4b14      	ldr	r3, [pc, #80]	; (8001d2c <MX_ADC1_Init+0xb0>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001cde:	4b13      	ldr	r3, [pc, #76]	; (8001d2c <MX_ADC1_Init+0xb0>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001ce4:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <MX_ADC1_Init+0xb0>)
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001cec:	4b0f      	ldr	r3, [pc, #60]	; (8001d2c <MX_ADC1_Init+0xb0>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001cf2:	480e      	ldr	r0, [pc, #56]	; (8001d2c <MX_ADC1_Init+0xb0>)
 8001cf4:	f000 fffa 	bl	8002cec <HAL_ADC_Init>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001cfe:	f000 f9cf 	bl	80020a0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001d02:	4b0c      	ldr	r3, [pc, #48]	; (8001d34 <MX_ADC1_Init+0xb8>)
 8001d04:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d06:	2300      	movs	r3, #0
 8001d08:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d0e:	1d3b      	adds	r3, r7, #4
 8001d10:	4619      	mov	r1, r3
 8001d12:	4806      	ldr	r0, [pc, #24]	; (8001d2c <MX_ADC1_Init+0xb0>)
 8001d14:	f001 fb34 	bl	8003380 <HAL_ADC_ConfigChannel>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001d1e:	f000 f9bf 	bl	80020a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d22:	bf00      	nop
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	20000570 	.word	0x20000570
 8001d30:	40012400 	.word	0x40012400
 8001d34:	24000200 	.word	0x24000200

08001d38 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d3c:	4b1b      	ldr	r3, [pc, #108]	; (8001dac <MX_I2C1_Init+0x74>)
 8001d3e:	4a1c      	ldr	r2, [pc, #112]	; (8001db0 <MX_I2C1_Init+0x78>)
 8001d40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8001d42:	4b1a      	ldr	r3, [pc, #104]	; (8001dac <MX_I2C1_Init+0x74>)
 8001d44:	f640 6214 	movw	r2, #3604	; 0xe14
 8001d48:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001d4a:	4b18      	ldr	r3, [pc, #96]	; (8001dac <MX_I2C1_Init+0x74>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d50:	4b16      	ldr	r3, [pc, #88]	; (8001dac <MX_I2C1_Init+0x74>)
 8001d52:	2201      	movs	r2, #1
 8001d54:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d56:	4b15      	ldr	r3, [pc, #84]	; (8001dac <MX_I2C1_Init+0x74>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001d5c:	4b13      	ldr	r3, [pc, #76]	; (8001dac <MX_I2C1_Init+0x74>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d62:	4b12      	ldr	r3, [pc, #72]	; (8001dac <MX_I2C1_Init+0x74>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d68:	4b10      	ldr	r3, [pc, #64]	; (8001dac <MX_I2C1_Init+0x74>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d6e:	4b0f      	ldr	r3, [pc, #60]	; (8001dac <MX_I2C1_Init+0x74>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d74:	480d      	ldr	r0, [pc, #52]	; (8001dac <MX_I2C1_Init+0x74>)
 8001d76:	f002 faa9 	bl	80042cc <HAL_I2C_Init>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d80:	f000 f98e 	bl	80020a0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d84:	2100      	movs	r1, #0
 8001d86:	4809      	ldr	r0, [pc, #36]	; (8001dac <MX_I2C1_Init+0x74>)
 8001d88:	f002 ff8a 	bl	8004ca0 <HAL_I2CEx_ConfigAnalogFilter>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001d92:	f000 f985 	bl	80020a0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001d96:	2100      	movs	r1, #0
 8001d98:	4804      	ldr	r0, [pc, #16]	; (8001dac <MX_I2C1_Init+0x74>)
 8001d9a:	f002 ffcc 	bl	8004d36 <HAL_I2CEx_ConfigDigitalFilter>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001da4:	f000 f97c 	bl	80020a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001da8:	bf00      	nop
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	200004fc 	.word	0x200004fc
 8001db0:	40005400 	.word	0x40005400

08001db4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001dba:	1d3b      	adds	r3, r7, #4
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	60da      	str	r2, [r3, #12]
 8001dc6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001dc8:	2300      	movs	r3, #0
 8001dca:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001dcc:	4b25      	ldr	r3, [pc, #148]	; (8001e64 <MX_RTC_Init+0xb0>)
 8001dce:	4a26      	ldr	r2, [pc, #152]	; (8001e68 <MX_RTC_Init+0xb4>)
 8001dd0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001dd2:	4b24      	ldr	r3, [pc, #144]	; (8001e64 <MX_RTC_Init+0xb0>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001dd8:	4b22      	ldr	r3, [pc, #136]	; (8001e64 <MX_RTC_Init+0xb0>)
 8001dda:	227f      	movs	r2, #127	; 0x7f
 8001ddc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001dde:	4b21      	ldr	r3, [pc, #132]	; (8001e64 <MX_RTC_Init+0xb0>)
 8001de0:	22ff      	movs	r2, #255	; 0xff
 8001de2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001de4:	4b1f      	ldr	r3, [pc, #124]	; (8001e64 <MX_RTC_Init+0xb0>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001dea:	4b1e      	ldr	r3, [pc, #120]	; (8001e64 <MX_RTC_Init+0xb0>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001df0:	4b1c      	ldr	r3, [pc, #112]	; (8001e64 <MX_RTC_Init+0xb0>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001df6:	481b      	ldr	r0, [pc, #108]	; (8001e64 <MX_RTC_Init+0xb0>)
 8001df8:	f004 fb99 	bl	800652e <HAL_RTC_Init>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001e02:	f000 f94d 	bl	80020a0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001e06:	2300      	movs	r3, #0
 8001e08:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0x0;
 8001e12:	2300      	movs	r3, #0
 8001e14:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001e16:	2300      	movs	r3, #0
 8001e18:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001e1e:	1d3b      	adds	r3, r7, #4
 8001e20:	2201      	movs	r2, #1
 8001e22:	4619      	mov	r1, r3
 8001e24:	480f      	ldr	r0, [pc, #60]	; (8001e64 <MX_RTC_Init+0xb0>)
 8001e26:	f004 fc20 	bl	800666a <HAL_RTC_SetTime>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <MX_RTC_Init+0x80>
  {
    Error_Handler();
 8001e30:	f000 f936 	bl	80020a0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001e34:	2301      	movs	r3, #1
 8001e36:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001e40:	2300      	movs	r3, #0
 8001e42:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001e44:	463b      	mov	r3, r7
 8001e46:	2201      	movs	r2, #1
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4806      	ldr	r0, [pc, #24]	; (8001e64 <MX_RTC_Init+0xb0>)
 8001e4c:	f004 fd2d 	bl	80068aa <HAL_RTC_SetDate>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 8001e56:	f000 f923 	bl	80020a0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001e5a:	bf00      	nop
 8001e5c:	3718      	adds	r7, #24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	20000940 	.word	0x20000940
 8001e68:	40002800 	.word	0x40002800

08001e6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b088      	sub	sp, #32
 8001e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e72:	f107 0310 	add.w	r3, r7, #16
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	605a      	str	r2, [r3, #4]
 8001e7c:	609a      	str	r2, [r3, #8]
 8001e7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e80:	1d3b      	adds	r3, r7, #4
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	605a      	str	r2, [r3, #4]
 8001e88:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e8a:	4b1e      	ldr	r3, [pc, #120]	; (8001f04 <MX_TIM2_Init+0x98>)
 8001e8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e90:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 8001e92:	4b1c      	ldr	r3, [pc, #112]	; (8001f04 <MX_TIM2_Init+0x98>)
 8001e94:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001e98:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e9a:	4b1a      	ldr	r3, [pc, #104]	; (8001f04 <MX_TIM2_Init+0x98>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8001ea0:	4b18      	ldr	r3, [pc, #96]	; (8001f04 <MX_TIM2_Init+0x98>)
 8001ea2:	f242 720f 	movw	r2, #9999	; 0x270f
 8001ea6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ea8:	4b16      	ldr	r3, [pc, #88]	; (8001f04 <MX_TIM2_Init+0x98>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eae:	4b15      	ldr	r3, [pc, #84]	; (8001f04 <MX_TIM2_Init+0x98>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001eb4:	4813      	ldr	r0, [pc, #76]	; (8001f04 <MX_TIM2_Init+0x98>)
 8001eb6:	f004 fe7f 	bl	8006bb8 <HAL_TIM_Base_Init>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001ec0:	f000 f8ee 	bl	80020a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ec4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ec8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001eca:	f107 0310 	add.w	r3, r7, #16
 8001ece:	4619      	mov	r1, r3
 8001ed0:	480c      	ldr	r0, [pc, #48]	; (8001f04 <MX_TIM2_Init+0x98>)
 8001ed2:	f005 f87c 	bl	8006fce <HAL_TIM_ConfigClockSource>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001edc:	f000 f8e0 	bl	80020a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ee8:	1d3b      	adds	r3, r7, #4
 8001eea:	4619      	mov	r1, r3
 8001eec:	4805      	ldr	r0, [pc, #20]	; (8001f04 <MX_TIM2_Init+0x98>)
 8001eee:	f005 fa49 	bl	8007384 <HAL_TIMEx_MasterConfigSynchronization>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001ef8:	f000 f8d2 	bl	80020a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001efc:	bf00      	nop
 8001efe:	3720      	adds	r7, #32
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	20000214 	.word	0x20000214

08001f08 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f0c:	4b23      	ldr	r3, [pc, #140]	; (8001f9c <MX_USART1_UART_Init+0x94>)
 8001f0e:	4a24      	ldr	r2, [pc, #144]	; (8001fa0 <MX_USART1_UART_Init+0x98>)
 8001f10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f12:	4b22      	ldr	r3, [pc, #136]	; (8001f9c <MX_USART1_UART_Init+0x94>)
 8001f14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f1a:	4b20      	ldr	r3, [pc, #128]	; (8001f9c <MX_USART1_UART_Init+0x94>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f20:	4b1e      	ldr	r3, [pc, #120]	; (8001f9c <MX_USART1_UART_Init+0x94>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8001f26:	4b1d      	ldr	r3, [pc, #116]	; (8001f9c <MX_USART1_UART_Init+0x94>)
 8001f28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f2c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f2e:	4b1b      	ldr	r3, [pc, #108]	; (8001f9c <MX_USART1_UART_Init+0x94>)
 8001f30:	220c      	movs	r2, #12
 8001f32:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f34:	4b19      	ldr	r3, [pc, #100]	; (8001f9c <MX_USART1_UART_Init+0x94>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f3a:	4b18      	ldr	r3, [pc, #96]	; (8001f9c <MX_USART1_UART_Init+0x94>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f40:	4b16      	ldr	r3, [pc, #88]	; (8001f9c <MX_USART1_UART_Init+0x94>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f46:	4b15      	ldr	r3, [pc, #84]	; (8001f9c <MX_USART1_UART_Init+0x94>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f4c:	4b13      	ldr	r3, [pc, #76]	; (8001f9c <MX_USART1_UART_Init+0x94>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f52:	4812      	ldr	r0, [pc, #72]	; (8001f9c <MX_USART1_UART_Init+0x94>)
 8001f54:	f005 fab4 	bl	80074c0 <HAL_UART_Init>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8001f5e:	f000 f89f 	bl	80020a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f62:	2100      	movs	r1, #0
 8001f64:	480d      	ldr	r0, [pc, #52]	; (8001f9c <MX_USART1_UART_Init+0x94>)
 8001f66:	f005 ff85 	bl	8007e74 <HAL_UARTEx_SetTxFifoThreshold>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8001f70:	f000 f896 	bl	80020a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f74:	2100      	movs	r1, #0
 8001f76:	4809      	ldr	r0, [pc, #36]	; (8001f9c <MX_USART1_UART_Init+0x94>)
 8001f78:	f005 ffba 	bl	8007ef0 <HAL_UARTEx_SetRxFifoThreshold>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8001f82:	f000 f88d 	bl	80020a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001f86:	4805      	ldr	r0, [pc, #20]	; (8001f9c <MX_USART1_UART_Init+0x94>)
 8001f88:	f005 ff3b 	bl	8007e02 <HAL_UARTEx_DisableFifoMode>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8001f92:	f000 f885 	bl	80020a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	200005c8 	.word	0x200005c8
 8001fa0:	40013800 	.word	0x40013800

08001fa4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001fa8:	2004      	movs	r0, #4
 8001faa:	f7ff f9c0 	bl	800132e <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001fae:	2001      	movs	r0, #1
 8001fb0:	f7ff f9bd 	bl	800132e <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	200b      	movs	r0, #11
 8001fba:	f001 fd81 	bl	8003ac0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001fbe:	200b      	movs	r0, #11
 8001fc0:	f001 fd98 	bl	8003af4 <HAL_NVIC_EnableIRQ>

}
 8001fc4:	bf00      	nop
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fce:	1d3b      	adds	r3, r7, #4
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	60da      	str	r2, [r3, #12]
 8001fda:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fdc:	2004      	movs	r0, #4
 8001fde:	f7ff f9bf 	bl	8001360 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fe2:	2002      	movs	r0, #2
 8001fe4:	f7ff f9bc 	bl	8001360 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe8:	2001      	movs	r0, #1
 8001fea:	f7ff f9b9 	bl	8001360 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001ff4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ff8:	f002 f950 	bl	800429c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	2120      	movs	r1, #32
 8002000:	481d      	ldr	r0, [pc, #116]	; (8002078 <MX_GPIO_Init+0xb0>)
 8002002:	f002 f94b 	bl	800429c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002006:	2301      	movs	r3, #1
 8002008:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800200a:	2300      	movs	r3, #0
 800200c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200e:	2300      	movs	r3, #0
 8002010:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002012:	1d3b      	adds	r3, r7, #4
 8002014:	4619      	mov	r1, r3
 8002016:	4818      	ldr	r0, [pc, #96]	; (8002078 <MX_GPIO_Init+0xb0>)
 8002018:	f001 ffc0 	bl	8003f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800201c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002020:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002022:	2301      	movs	r3, #1
 8002024:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002026:	2300      	movs	r3, #0
 8002028:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202a:	2300      	movs	r3, #0
 800202c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800202e:	1d3b      	adds	r3, r7, #4
 8002030:	4619      	mov	r1, r3
 8002032:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002036:	f001 ffb1 	bl	8003f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800203a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800203e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002040:	2300      	movs	r3, #0
 8002042:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002044:	2300      	movs	r3, #0
 8002046:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002048:	1d3b      	adds	r3, r7, #4
 800204a:	4619      	mov	r1, r3
 800204c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002050:	f001 ffa4 	bl	8003f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002054:	2320      	movs	r3, #32
 8002056:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002058:	2301      	movs	r3, #1
 800205a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205c:	2300      	movs	r3, #0
 800205e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002060:	2300      	movs	r3, #0
 8002062:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002064:	1d3b      	adds	r3, r7, #4
 8002066:	4619      	mov	r1, r3
 8002068:	4803      	ldr	r0, [pc, #12]	; (8002078 <MX_GPIO_Init+0xb0>)
 800206a:	f001 ff97 	bl	8003f9c <HAL_GPIO_Init>

}
 800206e:	bf00      	nop
 8002070:	3718      	adds	r7, #24
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	48000400 	.word	0x48000400

0800207c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a04      	ldr	r2, [pc, #16]	; (800209c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d101      	bne.n	8002092 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800208e:	f000 fc73 	bl	8002978 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002092:	bf00      	nop
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40012c00 	.word	0x40012c00

080020a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020a4:	b672      	cpsid	i
}
 80020a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80020a8:	e7fe      	b.n	80020a8 <Error_Handler+0x8>

080020aa <create_queue>:
 * Parameters:
 *
 * Return Value: packet_queue*
 -------------------------------------------*/
packet_queue* create_queue()
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b082      	sub	sp, #8
 80020ae:	af00      	add	r7, sp, #0
	packet_queue* new_queue = (packet_queue*)malloc(sizeof(packet_queue));
 80020b0:	200c      	movs	r0, #12
 80020b2:	f005 ffd3 	bl	800805c <malloc>
 80020b6:	4603      	mov	r3, r0
 80020b8:	607b      	str	r3, [r7, #4]
	new_queue->back = NULL;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	605a      	str	r2, [r3, #4]
	new_queue->front = NULL;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]
	new_queue->size = 0;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	811a      	strh	r2, [r3, #8]

	return new_queue;
 80020cc:	687b      	ldr	r3, [r7, #4]
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <add_node>:
 * Parameters: packet_t
 *
 * Return Value: packet_node*
 -------------------------------------------*/
packet_node* add_node(packet_t packet_info)
{
 80020d6:	b084      	sub	sp, #16
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	f107 0c10 	add.w	ip, r7, #16
 80020e2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	packet_node* new_node = (packet_node*)malloc(sizeof(packet_node));
 80020e6:	f44f 7026 	mov.w	r0, #664	; 0x298
 80020ea:	f005 ffb7 	bl	800805c <malloc>
 80020ee:	4603      	mov	r3, r0
 80020f0:	607b      	str	r3, [r7, #4]
	new_node->packet = packet_info;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f107 0310 	add.w	r3, r7, #16
 80020fa:	f44f 7225 	mov.w	r2, #660	; 0x294
 80020fe:	4619      	mov	r1, r3
 8002100:	f005 ffb4 	bl	800806c <memcpy>
	new_node->next_node = NULL;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

	return new_node;
 800210c:	687b      	ldr	r3, [r7, #4]
}
 800210e:	4618      	mov	r0, r3
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002118:	b004      	add	sp, #16
 800211a:	4770      	bx	lr

0800211c <add_packet>:
 * Parameters: packet_queue*, packet_t
 *
 * Return Value: void
 *-------------------------------------------*/
uint8_t add_packet(packet_queue* queue, packet_t packet)
{
 800211c:	b084      	sub	sp, #16
 800211e:	b580      	push	{r7, lr}
 8002120:	f5ad 7d26 	sub.w	sp, sp, #664	; 0x298
 8002124:	afa2      	add	r7, sp, #648	; 0x288
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	f107 001c 	add.w	r0, r7, #28
 800212c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if(queue->size >= MAX_QUEUE_SIZE)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	891b      	ldrh	r3, [r3, #8]
 8002134:	2b1f      	cmp	r3, #31
 8002136:	d901      	bls.n	800213c <add_packet+0x20>
	{
		return false;
 8002138:	2301      	movs	r3, #1
 800213a:	e02d      	b.n	8002198 <add_packet+0x7c>
	}
	else
	{
		packet_node* tmp_node = add_node(packet);
 800213c:	4668      	mov	r0, sp
 800213e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002142:	f44f 7221 	mov.w	r2, #644	; 0x284
 8002146:	4619      	mov	r1, r3
 8002148:	f005 ff90 	bl	800806c <memcpy>
 800214c:	f107 031c 	add.w	r3, r7, #28
 8002150:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002152:	f7ff ffc0 	bl	80020d6 <add_node>
 8002156:	60f8      	str	r0, [r7, #12]
		if(tmp_node == NULL)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <add_packet+0x46>
		{
			return false;
 800215e:	2301      	movs	r3, #1
 8002160:	e01a      	b.n	8002198 <add_packet+0x7c>
		}
		else
		{
			//Queue is empty
			if(queue->back == NULL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d107      	bne.n	800217a <add_packet+0x5e>
			{
				queue->front = tmp_node;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	601a      	str	r2, [r3, #0]
				queue->back  = queue->front;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	605a      	str	r2, [r3, #4]
 8002178:	e007      	b.n	800218a <add_packet+0x6e>
			}
			//Queue must have at least one value
			else
			{
				queue->back->next_node = tmp_node;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
				queue->back = tmp_node;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	605a      	str	r2, [r3, #4]
			}

			queue->size ++;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	891b      	ldrh	r3, [r3, #8]
 800218e:	3301      	adds	r3, #1
 8002190:	b29a      	uxth	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	811a      	strh	r2, [r3, #8]
			return true;
 8002196:	2300      	movs	r3, #0
		}
	}
}
 8002198:	4618      	mov	r0, r3
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80021a2:	b004      	add	sp, #16
 80021a4:	4770      	bx	lr
	...

080021a8 <set_state>:
 * Parameters: state_machine*, state_machine
 *
 * Return Value: bool
 *-------------------------------------------*/
bool set_state(state_machine* curr_state, state_machine new_state)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	460b      	mov	r3, r1
 80021b2:	70fb      	strb	r3, [r7, #3]
	switch(*curr_state)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f993 3000 	ldrsb.w	r3, [r3]
 80021ba:	2b06      	cmp	r3, #6
 80021bc:	d855      	bhi.n	800226a <set_state+0xc2>
 80021be:	a201      	add	r2, pc, #4	; (adr r2, 80021c4 <set_state+0x1c>)
 80021c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021c4:	080021e1 	.word	0x080021e1
 80021c8:	080021f7 	.word	0x080021f7
 80021cc:	0800220d 	.word	0x0800220d
 80021d0:	08002223 	.word	0x08002223
 80021d4:	08002239 	.word	0x08002239
 80021d8:	0800224f 	.word	0x0800224f
 80021dc:	08002265 	.word	0x08002265
	{
	case NONE:
		if(new_state == STARTUP)
 80021e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d104      	bne.n	80021f2 <set_state+0x4a>
		{
			*curr_state = new_state;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	78fa      	ldrb	r2, [r7, #3]
 80021ec:	701a      	strb	r2, [r3, #0]
			return true;
 80021ee:	2300      	movs	r3, #0
 80021f0:	e03c      	b.n	800226c <set_state+0xc4>
		}
		else
		{
			return false;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e03a      	b.n	800226c <set_state+0xc4>
		}
	case STARTUP:
		if(new_state == CONFIGURING)
 80021f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d104      	bne.n	8002208 <set_state+0x60>
		{
			*curr_state = new_state;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	78fa      	ldrb	r2, [r7, #3]
 8002202:	701a      	strb	r2, [r3, #0]
			return true;
 8002204:	2300      	movs	r3, #0
 8002206:	e031      	b.n	800226c <set_state+0xc4>
		}
		return false;
 8002208:	2301      	movs	r3, #1
 800220a:	e02f      	b.n	800226c <set_state+0xc4>

	case CONFIGURING:
		if(new_state == SEARCHING)
 800220c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002210:	2b03      	cmp	r3, #3
 8002212:	d104      	bne.n	800221e <set_state+0x76>
		{
			*curr_state = new_state;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	78fa      	ldrb	r2, [r7, #3]
 8002218:	701a      	strb	r2, [r3, #0]
			return true;
 800221a:	2300      	movs	r3, #0
 800221c:	e026      	b.n	800226c <set_state+0xc4>
		}
		return false;
 800221e:	2301      	movs	r3, #1
 8002220:	e024      	b.n	800226c <set_state+0xc4>

	case SEARCHING:
		if(new_state == CONNECTING)
 8002222:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002226:	2b04      	cmp	r3, #4
 8002228:	d104      	bne.n	8002234 <set_state+0x8c>
		{
			*curr_state = new_state;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	78fa      	ldrb	r2, [r7, #3]
 800222e:	701a      	strb	r2, [r3, #0]
			return true;
 8002230:	2300      	movs	r3, #0
 8002232:	e01b      	b.n	800226c <set_state+0xc4>
		}
		return false;
 8002234:	2301      	movs	r3, #1
 8002236:	e019      	b.n	800226c <set_state+0xc4>

	case CONNECTING:
		if(new_state == READY)
 8002238:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800223c:	2b05      	cmp	r3, #5
 800223e:	d104      	bne.n	800224a <set_state+0xa2>
		{
			*curr_state = new_state;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	78fa      	ldrb	r2, [r7, #3]
 8002244:	701a      	strb	r2, [r3, #0]
			return true;
 8002246:	2300      	movs	r3, #0
 8002248:	e010      	b.n	800226c <set_state+0xc4>
		}
		return false;
 800224a:	2301      	movs	r3, #1
 800224c:	e00e      	b.n	800226c <set_state+0xc4>

	case READY:
		if(new_state == READING)
 800224e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002252:	2b06      	cmp	r3, #6
 8002254:	d104      	bne.n	8002260 <set_state+0xb8>
		{
			*curr_state = new_state;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	78fa      	ldrb	r2, [r7, #3]
 800225a:	701a      	strb	r2, [r3, #0]
			return true;
 800225c:	2300      	movs	r3, #0
 800225e:	e005      	b.n	800226c <set_state+0xc4>
		}
		return false;
 8002260:	2301      	movs	r3, #1
 8002262:	e003      	b.n	800226c <set_state+0xc4>

	case READING:
		if(new_state == STORING && global_flags.pkt_ready == true)
 8002264:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002268:	2b07      	cmp	r3, #7
		{

		}
	default:
		return false;
 800226a:	2301      	movs	r3, #1
	}

	return false;
}
 800226c:	4618      	mov	r0, r3
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800227c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002284:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002288:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800228c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002290:	bf00      	nop
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <LL_AHB2_GRP1_EnableClock>:
{
 800229a:	b480      	push	{r7}
 800229c:	b085      	sub	sp, #20
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80022a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80022a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80022b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4013      	ands	r3, r2
 80022bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022be:	68fb      	ldr	r3, [r7, #12]
}
 80022c0:	bf00      	nop
 80022c2:	3714      	adds	r7, #20
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80022d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80022da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80022e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4013      	ands	r3, r2
 80022ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022f0:	68fb      	ldr	r3, [r7, #12]
}
 80022f2:	bf00      	nop
 80022f4:	3714      	adds	r7, #20
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80022fe:	b480      	push	{r7}
 8002300:	b085      	sub	sp, #20
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002306:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800230a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800230c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4313      	orrs	r3, r2
 8002314:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002316:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800231a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4013      	ands	r3, r2
 8002320:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002322:	68fb      	ldr	r3, [r7, #12]
}
 8002324:	bf00      	nop
 8002326:	3714      	adds	r7, #20
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002334:	bf00      	nop
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
	...

08002340 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b088      	sub	sp, #32
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002348:	f107 030c 	add.w	r3, r7, #12
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	605a      	str	r2, [r3, #4]
 8002352:	609a      	str	r2, [r3, #8]
 8002354:	60da      	str	r2, [r3, #12]
 8002356:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a22      	ldr	r2, [pc, #136]	; (80023e8 <HAL_ADC_MspInit+0xa8>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d13e      	bne.n	80023e0 <HAL_ADC_MspInit+0xa0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002362:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002366:	f7ff ffca 	bl	80022fe <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800236a:	2001      	movs	r0, #1
 800236c:	f7ff ff95 	bl	800229a <LL_AHB2_GRP1_EnableClock>
    PA0     ------> ADC1_IN5
    PA2     ------> ADC1_IN7
    PA3     ------> ADC1_IN8
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8002370:	231d      	movs	r3, #29
 8002372:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002374:	2303      	movs	r3, #3
 8002376:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002378:	2300      	movs	r3, #0
 800237a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800237c:	f107 030c 	add.w	r3, r7, #12
 8002380:	4619      	mov	r1, r3
 8002382:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002386:	f001 fe09 	bl	8003f9c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800238a:	4b18      	ldr	r3, [pc, #96]	; (80023ec <HAL_ADC_MspInit+0xac>)
 800238c:	4a18      	ldr	r2, [pc, #96]	; (80023f0 <HAL_ADC_MspInit+0xb0>)
 800238e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002390:	4b16      	ldr	r3, [pc, #88]	; (80023ec <HAL_ADC_MspInit+0xac>)
 8002392:	2205      	movs	r2, #5
 8002394:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002396:	4b15      	ldr	r3, [pc, #84]	; (80023ec <HAL_ADC_MspInit+0xac>)
 8002398:	2200      	movs	r2, #0
 800239a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800239c:	4b13      	ldr	r3, [pc, #76]	; (80023ec <HAL_ADC_MspInit+0xac>)
 800239e:	2200      	movs	r2, #0
 80023a0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80023a2:	4b12      	ldr	r3, [pc, #72]	; (80023ec <HAL_ADC_MspInit+0xac>)
 80023a4:	2280      	movs	r2, #128	; 0x80
 80023a6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80023a8:	4b10      	ldr	r3, [pc, #64]	; (80023ec <HAL_ADC_MspInit+0xac>)
 80023aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023ae:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80023b0:	4b0e      	ldr	r3, [pc, #56]	; (80023ec <HAL_ADC_MspInit+0xac>)
 80023b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023b6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80023b8:	4b0c      	ldr	r3, [pc, #48]	; (80023ec <HAL_ADC_MspInit+0xac>)
 80023ba:	2220      	movs	r2, #32
 80023bc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80023be:	4b0b      	ldr	r3, [pc, #44]	; (80023ec <HAL_ADC_MspInit+0xac>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80023c4:	4809      	ldr	r0, [pc, #36]	; (80023ec <HAL_ADC_MspInit+0xac>)
 80023c6:	f001 fba3 	bl	8003b10 <HAL_DMA_Init>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <HAL_ADC_MspInit+0x94>
    {
      Error_Handler();
 80023d0:	f7ff fe66 	bl	80020a0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a05      	ldr	r2, [pc, #20]	; (80023ec <HAL_ADC_MspInit+0xac>)
 80023d8:	641a      	str	r2, [r3, #64]	; 0x40
 80023da:	4a04      	ldr	r2, [pc, #16]	; (80023ec <HAL_ADC_MspInit+0xac>)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80023e0:	bf00      	nop
 80023e2:	3720      	adds	r7, #32
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40012400 	.word	0x40012400
 80023ec:	200008e0 	.word	0x200008e0
 80023f0:	40020008 	.word	0x40020008

080023f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b088      	sub	sp, #32
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023fc:	f107 030c 	add.w	r3, r7, #12
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	605a      	str	r2, [r3, #4]
 8002406:	609a      	str	r2, [r3, #8]
 8002408:	60da      	str	r2, [r3, #12]
 800240a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a0f      	ldr	r2, [pc, #60]	; (8002450 <HAL_I2C_MspInit+0x5c>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d117      	bne.n	8002446 <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002416:	2002      	movs	r0, #2
 8002418:	f7ff ff3f 	bl	800229a <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800241c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002420:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002422:	2312      	movs	r3, #18
 8002424:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002426:	2300      	movs	r3, #0
 8002428:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242a:	2300      	movs	r3, #0
 800242c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800242e:	2304      	movs	r3, #4
 8002430:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002432:	f107 030c 	add.w	r3, r7, #12
 8002436:	4619      	mov	r1, r3
 8002438:	4806      	ldr	r0, [pc, #24]	; (8002454 <HAL_I2C_MspInit+0x60>)
 800243a:	f001 fdaf 	bl	8003f9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800243e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002442:	f7ff ff43 	bl	80022cc <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002446:	bf00      	nop
 8002448:	3720      	adds	r7, #32
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40005400 	.word	0x40005400
 8002454:	48000400 	.word	0x48000400

08002458 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a06      	ldr	r2, [pc, #24]	; (8002480 <HAL_RTC_MspInit+0x28>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d105      	bne.n	8002476 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800246a:	f7ff ff05 	bl	8002278 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800246e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002472:	f7ff ff2b 	bl	80022cc <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002476:	bf00      	nop
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40002800 	.word	0x40002800

08002484 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002494:	d10a      	bne.n	80024ac <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002496:	2001      	movs	r0, #1
 8002498:	f7ff ff18 	bl	80022cc <LL_APB1_GRP1_EnableClock>
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800249c:	2200      	movs	r2, #0
 800249e:	2100      	movs	r1, #0
 80024a0:	201c      	movs	r0, #28
 80024a2:	f001 fb0d 	bl	8003ac0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80024a6:	201c      	movs	r0, #28
 80024a8:	f001 fb24 	bl	8003af4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80024ac:	bf00      	nop
 80024ae:	3708      	adds	r7, #8
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b088      	sub	sp, #32
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024bc:	f107 030c 	add.w	r3, r7, #12
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	605a      	str	r2, [r3, #4]
 80024c6:	609a      	str	r2, [r3, #8]
 80024c8:	60da      	str	r2, [r3, #12]
 80024ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a19      	ldr	r2, [pc, #100]	; (8002538 <HAL_UART_MspInit+0x84>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d12b      	bne.n	800252e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024d6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80024da:	f7ff ff10 	bl	80022fe <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024de:	2001      	movs	r0, #1
 80024e0:	f7ff fedb 	bl	800229a <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024e4:	2002      	movs	r0, #2
 80024e6:	f7ff fed8 	bl	800229a <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80024ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f0:	2302      	movs	r3, #2
 80024f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f4:	2300      	movs	r3, #0
 80024f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f8:	2300      	movs	r3, #0
 80024fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024fc:	2307      	movs	r3, #7
 80024fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002500:	f107 030c 	add.w	r3, r7, #12
 8002504:	4619      	mov	r1, r3
 8002506:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800250a:	f001 fd47 	bl	8003f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800250e:	2380      	movs	r3, #128	; 0x80
 8002510:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002512:	2302      	movs	r3, #2
 8002514:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002516:	2300      	movs	r3, #0
 8002518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251a:	2300      	movs	r3, #0
 800251c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800251e:	2307      	movs	r3, #7
 8002520:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002522:	f107 030c 	add.w	r3, r7, #12
 8002526:	4619      	mov	r1, r3
 8002528:	4804      	ldr	r0, [pc, #16]	; (800253c <HAL_UART_MspInit+0x88>)
 800252a:	f001 fd37 	bl	8003f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800252e:	bf00      	nop
 8002530:	3720      	adds	r7, #32
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	40013800 	.word	0x40013800
 800253c:	48000400 	.word	0x48000400

08002540 <LL_APB2_GRP1_EnableClock>:
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800254c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800254e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4313      	orrs	r3, r2
 8002556:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800255c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4013      	ands	r3, r2
 8002562:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002564:	68fb      	ldr	r3, [r7, #12]
}
 8002566:	bf00      	nop
 8002568:	3714      	adds	r7, #20
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
	...

08002574 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b08c      	sub	sp, #48	; 0x30
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800257c:	2300      	movs	r3, #0
 800257e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002580:	2300      	movs	r3, #0
 8002582:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8002584:	2200      	movs	r2, #0
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	2019      	movs	r0, #25
 800258a:	f001 fa99 	bl	8003ac0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800258e:	2019      	movs	r0, #25
 8002590:	f001 fab0 	bl	8003af4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002594:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002598:	f7ff ffd2 	bl	8002540 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800259c:	f107 0208 	add.w	r2, r7, #8
 80025a0:	f107 030c 	add.w	r3, r7, #12
 80025a4:	4611      	mov	r1, r2
 80025a6:	4618      	mov	r0, r3
 80025a8:	f003 fcac 	bl	8005f04 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80025ac:	f003 fc94 	bl	8005ed8 <HAL_RCC_GetPCLK2Freq>
 80025b0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80025b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b4:	4a12      	ldr	r2, [pc, #72]	; (8002600 <HAL_InitTick+0x8c>)
 80025b6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ba:	0c9b      	lsrs	r3, r3, #18
 80025bc:	3b01      	subs	r3, #1
 80025be:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80025c0:	4b10      	ldr	r3, [pc, #64]	; (8002604 <HAL_InitTick+0x90>)
 80025c2:	4a11      	ldr	r2, [pc, #68]	; (8002608 <HAL_InitTick+0x94>)
 80025c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80025c6:	4b0f      	ldr	r3, [pc, #60]	; (8002604 <HAL_InitTick+0x90>)
 80025c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80025cc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80025ce:	4a0d      	ldr	r2, [pc, #52]	; (8002604 <HAL_InitTick+0x90>)
 80025d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80025d4:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <HAL_InitTick+0x90>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025da:	4b0a      	ldr	r3, [pc, #40]	; (8002604 <HAL_InitTick+0x90>)
 80025dc:	2200      	movs	r2, #0
 80025de:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80025e0:	4808      	ldr	r0, [pc, #32]	; (8002604 <HAL_InitTick+0x90>)
 80025e2:	f004 fae9 	bl	8006bb8 <HAL_TIM_Base_Init>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d104      	bne.n	80025f6 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80025ec:	4805      	ldr	r0, [pc, #20]	; (8002604 <HAL_InitTick+0x90>)
 80025ee:	f004 fb81 	bl	8006cf4 <HAL_TIM_Base_Start_IT>
 80025f2:	4603      	mov	r3, r0
 80025f4:	e000      	b.n	80025f8 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3730      	adds	r7, #48	; 0x30
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	431bde83 	.word	0x431bde83
 8002604:	20002984 	.word	0x20002984
 8002608:	40012c00 	.word	0x40012c00

0800260c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002610:	e7fe      	b.n	8002610 <NMI_Handler+0x4>

08002612 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002612:	b480      	push	{r7}
 8002614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002616:	e7fe      	b.n	8002616 <HardFault_Handler+0x4>

08002618 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800261c:	e7fe      	b.n	800261c <MemManage_Handler+0x4>

0800261e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800261e:	b480      	push	{r7}
 8002620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002622:	e7fe      	b.n	8002622 <BusFault_Handler+0x4>

08002624 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002628:	e7fe      	b.n	8002628 <UsageFault_Handler+0x4>

0800262a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800262a:	b480      	push	{r7}
 800262c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800262e:	bf00      	nop
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800263c:	bf00      	nop
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr

08002646 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002646:	b480      	push	{r7}
 8002648:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800264a:	bf00      	nop
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002658:	bf00      	nop
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
	...

08002664 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002668:	4802      	ldr	r0, [pc, #8]	; (8002674 <DMA1_Channel1_IRQHandler+0x10>)
 800266a:	f001 fb58 	bl	8003d1e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800266e:	bf00      	nop
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	200008e0 	.word	0x200008e0

08002678 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update Interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800267c:	4802      	ldr	r0, [pc, #8]	; (8002688 <TIM1_UP_IRQHandler+0x10>)
 800267e:	f004 fb87 	bl	8006d90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	20002984 	.word	0x20002984

0800268c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002690:	4802      	ldr	r0, [pc, #8]	; (800269c <TIM2_IRQHandler+0x10>)
 8002692:	f004 fb7d 	bl	8006d90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002696:	bf00      	nop
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	20000214 	.word	0x20000214

080026a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
	return 1;
 80026a4:	2301      	movs	r3, #1
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <_kill>:

int _kill(int pid, int sig)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80026ba:	f005 fca5 	bl	8008008 <__errno>
 80026be:	4603      	mov	r3, r0
 80026c0:	2216      	movs	r2, #22
 80026c2:	601a      	str	r2, [r3, #0]
	return -1;
 80026c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3708      	adds	r7, #8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <_exit>:

void _exit (int status)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80026d8:	f04f 31ff 	mov.w	r1, #4294967295
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f7ff ffe7 	bl	80026b0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80026e2:	e7fe      	b.n	80026e2 <_exit+0x12>

080026e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026f0:	2300      	movs	r3, #0
 80026f2:	617b      	str	r3, [r7, #20]
 80026f4:	e00a      	b.n	800270c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80026f6:	f3af 8000 	nop.w
 80026fa:	4601      	mov	r1, r0
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	1c5a      	adds	r2, r3, #1
 8002700:	60ba      	str	r2, [r7, #8]
 8002702:	b2ca      	uxtb	r2, r1
 8002704:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	3301      	adds	r3, #1
 800270a:	617b      	str	r3, [r7, #20]
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	429a      	cmp	r2, r3
 8002712:	dbf0      	blt.n	80026f6 <_read+0x12>
	}

return len;
 8002714:	687b      	ldr	r3, [r7, #4]
}
 8002716:	4618      	mov	r0, r3
 8002718:	3718      	adds	r7, #24
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b086      	sub	sp, #24
 8002722:	af00      	add	r7, sp, #0
 8002724:	60f8      	str	r0, [r7, #12]
 8002726:	60b9      	str	r1, [r7, #8]
 8002728:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800272a:	2300      	movs	r3, #0
 800272c:	617b      	str	r3, [r7, #20]
 800272e:	e009      	b.n	8002744 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	1c5a      	adds	r2, r3, #1
 8002734:	60ba      	str	r2, [r7, #8]
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	4618      	mov	r0, r3
 800273a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	3301      	adds	r3, #1
 8002742:	617b      	str	r3, [r7, #20]
 8002744:	697a      	ldr	r2, [r7, #20]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	429a      	cmp	r2, r3
 800274a:	dbf1      	blt.n	8002730 <_write+0x12>
	}
	return len;
 800274c:	687b      	ldr	r3, [r7, #4]
}
 800274e:	4618      	mov	r0, r3
 8002750:	3718      	adds	r7, #24
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <_close>:

int _close(int file)
{
 8002756:	b480      	push	{r7}
 8002758:	b083      	sub	sp, #12
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
	return -1;
 800275e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002762:	4618      	mov	r0, r3
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr

0800276e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800276e:	b480      	push	{r7}
 8002770:	b083      	sub	sp, #12
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
 8002776:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800277e:	605a      	str	r2, [r3, #4]
	return 0;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr

0800278e <_isatty>:

int _isatty(int file)
{
 800278e:	b480      	push	{r7}
 8002790:	b083      	sub	sp, #12
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
	return 1;
 8002796:	2301      	movs	r3, #1
}
 8002798:	4618      	mov	r0, r3
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
	return 0;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3714      	adds	r7, #20
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
	...

080027c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027c8:	4a14      	ldr	r2, [pc, #80]	; (800281c <_sbrk+0x5c>)
 80027ca:	4b15      	ldr	r3, [pc, #84]	; (8002820 <_sbrk+0x60>)
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027d4:	4b13      	ldr	r3, [pc, #76]	; (8002824 <_sbrk+0x64>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d102      	bne.n	80027e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027dc:	4b11      	ldr	r3, [pc, #68]	; (8002824 <_sbrk+0x64>)
 80027de:	4a12      	ldr	r2, [pc, #72]	; (8002828 <_sbrk+0x68>)
 80027e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027e2:	4b10      	ldr	r3, [pc, #64]	; (8002824 <_sbrk+0x64>)
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4413      	add	r3, r2
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d207      	bcs.n	8002800 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027f0:	f005 fc0a 	bl	8008008 <__errno>
 80027f4:	4603      	mov	r3, r0
 80027f6:	220c      	movs	r2, #12
 80027f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027fa:	f04f 33ff 	mov.w	r3, #4294967295
 80027fe:	e009      	b.n	8002814 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002800:	4b08      	ldr	r3, [pc, #32]	; (8002824 <_sbrk+0x64>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002806:	4b07      	ldr	r3, [pc, #28]	; (8002824 <_sbrk+0x64>)
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4413      	add	r3, r2
 800280e:	4a05      	ldr	r2, [pc, #20]	; (8002824 <_sbrk+0x64>)
 8002810:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002812:	68fb      	ldr	r3, [r7, #12]
}
 8002814:	4618      	mov	r0, r3
 8002816:	3718      	adds	r7, #24
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	20003000 	.word	0x20003000
 8002820:	00000400 	.word	0x00000400
 8002824:	20000208 	.word	0x20000208
 8002828:	200029e8 	.word	0x200029e8

0800282c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8002830:	4b22      	ldr	r3, [pc, #136]	; (80028bc <SystemInit+0x90>)
 8002832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002836:	4a21      	ldr	r2, [pc, #132]	; (80028bc <SystemInit+0x90>)
 8002838:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800283c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002840:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800284a:	f043 0301 	orr.w	r3, r3, #1
 800284e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002850:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002854:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002858:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800285a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002864:	4b16      	ldr	r3, [pc, #88]	; (80028c0 <SystemInit+0x94>)
 8002866:	4013      	ands	r3, r2
 8002868:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800286a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800286e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002872:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002876:	f023 0305 	bic.w	r3, r3, #5
 800287a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800287e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002882:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002886:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800288a:	f023 0301 	bic.w	r3, r3, #1
 800288e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002892:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002896:	4a0b      	ldr	r2, [pc, #44]	; (80028c4 <SystemInit+0x98>)
 8002898:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800289a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028a8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80028aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ae:	2200      	movs	r2, #0
 80028b0:	619a      	str	r2, [r3, #24]
}
 80028b2:	bf00      	nop
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	e000ed00 	.word	0xe000ed00
 80028c0:	faf6fefb 	.word	0xfaf6fefb
 80028c4:	22041000 	.word	0x22041000

080028c8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80028c8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028ca:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028cc:	3304      	adds	r3, #4

080028ce <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028ce:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028d0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80028d2:	d3f9      	bcc.n	80028c8 <CopyDataInit>
  bx lr
 80028d4:	4770      	bx	lr

080028d6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80028d6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80028d8:	3004      	adds	r0, #4

080028da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80028da:	4288      	cmp	r0, r1
  bcc FillZerobss
 80028dc:	d3fb      	bcc.n	80028d6 <FillZerobss>
  bx lr
 80028de:	4770      	bx	lr

080028e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80028e0:	480c      	ldr	r0, [pc, #48]	; (8002914 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80028e2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80028e4:	f7ff ffa2 	bl	800282c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80028e8:	480b      	ldr	r0, [pc, #44]	; (8002918 <LoopForever+0x8>)
 80028ea:	490c      	ldr	r1, [pc, #48]	; (800291c <LoopForever+0xc>)
 80028ec:	4a0c      	ldr	r2, [pc, #48]	; (8002920 <LoopForever+0x10>)
 80028ee:	2300      	movs	r3, #0
 80028f0:	f7ff ffed 	bl	80028ce <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80028f4:	480b      	ldr	r0, [pc, #44]	; (8002924 <LoopForever+0x14>)
 80028f6:	490c      	ldr	r1, [pc, #48]	; (8002928 <LoopForever+0x18>)
 80028f8:	2300      	movs	r3, #0
 80028fa:	f7ff ffee 	bl	80028da <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80028fe:	480b      	ldr	r0, [pc, #44]	; (800292c <LoopForever+0x1c>)
 8002900:	490b      	ldr	r1, [pc, #44]	; (8002930 <LoopForever+0x20>)
 8002902:	2300      	movs	r3, #0
 8002904:	f7ff ffe9 	bl	80028da <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002908:	f005 fb84 	bl	8008014 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 800290c:	f7fe fe92 	bl	8001634 <main>

08002910 <LoopForever>:

LoopForever:
  b LoopForever
 8002910:	e7fe      	b.n	8002910 <LoopForever>
 8002912:	0000      	.short	0x0000
  ldr   r0, =_estack
 8002914:	20003000 	.word	0x20003000
  INIT_DATA _sdata, _edata, _sidata
 8002918:	20000004 	.word	0x20000004
 800291c:	200001e0 	.word	0x200001e0
 8002920:	0800b2e4 	.word	0x0800b2e4
  INIT_BSS _sbss, _ebss
 8002924:	200001e0 	.word	0x200001e0
 8002928:	200029e4 	.word	0x200029e4
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800292c:	20030000 	.word	0x20030000
 8002930:	20030000 	.word	0x20030000

08002934 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002934:	e7fe      	b.n	8002934 <ADC1_IRQHandler>
	...

08002938 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800293e:	2300      	movs	r3, #0
 8002940:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002942:	4b0c      	ldr	r3, [pc, #48]	; (8002974 <HAL_Init+0x3c>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a0b      	ldr	r2, [pc, #44]	; (8002974 <HAL_Init+0x3c>)
 8002948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800294c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800294e:	2003      	movs	r0, #3
 8002950:	f001 f8ab 	bl	8003aaa <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002954:	200f      	movs	r0, #15
 8002956:	f7ff fe0d 	bl	8002574 <HAL_InitTick>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d002      	beq.n	8002966 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	71fb      	strb	r3, [r7, #7]
 8002964:	e001      	b.n	800296a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002966:	f7ff fce3 	bl	8002330 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800296a:	79fb      	ldrb	r3, [r7, #7]
}
 800296c:	4618      	mov	r0, r3
 800296e:	3708      	adds	r7, #8
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	58004000 	.word	0x58004000

08002978 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800297c:	4b06      	ldr	r3, [pc, #24]	; (8002998 <HAL_IncTick+0x20>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	461a      	mov	r2, r3
 8002982:	4b06      	ldr	r3, [pc, #24]	; (800299c <HAL_IncTick+0x24>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4413      	add	r3, r2
 8002988:	4a04      	ldr	r2, [pc, #16]	; (800299c <HAL_IncTick+0x24>)
 800298a:	6013      	str	r3, [r2, #0]
}
 800298c:	bf00      	nop
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	2000000c 	.word	0x2000000c
 800299c:	200029d0 	.word	0x200029d0

080029a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
  return uwTick;
 80029a4:	4b03      	ldr	r3, [pc, #12]	; (80029b4 <HAL_GetTick+0x14>)
 80029a6:	681b      	ldr	r3, [r3, #0]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	200029d0 	.word	0x200029d0

080029b8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80029bc:	4b03      	ldr	r3, [pc, #12]	; (80029cc <HAL_GetTickPrio+0x14>)
 80029be:	681b      	ldr	r3, [r3, #0]
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	20000008 	.word	0x20000008

080029d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 80029d8:	f7ff ffe2 	bl	80029a0 <HAL_GetTick>
 80029dc:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e8:	d005      	beq.n	80029f6 <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 80029ea:	4b0a      	ldr	r3, [pc, #40]	; (8002a14 <HAL_Delay+0x44>)
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	461a      	mov	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	4413      	add	r3, r2
 80029f4:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 80029f6:	bf00      	nop
 80029f8:	f7ff ffd2 	bl	80029a0 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d8f7      	bhi.n	80029f8 <HAL_Delay+0x28>
    {
    }
  }
 8002a08:	bf00      	nop
 8002a0a:	bf00      	nop
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	2000000c 	.word	0x2000000c

08002a18 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	431a      	orrs	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	609a      	str	r2, [r3, #8]
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b083      	sub	sp, #12
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY, uint32_t SamplingTime)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b085      	sub	sp, #20
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	60f8      	str	r0, [r7, #12]
 8002a62:	60b9      	str	r1, [r7, #8]
 8002a64:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	695a      	ldr	r2, [r3, #20]
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	f003 0304 	and.w	r3, r3, #4
 8002a70:	2107      	movs	r1, #7
 8002a72:	fa01 f303 	lsl.w	r3, r1, r3
 8002a76:	43db      	mvns	r3, r3
 8002a78:	401a      	ands	r2, r3
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	f003 0304 	and.w	r3, r3, #4
 8002a80:	6879      	ldr	r1, [r7, #4]
 8002a82:	fa01 f303 	lsl.w	r3, r1, r3
 8002a86:	431a      	orrs	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002a8c:	bf00      	nop
 8002a8e:	3714      	adds	r7, #20
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
#if defined (ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d101      	bne.n	8002ab0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002aac:	2301      	movs	r3, #1
 8002aae:	e000      	b.n	8002ab2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002ab0:	2300      	movs	r3, #0
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
#endif
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b085      	sub	sp, #20
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	60f8      	str	r0, [r7, #12]
 8002ac6:	60b9      	str	r1, [r7, #8]
 8002ac8:	607a      	str	r2, [r7, #4]
#if defined (ADC_SUPPORT_2_5_MSPS)
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	f003 031f 	and.w	r3, r3, #31
 8002ad4:	210f      	movs	r1, #15
 8002ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8002ada:	43db      	mvns	r3, r3
 8002adc:	401a      	ands	r2, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	0e9b      	lsrs	r3, r3, #26
 8002ae2:	f003 010f 	and.w	r1, r3, #15
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	f003 031f 	and.w	r3, r3, #31
 8002aec:	fa01 f303 	lsl.w	r3, r1, r3
 8002af0:	431a      	orrs	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	629a      	str	r2, [r3, #40]	; 0x28

  MODIFY_REG(*preg,
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif
}
 8002af6:	bf00      	nop
 8002af8:	3714      	adds	r7, #20
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr

08002b02 <LL_ADC_REG_SetSequencerChAdd>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b083      	sub	sp, #12
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
 8002b0a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b16:	431a      	orrs	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <LL_ADC_REG_SetSequencerChRem>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	401a      	ands	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	695a      	ldr	r2, [r3, #20]
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	021b      	lsls	r3, r3, #8
 8002b64:	43db      	mvns	r3, r3
 8002b66:	401a      	ands	r2, r3
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	0219      	lsls	r1, r3, #8
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	400b      	ands	r3, r1
 8002b70:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002b74:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002b7e:	bf00      	nop
 8002b80:	3714      	adds	r7, #20
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b083      	sub	sp, #12
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002b9a:	f023 0317 	bic.w	r3, r3, #23
 8002b9e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr

08002bb2 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b083      	sub	sp, #12
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bc6:	d101      	bne.n	8002bcc <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e000      	b.n	8002bce <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b083      	sub	sp, #12
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002bea:	f023 0317 	bic.w	r3, r3, #23
 8002bee:	f043 0201 	orr.w	r2, r3, #1
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002c02:	b480      	push	{r7}
 8002c04:	b083      	sub	sp, #12
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c12:	f023 0317 	bic.w	r3, r3, #23
 8002c16:	f043 0202 	orr.w	r2, r3, #2
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002c1e:	bf00      	nop
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b083      	sub	sp, #12
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d101      	bne.n	8002c42 <LL_ADC_IsEnabled+0x18>
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e000      	b.n	8002c44 <LL_ADC_IsEnabled+0x1a>
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d101      	bne.n	8002c68 <LL_ADC_IsDisableOngoing+0x18>
 8002c64:	2301      	movs	r3, #1
 8002c66:	e000      	b.n	8002c6a <LL_ADC_IsDisableOngoing+0x1a>
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b083      	sub	sp, #12
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c86:	f023 0317 	bic.w	r3, r3, #23
 8002c8a:	f043 0204 	orr.w	r2, r3, #4
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002c92:	bf00      	nop
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr

08002c9e <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b083      	sub	sp, #12
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002cae:	f023 0317 	bic.w	r3, r3, #23
 8002cb2:	f043 0210 	orr.w	r2, r3, #16
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b083      	sub	sp, #12
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f003 0304 	and.w	r3, r3, #4
 8002cd6:	2b04      	cmp	r3, #4
 8002cd8:	d101      	bne.n	8002cde <LL_ADC_REG_IsConversionOngoing+0x18>
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e000      	b.n	8002ce0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b088      	sub	sp, #32
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	60bb      	str	r3, [r7, #8]
#if defined (ADC_SUPPORT_2_5_MSPS)
  uint32_t tmpCFGR2 = 0UL;
 8002d00:	2300      	movs	r3, #0
 8002d02:	613b      	str	r3, [r7, #16]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif

  /* Check ADC handle */
  if (hadc == NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e189      	b.n	8003022 <HAL_ADC_Init+0x336>
  assert_param(IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon1));
  assert_param(IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon2));
  
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d109      	bne.n	8002d30 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f7ff fb0f 	bl	8002340 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7ff ff3c 	bl	8002bb2 <LL_ADC_IsInternalRegulatorEnabled>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d115      	bne.n	8002d6c <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7ff ff20 	bl	8002b8a <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d4a:	4b91      	ldr	r3, [pc, #580]	; (8002f90 <HAL_ADC_Init+0x2a4>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	099b      	lsrs	r3, r3, #6
 8002d50:	4a90      	ldr	r2, [pc, #576]	; (8002f94 <HAL_ADC_Init+0x2a8>)
 8002d52:	fba2 2303 	umull	r2, r3, r2, r3
 8002d56:	099b      	lsrs	r3, r3, #6
 8002d58:	3301      	adds	r3, #1
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d5e:	e002      	b.n	8002d66 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	3b01      	subs	r3, #1
 8002d64:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1f9      	bne.n	8002d60 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7ff ff1e 	bl	8002bb2 <LL_ADC_IsInternalRegulatorEnabled>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10d      	bne.n	8002d98 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d80:	f043 0210 	orr.w	r2, r3, #16
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	649a      	str	r2, [r3, #72]	; 0x48

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d8c:	f043 0201 	orr.w	r2, r3, #1
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	64da      	str	r2, [r3, #76]	; 0x4c

    tmp_hal_status = HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff ff92 	bl	8002cc6 <LL_ADC_REG_IsConversionOngoing>
 8002da2:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002da8:	f003 0310 	and.w	r3, r3, #16
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f040 812f 	bne.w	8003010 <HAL_ADC_Init+0x324>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f040 812b 	bne.w	8003010 <HAL_ADC_Init+0x324>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dbe:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002dc2:	f043 0202 	orr.w	r2, r3, #2
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	649a      	str	r2, [r3, #72]	; 0x48
    /*  - Clock configuration                                                 */
    /*  - ADC resolution                                                      */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7ff ff2b 	bl	8002c2a <LL_ADC_IsEnabled>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d138      	bne.n	8002e4c <HAL_ADC_Init+0x160>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
      
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	f023 0118 	bic.w	r1, r3, #24
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	430a      	orrs	r2, r1
 8002dee:	60da      	str	r2, [r3, #12]
      /*  - oversampling enable                                               */
      /*  - oversampling ratio                                                */
      /*  - oversampling shift                                                */
      /*  - oversampling discontinuous mode (triggered mode)                  */
      /*  - trigger frequency mode                                            */
      tmpCFGR2 |= ( (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                    hadc->Init.TriggerFrequencyMode
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR2 |= ( (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	693a      	ldr	r2, [r7, #16]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	613b      	str	r3, [r7, #16]
                    );
      
      MODIFY_REG(hadc->Instance->CFGR2,
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	430a      	orrs	r2, r1
 8002e16:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_LFTRIG     ,
                 tmpCFGR2              );
      
      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002e20:	d014      	beq.n	8002e4c <HAL_ADC_Init+0x160>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002e26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e2a:	d00f      	beq.n	8002e4c <HAL_ADC_Init+0x160>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002e30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e34:	d00a      	beq.n	8002e4c <HAL_ADC_Init+0x160>
      {
        MODIFY_REG(ADC1_COMMON->CCR                         ,
 8002e36:	4b58      	ldr	r3, [pc, #352]	; (8002f98 <HAL_ADC_Init+0x2ac>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002e46:	4954      	ldr	r1, [pc, #336]	; (8002f98 <HAL_ADC_Init+0x2ac>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	608b      	str	r3, [r1, #8]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	7e1b      	ldrb	r3, [r3, #24]
 8002e50:	039a      	lsls	r2, r3, #14
                ADC_CFGR_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	7e5b      	ldrb	r3, [r3, #25]
 8002e56:	03db      	lsls	r3, r3, #15
    tmpCFGR |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002e58:	431a      	orrs	r2, r3
                ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	7e9b      	ldrb	r3, [r3, #26]
 8002e5e:	035b      	lsls	r3, r3, #13
                ADC_CFGR_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002e60:	4313      	orrs	r3, r2
                ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e66:	2a00      	cmp	r2, #0
 8002e68:	d002      	beq.n	8002e70 <HAL_ADC_Init+0x184>
 8002e6a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e6e:	e000      	b.n	8002e72 <HAL_ADC_Init+0x186>
 8002e70:	2200      	movs	r2, #0
                ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002e72:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                            |
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68db      	ldr	r3, [r3, #12]
                ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8002e78:	431a      	orrs	r2, r3
                ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	da04      	bge.n	8002e8c <HAL_ADC_Init+0x1a0>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e8a:	e001      	b.n	8002e90 <HAL_ADC_Init+0x1a4>
 8002e8c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                hadc->Init.DataAlign                                            |
 8002e90:	431a      	orrs	r2, r3
                ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002e98:	005b      	lsls	r3, r3, #1
                ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8002e9a:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	61bb      	str	r3, [r7, #24]
    
    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d114      	bne.n	8002ed6 <HAL_ADC_Init+0x1ea>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	7e9b      	ldrb	r3, [r3, #26]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d104      	bne.n	8002ebe <HAL_ADC_Init+0x1d2>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR |= ADC_CFGR1_DISCEN;
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eba:	61bb      	str	r3, [r7, #24]
 8002ebc:	e00b      	b.n	8002ed6 <HAL_ADC_Init+0x1ea>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ec2:	f043 0220 	orr.w	r2, r3, #32
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	649a      	str	r2, [r3, #72]	; 0x48
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ece:	f043 0201 	orr.w	r2, r3, #1
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d009      	beq.n	8002ef2 <HAL_ADC_Init+0x206>
    {
      tmpCFGR |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee2:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge );
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002eea:	4313      	orrs	r3, r2
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	61bb      	str	r3, [r7, #24]
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8002efc:	f423 73f3 	bic.w	r3, r3, #486	; 0x1e6
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	6812      	ldr	r2, [r2, #0]
 8002f04:	69b9      	ldr	r1, [r7, #24]
 8002f06:	430b      	orrs	r3, r1
 8002f08:	60d3      	str	r3, [r2, #12]
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG     ,
               tmpCFGR              );
    
    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6818      	ldr	r0, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f12:	461a      	mov	r2, r3
 8002f14:	2100      	movs	r1, #0
 8002f16:	f7ff fda0 	bl	8002a5a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6818      	ldr	r0, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f22:	461a      	mov	r2, r3
 8002f24:	491d      	ldr	r1, [pc, #116]	; (8002f9c <HAL_ADC_Init+0x2b0>)
 8002f26:	f7ff fd98 	bl	8002a5a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if(hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d108      	bne.n	8002f44 <HAL_ADC_Init+0x258>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f062 020f 	orn	r2, r2, #15
 8002f40:	629a      	str	r2, [r3, #40]	; 0x28
 8002f42:	e040      	b.n	8002fc6 <HAL_ADC_Init+0x2da>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if(hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f4c:	d13b      	bne.n	8002fc6 <HAL_ADC_Init+0x2da>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;
      
      /* Parse all ranks from 1 to 8 */
      for(ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002f4e:	2300      	movs	r3, #0
 8002f50:	617b      	str	r3, [r7, #20]
 8002f52:	e00c      	b.n	8002f6e <HAL_ADC_Init+0x282>
      {
        /* Check each sequencer rank until value of end of sequence */
        if(((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) == ADC_CHSELR_SQ1)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f60:	f003 030f 	and.w	r3, r3, #15
 8002f64:	2b0f      	cmp	r3, #15
 8002f66:	d006      	beq.n	8002f76 <HAL_ADC_Init+0x28a>
      for(ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	617b      	str	r3, [r7, #20]
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	2b07      	cmp	r3, #7
 8002f72:	d9ef      	bls.n	8002f54 <HAL_ADC_Init+0x268>
 8002f74:	e000      	b.n	8002f78 <HAL_ADC_Init+0x28c>
        {
          break;
 8002f76:	bf00      	nop
        }
      }
      
      if(ADCGroupRegularSequencerRanksCount == 1UL)
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d110      	bne.n	8002fa0 <HAL_ADC_Init+0x2b4>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f062 020f 	orn	r2, r2, #15
 8002f8c:	629a      	str	r2, [r3, #40]	; 0x28
 8002f8e:	e01a      	b.n	8002fc6 <HAL_ADC_Init+0x2da>
 8002f90:	20000004 	.word	0x20000004
 8002f94:	053e2d63 	.word	0x053e2d63
 8002f98:	40012700 	.word	0x40012700
 8002f9c:	07ffff04 	.word	0x07ffff04
        /*          therefore afer the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	3b01      	subs	r3, #1
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	f003 031c 	and.w	r3, r3, #28
 8002fb2:	f06f 020f 	mvn.w	r2, #15
 8002fb6:	fa02 f103 	lsl.w	r1, r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR').                                  */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68da      	ldr	r2, [r3, #12]
 8002fcc:	4b17      	ldr	r3, [pc, #92]	; (800302c <HAL_ADC_Init+0x340>)
 8002fce:	4013      	ands	r3, r2
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d10b      	bne.n	8002fee <HAL_ADC_Init+0x302>
         == tmpCFGR)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fe0:	f023 0303 	bic.w	r3, r3, #3
 8002fe4:	f043 0201 	orr.w	r2, r3, #1
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	649a      	str	r2, [r3, #72]	; 0x48
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002fec:	e018      	b.n	8003020 <HAL_ADC_Init+0x334>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ff2:	f023 0312 	bic.w	r3, r3, #18
 8002ff6:	f043 0210 	orr.w	r2, r3, #16
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	649a      	str	r2, [r3, #72]	; 0x48
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003002:	f043 0201 	orr.w	r2, r3, #1
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	64da      	str	r2, [r3, #76]	; 0x4c
      
      tmp_hal_status = HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	77fb      	strb	r3, [r7, #31]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800300e:	e007      	b.n	8003020 <HAL_ADC_Init+0x334>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003014:	f043 0210 	orr.w	r2, r3, #16
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	649a      	str	r2, [r3, #72]	; 0x48

    tmp_hal_status = HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003020:	7ffb      	ldrb	r3, [r7, #31]
}
 8003022:	4618      	mov	r0, r3
 8003024:	3720      	adds	r7, #32
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	833fffe7 	.word	0x833fffe7

08003030 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4618      	mov	r0, r3
 800303e:	f7ff fe42 	bl	8002cc6 <LL_ADC_REG_IsConversionOngoing>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d132      	bne.n	80030ae <HAL_ADC_Start+0x7e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800304e:	2b01      	cmp	r3, #1
 8003050:	d101      	bne.n	8003056 <HAL_ADC_Start+0x26>
 8003052:	2302      	movs	r3, #2
 8003054:	e02e      	b.n	80030b4 <HAL_ADC_Start+0x84>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2201      	movs	r2, #1
 800305a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 fb0c 	bl	800367c <ADC_Enable>
 8003064:	4603      	mov	r3, r0
 8003066:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003068:	7bfb      	ldrb	r3, [r7, #15]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d11a      	bne.n	80030a4 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003072:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003076:	f023 0301 	bic.w	r3, r3, #1
 800307a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	649a      	str	r2, [r3, #72]	; 0x48
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
#if defined (ADC_SUPPORT_2_5_MSPS)
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	64da      	str	r2, [r3, #76]	; 0x4c
      }
#endif /* ADC_SUPPORT_2_5_MSPS */

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	221c      	movs	r2, #28
 800308e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff fdea 	bl	8002c76 <LL_ADC_REG_StartConversion>
 80030a2:	e006      	b.n	80030b2 <HAL_ADC_Start+0x82>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030ac:	e001      	b.n	80030b2 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80030ae:	2302      	movs	r3, #2
 80030b0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80030b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3710      	adds	r7, #16
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d101      	bne.n	80030d2 <HAL_ADC_Stop+0x16>
 80030ce:	2302      	movs	r3, #2
 80030d0:	e023      	b.n	800311a <HAL_ADC_Stop+0x5e>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2201      	movs	r2, #1
 80030d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

#if defined (ADC_SUPPORT_2_5_MSPS)
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
 80030da:	2101      	movs	r1, #1
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 fa8d 	bl	80035fc <ADC_ConversionStop>
 80030e2:	4603      	mov	r3, r0
 80030e4:	73fb      	strb	r3, [r7, #15]
  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80030e6:	7bfb      	ldrb	r3, [r7, #15]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d111      	bne.n	8003110 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 fb43 	bl	8003778 <ADC_Disable>
 80030f2:	4603      	mov	r3, r0
 80030f4:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80030f6:	7bfb      	ldrb	r3, [r7, #15]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d109      	bne.n	8003110 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
#if defined (ADC_SUPPORT_2_5_MSPS)
      ADC_STATE_CLR_SET(hadc->State,
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003100:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003104:	f023 0301 	bic.w	r3, r3, #1
 8003108:	f043 0201 	orr.w	r2, r3, #1
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* ADC_SUPPORT_2_5_MSPS */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return tmp_hal_status;
 8003118:	7bfb      	ldrb	r3, [r7, #15]
}
 800311a:	4618      	mov	r0, r3
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b084      	sub	sp, #16
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
 800312a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	2b08      	cmp	r3, #8
 8003132:	d102      	bne.n	800313a <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003134:	2308      	movs	r3, #8
 8003136:	60fb      	str	r3, [r7, #12]
 8003138:	e010      	b.n	800315c <HAL_ADC_PollForConversion+0x3a>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined (ADC_SUPPORT_2_5_MSPS)
    if(READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN) != 0UL)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	f003 0301 	and.w	r3, r3, #1
 8003144:	2b00      	cmp	r3, #0
 8003146:	d007      	beq.n	8003158 <HAL_ADC_PollForConversion+0x36>
#else
    if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
#endif
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800314c:	f043 0220 	orr.w	r2, r3, #32
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	649a      	str	r2, [r3, #72]	; 0x48

      return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e06d      	b.n	8003234 <HAL_ADC_PollForConversion+0x112>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8003158:	2304      	movs	r3, #4
 800315a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800315c:	f7ff fc20 	bl	80029a0 <HAL_GetTick>
 8003160:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003162:	e021      	b.n	80031a8 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800316a:	d01d      	beq.n	80031a8 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800316c:	f7ff fc18 	bl	80029a0 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	429a      	cmp	r2, r3
 800317a:	d302      	bcc.n	8003182 <HAL_ADC_PollForConversion+0x60>
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d112      	bne.n	80031a8 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	4013      	ands	r3, r2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10b      	bne.n	80031a8 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003194:	f043 0204 	orr.w	r2, r3, #4
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	649a      	str	r2, [r3, #72]	; 0x48

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

          return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e045      	b.n	8003234 <HAL_ADC_PollForConversion+0x112>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	4013      	ands	r3, r2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d0d6      	beq.n	8003164 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031ba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7ff fc66 	bl	8002a98 <LL_ADC_REG_IsTriggerSourceSWStart>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d01c      	beq.n	800320c <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	7e9b      	ldrb	r3, [r3, #26]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d118      	bne.n	800320c <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0308 	and.w	r3, r3, #8
 80031e4:	2b08      	cmp	r3, #8
 80031e6:	d111      	bne.n	800320c <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	649a      	str	r2, [r3, #72]	; 0x48

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d105      	bne.n	800320c <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003204:	f043 0201 	orr.w	r2, r3, #1
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	649a      	str	r2, [r3, #72]	; 0x48
      }
    }
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2b08      	cmp	r3, #8
 8003210:	d104      	bne.n	800321c <HAL_ADC_PollForConversion+0xfa>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2208      	movs	r2, #8
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	e00a      	b.n	8003232 <HAL_ADC_PollForConversion+0x110>
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
#if defined (ADC_SUPPORT_2_5_MSPS)
    if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_WAIT) == 0UL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d103      	bne.n	8003232 <HAL_ADC_PollForConversion+0x110>
#else
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY) == 0UL)
#endif
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	220c      	movs	r2, #12
 8003230:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3710      	adds	r7, #16
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4618      	mov	r0, r3
 800324e:	f7ff fd3a 	bl	8002cc6 <LL_ADC_REG_IsConversionOngoing>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d15a      	bne.n	800330e <HAL_ADC_Start_DMA+0xd2>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800325e:	2b01      	cmp	r3, #1
 8003260:	d101      	bne.n	8003266 <HAL_ADC_Start_DMA+0x2a>
 8003262:	2302      	movs	r3, #2
 8003264:	e056      	b.n	8003314 <HAL_ADC_Start_DMA+0xd8>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	f000 fa04 	bl	800367c <ADC_Enable>
 8003274:	4603      	mov	r3, r0
 8003276:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003278:	7dfb      	ldrb	r3, [r7, #23]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d142      	bne.n	8003304 <HAL_ADC_Start_DMA+0xc8>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003282:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003286:	f023 0301 	bic.w	r3, r3, #1
 800328a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	649a      	str	r2, [r3, #72]	; 0x48
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

#if defined (ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	64da      	str	r2, [r3, #76]	; 0x4c
          ADC_CLEAR_ERRORCODE(hadc);
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329c:	4a1f      	ldr	r2, [pc, #124]	; (800331c <HAL_ADC_Start_DMA+0xe0>)
 800329e:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a4:	4a1e      	ldr	r2, [pc, #120]	; (8003320 <HAL_ADC_Start_DMA+0xe4>)
 80032a6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ac:	4a1d      	ldr	r2, [pc, #116]	; (8003324 <HAL_ADC_Start_DMA+0xe8>)
 80032ae:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	221c      	movs	r2, #28
 80032b6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 0210 	orr.w	r2, r2, #16
 80032ce:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if defined (ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68da      	ldr	r2, [r3, #12]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f042 0201 	orr.w	r2, r2, #1
 80032de:	60da      	str	r2, [r3, #12]
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
#endif

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	3340      	adds	r3, #64	; 0x40
 80032ea:	4619      	mov	r1, r3
 80032ec:	68ba      	ldr	r2, [r7, #8]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f000 fc9a 	bl	8003c28 <HAL_DMA_Start_IT>
 80032f4:	4603      	mov	r3, r0
 80032f6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7ff fcba 	bl	8002c76 <LL_ADC_REG_StartConversion>
 8003302:	e006      	b.n	8003312 <HAL_ADC_Start_DMA+0xd6>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800330c:	e001      	b.n	8003312 <HAL_ADC_Start_DMA+0xd6>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800330e:	2302      	movs	r3, #2
 8003310:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003312:	7dfb      	ldrb	r3, [r7, #23]
}
 8003314:	4618      	mov	r0, r3
 8003316:	3718      	adds	r7, #24
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	08003837 	.word	0x08003837
 8003320:	080038ff 	.word	0x080038ff
 8003324:	0800391b 	.word	0x0800391b

08003328 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003336:	4618      	mov	r0, r3
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr

08003342 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003342:	b480      	push	{r7}
 8003344:	b083      	sub	sp, #12
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800334a:	bf00      	nop
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr

08003356 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003356:	b480      	push	{r7}
 8003358:	b083      	sub	sp, #12
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800335e:	bf00      	nop
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr

0800336a <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800336a:	b480      	push	{r7}
 800336c:	b083      	sub	sp, #12
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003372:	bf00      	nop
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
	...

08003380 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b088      	sub	sp, #32
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
#if defined (ADC_SUPPORT_2_5_MSPS)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800338a:	2300      	movs	r3, #0
 800338c:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800338e:	2300      	movs	r3, #0
 8003390:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(hadc, sConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(sConfig->SamplingTime));
  
  if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    
    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d101      	bne.n	80033a8 <HAL_ADC_ConfigChannel+0x28>
 80033a4:	2302      	movs	r3, #2
 80033a6:	e114      	b.n	80035d2 <HAL_ADC_ConfigChannel+0x252>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7ff fc86 	bl	8002cc6 <LL_ADC_REG_IsConversionOngoing>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f040 80fb 	bne.w	80035b8 <HAL_ADC_ConfigChannel+0x238>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if(sConfig->Rank != ADC_RANK_NONE)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	f000 80b3 	beq.w	8003532 <HAL_ADC_ConfigChannel+0x1b2>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033d4:	d004      	beq.n	80033e0 <HAL_ADC_ConfigChannel+0x60>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	691b      	ldr	r3, [r3, #16]
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80033da:	4a80      	ldr	r2, [pc, #512]	; (80035dc <HAL_ADC_ConfigChannel+0x25c>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d108      	bne.n	80033f2 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4619      	mov	r1, r3
 80033ea:	4610      	mov	r0, r2
 80033ec:	f7ff fb89 	bl	8002b02 <LL_ADC_REG_SetSequencerChAdd>
 80033f0:	e041      	b.n	8003476 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */
        
        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f003 031f 	and.w	r3, r3, #31
 80033fe:	210f      	movs	r1, #15
 8003400:	fa01 f303 	lsl.w	r3, r1, r3
 8003404:	43db      	mvns	r3, r3
 8003406:	401a      	ands	r2, r3
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003410:	2b00      	cmp	r3, #0
 8003412:	d105      	bne.n	8003420 <HAL_ADC_ConfigChannel+0xa0>
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	0e9b      	lsrs	r3, r3, #26
 800341a:	f003 031f 	and.w	r3, r3, #31
 800341e:	e011      	b.n	8003444 <HAL_ADC_ConfigChannel+0xc4>
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	fa93 f3a3 	rbit	r3, r3
 800342c:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d101      	bne.n	800343c <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8003438:	2320      	movs	r3, #32
 800343a:	e003      	b.n	8003444 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	fab3 f383 	clz	r3, r3
 8003442:	b2db      	uxtb	r3, r3
 8003444:	6839      	ldr	r1, [r7, #0]
 8003446:	6849      	ldr	r1, [r1, #4]
 8003448:	f001 011f 	and.w	r1, r1, #31
 800344c:	408b      	lsls	r3, r1
 800344e:	431a      	orrs	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	651a      	str	r2, [r3, #80]	; 0x50
        
        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */        
        if(((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	089b      	lsrs	r3, r3, #2
 800345a:	1c5a      	adds	r2, r3, #1
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	69db      	ldr	r3, [r3, #28]
 8003460:	429a      	cmp	r2, r3
 8003462:	d808      	bhi.n	8003476 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6818      	ldr	r0, [r3, #0]
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	6859      	ldr	r1, [r3, #4]
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	461a      	mov	r2, r3
 8003472:	f7ff fb24 	bl	8002abe <LL_ADC_REG_SetSequencerRanks>
        }
      }
      
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6818      	ldr	r0, [r3, #0]
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	6819      	ldr	r1, [r3, #0]
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	461a      	mov	r2, r3
 8003484:	f7ff fb64 	bl	8002b50 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	4b54      	ldr	r3, [pc, #336]	; (80035e0 <HAL_ADC_ConfigChannel+0x260>)
 800348e:	4013      	ands	r3, r2
 8003490:	2b00      	cmp	r3, #0
 8003492:	f000 8099 	beq.w	80035c8 <HAL_ADC_ConfigChannel+0x248>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003496:	4853      	ldr	r0, [pc, #332]	; (80035e4 <HAL_ADC_ConfigChannel+0x264>)
 8003498:	f7ff fad1 	bl	8002a3e <LL_ADC_GetCommonPathInternalCh>
 800349c:	61b8      	str	r0, [r7, #24]
        
        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a51      	ldr	r2, [pc, #324]	; (80035e8 <HAL_ADC_ConfigChannel+0x268>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d120      	bne.n	80034ea <HAL_ADC_ConfigChannel+0x16a>
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d11b      	bne.n	80034ea <HAL_ADC_ConfigChannel+0x16a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80034b8:	4619      	mov	r1, r3
 80034ba:	484a      	ldr	r0, [pc, #296]	; (80035e4 <HAL_ADC_ConfigChannel+0x264>)
 80034bc:	f7ff faac 	bl	8002a18 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034c0:	4b4a      	ldr	r3, [pc, #296]	; (80035ec <HAL_ADC_ConfigChannel+0x26c>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	099b      	lsrs	r3, r3, #6
 80034c6:	4a4a      	ldr	r2, [pc, #296]	; (80035f0 <HAL_ADC_ConfigChannel+0x270>)
 80034c8:	fba2 2303 	umull	r2, r3, r2, r3
 80034cc:	099b      	lsrs	r3, r3, #6
 80034ce:	1c5a      	adds	r2, r3, #1
 80034d0:	4613      	mov	r3, r2
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	4413      	add	r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0UL)
 80034da:	e002      	b.n	80034e2 <HAL_ADC_ConfigChannel+0x162>
          {
            wait_loop_index--;
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	3b01      	subs	r3, #1
 80034e0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0UL)
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1f9      	bne.n	80034dc <HAL_ADC_ConfigChannel+0x15c>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80034e8:	e06e      	b.n	80035c8 <HAL_ADC_ConfigChannel+0x248>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a41      	ldr	r2, [pc, #260]	; (80035f4 <HAL_ADC_ConfigChannel+0x274>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d10c      	bne.n	800350e <HAL_ADC_ConfigChannel+0x18e>
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d107      	bne.n	800350e <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003504:	4619      	mov	r1, r3
 8003506:	4837      	ldr	r0, [pc, #220]	; (80035e4 <HAL_ADC_ConfigChannel+0x264>)
 8003508:	f7ff fa86 	bl	8002a18 <LL_ADC_SetCommonPathInternalCh>
 800350c:	e05c      	b.n	80035c8 <HAL_ADC_ConfigChannel+0x248>
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a39      	ldr	r2, [pc, #228]	; (80035f8 <HAL_ADC_ConfigChannel+0x278>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d157      	bne.n	80035c8 <HAL_ADC_ConfigChannel+0x248>
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d152      	bne.n	80035c8 <HAL_ADC_ConfigChannel+0x248>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003528:	4619      	mov	r1, r3
 800352a:	482e      	ldr	r0, [pc, #184]	; (80035e4 <HAL_ADC_ConfigChannel+0x264>)
 800352c:	f7ff fa74 	bl	8002a18 <LL_ADC_SetCommonPathInternalCh>
 8003530:	e04a      	b.n	80035c8 <HAL_ADC_ConfigChannel+0x248>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800353a:	d004      	beq.n	8003546 <HAL_ADC_ConfigChannel+0x1c6>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	691b      	ldr	r3, [r3, #16]
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8003540:	4a26      	ldr	r2, [pc, #152]	; (80035dc <HAL_ADC_ConfigChannel+0x25c>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d107      	bne.n	8003556 <HAL_ADC_ConfigChannel+0x1d6>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4619      	mov	r1, r3
 8003550:	4610      	mov	r0, r2
 8003552:	f7ff fae9 	bl	8002b28 <LL_ADC_REG_SetSequencerChRem>
      }
      
      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	4b21      	ldr	r3, [pc, #132]	; (80035e0 <HAL_ADC_ConfigChannel+0x260>)
 800355c:	4013      	ands	r3, r2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d032      	beq.n	80035c8 <HAL_ADC_ConfigChannel+0x248>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003562:	4820      	ldr	r0, [pc, #128]	; (80035e4 <HAL_ADC_ConfigChannel+0x264>)
 8003564:	f7ff fa6b 	bl	8002a3e <LL_ADC_GetCommonPathInternalCh>
 8003568:	61b8      	str	r0, [r7, #24]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a1e      	ldr	r2, [pc, #120]	; (80035e8 <HAL_ADC_ConfigChannel+0x268>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d107      	bne.n	8003584 <HAL_ADC_ConfigChannel+0x204>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800357a:	4619      	mov	r1, r3
 800357c:	4819      	ldr	r0, [pc, #100]	; (80035e4 <HAL_ADC_ConfigChannel+0x264>)
 800357e:	f7ff fa4b 	bl	8002a18 <LL_ADC_SetCommonPathInternalCh>
 8003582:	e021      	b.n	80035c8 <HAL_ADC_ConfigChannel+0x248>
        }
        else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a1a      	ldr	r2, [pc, #104]	; (80035f4 <HAL_ADC_ConfigChannel+0x274>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d107      	bne.n	800359e <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003594:	4619      	mov	r1, r3
 8003596:	4813      	ldr	r0, [pc, #76]	; (80035e4 <HAL_ADC_ConfigChannel+0x264>)
 8003598:	f7ff fa3e 	bl	8002a18 <LL_ADC_SetCommonPathInternalCh>
 800359c:	e014      	b.n	80035c8 <HAL_ADC_ConfigChannel+0x248>
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a15      	ldr	r2, [pc, #84]	; (80035f8 <HAL_ADC_ConfigChannel+0x278>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d10f      	bne.n	80035c8 <HAL_ADC_ConfigChannel+0x248>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80035ae:	4619      	mov	r1, r3
 80035b0:	480c      	ldr	r0, [pc, #48]	; (80035e4 <HAL_ADC_ConfigChannel+0x264>)
 80035b2:	f7ff fa31 	bl	8002a18 <LL_ADC_SetCommonPathInternalCh>
 80035b6:	e007      	b.n	80035c8 <HAL_ADC_ConfigChannel+0x248>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035bc:	f043 0220 	orr.w	r2, r3, #32
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	649a      	str	r2, [r3, #72]	; 0x48
    
    tmp_hal_status = HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	77fb      	strb	r3, [r7, #31]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 80035d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3720      	adds	r7, #32
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	80000004 	.word	0x80000004
 80035e0:	80080000 	.word	0x80080000
 80035e4:	40012700 	.word	0x40012700
 80035e8:	b0001000 	.word	0xb0001000
 80035ec:	20000004 	.word	0x20000004
 80035f0:	053e2d63 	.word	0x053e2d63
 80035f4:	b8004000 	.word	0xb8004000
 80035f8:	b4002000 	.word	0xb4002000

080035fc <ADC_ConversionStop>:
  *
  *         (1) On STM32WB serie, parameter not available on devices: STM32WB10xx, STM32WB15xx.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4618      	mov	r0, r3
 800360c:	f7ff fb5b 	bl	8002cc6 <LL_ADC_REG_IsConversionOngoing>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d02c      	beq.n	8003670 <ADC_ConversionStop+0x74>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4618      	mov	r0, r3
 800361c:	f7ff fb18 	bl	8002c50 <LL_ADC_IsDisableOngoing>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d104      	bne.n	8003630 <ADC_ConversionStop+0x34>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4618      	mov	r0, r3
 800362c:	f7ff fb37 	bl	8002c9e <LL_ADC_REG_StopConversion>
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003630:	f7ff f9b6 	bl	80029a0 <HAL_GetTick>
 8003634:	60f8      	str	r0, [r7, #12]
    
    while((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003636:	e014      	b.n	8003662 <ADC_ConversionStop+0x66>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003638:	f7ff f9b2 	bl	80029a0 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b05      	cmp	r3, #5
 8003644:	d90d      	bls.n	8003662 <ADC_ConversionStop+0x66>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800364a:	f043 0210 	orr.w	r2, r3, #16
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	649a      	str	r2, [r3, #72]	; 0x48
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003656:	f043 0201 	orr.w	r2, r3, #1
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	64da      	str	r2, [r3, #76]	; 0x4c
        
        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e007      	b.n	8003672 <ADC_ConversionStop+0x76>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f003 0304 	and.w	r3, r3, #4
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1e3      	bne.n	8003638 <ADC_ConversionStop+0x3c>

  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return HAL status */
  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
	...

0800367c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003684:	2300      	movs	r3, #0
 8003686:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4618      	mov	r0, r3
 800368e:	f7ff facc 	bl	8002c2a <LL_ADC_IsEnabled>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d162      	bne.n	800375e <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if defined (ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	689a      	ldr	r2, [r3, #8]
 800369e:	4b32      	ldr	r3, [pc, #200]	; (8003768 <ADC_Enable+0xec>)
 80036a0:	4013      	ands	r3, r2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00d      	beq.n	80036c2 <ADC_Enable+0x46>
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#endif
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036aa:	f043 0210 	orr.w	r2, r3, #16
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	649a      	str	r2, [r3, #72]	; 0x48

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036b6:	f043 0201 	orr.w	r2, r3, #1
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	64da      	str	r2, [r3, #76]	; 0x4c

      return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e04e      	b.n	8003760 <ADC_Enable+0xe4>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7ff fa87 	bl	8002bda <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80036cc:	4827      	ldr	r0, [pc, #156]	; (800376c <ADC_Enable+0xf0>)
 80036ce:	f7ff f9b6 	bl	8002a3e <LL_ADC_GetCommonPathInternalCh>
 80036d2:	4603      	mov	r3, r0
 80036d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00f      	beq.n	80036fc <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036dc:	4b24      	ldr	r3, [pc, #144]	; (8003770 <ADC_Enable+0xf4>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	099b      	lsrs	r3, r3, #6
 80036e2:	4a24      	ldr	r2, [pc, #144]	; (8003774 <ADC_Enable+0xf8>)
 80036e4:	fba2 2303 	umull	r2, r3, r2, r3
 80036e8:	099b      	lsrs	r3, r3, #6
 80036ea:	3301      	adds	r3, #1
 80036ec:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80036ee:	e002      	b.n	80036f6 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	3b01      	subs	r3, #1
 80036f4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1f9      	bne.n	80036f0 <ADC_Enable+0x74>
    }

#if defined (ADC_SUPPORT_2_5_MSPS)
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	7e5b      	ldrb	r3, [r3, #25]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d02c      	beq.n	800375e <ADC_Enable+0xe2>
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003704:	f7ff f94c 	bl	80029a0 <HAL_GetTick>
 8003708:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800370a:	e021      	b.n	8003750 <ADC_Enable+0xd4>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4618      	mov	r0, r3
 8003712:	f7ff fa8a 	bl	8002c2a <LL_ADC_IsEnabled>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d104      	bne.n	8003726 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4618      	mov	r0, r3
 8003722:	f7ff fa5a 	bl	8002bda <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003726:	f7ff f93b 	bl	80029a0 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b02      	cmp	r3, #2
 8003732:	d90d      	bls.n	8003750 <ADC_Enable+0xd4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003738:	f043 0210 	orr.w	r2, r3, #16
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	649a      	str	r2, [r3, #72]	; 0x48
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003744:	f043 0201 	orr.w	r2, r3, #1
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	64da      	str	r2, [r3, #76]	; 0x4c
          
          return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e007      	b.n	8003760 <ADC_Enable+0xe4>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b01      	cmp	r3, #1
 800375c:	d1d6      	bne.n	800370c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3710      	adds	r7, #16
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	80000017 	.word	0x80000017
 800376c:	40012700 	.word	0x40012700
 8003770:	20000004 	.word	0x20000004
 8003774:	053e2d63 	.word	0x053e2d63

08003778 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4618      	mov	r0, r3
 8003786:	f7ff fa63 	bl	8002c50 <LL_ADC_IsDisableOngoing>
 800378a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4618      	mov	r0, r3
 8003792:	f7ff fa4a 	bl	8002c2a <LL_ADC_IsEnabled>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d047      	beq.n	800382c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d144      	bne.n	800382c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if defined (ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f003 0305 	and.w	r3, r3, #5
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d10c      	bne.n	80037ca <ADC_Disable+0x52>
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#endif
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7ff fa24 	bl	8002c02 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2203      	movs	r2, #3
 80037c0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80037c2:	f7ff f8ed 	bl	80029a0 <HAL_GetTick>
 80037c6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80037c8:	e029      	b.n	800381e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ce:	f043 0210 	orr.w	r2, r3, #16
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	649a      	str	r2, [r3, #72]	; 0x48
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037da:	f043 0201 	orr.w	r2, r3, #1
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	64da      	str	r2, [r3, #76]	; 0x4c
      return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e023      	b.n	800382e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80037e6:	f7ff f8db 	bl	80029a0 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d914      	bls.n	800381e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00d      	beq.n	800381e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003806:	f043 0210 	orr.w	r2, r3, #16
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003812:	f043 0201 	orr.w	r2, r3, #1
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	64da      	str	r2, [r3, #76]	; 0x4c

          return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e007      	b.n	800382e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1dc      	bne.n	80037e6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003836:	b580      	push	{r7, lr}
 8003838:	b084      	sub	sp, #16
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003842:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003848:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800384c:	2b00      	cmp	r3, #0
 800384e:	d143      	bne.n	80038d8 <ADC_DMAConvCplt+0xa2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003854:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	649a      	str	r2, [r3, #72]	; 0x48
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
#if defined (ADC_SUPPORT_2_5_MSPS)
    if(   (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4618      	mov	r0, r3
 8003862:	f7ff f919 	bl	8002a98 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d031      	beq.n	80038d0 <ADC_DMAConvCplt+0x9a>
       && (hadc->Init.ContinuousConvMode == DISABLE)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	7e9b      	ldrb	r3, [r3, #26]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d12d      	bne.n	80038d0 <ADC_DMAConvCplt+0x9a>
      )
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0308 	and.w	r3, r3, #8
 800387e:	2b08      	cmp	r3, #8
 8003880:	d126      	bne.n	80038d0 <ADC_DMAConvCplt+0x9a>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4618      	mov	r0, r3
 8003888:	f7ff fa1d 	bl	8002cc6 <LL_ADC_REG_IsConversionOngoing>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d112      	bne.n	80038b8 <ADC_DMAConvCplt+0x82>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	685a      	ldr	r2, [r3, #4]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f022 020c 	bic.w	r2, r2, #12
 80038a0:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038aa:	f023 0301 	bic.w	r3, r3, #1
 80038ae:	f043 0201 	orr.w	r2, r3, #1
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	649a      	str	r2, [r3, #72]	; 0x48
 80038b6:	e00b      	b.n	80038d0 <ADC_DMAConvCplt+0x9a>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038bc:	f043 0220 	orr.w	r2, r3, #32
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	649a      	str	r2, [r3, #72]	; 0x48
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c8:	f043 0201 	orr.w	r2, r3, #1
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	f7ff fd36 	bl	8003342 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80038d6:	e00e      	b.n	80038f6 <ADC_DMAConvCplt+0xc0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038dc:	f003 0310 	and.w	r3, r3, #16
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d003      	beq.n	80038ec <ADC_DMAConvCplt+0xb6>
      HAL_ADC_ErrorCallback(hadc);
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f7ff fd40 	bl	800336a <HAL_ADC_ErrorCallback>
}
 80038ea:	e004      	b.n	80038f6 <ADC_DMAConvCplt+0xc0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	4798      	blx	r3
}
 80038f6:	bf00      	nop
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b084      	sub	sp, #16
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800390c:	68f8      	ldr	r0, [r7, #12]
 800390e:	f7ff fd22 	bl	8003356 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003912:	bf00      	nop
 8003914:	3710      	adds	r7, #16
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b084      	sub	sp, #16
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003926:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800392c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003938:	f043 0204 	orr.w	r2, r3, #4
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f7ff fd12 	bl	800336a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003946:	bf00      	nop
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
	...

08003950 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f003 0307 	and.w	r3, r3, #7
 800395e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003960:	4b0c      	ldr	r3, [pc, #48]	; (8003994 <__NVIC_SetPriorityGrouping+0x44>)
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003966:	68ba      	ldr	r2, [r7, #8]
 8003968:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800396c:	4013      	ands	r3, r2
 800396e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003978:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800397c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003980:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003982:	4a04      	ldr	r2, [pc, #16]	; (8003994 <__NVIC_SetPriorityGrouping+0x44>)
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	60d3      	str	r3, [r2, #12]
}
 8003988:	bf00      	nop
 800398a:	3714      	adds	r7, #20
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr
 8003994:	e000ed00 	.word	0xe000ed00

08003998 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800399c:	4b04      	ldr	r3, [pc, #16]	; (80039b0 <__NVIC_GetPriorityGrouping+0x18>)
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	0a1b      	lsrs	r3, r3, #8
 80039a2:	f003 0307 	and.w	r3, r3, #7
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr
 80039b0:	e000ed00 	.word	0xe000ed00

080039b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	4603      	mov	r3, r0
 80039bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	db0b      	blt.n	80039de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039c6:	79fb      	ldrb	r3, [r7, #7]
 80039c8:	f003 021f 	and.w	r2, r3, #31
 80039cc:	4907      	ldr	r1, [pc, #28]	; (80039ec <__NVIC_EnableIRQ+0x38>)
 80039ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d2:	095b      	lsrs	r3, r3, #5
 80039d4:	2001      	movs	r0, #1
 80039d6:	fa00 f202 	lsl.w	r2, r0, r2
 80039da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80039de:	bf00      	nop
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	e000e100 	.word	0xe000e100

080039f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	4603      	mov	r3, r0
 80039f8:	6039      	str	r1, [r7, #0]
 80039fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	db0a      	blt.n	8003a1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	b2da      	uxtb	r2, r3
 8003a08:	490c      	ldr	r1, [pc, #48]	; (8003a3c <__NVIC_SetPriority+0x4c>)
 8003a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a0e:	0112      	lsls	r2, r2, #4
 8003a10:	b2d2      	uxtb	r2, r2
 8003a12:	440b      	add	r3, r1
 8003a14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a18:	e00a      	b.n	8003a30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	b2da      	uxtb	r2, r3
 8003a1e:	4908      	ldr	r1, [pc, #32]	; (8003a40 <__NVIC_SetPriority+0x50>)
 8003a20:	79fb      	ldrb	r3, [r7, #7]
 8003a22:	f003 030f 	and.w	r3, r3, #15
 8003a26:	3b04      	subs	r3, #4
 8003a28:	0112      	lsls	r2, r2, #4
 8003a2a:	b2d2      	uxtb	r2, r2
 8003a2c:	440b      	add	r3, r1
 8003a2e:	761a      	strb	r2, [r3, #24]
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr
 8003a3c:	e000e100 	.word	0xe000e100
 8003a40:	e000ed00 	.word	0xe000ed00

08003a44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b089      	sub	sp, #36	; 0x24
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f003 0307 	and.w	r3, r3, #7
 8003a56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	f1c3 0307 	rsb	r3, r3, #7
 8003a5e:	2b04      	cmp	r3, #4
 8003a60:	bf28      	it	cs
 8003a62:	2304      	movcs	r3, #4
 8003a64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	3304      	adds	r3, #4
 8003a6a:	2b06      	cmp	r3, #6
 8003a6c:	d902      	bls.n	8003a74 <NVIC_EncodePriority+0x30>
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	3b03      	subs	r3, #3
 8003a72:	e000      	b.n	8003a76 <NVIC_EncodePriority+0x32>
 8003a74:	2300      	movs	r3, #0
 8003a76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a78:	f04f 32ff 	mov.w	r2, #4294967295
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a82:	43da      	mvns	r2, r3
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	401a      	ands	r2, r3
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a8c:	f04f 31ff 	mov.w	r1, #4294967295
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	fa01 f303 	lsl.w	r3, r1, r3
 8003a96:	43d9      	mvns	r1, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a9c:	4313      	orrs	r3, r2
         );
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3724      	adds	r7, #36	; 0x24
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr

08003aaa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b082      	sub	sp, #8
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f7ff ff4c 	bl	8003950 <__NVIC_SetPriorityGrouping>
}
 8003ab8:	bf00      	nop
 8003aba:	3708      	adds	r7, #8
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
 8003acc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ace:	f7ff ff63 	bl	8003998 <__NVIC_GetPriorityGrouping>
 8003ad2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	68b9      	ldr	r1, [r7, #8]
 8003ad8:	6978      	ldr	r0, [r7, #20]
 8003ada:	f7ff ffb3 	bl	8003a44 <NVIC_EncodePriority>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ae4:	4611      	mov	r1, r2
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7ff ff82 	bl	80039f0 <__NVIC_SetPriority>
}
 8003aec:	bf00      	nop
 8003aee:	3718      	adds	r7, #24
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	4603      	mov	r3, r0
 8003afc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7ff ff56 	bl	80039b4 <__NVIC_EnableIRQ>
}
 8003b08:	bf00      	nop
 8003b0a:	3708      	adds	r7, #8
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e078      	b.n	8003c14 <HAL_DMA_Init+0x104>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	461a      	mov	r2, r3
 8003b28:	4b3c      	ldr	r3, [pc, #240]	; (8003c1c <HAL_DMA_Init+0x10c>)
 8003b2a:	4413      	add	r3, r2
 8003b2c:	4a3c      	ldr	r2, [pc, #240]	; (8003c20 <HAL_DMA_Init+0x110>)
 8003b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b32:	091b      	lsrs	r3, r3, #4
 8003b34:	009a      	lsls	r2, r3, #2
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a39      	ldr	r2, [pc, #228]	; (8003c24 <HAL_DMA_Init+0x114>)
 8003b3e:	641a      	str	r2, [r3, #64]	; 0x40
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2202      	movs	r2, #2
 8003b44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b5a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003b64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 f9b0 	bl	8003ef8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ba0:	d102      	bne.n	8003ba8 <HAL_DMA_Init+0x98>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685a      	ldr	r2, [r3, #4]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bb0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003bb4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003bbe:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d010      	beq.n	8003bea <HAL_DMA_Init+0xda>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	2b04      	cmp	r3, #4
 8003bce:	d80c      	bhi.n	8003bea <HAL_DMA_Init+0xda>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 f9bd 	bl	8003f50 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bda:	2200      	movs	r2, #0
 8003bdc:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003be6:	605a      	str	r2, [r3, #4]
 8003be8:	e008      	b.n	8003bfc <HAL_DMA_Init+0xec>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	bffdfff8 	.word	0xbffdfff8
 8003c20:	cccccccd 	.word	0xcccccccd
 8003c24:	40020000 	.word	0x40020000

08003c28 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b086      	sub	sp, #24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
 8003c34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c36:	2300      	movs	r3, #0
 8003c38:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d101      	bne.n	8003c48 <HAL_DMA_Start_IT+0x20>
 8003c44:	2302      	movs	r3, #2
 8003c46:	e066      	b.n	8003d16 <HAL_DMA_Start_IT+0xee>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d155      	bne.n	8003d08 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2202      	movs	r2, #2
 8003c60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 0201 	bic.w	r2, r2, #1
 8003c78:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	68b9      	ldr	r1, [r7, #8]
 8003c80:	68f8      	ldr	r0, [r7, #12]
 8003c82:	f000 f8fb 	bl	8003e7c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d008      	beq.n	8003ca0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f042 020e 	orr.w	r2, r2, #14
 8003c9c:	601a      	str	r2, [r3, #0]
 8003c9e:	e00f      	b.n	8003cc0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f022 0204 	bic.w	r2, r2, #4
 8003cae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f042 020a 	orr.w	r2, r2, #10
 8003cbe:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d007      	beq.n	8003cde <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cdc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d007      	beq.n	8003cf6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cf4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f042 0201 	orr.w	r2, r2, #1
 8003d04:	601a      	str	r2, [r3, #0]
 8003d06:	e005      	b.n	8003d14 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003d10:	2302      	movs	r3, #2
 8003d12:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003d14:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3718      	adds	r7, #24
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	b084      	sub	sp, #16
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d3a:	f003 031c 	and.w	r3, r3, #28
 8003d3e:	2204      	movs	r2, #4
 8003d40:	409a      	lsls	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	4013      	ands	r3, r2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d026      	beq.n	8003d98 <HAL_DMA_IRQHandler+0x7a>
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	f003 0304 	and.w	r3, r3, #4
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d021      	beq.n	8003d98 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0320 	and.w	r3, r3, #32
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d107      	bne.n	8003d72 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f022 0204 	bic.w	r2, r2, #4
 8003d70:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d76:	f003 021c 	and.w	r2, r3, #28
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	2104      	movs	r1, #4
 8003d80:	fa01 f202 	lsl.w	r2, r1, r2
 8003d84:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d071      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003d96:	e06c      	b.n	8003e72 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d9c:	f003 031c 	and.w	r3, r3, #28
 8003da0:	2202      	movs	r2, #2
 8003da2:	409a      	lsls	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	4013      	ands	r3, r2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d02e      	beq.n	8003e0a <HAL_DMA_IRQHandler+0xec>
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d029      	beq.n	8003e0a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0320 	and.w	r3, r3, #32
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d10b      	bne.n	8003ddc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f022 020a 	bic.w	r2, r2, #10
 8003dd2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de0:	f003 021c 	and.w	r2, r3, #28
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de8:	2102      	movs	r1, #2
 8003dea:	fa01 f202 	lsl.w	r2, r1, r2
 8003dee:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d038      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003e08:	e033      	b.n	8003e72 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e0e:	f003 031c 	and.w	r3, r3, #28
 8003e12:	2208      	movs	r2, #8
 8003e14:	409a      	lsls	r2, r3
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	4013      	ands	r3, r2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d02a      	beq.n	8003e74 <HAL_DMA_IRQHandler+0x156>
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	f003 0308 	and.w	r3, r3, #8
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d025      	beq.n	8003e74 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f022 020e 	bic.w	r2, r2, #14
 8003e36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3c:	f003 021c 	and.w	r2, r3, #28
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e44:	2101      	movs	r1, #1
 8003e46:	fa01 f202 	lsl.w	r2, r1, r2
 8003e4a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d004      	beq.n	8003e74 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003e72:	bf00      	nop
 8003e74:	bf00      	nop
}
 8003e76:	3710      	adds	r7, #16
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]
 8003e88:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003e92:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d004      	beq.n	8003ea6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003ea4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eaa:	f003 021c 	and.w	r2, r3, #28
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb2:	2101      	movs	r1, #1
 8003eb4:	fa01 f202 	lsl.w	r2, r1, r2
 8003eb8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	683a      	ldr	r2, [r7, #0]
 8003ec0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	2b10      	cmp	r3, #16
 8003ec8:	d108      	bne.n	8003edc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68ba      	ldr	r2, [r7, #8]
 8003ed8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003eda:	e007      	b.n	8003eec <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68ba      	ldr	r2, [r7, #8]
 8003ee2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	60da      	str	r2, [r3, #12]
}
 8003eec:	bf00      	nop
 8003eee:	3714      	adds	r7, #20
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b085      	sub	sp, #20
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f04:	089b      	lsrs	r3, r3, #2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003f0c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	6493      	str	r3, [r2, #72]	; 0x48
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	3b08      	subs	r3, #8
 8003f1c:	4a0a      	ldr	r2, [pc, #40]	; (8003f48 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f22:	091b      	lsrs	r3, r3, #4
 8003f24:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a08      	ldr	r2, [pc, #32]	; (8003f4c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003f2a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f003 031f 	and.w	r3, r3, #31
 8003f32:	2201      	movs	r2, #1
 8003f34:	409a      	lsls	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003f3a:	bf00      	nop
 8003f3c:	3714      	adds	r7, #20
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	cccccccd 	.word	0xcccccccd
 8003f4c:	40020880 	.word	0x40020880

08003f50 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b085      	sub	sp, #20
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f60:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	4b0b      	ldr	r3, [pc, #44]	; (8003f94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003f66:	4413      	add	r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a09      	ldr	r2, [pc, #36]	; (8003f98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003f74:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	f003 0303 	and.w	r3, r3, #3
 8003f7e:	2201      	movs	r2, #1
 8003f80:	409a      	lsls	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003f86:	bf00      	nop
 8003f88:	3714      	adds	r7, #20
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	1000823f 	.word	0x1000823f
 8003f98:	40020940 	.word	0x40020940

08003f9c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b087      	sub	sp, #28
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003faa:	e146      	b.n	800423a <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	2101      	movs	r1, #1
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fb8:	4013      	ands	r3, r2
 8003fba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	f000 8138 	beq.w	8004234 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f003 0303 	and.w	r3, r3, #3
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d005      	beq.n	8003fdc <HAL_GPIO_Init+0x40>
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f003 0303 	and.w	r3, r3, #3
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d130      	bne.n	800403e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	005b      	lsls	r3, r3, #1
 8003fe6:	2203      	movs	r2, #3
 8003fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fec:	43db      	mvns	r3, r3
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	68da      	ldr	r2, [r3, #12]
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	005b      	lsls	r3, r3, #1
 8003ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	4313      	orrs	r3, r2
 8004004:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004012:	2201      	movs	r2, #1
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	fa02 f303 	lsl.w	r3, r2, r3
 800401a:	43db      	mvns	r3, r3
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	4013      	ands	r3, r2
 8004020:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	091b      	lsrs	r3, r3, #4
 8004028:	f003 0201 	and.w	r2, r3, #1
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	fa02 f303 	lsl.w	r3, r2, r3
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	4313      	orrs	r3, r2
 8004036:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f003 0303 	and.w	r3, r3, #3
 8004046:	2b03      	cmp	r3, #3
 8004048:	d017      	beq.n	800407a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	005b      	lsls	r3, r3, #1
 8004054:	2203      	movs	r2, #3
 8004056:	fa02 f303 	lsl.w	r3, r2, r3
 800405a:	43db      	mvns	r3, r3
 800405c:	693a      	ldr	r2, [r7, #16]
 800405e:	4013      	ands	r3, r2
 8004060:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	689a      	ldr	r2, [r3, #8]
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	005b      	lsls	r3, r3, #1
 800406a:	fa02 f303 	lsl.w	r3, r2, r3
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	4313      	orrs	r3, r2
 8004072:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f003 0303 	and.w	r3, r3, #3
 8004082:	2b02      	cmp	r3, #2
 8004084:	d123      	bne.n	80040ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	08da      	lsrs	r2, r3, #3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	3208      	adds	r2, #8
 800408e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004092:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	f003 0307 	and.w	r3, r3, #7
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	220f      	movs	r2, #15
 800409e:	fa02 f303 	lsl.w	r3, r2, r3
 80040a2:	43db      	mvns	r3, r3
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	4013      	ands	r3, r2
 80040a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	691a      	ldr	r2, [r3, #16]
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	f003 0307 	and.w	r3, r3, #7
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	4313      	orrs	r3, r2
 80040be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	08da      	lsrs	r2, r3, #3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	3208      	adds	r2, #8
 80040c8:	6939      	ldr	r1, [r7, #16]
 80040ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	005b      	lsls	r3, r3, #1
 80040d8:	2203      	movs	r2, #3
 80040da:	fa02 f303 	lsl.w	r3, r2, r3
 80040de:	43db      	mvns	r3, r3
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	4013      	ands	r3, r2
 80040e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f003 0203 	and.w	r2, r3, #3
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	005b      	lsls	r3, r3, #1
 80040f2:	fa02 f303 	lsl.w	r3, r2, r3
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800410a:	2b00      	cmp	r3, #0
 800410c:	f000 8092 	beq.w	8004234 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004110:	4a51      	ldr	r2, [pc, #324]	; (8004258 <HAL_GPIO_Init+0x2bc>)
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	089b      	lsrs	r3, r3, #2
 8004116:	3302      	adds	r3, #2
 8004118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800411c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	f003 0303 	and.w	r3, r3, #3
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	220f      	movs	r2, #15
 8004128:	fa02 f303 	lsl.w	r3, r2, r3
 800412c:	43db      	mvns	r3, r3
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	4013      	ands	r3, r2
 8004132:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800413a:	d013      	beq.n	8004164 <HAL_GPIO_Init+0x1c8>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a47      	ldr	r2, [pc, #284]	; (800425c <HAL_GPIO_Init+0x2c0>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d00d      	beq.n	8004160 <HAL_GPIO_Init+0x1c4>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a46      	ldr	r2, [pc, #280]	; (8004260 <HAL_GPIO_Init+0x2c4>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d007      	beq.n	800415c <HAL_GPIO_Init+0x1c0>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a45      	ldr	r2, [pc, #276]	; (8004264 <HAL_GPIO_Init+0x2c8>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d101      	bne.n	8004158 <HAL_GPIO_Init+0x1bc>
 8004154:	2304      	movs	r3, #4
 8004156:	e006      	b.n	8004166 <HAL_GPIO_Init+0x1ca>
 8004158:	2307      	movs	r3, #7
 800415a:	e004      	b.n	8004166 <HAL_GPIO_Init+0x1ca>
 800415c:	2302      	movs	r3, #2
 800415e:	e002      	b.n	8004166 <HAL_GPIO_Init+0x1ca>
 8004160:	2301      	movs	r3, #1
 8004162:	e000      	b.n	8004166 <HAL_GPIO_Init+0x1ca>
 8004164:	2300      	movs	r3, #0
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	f002 0203 	and.w	r2, r2, #3
 800416c:	0092      	lsls	r2, r2, #2
 800416e:	4093      	lsls	r3, r2
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	4313      	orrs	r3, r2
 8004174:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004176:	4938      	ldr	r1, [pc, #224]	; (8004258 <HAL_GPIO_Init+0x2bc>)
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	089b      	lsrs	r3, r3, #2
 800417c:	3302      	adds	r3, #2
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004184:	4b38      	ldr	r3, [pc, #224]	; (8004268 <HAL_GPIO_Init+0x2cc>)
 8004186:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800418a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	43db      	mvns	r3, r3
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	4013      	ands	r3, r2
 8004194:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d003      	beq.n	80041aa <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80041aa:	4a2f      	ldr	r2, [pc, #188]	; (8004268 <HAL_GPIO_Init+0x2cc>)
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80041b2:	4b2d      	ldr	r3, [pc, #180]	; (8004268 <HAL_GPIO_Init+0x2cc>)
 80041b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	43db      	mvns	r3, r3
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	4013      	ands	r3, r2
 80041c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d003      	beq.n	80041d8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80041d8:	4a23      	ldr	r2, [pc, #140]	; (8004268 <HAL_GPIO_Init+0x2cc>)
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80041e0:	4b21      	ldr	r3, [pc, #132]	; (8004268 <HAL_GPIO_Init+0x2cc>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	43db      	mvns	r3, r3
 80041ea:	693a      	ldr	r2, [r7, #16]
 80041ec:	4013      	ands	r3, r2
 80041ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d003      	beq.n	8004204 <HAL_GPIO_Init+0x268>
        {
          temp |= iocurrent;
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	4313      	orrs	r3, r2
 8004202:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004204:	4a18      	ldr	r2, [pc, #96]	; (8004268 <HAL_GPIO_Init+0x2cc>)
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800420a:	4b17      	ldr	r3, [pc, #92]	; (8004268 <HAL_GPIO_Init+0x2cc>)
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	43db      	mvns	r3, r3
 8004214:	693a      	ldr	r2, [r7, #16]
 8004216:	4013      	ands	r3, r2
 8004218:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d003      	beq.n	800422e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8004226:	693a      	ldr	r2, [r7, #16]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	4313      	orrs	r3, r2
 800422c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800422e:	4a0e      	ldr	r2, [pc, #56]	; (8004268 <HAL_GPIO_Init+0x2cc>)
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	3301      	adds	r3, #1
 8004238:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	fa22 f303 	lsr.w	r3, r2, r3
 8004244:	2b00      	cmp	r3, #0
 8004246:	f47f aeb1 	bne.w	8003fac <HAL_GPIO_Init+0x10>
  }
}
 800424a:	bf00      	nop
 800424c:	bf00      	nop
 800424e:	371c      	adds	r7, #28
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr
 8004258:	40010000 	.word	0x40010000
 800425c:	48000400 	.word	0x48000400
 8004260:	48000800 	.word	0x48000800
 8004264:	48001000 	.word	0x48001000
 8004268:	58000800 	.word	0x58000800

0800426c <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	460b      	mov	r3, r1
 8004276:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	691a      	ldr	r2, [r3, #16]
 800427c:	887b      	ldrh	r3, [r7, #2]
 800427e:	4013      	ands	r3, r2
 8004280:	2b00      	cmp	r3, #0
 8004282:	d002      	beq.n	800428a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004284:	2301      	movs	r3, #1
 8004286:	73fb      	strb	r3, [r7, #15]
 8004288:	e001      	b.n	800428e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800428a:	2300      	movs	r3, #0
 800428c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800428e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004290:	4618      	mov	r0, r3
 8004292:	3714      	adds	r7, #20
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	460b      	mov	r3, r1
 80042a6:	807b      	strh	r3, [r7, #2]
 80042a8:	4613      	mov	r3, r2
 80042aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80042ac:	787b      	ldrb	r3, [r7, #1]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d003      	beq.n	80042ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80042b2:	887a      	ldrh	r2, [r7, #2]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80042b8:	e002      	b.n	80042c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80042ba:	887a      	ldrh	r2, [r7, #2]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d101      	bne.n	80042de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e081      	b.n	80043e2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d106      	bne.n	80042f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f7fe f87e 	bl	80023f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2224      	movs	r2, #36	; 0x24
 80042fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f022 0201 	bic.w	r2, r2, #1
 800430e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685a      	ldr	r2, [r3, #4]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800431c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	689a      	ldr	r2, [r3, #8]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800432c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d107      	bne.n	8004346 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	689a      	ldr	r2, [r3, #8]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004342:	609a      	str	r2, [r3, #8]
 8004344:	e006      	b.n	8004354 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	689a      	ldr	r2, [r3, #8]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004352:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	2b02      	cmp	r3, #2
 800435a:	d104      	bne.n	8004366 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004364:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	6812      	ldr	r2, [r2, #0]
 8004370:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004374:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004378:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68da      	ldr	r2, [r3, #12]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004388:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	691a      	ldr	r2, [r3, #16]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	430a      	orrs	r2, r1
 80043a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	69d9      	ldr	r1, [r3, #28]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a1a      	ldr	r2, [r3, #32]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	430a      	orrs	r2, r1
 80043b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f042 0201 	orr.w	r2, r2, #1
 80043c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2220      	movs	r2, #32
 80043ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3708      	adds	r7, #8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
	...

080043ec <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b088      	sub	sp, #32
 80043f0:	af02      	add	r7, sp, #8
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	4608      	mov	r0, r1
 80043f6:	4611      	mov	r1, r2
 80043f8:	461a      	mov	r2, r3
 80043fa:	4603      	mov	r3, r0
 80043fc:	817b      	strh	r3, [r7, #10]
 80043fe:	460b      	mov	r3, r1
 8004400:	813b      	strh	r3, [r7, #8]
 8004402:	4613      	mov	r3, r2
 8004404:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b20      	cmp	r3, #32
 8004410:	f040 80f9 	bne.w	8004606 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004414:	6a3b      	ldr	r3, [r7, #32]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d002      	beq.n	8004420 <HAL_I2C_Mem_Write+0x34>
 800441a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800441c:	2b00      	cmp	r3, #0
 800441e:	d105      	bne.n	800442c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004426:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e0ed      	b.n	8004608 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004432:	2b01      	cmp	r3, #1
 8004434:	d101      	bne.n	800443a <HAL_I2C_Mem_Write+0x4e>
 8004436:	2302      	movs	r3, #2
 8004438:	e0e6      	b.n	8004608 <HAL_I2C_Mem_Write+0x21c>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2201      	movs	r2, #1
 800443e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004442:	f7fe faad 	bl	80029a0 <HAL_GetTick>
 8004446:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	9300      	str	r3, [sp, #0]
 800444c:	2319      	movs	r3, #25
 800444e:	2201      	movs	r2, #1
 8004450:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f000 fac3 	bl	80049e0 <I2C_WaitOnFlagUntilTimeout>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d001      	beq.n	8004464 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e0d1      	b.n	8004608 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2221      	movs	r2, #33	; 0x21
 8004468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2240      	movs	r2, #64	; 0x40
 8004470:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6a3a      	ldr	r2, [r7, #32]
 800447e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004484:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800448c:	88f8      	ldrh	r0, [r7, #6]
 800448e:	893a      	ldrh	r2, [r7, #8]
 8004490:	8979      	ldrh	r1, [r7, #10]
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	9301      	str	r3, [sp, #4]
 8004496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004498:	9300      	str	r3, [sp, #0]
 800449a:	4603      	mov	r3, r0
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f000 f9d3 	bl	8004848 <I2C_RequestMemoryWrite>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d005      	beq.n	80044b4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e0a9      	b.n	8004608 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	2bff      	cmp	r3, #255	; 0xff
 80044bc:	d90e      	bls.n	80044dc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	22ff      	movs	r2, #255	; 0xff
 80044c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044c8:	b2da      	uxtb	r2, r3
 80044ca:	8979      	ldrh	r1, [r7, #10]
 80044cc:	2300      	movs	r3, #0
 80044ce:	9300      	str	r3, [sp, #0]
 80044d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	f000 fbb5 	bl	8004c44 <I2C_TransferConfig>
 80044da:	e00f      	b.n	80044fc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ea:	b2da      	uxtb	r2, r3
 80044ec:	8979      	ldrh	r1, [r7, #10]
 80044ee:	2300      	movs	r3, #0
 80044f0:	9300      	str	r3, [sp, #0]
 80044f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044f6:	68f8      	ldr	r0, [r7, #12]
 80044f8:	f000 fba4 	bl	8004c44 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f000 faad 	bl	8004a60 <I2C_WaitOnTXISFlagUntilTimeout>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d001      	beq.n	8004510 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e07b      	b.n	8004608 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004514:	781a      	ldrb	r2, [r3, #0]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004520:	1c5a      	adds	r2, r3, #1
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800452a:	b29b      	uxth	r3, r3
 800452c:	3b01      	subs	r3, #1
 800452e:	b29a      	uxth	r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004538:	3b01      	subs	r3, #1
 800453a:	b29a      	uxth	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004544:	b29b      	uxth	r3, r3
 8004546:	2b00      	cmp	r3, #0
 8004548:	d034      	beq.n	80045b4 <HAL_I2C_Mem_Write+0x1c8>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800454e:	2b00      	cmp	r3, #0
 8004550:	d130      	bne.n	80045b4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	9300      	str	r3, [sp, #0]
 8004556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004558:	2200      	movs	r2, #0
 800455a:	2180      	movs	r1, #128	; 0x80
 800455c:	68f8      	ldr	r0, [r7, #12]
 800455e:	f000 fa3f 	bl	80049e0 <I2C_WaitOnFlagUntilTimeout>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d001      	beq.n	800456c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e04d      	b.n	8004608 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004570:	b29b      	uxth	r3, r3
 8004572:	2bff      	cmp	r3, #255	; 0xff
 8004574:	d90e      	bls.n	8004594 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	22ff      	movs	r2, #255	; 0xff
 800457a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004580:	b2da      	uxtb	r2, r3
 8004582:	8979      	ldrh	r1, [r7, #10]
 8004584:	2300      	movs	r3, #0
 8004586:	9300      	str	r3, [sp, #0]
 8004588:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	f000 fb59 	bl	8004c44 <I2C_TransferConfig>
 8004592:	e00f      	b.n	80045b4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004598:	b29a      	uxth	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045a2:	b2da      	uxtb	r2, r3
 80045a4:	8979      	ldrh	r1, [r7, #10]
 80045a6:	2300      	movs	r3, #0
 80045a8:	9300      	str	r3, [sp, #0]
 80045aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f000 fb48 	bl	8004c44 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d19e      	bne.n	80044fc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045be:	697a      	ldr	r2, [r7, #20]
 80045c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	f000 fa8c 	bl	8004ae0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d001      	beq.n	80045d2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e01a      	b.n	8004608 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2220      	movs	r2, #32
 80045d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	6859      	ldr	r1, [r3, #4]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	4b0a      	ldr	r3, [pc, #40]	; (8004610 <HAL_I2C_Mem_Write+0x224>)
 80045e6:	400b      	ands	r3, r1
 80045e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2220      	movs	r2, #32
 80045ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004602:	2300      	movs	r3, #0
 8004604:	e000      	b.n	8004608 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004606:	2302      	movs	r3, #2
  }
}
 8004608:	4618      	mov	r0, r3
 800460a:	3718      	adds	r7, #24
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	fe00e800 	.word	0xfe00e800

08004614 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b088      	sub	sp, #32
 8004618:	af02      	add	r7, sp, #8
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	4608      	mov	r0, r1
 800461e:	4611      	mov	r1, r2
 8004620:	461a      	mov	r2, r3
 8004622:	4603      	mov	r3, r0
 8004624:	817b      	strh	r3, [r7, #10]
 8004626:	460b      	mov	r3, r1
 8004628:	813b      	strh	r3, [r7, #8]
 800462a:	4613      	mov	r3, r2
 800462c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b20      	cmp	r3, #32
 8004638:	f040 80fd 	bne.w	8004836 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800463c:	6a3b      	ldr	r3, [r7, #32]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d002      	beq.n	8004648 <HAL_I2C_Mem_Read+0x34>
 8004642:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004644:	2b00      	cmp	r3, #0
 8004646:	d105      	bne.n	8004654 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800464e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e0f1      	b.n	8004838 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800465a:	2b01      	cmp	r3, #1
 800465c:	d101      	bne.n	8004662 <HAL_I2C_Mem_Read+0x4e>
 800465e:	2302      	movs	r3, #2
 8004660:	e0ea      	b.n	8004838 <HAL_I2C_Mem_Read+0x224>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800466a:	f7fe f999 	bl	80029a0 <HAL_GetTick>
 800466e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	9300      	str	r3, [sp, #0]
 8004674:	2319      	movs	r3, #25
 8004676:	2201      	movs	r2, #1
 8004678:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f000 f9af 	bl	80049e0 <I2C_WaitOnFlagUntilTimeout>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d001      	beq.n	800468c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e0d5      	b.n	8004838 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2222      	movs	r2, #34	; 0x22
 8004690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2240      	movs	r2, #64	; 0x40
 8004698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6a3a      	ldr	r2, [r7, #32]
 80046a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80046ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80046b4:	88f8      	ldrh	r0, [r7, #6]
 80046b6:	893a      	ldrh	r2, [r7, #8]
 80046b8:	8979      	ldrh	r1, [r7, #10]
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	9301      	str	r3, [sp, #4]
 80046be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c0:	9300      	str	r3, [sp, #0]
 80046c2:	4603      	mov	r3, r0
 80046c4:	68f8      	ldr	r0, [r7, #12]
 80046c6:	f000 f913 	bl	80048f0 <I2C_RequestMemoryRead>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d005      	beq.n	80046dc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e0ad      	b.n	8004838 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	2bff      	cmp	r3, #255	; 0xff
 80046e4:	d90e      	bls.n	8004704 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	22ff      	movs	r2, #255	; 0xff
 80046ea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046f0:	b2da      	uxtb	r2, r3
 80046f2:	8979      	ldrh	r1, [r7, #10]
 80046f4:	4b52      	ldr	r3, [pc, #328]	; (8004840 <HAL_I2C_Mem_Read+0x22c>)
 80046f6:	9300      	str	r3, [sp, #0]
 80046f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80046fc:	68f8      	ldr	r0, [r7, #12]
 80046fe:	f000 faa1 	bl	8004c44 <I2C_TransferConfig>
 8004702:	e00f      	b.n	8004724 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004708:	b29a      	uxth	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004712:	b2da      	uxtb	r2, r3
 8004714:	8979      	ldrh	r1, [r7, #10]
 8004716:	4b4a      	ldr	r3, [pc, #296]	; (8004840 <HAL_I2C_Mem_Read+0x22c>)
 8004718:	9300      	str	r3, [sp, #0]
 800471a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	f000 fa90 	bl	8004c44 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	9300      	str	r3, [sp, #0]
 8004728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800472a:	2200      	movs	r2, #0
 800472c:	2104      	movs	r1, #4
 800472e:	68f8      	ldr	r0, [r7, #12]
 8004730:	f000 f956 	bl	80049e0 <I2C_WaitOnFlagUntilTimeout>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e07c      	b.n	8004838 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004748:	b2d2      	uxtb	r2, r2
 800474a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004750:	1c5a      	adds	r2, r3, #1
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800475a:	3b01      	subs	r3, #1
 800475c:	b29a      	uxth	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004766:	b29b      	uxth	r3, r3
 8004768:	3b01      	subs	r3, #1
 800476a:	b29a      	uxth	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004774:	b29b      	uxth	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d034      	beq.n	80047e4 <HAL_I2C_Mem_Read+0x1d0>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800477e:	2b00      	cmp	r3, #0
 8004780:	d130      	bne.n	80047e4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	9300      	str	r3, [sp, #0]
 8004786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004788:	2200      	movs	r2, #0
 800478a:	2180      	movs	r1, #128	; 0x80
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	f000 f927 	bl	80049e0 <I2C_WaitOnFlagUntilTimeout>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d001      	beq.n	800479c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e04d      	b.n	8004838 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	2bff      	cmp	r3, #255	; 0xff
 80047a4:	d90e      	bls.n	80047c4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	22ff      	movs	r2, #255	; 0xff
 80047aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047b0:	b2da      	uxtb	r2, r3
 80047b2:	8979      	ldrh	r1, [r7, #10]
 80047b4:	2300      	movs	r3, #0
 80047b6:	9300      	str	r3, [sp, #0]
 80047b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80047bc:	68f8      	ldr	r0, [r7, #12]
 80047be:	f000 fa41 	bl	8004c44 <I2C_TransferConfig>
 80047c2:	e00f      	b.n	80047e4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c8:	b29a      	uxth	r2, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d2:	b2da      	uxtb	r2, r3
 80047d4:	8979      	ldrh	r1, [r7, #10]
 80047d6:	2300      	movs	r3, #0
 80047d8:	9300      	str	r3, [sp, #0]
 80047da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80047de:	68f8      	ldr	r0, [r7, #12]
 80047e0:	f000 fa30 	bl	8004c44 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d19a      	bne.n	8004724 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047ee:	697a      	ldr	r2, [r7, #20]
 80047f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	f000 f974 	bl	8004ae0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d001      	beq.n	8004802 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e01a      	b.n	8004838 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2220      	movs	r2, #32
 8004808:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	6859      	ldr	r1, [r3, #4]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	4b0b      	ldr	r3, [pc, #44]	; (8004844 <HAL_I2C_Mem_Read+0x230>)
 8004816:	400b      	ands	r3, r1
 8004818:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2220      	movs	r2, #32
 800481e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004832:	2300      	movs	r3, #0
 8004834:	e000      	b.n	8004838 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004836:	2302      	movs	r3, #2
  }
}
 8004838:	4618      	mov	r0, r3
 800483a:	3718      	adds	r7, #24
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	80002400 	.word	0x80002400
 8004844:	fe00e800 	.word	0xfe00e800

08004848 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b086      	sub	sp, #24
 800484c:	af02      	add	r7, sp, #8
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	4608      	mov	r0, r1
 8004852:	4611      	mov	r1, r2
 8004854:	461a      	mov	r2, r3
 8004856:	4603      	mov	r3, r0
 8004858:	817b      	strh	r3, [r7, #10]
 800485a:	460b      	mov	r3, r1
 800485c:	813b      	strh	r3, [r7, #8]
 800485e:	4613      	mov	r3, r2
 8004860:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004862:	88fb      	ldrh	r3, [r7, #6]
 8004864:	b2da      	uxtb	r2, r3
 8004866:	8979      	ldrh	r1, [r7, #10]
 8004868:	4b20      	ldr	r3, [pc, #128]	; (80048ec <I2C_RequestMemoryWrite+0xa4>)
 800486a:	9300      	str	r3, [sp, #0]
 800486c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004870:	68f8      	ldr	r0, [r7, #12]
 8004872:	f000 f9e7 	bl	8004c44 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004876:	69fa      	ldr	r2, [r7, #28]
 8004878:	69b9      	ldr	r1, [r7, #24]
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f000 f8f0 	bl	8004a60 <I2C_WaitOnTXISFlagUntilTimeout>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d001      	beq.n	800488a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e02c      	b.n	80048e4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800488a:	88fb      	ldrh	r3, [r7, #6]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d105      	bne.n	800489c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004890:	893b      	ldrh	r3, [r7, #8]
 8004892:	b2da      	uxtb	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	629a      	str	r2, [r3, #40]	; 0x28
 800489a:	e015      	b.n	80048c8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800489c:	893b      	ldrh	r3, [r7, #8]
 800489e:	0a1b      	lsrs	r3, r3, #8
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	b2da      	uxtb	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048aa:	69fa      	ldr	r2, [r7, #28]
 80048ac:	69b9      	ldr	r1, [r7, #24]
 80048ae:	68f8      	ldr	r0, [r7, #12]
 80048b0:	f000 f8d6 	bl	8004a60 <I2C_WaitOnTXISFlagUntilTimeout>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d001      	beq.n	80048be <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e012      	b.n	80048e4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80048be:	893b      	ldrh	r3, [r7, #8]
 80048c0:	b2da      	uxtb	r2, r3
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	9300      	str	r3, [sp, #0]
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	2200      	movs	r2, #0
 80048d0:	2180      	movs	r1, #128	; 0x80
 80048d2:	68f8      	ldr	r0, [r7, #12]
 80048d4:	f000 f884 	bl	80049e0 <I2C_WaitOnFlagUntilTimeout>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d001      	beq.n	80048e2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e000      	b.n	80048e4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3710      	adds	r7, #16
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	80002000 	.word	0x80002000

080048f0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af02      	add	r7, sp, #8
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	4608      	mov	r0, r1
 80048fa:	4611      	mov	r1, r2
 80048fc:	461a      	mov	r2, r3
 80048fe:	4603      	mov	r3, r0
 8004900:	817b      	strh	r3, [r7, #10]
 8004902:	460b      	mov	r3, r1
 8004904:	813b      	strh	r3, [r7, #8]
 8004906:	4613      	mov	r3, r2
 8004908:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800490a:	88fb      	ldrh	r3, [r7, #6]
 800490c:	b2da      	uxtb	r2, r3
 800490e:	8979      	ldrh	r1, [r7, #10]
 8004910:	4b20      	ldr	r3, [pc, #128]	; (8004994 <I2C_RequestMemoryRead+0xa4>)
 8004912:	9300      	str	r3, [sp, #0]
 8004914:	2300      	movs	r3, #0
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f000 f994 	bl	8004c44 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800491c:	69fa      	ldr	r2, [r7, #28]
 800491e:	69b9      	ldr	r1, [r7, #24]
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f000 f89d 	bl	8004a60 <I2C_WaitOnTXISFlagUntilTimeout>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d001      	beq.n	8004930 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e02c      	b.n	800498a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004930:	88fb      	ldrh	r3, [r7, #6]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d105      	bne.n	8004942 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004936:	893b      	ldrh	r3, [r7, #8]
 8004938:	b2da      	uxtb	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	629a      	str	r2, [r3, #40]	; 0x28
 8004940:	e015      	b.n	800496e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004942:	893b      	ldrh	r3, [r7, #8]
 8004944:	0a1b      	lsrs	r3, r3, #8
 8004946:	b29b      	uxth	r3, r3
 8004948:	b2da      	uxtb	r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004950:	69fa      	ldr	r2, [r7, #28]
 8004952:	69b9      	ldr	r1, [r7, #24]
 8004954:	68f8      	ldr	r0, [r7, #12]
 8004956:	f000 f883 	bl	8004a60 <I2C_WaitOnTXISFlagUntilTimeout>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d001      	beq.n	8004964 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e012      	b.n	800498a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004964:	893b      	ldrh	r3, [r7, #8]
 8004966:	b2da      	uxtb	r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	9300      	str	r3, [sp, #0]
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	2200      	movs	r2, #0
 8004976:	2140      	movs	r1, #64	; 0x40
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	f000 f831 	bl	80049e0 <I2C_WaitOnFlagUntilTimeout>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d001      	beq.n	8004988 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e000      	b.n	800498a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3710      	adds	r7, #16
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	80002000 	.word	0x80002000

08004998 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d103      	bne.n	80049b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2200      	movs	r2, #0
 80049b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	f003 0301 	and.w	r3, r3, #1
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d007      	beq.n	80049d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	699a      	ldr	r2, [r3, #24]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f042 0201 	orr.w	r2, r2, #1
 80049d2:	619a      	str	r2, [r3, #24]
  }
}
 80049d4:	bf00      	nop
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	603b      	str	r3, [r7, #0]
 80049ec:	4613      	mov	r3, r2
 80049ee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049f0:	e022      	b.n	8004a38 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f8:	d01e      	beq.n	8004a38 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049fa:	f7fd ffd1 	bl	80029a0 <HAL_GetTick>
 80049fe:	4602      	mov	r2, r0
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	683a      	ldr	r2, [r7, #0]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d302      	bcc.n	8004a10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d113      	bne.n	8004a38 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a14:	f043 0220 	orr.w	r2, r3, #32
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2220      	movs	r2, #32
 8004a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e00f      	b.n	8004a58 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	699a      	ldr	r2, [r3, #24]
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	4013      	ands	r3, r2
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	bf0c      	ite	eq
 8004a48:	2301      	moveq	r3, #1
 8004a4a:	2300      	movne	r3, #0
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	461a      	mov	r2, r3
 8004a50:	79fb      	ldrb	r3, [r7, #7]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d0cd      	beq.n	80049f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3710      	adds	r7, #16
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004a6c:	e02c      	b.n	8004ac8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	68b9      	ldr	r1, [r7, #8]
 8004a72:	68f8      	ldr	r0, [r7, #12]
 8004a74:	f000 f870 	bl	8004b58 <I2C_IsAcknowledgeFailed>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d001      	beq.n	8004a82 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e02a      	b.n	8004ad8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a88:	d01e      	beq.n	8004ac8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a8a:	f7fd ff89 	bl	80029a0 <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	68ba      	ldr	r2, [r7, #8]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d302      	bcc.n	8004aa0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d113      	bne.n	8004ac8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aa4:	f043 0220 	orr.w	r2, r3, #32
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e007      	b.n	8004ad8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	f003 0302 	and.w	r3, r3, #2
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d1cb      	bne.n	8004a6e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3710      	adds	r7, #16
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004aec:	e028      	b.n	8004b40 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	68b9      	ldr	r1, [r7, #8]
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	f000 f830 	bl	8004b58 <I2C_IsAcknowledgeFailed>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d001      	beq.n	8004b02 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e026      	b.n	8004b50 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b02:	f7fd ff4d 	bl	80029a0 <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	68ba      	ldr	r2, [r7, #8]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d302      	bcc.n	8004b18 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d113      	bne.n	8004b40 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b1c:	f043 0220 	orr.w	r2, r3, #32
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2220      	movs	r2, #32
 8004b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e007      	b.n	8004b50 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	699b      	ldr	r3, [r3, #24]
 8004b46:	f003 0320 	and.w	r3, r3, #32
 8004b4a:	2b20      	cmp	r3, #32
 8004b4c:	d1cf      	bne.n	8004aee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	699b      	ldr	r3, [r3, #24]
 8004b6a:	f003 0310 	and.w	r3, r3, #16
 8004b6e:	2b10      	cmp	r3, #16
 8004b70:	d161      	bne.n	8004c36 <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b80:	d02b      	beq.n	8004bda <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	685a      	ldr	r2, [r3, #4]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b90:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b92:	e022      	b.n	8004bda <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b9a:	d01e      	beq.n	8004bda <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b9c:	f7fd ff00 	bl	80029a0 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	68ba      	ldr	r2, [r7, #8]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d302      	bcc.n	8004bb2 <I2C_IsAcknowledgeFailed+0x5a>
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d113      	bne.n	8004bda <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb6:	f043 0220 	orr.w	r2, r3, #32
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2220      	movs	r2, #32
 8004bc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e02e      	b.n	8004c38 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	f003 0320 	and.w	r3, r3, #32
 8004be4:	2b20      	cmp	r3, #32
 8004be6:	d1d5      	bne.n	8004b94 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2210      	movs	r2, #16
 8004bee:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2220      	movs	r2, #32
 8004bf6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f7ff fecd 	bl	8004998 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	6859      	ldr	r1, [r3, #4]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	4b0d      	ldr	r3, [pc, #52]	; (8004c40 <I2C_IsAcknowledgeFailed+0xe8>)
 8004c0a:	400b      	ands	r3, r1
 8004c0c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c12:	f043 0204 	orr.w	r2, r3, #4
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2220      	movs	r2, #32
 8004c1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e000      	b.n	8004c38 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3710      	adds	r7, #16
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	fe00e800 	.word	0xfe00e800

08004c44 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	607b      	str	r3, [r7, #4]
 8004c4e:	460b      	mov	r3, r1
 8004c50:	817b      	strh	r3, [r7, #10]
 8004c52:	4613      	mov	r3, r2
 8004c54:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	685a      	ldr	r2, [r3, #4]
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	0d5b      	lsrs	r3, r3, #21
 8004c60:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004c64:	4b0d      	ldr	r3, [pc, #52]	; (8004c9c <I2C_TransferConfig+0x58>)
 8004c66:	430b      	orrs	r3, r1
 8004c68:	43db      	mvns	r3, r3
 8004c6a:	ea02 0103 	and.w	r1, r2, r3
 8004c6e:	897b      	ldrh	r3, [r7, #10]
 8004c70:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004c74:	7a7b      	ldrb	r3, [r7, #9]
 8004c76:	041b      	lsls	r3, r3, #16
 8004c78:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004c7c:	431a      	orrs	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	431a      	orrs	r2, r3
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	431a      	orrs	r2, r3
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	430a      	orrs	r2, r1
 8004c8c:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8004c8e:	bf00      	nop
 8004c90:	3714      	adds	r7, #20
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	03ff63ff 	.word	0x03ff63ff

08004ca0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b20      	cmp	r3, #32
 8004cb4:	d138      	bne.n	8004d28 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d101      	bne.n	8004cc4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	e032      	b.n	8004d2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2224      	movs	r2, #36	; 0x24
 8004cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f022 0201 	bic.w	r2, r2, #1
 8004ce2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004cf2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	6819      	ldr	r1, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	683a      	ldr	r2, [r7, #0]
 8004d00:	430a      	orrs	r2, r1
 8004d02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f042 0201 	orr.w	r2, r2, #1
 8004d12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2220      	movs	r2, #32
 8004d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d24:	2300      	movs	r3, #0
 8004d26:	e000      	b.n	8004d2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004d28:	2302      	movs	r3, #2
  }
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	370c      	adds	r7, #12
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr

08004d36 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004d36:	b480      	push	{r7}
 8004d38:	b085      	sub	sp, #20
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
 8004d3e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	2b20      	cmp	r3, #32
 8004d4a:	d139      	bne.n	8004dc0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d101      	bne.n	8004d5a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004d56:	2302      	movs	r3, #2
 8004d58:	e033      	b.n	8004dc2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2224      	movs	r2, #36	; 0x24
 8004d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f022 0201 	bic.w	r2, r2, #1
 8004d78:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004d88:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	021b      	lsls	r3, r3, #8
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68fa      	ldr	r2, [r7, #12]
 8004d9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f042 0201 	orr.w	r2, r2, #1
 8004daa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2220      	movs	r2, #32
 8004db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	e000      	b.n	8004dc2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004dc0:	2302      	movs	r3, #2
  }
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3714      	adds	r7, #20
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
	...

08004dd0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004dd4:	4b05      	ldr	r3, [pc, #20]	; (8004dec <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a04      	ldr	r2, [pc, #16]	; (8004dec <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004dda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dde:	6013      	str	r3, [r2, #0]
}
 8004de0:	bf00      	nop
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	58000400 	.word	0x58000400

08004df0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004df0:	b480      	push	{r7}
 8004df2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004df4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e02:	d101      	bne.n	8004e08 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004e04:	2301      	movs	r3, #1
 8004e06:	e000      	b.n	8004e0a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <LL_RCC_HSE_Enable>:
{
 8004e14:	b480      	push	{r7}
 8004e16:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004e18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e26:	6013      	str	r3, [r2, #0]
}
 8004e28:	bf00      	nop
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr

08004e32 <LL_RCC_HSE_Disable>:
{
 8004e32:	b480      	push	{r7}
 8004e34:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004e36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e44:	6013      	str	r3, [r2, #0]
}
 8004e46:	bf00      	nop
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <LL_RCC_HSE_IsReady>:
{
 8004e50:	b480      	push	{r7}
 8004e52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004e54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e62:	d101      	bne.n	8004e68 <LL_RCC_HSE_IsReady+0x18>
 8004e64:	2301      	movs	r3, #1
 8004e66:	e000      	b.n	8004e6a <LL_RCC_HSE_IsReady+0x1a>
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <LL_RCC_HSI_Enable>:
{
 8004e74:	b480      	push	{r7}
 8004e76:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004e78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e86:	6013      	str	r3, [r2, #0]
}
 8004e88:	bf00      	nop
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr

08004e92 <LL_RCC_HSI_Disable>:
{
 8004e92:	b480      	push	{r7}
 8004e94:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004e96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ea0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ea4:	6013      	str	r3, [r2, #0]
}
 8004ea6:	bf00      	nop
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <LL_RCC_HSI_IsReady>:
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ebe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ec2:	d101      	bne.n	8004ec8 <LL_RCC_HSI_IsReady+0x18>
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e000      	b.n	8004eca <LL_RCC_HSI_IsReady+0x1a>
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	061b      	lsls	r3, r3, #24
 8004eea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	604b      	str	r3, [r1, #4]
}
 8004ef2:	bf00      	nop
 8004ef4:	370c      	adds	r7, #12
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr

08004efe <LL_RCC_LSE_Enable>:
{
 8004efe:	b480      	push	{r7}
 8004f00:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f0e:	f043 0301 	orr.w	r3, r3, #1
 8004f12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004f16:	bf00      	nop
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <LL_RCC_LSE_Disable>:
{
 8004f20:	b480      	push	{r7}
 8004f22:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f30:	f023 0301 	bic.w	r3, r3, #1
 8004f34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004f38:	bf00      	nop
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr

08004f42 <LL_RCC_LSE_EnableBypass>:
{
 8004f42:	b480      	push	{r7}
 8004f44:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004f46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f52:	f043 0304 	orr.w	r3, r3, #4
 8004f56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004f5a:	bf00      	nop
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <LL_RCC_LSE_DisableBypass>:
{
 8004f64:	b480      	push	{r7}
 8004f66:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004f68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f74:	f023 0304 	bic.w	r3, r3, #4
 8004f78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004f7c:	bf00      	nop
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr

08004f86 <LL_RCC_LSE_IsReady>:
{
 8004f86:	b480      	push	{r7}
 8004f88:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004f8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f92:	f003 0302 	and.w	r3, r3, #2
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d101      	bne.n	8004f9e <LL_RCC_LSE_IsReady+0x18>
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e000      	b.n	8004fa0 <LL_RCC_LSE_IsReady+0x1a>
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr

08004faa <LL_RCC_LSI1_Enable>:
{
 8004faa:	b480      	push	{r7}
 8004fac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004fae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fba:	f043 0301 	orr.w	r3, r3, #1
 8004fbe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004fc2:	bf00      	nop
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <LL_RCC_LSI1_Disable>:
{
 8004fcc:	b480      	push	{r7}
 8004fce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004fd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fdc:	f023 0301 	bic.w	r3, r3, #1
 8004fe0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004fe4:	bf00      	nop
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr

08004fee <LL_RCC_LSI1_IsReady>:
{
 8004fee:	b480      	push	{r7}
 8004ff0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004ff2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ff6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ffa:	f003 0302 	and.w	r3, r3, #2
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d101      	bne.n	8005006 <LL_RCC_LSI1_IsReady+0x18>
 8005002:	2301      	movs	r3, #1
 8005004:	e000      	b.n	8005008 <LL_RCC_LSI1_IsReady+0x1a>
 8005006:	2300      	movs	r3, #0
}
 8005008:	4618      	mov	r0, r3
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr

08005012 <LL_RCC_LSI2_Enable>:
{
 8005012:	b480      	push	{r7}
 8005014:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800501a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800501e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005022:	f043 0304 	orr.w	r3, r3, #4
 8005026:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800502a:	bf00      	nop
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <LL_RCC_LSI2_Disable>:
{
 8005034:	b480      	push	{r7}
 8005036:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005038:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800503c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005040:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005044:	f023 0304 	bic.w	r3, r3, #4
 8005048:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800504c:	bf00      	nop
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr

08005056 <LL_RCC_LSI2_IsReady>:
{
 8005056:	b480      	push	{r7}
 8005058:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800505a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800505e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005062:	f003 0308 	and.w	r3, r3, #8
 8005066:	2b08      	cmp	r3, #8
 8005068:	d101      	bne.n	800506e <LL_RCC_LSI2_IsReady+0x18>
 800506a:	2301      	movs	r3, #1
 800506c:	e000      	b.n	8005070 <LL_RCC_LSI2_IsReady+0x1a>
 800506e:	2300      	movs	r3, #0
}
 8005070:	4618      	mov	r0, r3
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr

0800507a <LL_RCC_LSI2_SetTrimming>:
{
 800507a:	b480      	push	{r7}
 800507c:	b083      	sub	sp, #12
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8005082:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005086:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800508a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	021b      	lsls	r3, r3, #8
 8005092:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005096:	4313      	orrs	r3, r2
 8005098:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800509c:	bf00      	nop
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <LL_RCC_MSI_Enable>:
{
 80050a8:	b480      	push	{r7}
 80050aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80050ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050b6:	f043 0301 	orr.w	r3, r3, #1
 80050ba:	6013      	str	r3, [r2, #0]
}
 80050bc:	bf00      	nop
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr

080050c6 <LL_RCC_MSI_Disable>:
{
 80050c6:	b480      	push	{r7}
 80050c8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80050ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050d4:	f023 0301 	bic.w	r3, r3, #1
 80050d8:	6013      	str	r3, [r2, #0]
}
 80050da:	bf00      	nop
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <LL_RCC_MSI_IsReady>:
{
 80050e4:	b480      	push	{r7}
 80050e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80050e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0302 	and.w	r3, r3, #2
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d101      	bne.n	80050fa <LL_RCC_MSI_IsReady+0x16>
 80050f6:	2301      	movs	r3, #1
 80050f8:	e000      	b.n	80050fc <LL_RCC_MSI_IsReady+0x18>
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr

08005106 <LL_RCC_MSI_SetRange>:
{
 8005106:	b480      	push	{r7}
 8005108:	b083      	sub	sp, #12
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800510e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005118:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4313      	orrs	r3, r2
 8005120:	600b      	str	r3, [r1, #0]
}
 8005122:	bf00      	nop
 8005124:	370c      	adds	r7, #12
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr

0800512e <LL_RCC_MSI_GetRange>:
{
 800512e:	b480      	push	{r7}
 8005130:	b083      	sub	sp, #12
 8005132:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005134:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800513e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2bb0      	cmp	r3, #176	; 0xb0
 8005144:	d901      	bls.n	800514a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8005146:	23b0      	movs	r3, #176	; 0xb0
 8005148:	607b      	str	r3, [r7, #4]
  return msiRange;
 800514a:	687b      	ldr	r3, [r7, #4]
}
 800514c:	4618      	mov	r0, r3
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005160:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	021b      	lsls	r3, r3, #8
 800516e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005172:	4313      	orrs	r3, r2
 8005174:	604b      	str	r3, [r1, #4]
}
 8005176:	bf00      	nop
 8005178:	370c      	adds	r7, #12
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr

08005182 <LL_RCC_SetSysClkSource>:
{
 8005182:	b480      	push	{r7}
 8005184:	b083      	sub	sp, #12
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800518a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	f023 0203 	bic.w	r2, r3, #3
 8005194:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4313      	orrs	r3, r2
 800519c:	608b      	str	r3, [r1, #8]
}
 800519e:	bf00      	nop
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr

080051aa <LL_RCC_GetSysClkSource>:
{
 80051aa:	b480      	push	{r7}
 80051ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80051ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	f003 030c 	and.w	r3, r3, #12
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <LL_RCC_SetAHBPrescaler>:
{
 80051c2:	b480      	push	{r7}
 80051c4:	b083      	sub	sp, #12
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80051ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4313      	orrs	r3, r2
 80051dc:	608b      	str	r3, [r1, #8]
}
 80051de:	bf00      	nop
 80051e0:	370c      	adds	r7, #12
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr

080051ea <LL_C2_RCC_SetAHBPrescaler>:
{
 80051ea:	b480      	push	{r7}
 80051ec:	b083      	sub	sp, #12
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80051f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80051fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4313      	orrs	r3, r2
 8005206:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800520a:	bf00      	nop
 800520c:	370c      	adds	r7, #12
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr

08005216 <LL_RCC_SetAHB4Prescaler>:
{
 8005216:	b480      	push	{r7}
 8005218:	b083      	sub	sp, #12
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800521e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005222:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005226:	f023 020f 	bic.w	r2, r3, #15
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	091b      	lsrs	r3, r3, #4
 800522e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005232:	4313      	orrs	r3, r2
 8005234:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005238:	bf00      	nop
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <LL_RCC_SetAPB1Prescaler>:
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800524c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005256:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4313      	orrs	r3, r2
 800525e:	608b      	str	r3, [r1, #8]
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <LL_RCC_SetAPB2Prescaler>:
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005274:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800527e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4313      	orrs	r3, r2
 8005286:	608b      	str	r3, [r1, #8]
}
 8005288:	bf00      	nop
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <LL_RCC_GetAHBPrescaler>:
{
 8005294:	b480      	push	{r7}
 8005296:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <LL_C2_RCC_GetAHBPrescaler>:
{
 80052ac:	b480      	push	{r7}
 80052ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 80052b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052b4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80052b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr

080052c6 <LL_RCC_GetAHB4Prescaler>:
{
 80052c6:	b480      	push	{r7}
 80052c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80052ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052ce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80052d2:	011b      	lsls	r3, r3, #4
 80052d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr

080052e2 <LL_RCC_GetAPB1Prescaler>:
{
 80052e2:	b480      	push	{r7}
 80052e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80052e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr

080052fa <LL_RCC_GetAPB2Prescaler>:
{
 80052fa:	b480      	push	{r7}
 80052fc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80052fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005308:	4618      	mov	r0, r3
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr

08005312 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005312:	b480      	push	{r7}
 8005314:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005316:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005320:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005324:	6013      	str	r3, [r2, #0]
}
 8005326:	bf00      	nop
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005330:	b480      	push	{r7}
 8005332:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005334:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800533e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005342:	6013      	str	r3, [r2, #0]
}
 8005344:	bf00      	nop
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr

0800534e <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800534e:	b480      	push	{r7}
 8005350:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005352:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800535c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005360:	d101      	bne.n	8005366 <LL_RCC_PLL_IsReady+0x18>
 8005362:	2301      	movs	r3, #1
 8005364:	e000      	b.n	8005368 <LL_RCC_PLL_IsReady+0x1a>
 8005366:	2300      	movs	r3, #0
}
 8005368:	4618      	mov	r0, r3
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr

08005372 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005372:	b480      	push	{r7}
 8005374:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005376:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	0a1b      	lsrs	r3, r3, #8
 800537e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005382:	4618      	mov	r0, r3
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800538c:	b480      	push	{r7}
 800538e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005390:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800539a:	4618      	mov	r0, r3
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80053a4:	b480      	push	{r7}
 80053a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80053a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80053bc:	b480      	push	{r7}
 80053be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80053c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	f003 0303 	and.w	r3, r3, #3
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80053d4:	b480      	push	{r7}
 80053d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80053d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053e6:	d101      	bne.n	80053ec <LL_RCC_IsActiveFlag_HPRE+0x18>
 80053e8:	2301      	movs	r3, #1
 80053ea:	e000      	b.n	80053ee <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80053f8:	b480      	push	{r7}
 80053fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80053fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005400:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005408:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800540c:	d101      	bne.n	8005412 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800540e:	2301      	movs	r3, #1
 8005410:	e000      	b.n	8005414 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr

0800541e <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800541e:	b480      	push	{r7}
 8005420:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005422:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005426:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800542a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800542e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005432:	d101      	bne.n	8005438 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005434:	2301      	movs	r3, #1
 8005436:	e000      	b.n	800543a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005444:	b480      	push	{r7}
 8005446:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005448:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005452:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005456:	d101      	bne.n	800545c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005458:	2301      	movs	r3, #1
 800545a:	e000      	b.n	800545e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005468:	b480      	push	{r7}
 800546a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800546c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005476:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800547a:	d101      	bne.n	8005480 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800547c:	2301      	movs	r3, #1
 800547e:	e000      	b.n	8005482 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800548c:	b590      	push	{r4, r7, lr}
 800548e:	b08d      	sub	sp, #52	; 0x34
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e33b      	b.n	8005b16 <HAL_RCC_OscConfig+0x68a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0320 	and.w	r3, r3, #32
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	f000 8092 	beq.w	80055d0 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054ac:	f7ff fe7d 	bl	80051aa <LL_RCC_GetSysClkSource>
 80054b0:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054b2:	f7ff ff83 	bl	80053bc <LL_RCC_PLL_GetMainSource>
 80054b6:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80054b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d005      	beq.n	80054ca <HAL_RCC_OscConfig+0x3e>
 80054be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c0:	2b0c      	cmp	r3, #12
 80054c2:	d14c      	bne.n	800555e <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80054c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d149      	bne.n	800555e <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80054ca:	f7ff fe0b 	bl	80050e4 <LL_RCC_MSI_IsReady>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d005      	beq.n	80054e0 <HAL_RCC_OscConfig+0x54>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	69db      	ldr	r3, [r3, #28]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d101      	bne.n	80054e0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e31a      	b.n	8005b16 <HAL_RCC_OscConfig+0x68a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80054e4:	f7ff fe23 	bl	800512e <LL_RCC_MSI_GetRange>
 80054e8:	4603      	mov	r3, r0
 80054ea:	429c      	cmp	r4, r3
 80054ec:	d914      	bls.n	8005518 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f2:	4618      	mov	r0, r3
 80054f4:	f000 fd38 	bl	8005f68 <RCC_SetFlashLatencyFromMSIRange>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d001      	beq.n	8005502 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e309      	b.n	8005b16 <HAL_RCC_OscConfig+0x68a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005506:	4618      	mov	r0, r3
 8005508:	f7ff fdfd 	bl	8005106 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a1b      	ldr	r3, [r3, #32]
 8005510:	4618      	mov	r0, r3
 8005512:	f7ff fe21 	bl	8005158 <LL_RCC_MSI_SetCalibTrimming>
 8005516:	e013      	b.n	8005540 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551c:	4618      	mov	r0, r3
 800551e:	f7ff fdf2 	bl	8005106 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	4618      	mov	r0, r3
 8005528:	f7ff fe16 	bl	8005158 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005530:	4618      	mov	r0, r3
 8005532:	f000 fd19 	bl	8005f68 <RCC_SetFlashLatencyFromMSIRange>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d001      	beq.n	8005540 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e2ea      	b.n	8005b16 <HAL_RCC_OscConfig+0x68a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005540:	f000 fca0 	bl	8005e84 <HAL_RCC_GetHCLKFreq>
 8005544:	4603      	mov	r3, r0
 8005546:	4ab3      	ldr	r2, [pc, #716]	; (8005814 <HAL_RCC_OscConfig+0x388>)
 8005548:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800554a:	4bb3      	ldr	r3, [pc, #716]	; (8005818 <HAL_RCC_OscConfig+0x38c>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4618      	mov	r0, r3
 8005550:	f7fd f810 	bl	8002574 <HAL_InitTick>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d039      	beq.n	80055ce <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e2db      	b.n	8005b16 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	69db      	ldr	r3, [r3, #28]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d01e      	beq.n	80055a4 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005566:	f7ff fd9f 	bl	80050a8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800556a:	f7fd fa19 	bl	80029a0 <HAL_GetTick>
 800556e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005570:	e008      	b.n	8005584 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005572:	f7fd fa15 	bl	80029a0 <HAL_GetTick>
 8005576:	4602      	mov	r2, r0
 8005578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	2b02      	cmp	r3, #2
 800557e:	d901      	bls.n	8005584 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	e2c8      	b.n	8005b16 <HAL_RCC_OscConfig+0x68a>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005584:	f7ff fdae 	bl	80050e4 <LL_RCC_MSI_IsReady>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d0f1      	beq.n	8005572 <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005592:	4618      	mov	r0, r3
 8005594:	f7ff fdb7 	bl	8005106 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6a1b      	ldr	r3, [r3, #32]
 800559c:	4618      	mov	r0, r3
 800559e:	f7ff fddb 	bl	8005158 <LL_RCC_MSI_SetCalibTrimming>
 80055a2:	e015      	b.n	80055d0 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80055a4:	f7ff fd8f 	bl	80050c6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80055a8:	f7fd f9fa 	bl	80029a0 <HAL_GetTick>
 80055ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80055ae:	e008      	b.n	80055c2 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80055b0:	f7fd f9f6 	bl	80029a0 <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d901      	bls.n	80055c2 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e2a9      	b.n	8005b16 <HAL_RCC_OscConfig+0x68a>
        while (LL_RCC_MSI_IsReady() != 0U)
 80055c2:	f7ff fd8f 	bl	80050e4 <LL_RCC_MSI_IsReady>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d1f1      	bne.n	80055b0 <HAL_RCC_OscConfig+0x124>
 80055cc:	e000      	b.n	80055d0 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80055ce:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0301 	and.w	r3, r3, #1
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d04e      	beq.n	800567a <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055dc:	f7ff fde5 	bl	80051aa <LL_RCC_GetSysClkSource>
 80055e0:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80055e2:	f7ff feeb 	bl	80053bc <LL_RCC_PLL_GetMainSource>
 80055e6:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80055e8:	6a3b      	ldr	r3, [r7, #32]
 80055ea:	2b08      	cmp	r3, #8
 80055ec:	d005      	beq.n	80055fa <HAL_RCC_OscConfig+0x16e>
 80055ee:	6a3b      	ldr	r3, [r7, #32]
 80055f0:	2b0c      	cmp	r3, #12
 80055f2:	d10d      	bne.n	8005610 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	2b03      	cmp	r3, #3
 80055f8:	d10a      	bne.n	8005610 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055fa:	f7ff fc29 	bl	8004e50 <LL_RCC_HSE_IsReady>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d039      	beq.n	8005678 <HAL_RCC_OscConfig+0x1ec>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d135      	bne.n	8005678 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e282      	b.n	8005b16 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005618:	d102      	bne.n	8005620 <HAL_RCC_OscConfig+0x194>
 800561a:	f7ff fbfb 	bl	8004e14 <LL_RCC_HSE_Enable>
 800561e:	e001      	b.n	8005624 <HAL_RCC_OscConfig+0x198>
 8005620:	f7ff fc07 	bl	8004e32 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d012      	beq.n	8005652 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800562c:	f7fd f9b8 	bl	80029a0 <HAL_GetTick>
 8005630:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005632:	e008      	b.n	8005646 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005634:	f7fd f9b4 	bl	80029a0 <HAL_GetTick>
 8005638:	4602      	mov	r2, r0
 800563a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	2b64      	cmp	r3, #100	; 0x64
 8005640:	d901      	bls.n	8005646 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e267      	b.n	8005b16 <HAL_RCC_OscConfig+0x68a>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005646:	f7ff fc03 	bl	8004e50 <LL_RCC_HSE_IsReady>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d0f1      	beq.n	8005634 <HAL_RCC_OscConfig+0x1a8>
 8005650:	e013      	b.n	800567a <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005652:	f7fd f9a5 	bl	80029a0 <HAL_GetTick>
 8005656:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005658:	e008      	b.n	800566c <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800565a:	f7fd f9a1 	bl	80029a0 <HAL_GetTick>
 800565e:	4602      	mov	r2, r0
 8005660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	2b64      	cmp	r3, #100	; 0x64
 8005666:	d901      	bls.n	800566c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e254      	b.n	8005b16 <HAL_RCC_OscConfig+0x68a>
        while (LL_RCC_HSE_IsReady() != 0U)
 800566c:	f7ff fbf0 	bl	8004e50 <LL_RCC_HSE_IsReady>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d1f1      	bne.n	800565a <HAL_RCC_OscConfig+0x1ce>
 8005676:	e000      	b.n	800567a <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005678:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 0302 	and.w	r3, r3, #2
 8005682:	2b00      	cmp	r3, #0
 8005684:	d051      	beq.n	800572a <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005686:	f7ff fd90 	bl	80051aa <LL_RCC_GetSysClkSource>
 800568a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800568c:	f7ff fe96 	bl	80053bc <LL_RCC_PLL_GetMainSource>
 8005690:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	2b04      	cmp	r3, #4
 8005696:	d005      	beq.n	80056a4 <HAL_RCC_OscConfig+0x218>
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	2b0c      	cmp	r3, #12
 800569c:	d113      	bne.n	80056c6 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d110      	bne.n	80056c6 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056a4:	f7ff fc04 	bl	8004eb0 <LL_RCC_HSI_IsReady>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d005      	beq.n	80056ba <HAL_RCC_OscConfig+0x22e>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d101      	bne.n	80056ba <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e22d      	b.n	8005b16 <HAL_RCC_OscConfig+0x68a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	4618      	mov	r0, r3
 80056c0:	f7ff fc08 	bl	8004ed4 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056c4:	e031      	b.n	800572a <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d019      	beq.n	8005702 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056ce:	f7ff fbd1 	bl	8004e74 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056d2:	f7fd f965 	bl	80029a0 <HAL_GetTick>
 80056d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80056d8:	e008      	b.n	80056ec <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056da:	f7fd f961 	bl	80029a0 <HAL_GetTick>
 80056de:	4602      	mov	r2, r0
 80056e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d901      	bls.n	80056ec <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 80056e8:	2303      	movs	r3, #3
 80056ea:	e214      	b.n	8005b16 <HAL_RCC_OscConfig+0x68a>
        while (LL_RCC_HSI_IsReady() == 0U)
 80056ec:	f7ff fbe0 	bl	8004eb0 <LL_RCC_HSI_IsReady>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d0f1      	beq.n	80056da <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	4618      	mov	r0, r3
 80056fc:	f7ff fbea 	bl	8004ed4 <LL_RCC_HSI_SetCalibTrimming>
 8005700:	e013      	b.n	800572a <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005702:	f7ff fbc6 	bl	8004e92 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005706:	f7fd f94b 	bl	80029a0 <HAL_GetTick>
 800570a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800570c:	e008      	b.n	8005720 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800570e:	f7fd f947 	bl	80029a0 <HAL_GetTick>
 8005712:	4602      	mov	r2, r0
 8005714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	2b02      	cmp	r3, #2
 800571a:	d901      	bls.n	8005720 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	e1fa      	b.n	8005b16 <HAL_RCC_OscConfig+0x68a>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005720:	f7ff fbc6 	bl	8004eb0 <LL_RCC_HSI_IsReady>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d1f1      	bne.n	800570e <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0308 	and.w	r3, r3, #8
 8005732:	2b00      	cmp	r3, #0
 8005734:	d106      	bne.n	8005744 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800573e:	2b00      	cmp	r3, #0
 8005740:	f000 80a3 	beq.w	800588a <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	695b      	ldr	r3, [r3, #20]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d076      	beq.n	800583a <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0310 	and.w	r3, r3, #16
 8005754:	2b00      	cmp	r3, #0
 8005756:	d046      	beq.n	80057e6 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8005758:	f7ff fc49 	bl	8004fee <LL_RCC_LSI1_IsReady>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d113      	bne.n	800578a <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8005762:	f7ff fc22 	bl	8004faa <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005766:	f7fd f91b 	bl	80029a0 <HAL_GetTick>
 800576a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800576c:	e008      	b.n	8005780 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800576e:	f7fd f917 	bl	80029a0 <HAL_GetTick>
 8005772:	4602      	mov	r2, r0
 8005774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	2b02      	cmp	r3, #2
 800577a:	d901      	bls.n	8005780 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	e1ca      	b.n	8005b16 <HAL_RCC_OscConfig+0x68a>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005780:	f7ff fc35 	bl	8004fee <LL_RCC_LSI1_IsReady>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d0f1      	beq.n	800576e <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800578a:	f7ff fc42 	bl	8005012 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800578e:	f7fd f907 	bl	80029a0 <HAL_GetTick>
 8005792:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005794:	e008      	b.n	80057a8 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005796:	f7fd f903 	bl	80029a0 <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	2b03      	cmp	r3, #3
 80057a2:	d901      	bls.n	80057a8 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e1b6      	b.n	8005b16 <HAL_RCC_OscConfig+0x68a>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80057a8:	f7ff fc55 	bl	8005056 <LL_RCC_LSI2_IsReady>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d0f1      	beq.n	8005796 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	4618      	mov	r0, r3
 80057b8:	f7ff fc5f 	bl	800507a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80057bc:	f7ff fc06 	bl	8004fcc <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057c0:	f7fd f8ee 	bl	80029a0 <HAL_GetTick>
 80057c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80057c6:	e008      	b.n	80057da <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80057c8:	f7fd f8ea 	bl	80029a0 <HAL_GetTick>
 80057cc:	4602      	mov	r2, r0
 80057ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d0:	1ad3      	subs	r3, r2, r3
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	d901      	bls.n	80057da <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e19d      	b.n	8005b16 <HAL_RCC_OscConfig+0x68a>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80057da:	f7ff fc08 	bl	8004fee <LL_RCC_LSI1_IsReady>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1f1      	bne.n	80057c8 <HAL_RCC_OscConfig+0x33c>
 80057e4:	e051      	b.n	800588a <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80057e6:	f7ff fbe0 	bl	8004faa <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ea:	f7fd f8d9 	bl	80029a0 <HAL_GetTick>
 80057ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80057f0:	e008      	b.n	8005804 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80057f2:	f7fd f8d5 	bl	80029a0 <HAL_GetTick>
 80057f6:	4602      	mov	r2, r0
 80057f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d901      	bls.n	8005804 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8005800:	2303      	movs	r3, #3
 8005802:	e188      	b.n	8005b16 <HAL_RCC_OscConfig+0x68a>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005804:	f7ff fbf3 	bl	8004fee <LL_RCC_LSI1_IsReady>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d0f1      	beq.n	80057f2 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800580e:	f7ff fc11 	bl	8005034 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005812:	e00c      	b.n	800582e <HAL_RCC_OscConfig+0x3a2>
 8005814:	20000004 	.word	0x20000004
 8005818:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800581c:	f7fd f8c0 	bl	80029a0 <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	2b03      	cmp	r3, #3
 8005828:	d901      	bls.n	800582e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e173      	b.n	8005b16 <HAL_RCC_OscConfig+0x68a>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800582e:	f7ff fc12 	bl	8005056 <LL_RCC_LSI2_IsReady>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d1f1      	bne.n	800581c <HAL_RCC_OscConfig+0x390>
 8005838:	e027      	b.n	800588a <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800583a:	f7ff fbfb 	bl	8005034 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800583e:	f7fd f8af 	bl	80029a0 <HAL_GetTick>
 8005842:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005844:	e008      	b.n	8005858 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005846:	f7fd f8ab 	bl	80029a0 <HAL_GetTick>
 800584a:	4602      	mov	r2, r0
 800584c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	2b03      	cmp	r3, #3
 8005852:	d901      	bls.n	8005858 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005854:	2303      	movs	r3, #3
 8005856:	e15e      	b.n	8005b16 <HAL_RCC_OscConfig+0x68a>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005858:	f7ff fbfd 	bl	8005056 <LL_RCC_LSI2_IsReady>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1f1      	bne.n	8005846 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8005862:	f7ff fbb3 	bl	8004fcc <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005866:	f7fd f89b 	bl	80029a0 <HAL_GetTick>
 800586a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800586c:	e008      	b.n	8005880 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800586e:	f7fd f897 	bl	80029a0 <HAL_GetTick>
 8005872:	4602      	mov	r2, r0
 8005874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	2b02      	cmp	r3, #2
 800587a:	d901      	bls.n	8005880 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	e14a      	b.n	8005b16 <HAL_RCC_OscConfig+0x68a>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005880:	f7ff fbb5 	bl	8004fee <LL_RCC_LSI1_IsReady>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d1f1      	bne.n	800586e <HAL_RCC_OscConfig+0x3e2>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0304 	and.w	r3, r3, #4
 8005892:	2b00      	cmp	r3, #0
 8005894:	d05b      	beq.n	800594e <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005896:	4ba2      	ldr	r3, [pc, #648]	; (8005b20 <HAL_RCC_OscConfig+0x694>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d114      	bne.n	80058cc <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80058a2:	f7ff fa95 	bl	8004dd0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058a6:	f7fd f87b 	bl	80029a0 <HAL_GetTick>
 80058aa:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058ac:	e008      	b.n	80058c0 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058ae:	f7fd f877 	bl	80029a0 <HAL_GetTick>
 80058b2:	4602      	mov	r2, r0
 80058b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d901      	bls.n	80058c0 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80058bc:	2303      	movs	r3, #3
 80058be:	e12a      	b.n	8005b16 <HAL_RCC_OscConfig+0x68a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058c0:	4b97      	ldr	r3, [pc, #604]	; (8005b20 <HAL_RCC_OscConfig+0x694>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d0f0      	beq.n	80058ae <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d102      	bne.n	80058da <HAL_RCC_OscConfig+0x44e>
 80058d4:	f7ff fb13 	bl	8004efe <LL_RCC_LSE_Enable>
 80058d8:	e00c      	b.n	80058f4 <HAL_RCC_OscConfig+0x468>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	2b05      	cmp	r3, #5
 80058e0:	d104      	bne.n	80058ec <HAL_RCC_OscConfig+0x460>
 80058e2:	f7ff fb2e 	bl	8004f42 <LL_RCC_LSE_EnableBypass>
 80058e6:	f7ff fb0a 	bl	8004efe <LL_RCC_LSE_Enable>
 80058ea:	e003      	b.n	80058f4 <HAL_RCC_OscConfig+0x468>
 80058ec:	f7ff fb18 	bl	8004f20 <LL_RCC_LSE_Disable>
 80058f0:	f7ff fb38 	bl	8004f64 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d014      	beq.n	8005926 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058fc:	f7fd f850 	bl	80029a0 <HAL_GetTick>
 8005900:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005902:	e00a      	b.n	800591a <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005904:	f7fd f84c 	bl	80029a0 <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005912:	4293      	cmp	r3, r2
 8005914:	d901      	bls.n	800591a <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e0fd      	b.n	8005b16 <HAL_RCC_OscConfig+0x68a>
      while (LL_RCC_LSE_IsReady() == 0U)
 800591a:	f7ff fb34 	bl	8004f86 <LL_RCC_LSE_IsReady>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d0ef      	beq.n	8005904 <HAL_RCC_OscConfig+0x478>
 8005924:	e013      	b.n	800594e <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005926:	f7fd f83b 	bl	80029a0 <HAL_GetTick>
 800592a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800592c:	e00a      	b.n	8005944 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800592e:	f7fd f837 	bl	80029a0 <HAL_GetTick>
 8005932:	4602      	mov	r2, r0
 8005934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	f241 3288 	movw	r2, #5000	; 0x1388
 800593c:	4293      	cmp	r3, r2
 800593e:	d901      	bls.n	8005944 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8005940:	2303      	movs	r3, #3
 8005942:	e0e8      	b.n	8005b16 <HAL_RCC_OscConfig+0x68a>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005944:	f7ff fb1f 	bl	8004f86 <LL_RCC_LSE_IsReady>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1ef      	bne.n	800592e <HAL_RCC_OscConfig+0x4a2>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005952:	2b00      	cmp	r3, #0
 8005954:	f000 80de 	beq.w	8005b14 <HAL_RCC_OscConfig+0x688>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005958:	f7ff fc27 	bl	80051aa <LL_RCC_GetSysClkSource>
 800595c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800595e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800596a:	2b02      	cmp	r3, #2
 800596c:	f040 80a6 	bne.w	8005abc <HAL_RCC_OscConfig+0x630>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f003 0203 	and.w	r2, r3, #3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800597a:	429a      	cmp	r2, r3
 800597c:	d123      	bne.n	80059c6 <HAL_RCC_OscConfig+0x53a>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005988:	429a      	cmp	r2, r3
 800598a:	d11c      	bne.n	80059c6 <HAL_RCC_OscConfig+0x53a>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	0a1b      	lsrs	r3, r3, #8
 8005990:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005998:	429a      	cmp	r2, r3
 800599a:	d114      	bne.n	80059c6 <HAL_RCC_OscConfig+0x53a>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d10d      	bne.n	80059c6 <HAL_RCC_OscConfig+0x53a>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d106      	bne.n	80059c6 <HAL_RCC_OscConfig+0x53a>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d054      	beq.n	8005a70 <HAL_RCC_OscConfig+0x5e4>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	2b0c      	cmp	r3, #12
 80059ca:	d04f      	beq.n	8005a6c <HAL_RCC_OscConfig+0x5e0>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80059cc:	f7ff fcb0 	bl	8005330 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80059d0:	f7fc ffe6 	bl	80029a0 <HAL_GetTick>
 80059d4:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059d6:	e008      	b.n	80059ea <HAL_RCC_OscConfig+0x55e>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059d8:	f7fc ffe2 	bl	80029a0 <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d901      	bls.n	80059ea <HAL_RCC_OscConfig+0x55e>
              {
                return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e095      	b.n	8005b16 <HAL_RCC_OscConfig+0x68a>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d1ef      	bne.n	80059d8 <HAL_RCC_OscConfig+0x54c>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059fc:	68da      	ldr	r2, [r3, #12]
 80059fe:	4b49      	ldr	r3, [pc, #292]	; (8005b24 <HAL_RCC_OscConfig+0x698>)
 8005a00:	4013      	ands	r3, r2
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005a0a:	4311      	orrs	r1, r2
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a10:	0212      	lsls	r2, r2, #8
 8005a12:	4311      	orrs	r1, r2
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a18:	4311      	orrs	r1, r2
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005a1e:	4311      	orrs	r1, r2
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005a24:	430a      	orrs	r2, r1
 8005a26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005a2e:	f7ff fc70 	bl	8005312 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005a32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a40:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005a42:	f7fc ffad 	bl	80029a0 <HAL_GetTick>
 8005a46:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a48:	e008      	b.n	8005a5c <HAL_RCC_OscConfig+0x5d0>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a4a:	f7fc ffa9 	bl	80029a0 <HAL_GetTick>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	2b02      	cmp	r3, #2
 8005a56:	d901      	bls.n	8005a5c <HAL_RCC_OscConfig+0x5d0>
              {
                return HAL_TIMEOUT;
 8005a58:	2303      	movs	r3, #3
 8005a5a:	e05c      	b.n	8005b16 <HAL_RCC_OscConfig+0x68a>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d0ef      	beq.n	8005a4a <HAL_RCC_OscConfig+0x5be>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a6a:	e053      	b.n	8005b14 <HAL_RCC_OscConfig+0x688>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e052      	b.n	8005b16 <HAL_RCC_OscConfig+0x68a>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d14a      	bne.n	8005b14 <HAL_RCC_OscConfig+0x688>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005a7e:	f7ff fc48 	bl	8005312 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005a82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a90:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005a92:	f7fc ff85 	bl	80029a0 <HAL_GetTick>
 8005a96:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a98:	e008      	b.n	8005aac <HAL_RCC_OscConfig+0x620>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a9a:	f7fc ff81 	bl	80029a0 <HAL_GetTick>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	d901      	bls.n	8005aac <HAL_RCC_OscConfig+0x620>
            {
              return HAL_TIMEOUT;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	e034      	b.n	8005b16 <HAL_RCC_OscConfig+0x68a>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005aac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d0ef      	beq.n	8005a9a <HAL_RCC_OscConfig+0x60e>
 8005aba:	e02b      	b.n	8005b14 <HAL_RCC_OscConfig+0x688>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	2b0c      	cmp	r3, #12
 8005ac0:	d026      	beq.n	8005b10 <HAL_RCC_OscConfig+0x684>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ac2:	f7ff fc35 	bl	8005330 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8005ac6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ad0:	f023 0303 	bic.w	r3, r3, #3
 8005ad4:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
 8005ad6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ae0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ae4:	60d3      	str	r3, [r2, #12]
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ae6:	f7fc ff5b 	bl	80029a0 <HAL_GetTick>
 8005aea:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005aec:	e008      	b.n	8005b00 <HAL_RCC_OscConfig+0x674>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005aee:	f7fc ff57 	bl	80029a0 <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d901      	bls.n	8005b00 <HAL_RCC_OscConfig+0x674>
          {
            return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e00a      	b.n	8005b16 <HAL_RCC_OscConfig+0x68a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d1ef      	bne.n	8005aee <HAL_RCC_OscConfig+0x662>
 8005b0e:	e001      	b.n	8005b14 <HAL_RCC_OscConfig+0x688>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e000      	b.n	8005b16 <HAL_RCC_OscConfig+0x68a>
      }
    }
  }
  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3734      	adds	r7, #52	; 0x34
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd90      	pop	{r4, r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	58000400 	.word	0x58000400
 8005b24:	11c1808c 	.word	0x11c1808c

08005b28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d101      	bne.n	8005b3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e12d      	b.n	8005d98 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b3c:	4b98      	ldr	r3, [pc, #608]	; (8005da0 <HAL_RCC_ClockConfig+0x278>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 0307 	and.w	r3, r3, #7
 8005b44:	683a      	ldr	r2, [r7, #0]
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d91b      	bls.n	8005b82 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b4a:	4b95      	ldr	r3, [pc, #596]	; (8005da0 <HAL_RCC_ClockConfig+0x278>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f023 0207 	bic.w	r2, r3, #7
 8005b52:	4993      	ldr	r1, [pc, #588]	; (8005da0 <HAL_RCC_ClockConfig+0x278>)
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b5a:	f7fc ff21 	bl	80029a0 <HAL_GetTick>
 8005b5e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b60:	e008      	b.n	8005b74 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005b62:	f7fc ff1d 	bl	80029a0 <HAL_GetTick>
 8005b66:	4602      	mov	r2, r0
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	d901      	bls.n	8005b74 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005b70:	2303      	movs	r3, #3
 8005b72:	e111      	b.n	8005d98 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b74:	4b8a      	ldr	r3, [pc, #552]	; (8005da0 <HAL_RCC_ClockConfig+0x278>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0307 	and.w	r3, r3, #7
 8005b7c:	683a      	ldr	r2, [r7, #0]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d1ef      	bne.n	8005b62 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 0302 	and.w	r3, r3, #2
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d016      	beq.n	8005bbc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	4618      	mov	r0, r3
 8005b94:	f7ff fb15 	bl	80051c2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005b98:	f7fc ff02 	bl	80029a0 <HAL_GetTick>
 8005b9c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005b9e:	e008      	b.n	8005bb2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005ba0:	f7fc fefe 	bl	80029a0 <HAL_GetTick>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d901      	bls.n	8005bb2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	e0f2      	b.n	8005d98 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005bb2:	f7ff fc0f 	bl	80053d4 <LL_RCC_IsActiveFlag_HPRE>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d0f1      	beq.n	8005ba0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0320 	and.w	r3, r3, #32
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d016      	beq.n	8005bf6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	695b      	ldr	r3, [r3, #20]
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f7ff fb0c 	bl	80051ea <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005bd2:	f7fc fee5 	bl	80029a0 <HAL_GetTick>
 8005bd6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005bd8:	e008      	b.n	8005bec <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005bda:	f7fc fee1 	bl	80029a0 <HAL_GetTick>
 8005bde:	4602      	mov	r2, r0
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	1ad3      	subs	r3, r2, r3
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d901      	bls.n	8005bec <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005be8:	2303      	movs	r3, #3
 8005bea:	e0d5      	b.n	8005d98 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005bec:	f7ff fc04 	bl	80053f8 <LL_RCC_IsActiveFlag_C2HPRE>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d0f1      	beq.n	8005bda <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d016      	beq.n	8005c30 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7ff fb05 	bl	8005216 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005c0c:	f7fc fec8 	bl	80029a0 <HAL_GetTick>
 8005c10:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005c12:	e008      	b.n	8005c26 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005c14:	f7fc fec4 	bl	80029a0 <HAL_GetTick>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	2b02      	cmp	r3, #2
 8005c20:	d901      	bls.n	8005c26 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e0b8      	b.n	8005d98 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005c26:	f7ff fbfa 	bl	800541e <LL_RCC_IsActiveFlag_SHDHPRE>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d0f1      	beq.n	8005c14 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0304 	and.w	r3, r3, #4
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d016      	beq.n	8005c6a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	4618      	mov	r0, r3
 8005c42:	f7ff faff 	bl	8005244 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005c46:	f7fc feab 	bl	80029a0 <HAL_GetTick>
 8005c4a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005c4c:	e008      	b.n	8005c60 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005c4e:	f7fc fea7 	bl	80029a0 <HAL_GetTick>
 8005c52:	4602      	mov	r2, r0
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	d901      	bls.n	8005c60 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	e09b      	b.n	8005d98 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005c60:	f7ff fbf0 	bl	8005444 <LL_RCC_IsActiveFlag_PPRE1>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d0f1      	beq.n	8005c4e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 0308 	and.w	r3, r3, #8
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d017      	beq.n	8005ca6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	00db      	lsls	r3, r3, #3
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f7ff faf5 	bl	800526c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005c82:	f7fc fe8d 	bl	80029a0 <HAL_GetTick>
 8005c86:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005c88:	e008      	b.n	8005c9c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005c8a:	f7fc fe89 	bl	80029a0 <HAL_GetTick>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	2b02      	cmp	r3, #2
 8005c96:	d901      	bls.n	8005c9c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	e07d      	b.n	8005d98 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005c9c:	f7ff fbe4 	bl	8005468 <LL_RCC_IsActiveFlag_PPRE2>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d0f1      	beq.n	8005c8a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 0301 	and.w	r3, r3, #1
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d043      	beq.n	8005d3a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	2b02      	cmp	r3, #2
 8005cb8:	d106      	bne.n	8005cc8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005cba:	f7ff f8c9 	bl	8004e50 <LL_RCC_HSE_IsReady>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d11e      	bne.n	8005d02 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e067      	b.n	8005d98 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	2b03      	cmp	r3, #3
 8005cce:	d106      	bne.n	8005cde <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005cd0:	f7ff fb3d 	bl	800534e <LL_RCC_PLL_IsReady>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d113      	bne.n	8005d02 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e05c      	b.n	8005d98 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d106      	bne.n	8005cf4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005ce6:	f7ff f9fd 	bl	80050e4 <LL_RCC_MSI_IsReady>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d108      	bne.n	8005d02 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e051      	b.n	8005d98 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005cf4:	f7ff f8dc 	bl	8004eb0 <LL_RCC_HSI_IsReady>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d101      	bne.n	8005d02 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e04a      	b.n	8005d98 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	4618      	mov	r0, r3
 8005d08:	f7ff fa3b 	bl	8005182 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d0c:	f7fc fe48 	bl	80029a0 <HAL_GetTick>
 8005d10:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d12:	e00a      	b.n	8005d2a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d14:	f7fc fe44 	bl	80029a0 <HAL_GetTick>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d901      	bls.n	8005d2a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005d26:	2303      	movs	r3, #3
 8005d28:	e036      	b.n	8005d98 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d2a:	f7ff fa3e 	bl	80051aa <LL_RCC_GetSysClkSource>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d1ec      	bne.n	8005d14 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d3a:	4b19      	ldr	r3, [pc, #100]	; (8005da0 <HAL_RCC_ClockConfig+0x278>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f003 0307 	and.w	r3, r3, #7
 8005d42:	683a      	ldr	r2, [r7, #0]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d21b      	bcs.n	8005d80 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d48:	4b15      	ldr	r3, [pc, #84]	; (8005da0 <HAL_RCC_ClockConfig+0x278>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f023 0207 	bic.w	r2, r3, #7
 8005d50:	4913      	ldr	r1, [pc, #76]	; (8005da0 <HAL_RCC_ClockConfig+0x278>)
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d58:	f7fc fe22 	bl	80029a0 <HAL_GetTick>
 8005d5c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d5e:	e008      	b.n	8005d72 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005d60:	f7fc fe1e 	bl	80029a0 <HAL_GetTick>
 8005d64:	4602      	mov	r2, r0
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	2b02      	cmp	r3, #2
 8005d6c:	d901      	bls.n	8005d72 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	e012      	b.n	8005d98 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d72:	4b0b      	ldr	r3, [pc, #44]	; (8005da0 <HAL_RCC_ClockConfig+0x278>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 0307 	and.w	r3, r3, #7
 8005d7a:	683a      	ldr	r2, [r7, #0]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d1ef      	bne.n	8005d60 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005d80:	f000 f880 	bl	8005e84 <HAL_RCC_GetHCLKFreq>
 8005d84:	4603      	mov	r3, r0
 8005d86:	4a07      	ldr	r2, [pc, #28]	; (8005da4 <HAL_RCC_ClockConfig+0x27c>)
 8005d88:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005d8a:	f7fc fe15 	bl	80029b8 <HAL_GetTickPrio>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	4618      	mov	r0, r3
 8005d92:	f7fc fbef 	bl	8002574 <HAL_InitTick>
 8005d96:	4603      	mov	r3, r0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3710      	adds	r7, #16
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	58004000 	.word	0x58004000
 8005da4:	20000004 	.word	0x20000004

08005da8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005da8:	b590      	push	{r4, r7, lr}
 8005daa:	b085      	sub	sp, #20
 8005dac:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dae:	f7ff f9fc 	bl	80051aa <LL_RCC_GetSysClkSource>
 8005db2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d10a      	bne.n	8005dd0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005dba:	f7ff f9b8 	bl	800512e <LL_RCC_MSI_GetRange>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	091b      	lsrs	r3, r3, #4
 8005dc2:	f003 030f 	and.w	r3, r3, #15
 8005dc6:	4a2b      	ldr	r2, [pc, #172]	; (8005e74 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dcc:	60fb      	str	r3, [r7, #12]
 8005dce:	e04b      	b.n	8005e68 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2b04      	cmp	r3, #4
 8005dd4:	d102      	bne.n	8005ddc <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005dd6:	4b28      	ldr	r3, [pc, #160]	; (8005e78 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005dd8:	60fb      	str	r3, [r7, #12]
 8005dda:	e045      	b.n	8005e68 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2b08      	cmp	r3, #8
 8005de0:	d10a      	bne.n	8005df8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005de2:	f7ff f805 	bl	8004df0 <LL_RCC_HSE_IsEnabledDiv2>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d102      	bne.n	8005df2 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005dec:	4b23      	ldr	r3, [pc, #140]	; (8005e7c <HAL_RCC_GetSysClockFreq+0xd4>)
 8005dee:	60fb      	str	r3, [r7, #12]
 8005df0:	e03a      	b.n	8005e68 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005df2:	4b23      	ldr	r3, [pc, #140]	; (8005e80 <HAL_RCC_GetSysClockFreq+0xd8>)
 8005df4:	60fb      	str	r3, [r7, #12]
 8005df6:	e037      	b.n	8005e68 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005df8:	f7ff fae0 	bl	80053bc <LL_RCC_PLL_GetMainSource>
 8005dfc:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d003      	beq.n	8005e0c <HAL_RCC_GetSysClockFreq+0x64>
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	2b03      	cmp	r3, #3
 8005e08:	d003      	beq.n	8005e12 <HAL_RCC_GetSysClockFreq+0x6a>
 8005e0a:	e00d      	b.n	8005e28 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005e0c:	4b1a      	ldr	r3, [pc, #104]	; (8005e78 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005e0e:	60bb      	str	r3, [r7, #8]
        break;
 8005e10:	e015      	b.n	8005e3e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005e12:	f7fe ffed 	bl	8004df0 <LL_RCC_HSE_IsEnabledDiv2>
 8005e16:	4603      	mov	r3, r0
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d102      	bne.n	8005e22 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005e1c:	4b17      	ldr	r3, [pc, #92]	; (8005e7c <HAL_RCC_GetSysClockFreq+0xd4>)
 8005e1e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005e20:	e00d      	b.n	8005e3e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005e22:	4b17      	ldr	r3, [pc, #92]	; (8005e80 <HAL_RCC_GetSysClockFreq+0xd8>)
 8005e24:	60bb      	str	r3, [r7, #8]
        break;
 8005e26:	e00a      	b.n	8005e3e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005e28:	f7ff f981 	bl	800512e <LL_RCC_MSI_GetRange>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	091b      	lsrs	r3, r3, #4
 8005e30:	f003 030f 	and.w	r3, r3, #15
 8005e34:	4a0f      	ldr	r2, [pc, #60]	; (8005e74 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e3a:	60bb      	str	r3, [r7, #8]
        break;
 8005e3c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8005e3e:	f7ff fa98 	bl	8005372 <LL_RCC_PLL_GetN>
 8005e42:	4602      	mov	r2, r0
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	fb03 f402 	mul.w	r4, r3, r2
 8005e4a:	f7ff faab 	bl	80053a4 <LL_RCC_PLL_GetDivider>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	091b      	lsrs	r3, r3, #4
 8005e52:	3301      	adds	r3, #1
 8005e54:	fbb4 f4f3 	udiv	r4, r4, r3
 8005e58:	f7ff fa98 	bl	800538c <LL_RCC_PLL_GetR>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	0f5b      	lsrs	r3, r3, #29
 8005e60:	3301      	adds	r3, #1
 8005e62:	fbb4 f3f3 	udiv	r3, r4, r3
 8005e66:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8005e68:	68fb      	ldr	r3, [r7, #12]
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3714      	adds	r7, #20
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd90      	pop	{r4, r7, pc}
 8005e72:	bf00      	nop
 8005e74:	0800ae8c 	.word	0x0800ae8c
 8005e78:	00f42400 	.word	0x00f42400
 8005e7c:	003d0900 	.word	0x003d0900
 8005e80:	007a1200 	.word	0x007a1200

08005e84 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e84:	b598      	push	{r3, r4, r7, lr}
 8005e86:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005e88:	f7ff ff8e 	bl	8005da8 <HAL_RCC_GetSysClockFreq>
 8005e8c:	4604      	mov	r4, r0
 8005e8e:	f7ff fa01 	bl	8005294 <LL_RCC_GetAHBPrescaler>
 8005e92:	4603      	mov	r3, r0
 8005e94:	091b      	lsrs	r3, r3, #4
 8005e96:	f003 030f 	and.w	r3, r3, #15
 8005e9a:	4a03      	ldr	r2, [pc, #12]	; (8005ea8 <HAL_RCC_GetHCLKFreq+0x24>)
 8005e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ea0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	bd98      	pop	{r3, r4, r7, pc}
 8005ea8:	0800ae2c 	.word	0x0800ae2c

08005eac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005eac:	b598      	push	{r3, r4, r7, lr}
 8005eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005eb0:	f7ff ffe8 	bl	8005e84 <HAL_RCC_GetHCLKFreq>
 8005eb4:	4604      	mov	r4, r0
 8005eb6:	f7ff fa14 	bl	80052e2 <LL_RCC_GetAPB1Prescaler>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	0a1b      	lsrs	r3, r3, #8
 8005ebe:	f003 0307 	and.w	r3, r3, #7
 8005ec2:	4a04      	ldr	r2, [pc, #16]	; (8005ed4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ec8:	f003 031f 	and.w	r3, r3, #31
 8005ecc:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	bd98      	pop	{r3, r4, r7, pc}
 8005ed4:	0800ae6c 	.word	0x0800ae6c

08005ed8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ed8:	b598      	push	{r3, r4, r7, lr}
 8005eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005edc:	f7ff ffd2 	bl	8005e84 <HAL_RCC_GetHCLKFreq>
 8005ee0:	4604      	mov	r4, r0
 8005ee2:	f7ff fa0a 	bl	80052fa <LL_RCC_GetAPB2Prescaler>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	0adb      	lsrs	r3, r3, #11
 8005eea:	f003 0307 	and.w	r3, r3, #7
 8005eee:	4a04      	ldr	r2, [pc, #16]	; (8005f00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ef4:	f003 031f 	and.w	r3, r3, #31
 8005ef8:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	bd98      	pop	{r3, r4, r7, pc}
 8005f00:	0800ae6c 	.word	0x0800ae6c

08005f04 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	226f      	movs	r2, #111	; 0x6f
 8005f12:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8005f14:	f7ff f949 	bl	80051aa <LL_RCC_GetSysClkSource>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8005f1e:	f7ff f9b9 	bl	8005294 <LL_RCC_GetAHBPrescaler>
 8005f22:	4602      	mov	r2, r0
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8005f28:	f7ff f9db 	bl	80052e2 <LL_RCC_GetAPB1Prescaler>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8005f32:	f7ff f9e2 	bl	80052fa <LL_RCC_GetAPB2Prescaler>
 8005f36:	4602      	mov	r2, r0
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8005f3c:	f7ff f9b6 	bl	80052ac <LL_C2_RCC_GetAHBPrescaler>
 8005f40:	4602      	mov	r2, r0
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8005f46:	f7ff f9be 	bl	80052c6 <LL_RCC_GetAHB4Prescaler>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005f50:	4b04      	ldr	r3, [pc, #16]	; (8005f64 <HAL_RCC_GetClockConfig+0x60>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 0207 	and.w	r2, r3, #7
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	601a      	str	r2, [r3, #0]
}
 8005f5c:	bf00      	nop
 8005f5e:	3708      	adds	r7, #8
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	58004000 	.word	0x58004000

08005f68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2bb0      	cmp	r3, #176	; 0xb0
 8005f74:	d903      	bls.n	8005f7e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005f76:	4b14      	ldr	r3, [pc, #80]	; (8005fc8 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8005f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f7a:	60fb      	str	r3, [r7, #12]
 8005f7c:	e007      	b.n	8005f8e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	091b      	lsrs	r3, r3, #4
 8005f82:	f003 030f 	and.w	r3, r3, #15
 8005f86:	4a10      	ldr	r2, [pc, #64]	; (8005fc8 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8005f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f8c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005f8e:	f7ff f99a 	bl	80052c6 <LL_RCC_GetAHB4Prescaler>
 8005f92:	4603      	mov	r3, r0
 8005f94:	091b      	lsrs	r3, r3, #4
 8005f96:	f003 030f 	and.w	r3, r3, #15
 8005f9a:	4a0c      	ldr	r2, [pc, #48]	; (8005fcc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fa6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	4a09      	ldr	r2, [pc, #36]	; (8005fd0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005fac:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb0:	0c9b      	lsrs	r3, r3, #18
 8005fb2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f000 f80c 	bl	8005fd4 <RCC_SetFlashLatency>
 8005fbc:	4603      	mov	r3, r0
#endif
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3710      	adds	r7, #16
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	0800ae8c 	.word	0x0800ae8c
 8005fcc:	0800ae2c 	.word	0x0800ae2c
 8005fd0:	431bde83 	.word	0x431bde83

08005fd4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005fd4:	b590      	push	{r4, r7, lr}
 8005fd6:	b08f      	sub	sp, #60	; 0x3c
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005fde:	4b25      	ldr	r3, [pc, #148]	; (8006074 <RCC_SetFlashLatency+0xa0>)
 8005fe0:	f107 041c 	add.w	r4, r7, #28
 8005fe4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005fe6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005fea:	4b23      	ldr	r3, [pc, #140]	; (8006078 <RCC_SetFlashLatency+0xa4>)
 8005fec:	f107 040c 	add.w	r4, r7, #12
 8005ff0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005ff2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	633b      	str	r3, [r7, #48]	; 0x30
 8005ffe:	e015      	b.n	800602c <RCC_SetFlashLatency+0x58>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006008:	4413      	add	r3, r2
 800600a:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	429a      	cmp	r2, r3
 8006012:	d808      	bhi.n	8006026 <RCC_SetFlashLatency+0x52>
    {
      latency = FLASH_LATENCY_RANGE[index];
 8006014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800601c:	4413      	add	r3, r2
 800601e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006022:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8006024:	e005      	b.n	8006032 <RCC_SetFlashLatency+0x5e>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006028:	3301      	adds	r3, #1
 800602a:	633b      	str	r3, [r7, #48]	; 0x30
 800602c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602e:	2b03      	cmp	r3, #3
 8006030:	d9e6      	bls.n	8006000 <RCC_SetFlashLatency+0x2c>
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8006032:	4b12      	ldr	r3, [pc, #72]	; (800607c <RCC_SetFlashLatency+0xa8>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f023 0207 	bic.w	r2, r3, #7
 800603a:	4910      	ldr	r1, [pc, #64]	; (800607c <RCC_SetFlashLatency+0xa8>)
 800603c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800603e:	4313      	orrs	r3, r2
 8006040:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006042:	f7fc fcad 	bl	80029a0 <HAL_GetTick>
 8006046:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006048:	e008      	b.n	800605c <RCC_SetFlashLatency+0x88>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800604a:	f7fc fca9 	bl	80029a0 <HAL_GetTick>
 800604e:	4602      	mov	r2, r0
 8006050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	2b02      	cmp	r3, #2
 8006056:	d901      	bls.n	800605c <RCC_SetFlashLatency+0x88>
    {
      return HAL_TIMEOUT;
 8006058:	2303      	movs	r3, #3
 800605a:	e007      	b.n	800606c <RCC_SetFlashLatency+0x98>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800605c:	4b07      	ldr	r3, [pc, #28]	; (800607c <RCC_SetFlashLatency+0xa8>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 0307 	and.w	r3, r3, #7
 8006064:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006066:	429a      	cmp	r2, r3
 8006068:	d1ef      	bne.n	800604a <RCC_SetFlashLatency+0x76>
    }
  }
  return HAL_OK;
 800606a:	2300      	movs	r3, #0
}
 800606c:	4618      	mov	r0, r3
 800606e:	373c      	adds	r7, #60	; 0x3c
 8006070:	46bd      	mov	sp, r7
 8006072:	bd90      	pop	{r4, r7, pc}
 8006074:	0800ae0c 	.word	0x0800ae0c
 8006078:	0800ae1c 	.word	0x0800ae1c
 800607c:	58004000 	.word	0x58004000

08006080 <LL_RCC_LSE_IsEnabled>:
{
 8006080:	b480      	push	{r7}
 8006082:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8006084:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800608c:	f003 0301 	and.w	r3, r3, #1
 8006090:	2b01      	cmp	r3, #1
 8006092:	d101      	bne.n	8006098 <LL_RCC_LSE_IsEnabled+0x18>
 8006094:	2301      	movs	r3, #1
 8006096:	e000      	b.n	800609a <LL_RCC_LSE_IsEnabled+0x1a>
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <LL_RCC_LSE_IsReady>:
{
 80060a4:	b480      	push	{r7}
 80060a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80060a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060b0:	f003 0302 	and.w	r3, r3, #2
 80060b4:	2b02      	cmp	r3, #2
 80060b6:	d101      	bne.n	80060bc <LL_RCC_LSE_IsReady+0x18>
 80060b8:	2301      	movs	r3, #1
 80060ba:	e000      	b.n	80060be <LL_RCC_LSE_IsReady+0x1a>
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <LL_RCC_MSI_EnablePLLMode>:
{
 80060c8:	b480      	push	{r7}
 80060ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80060cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060d6:	f043 0304 	orr.w	r3, r3, #4
 80060da:	6013      	str	r3, [r2, #0]
}
 80060dc:	bf00      	nop
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr

080060e6 <LL_RCC_SetRFWKPClockSource>:
{
 80060e6:	b480      	push	{r7}
 80060e8:	b083      	sub	sp, #12
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80060ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060f6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80060fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4313      	orrs	r3, r2
 8006102:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8006106:	bf00      	nop
 8006108:	370c      	adds	r7, #12
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr

08006112 <LL_RCC_SetSMPSClockSource>:
{
 8006112:	b480      	push	{r7}
 8006114:	b083      	sub	sp, #12
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800611a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800611e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006120:	f023 0203 	bic.w	r2, r3, #3
 8006124:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4313      	orrs	r3, r2
 800612c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800612e:	bf00      	nop
 8006130:	370c      	adds	r7, #12
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr

0800613a <LL_RCC_SetSMPSPrescaler>:
{
 800613a:	b480      	push	{r7}
 800613c:	b083      	sub	sp, #12
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8006142:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006148:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800614c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4313      	orrs	r3, r2
 8006154:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006156:	bf00      	nop
 8006158:	370c      	adds	r7, #12
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr

08006162 <LL_RCC_SetUSARTClockSource>:
{
 8006162:	b480      	push	{r7}
 8006164:	b083      	sub	sp, #12
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800616a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800616e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006172:	f023 0203 	bic.w	r2, r3, #3
 8006176:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4313      	orrs	r3, r2
 800617e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006182:	bf00      	nop
 8006184:	370c      	adds	r7, #12
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr

0800618e <LL_RCC_SetLPUARTClockSource>:
{
 800618e:	b480      	push	{r7}
 8006190:	b083      	sub	sp, #12
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800619a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800619e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80061a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80061ae:	bf00      	nop
 80061b0:	370c      	adds	r7, #12
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <LL_RCC_SetI2CClockSource>:
{
 80061ba:	b480      	push	{r7}
 80061bc:	b083      	sub	sp, #12
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80061c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061c6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	091b      	lsrs	r3, r3, #4
 80061ce:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80061d2:	43db      	mvns	r3, r3
 80061d4:	401a      	ands	r2, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	011b      	lsls	r3, r3, #4
 80061da:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80061de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061e2:	4313      	orrs	r3, r2
 80061e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80061e8:	bf00      	nop
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <LL_RCC_SetLPTIMClockSource>:
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80061fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006200:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	0c1b      	lsrs	r3, r3, #16
 8006208:	041b      	lsls	r3, r3, #16
 800620a:	43db      	mvns	r3, r3
 800620c:	401a      	ands	r2, r3
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	041b      	lsls	r3, r3, #16
 8006212:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006216:	4313      	orrs	r3, r2
 8006218:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800621c:	bf00      	nop
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <LL_RCC_SetRNGClockSource>:
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006230:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006238:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800623c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4313      	orrs	r3, r2
 8006244:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <LL_RCC_SetCLK48ClockSource>:
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800625c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006264:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006268:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4313      	orrs	r3, r2
 8006270:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006274:	bf00      	nop
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <LL_RCC_SetADCClockSource>:
{
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006288:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800628c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006290:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006294:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4313      	orrs	r3, r2
 800629c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80062a0:	bf00      	nop
 80062a2:	370c      	adds	r7, #12
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <LL_RCC_SetRTCClockSource>:
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80062b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80062cc:	bf00      	nop
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr

080062d8 <LL_RCC_GetRTCClockSource>:
{
 80062d8:	b480      	push	{r7}
 80062da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80062dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr

080062f2 <LL_RCC_ForceBackupDomainReset>:
{
 80062f2:	b480      	push	{r7}
 80062f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80062f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006302:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006306:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800630a:	bf00      	nop
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006314:	b480      	push	{r7}
 8006316:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006318:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800631c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006320:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006324:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006328:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800632c:	bf00      	nop
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr

08006336 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006336:	b580      	push	{r7, lr}
 8006338:	b088      	sub	sp, #32
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800633e:	2300      	movs	r3, #0
 8006340:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006342:	2300      	movs	r3, #0
 8006344:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800634e:	2b00      	cmp	r3, #0
 8006350:	d046      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8006352:	f7ff ffc1 	bl	80062d8 <LL_RCC_GetRTCClockSource>
 8006356:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6a1b      	ldr	r3, [r3, #32]
 800635c:	69ba      	ldr	r2, [r7, #24]
 800635e:	429a      	cmp	r2, r3
 8006360:	d03c      	beq.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006362:	f7fe fd35 	bl	8004dd0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d105      	bne.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6a1b      	ldr	r3, [r3, #32]
 8006370:	4618      	mov	r0, r3
 8006372:	f7ff ff9b 	bl	80062ac <LL_RCC_SetRTCClockSource>
 8006376:	e02e      	b.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8006378:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800637c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006380:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8006382:	f7ff ffb6 	bl	80062f2 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8006386:	f7ff ffc5 	bl	8006314 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6a1b      	ldr	r3, [r3, #32]
 8006394:	4313      	orrs	r3, r2
 8006396:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8006398:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80063a2:	f7ff fe6d 	bl	8006080 <LL_RCC_LSE_IsEnabled>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d114      	bne.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80063ac:	f7fc faf8 	bl	80029a0 <HAL_GetTick>
 80063b0:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80063b2:	e00b      	b.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063b4:	f7fc faf4 	bl	80029a0 <HAL_GetTick>
 80063b8:	4602      	mov	r2, r0
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	f241 3288 	movw	r2, #5000	; 0x1388
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d902      	bls.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 80063c6:	2303      	movs	r3, #3
 80063c8:	77fb      	strb	r3, [r7, #31]
              break;
 80063ca:	e004      	b.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 80063cc:	f7ff fe6a 	bl	80060a4 <LL_RCC_LSE_IsReady>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d1ee      	bne.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80063d6:	7ffb      	ldrb	r3, [r7, #31]
 80063d8:	77bb      	strb	r3, [r7, #30]
 80063da:	e001      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063dc:	7ffb      	ldrb	r3, [r7, #31]
 80063de:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 0301 	and.w	r3, r3, #1
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d004      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	4618      	mov	r0, r3
 80063f2:	f7ff feb6 	bl	8006162 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f003 0302 	and.w	r3, r3, #2
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d004      	beq.n	800640c <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	4618      	mov	r0, r3
 8006408:	f7ff fec1 	bl	800618e <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 0310 	and.w	r3, r3, #16
 8006414:	2b00      	cmp	r3, #0
 8006416:	d004      	beq.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	691b      	ldr	r3, [r3, #16]
 800641c:	4618      	mov	r0, r3
 800641e:	f7ff fee9 	bl	80061f4 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 0320 	and.w	r3, r3, #32
 800642a:	2b00      	cmp	r3, #0
 800642c:	d004      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	695b      	ldr	r3, [r3, #20]
 8006432:	4618      	mov	r0, r3
 8006434:	f7ff fede 	bl	80061f4 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 0304 	and.w	r3, r3, #4
 8006440:	2b00      	cmp	r3, #0
 8006442:	d004      	beq.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	4618      	mov	r0, r3
 800644a:	f7ff feb6 	bl	80061ba <LL_RCC_SetI2CClockSource>
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006456:	2b00      	cmp	r3, #0
 8006458:	d02b      	beq.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	699b      	ldr	r3, [r3, #24]
 800645e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006462:	d008      	beq.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	699b      	ldr	r3, [r3, #24]
 8006468:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800646c:	d003      	beq.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x140>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	699b      	ldr	r3, [r3, #24]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d105      	bne.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	699b      	ldr	r3, [r3, #24]
 800647a:	4618      	mov	r0, r3
 800647c:	f7ff fed4 	bl	8006228 <LL_RCC_SetRNGClockSource>
 8006480:	e00a      	b.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x162>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	699b      	ldr	r3, [r3, #24]
 8006486:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800648a:	60fb      	str	r3, [r7, #12]
 800648c:	2000      	movs	r0, #0
 800648e:	f7ff fecb 	bl	8006228 <LL_RCC_SetRNGClockSource>
 8006492:	68f8      	ldr	r0, [r7, #12]
 8006494:	f7ff fede 	bl	8006254 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	699b      	ldr	r3, [r3, #24]
 800649c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80064a0:	d107      	bne.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80064a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80064b0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d011      	beq.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	69db      	ldr	r3, [r3, #28]
 80064c2:	4618      	mov	r0, r3
 80064c4:	f7ff fedc 	bl	8006280 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	69db      	ldr	r3, [r3, #28]
 80064cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064d0:	d107      	bne.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80064d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064e0:	60d3      	str	r3, [r2, #12]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d004      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f2:	4618      	mov	r0, r3
 80064f4:	f7ff fdf7 	bl	80060e6 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006500:	2b00      	cmp	r3, #0
 8006502:	d009      	beq.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006508:	4618      	mov	r0, r3
 800650a:	f7ff fe16 	bl	800613a <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006512:	4618      	mov	r0, r3
 8006514:	f7ff fdfd 	bl	8006112 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8006518:	7fbb      	ldrb	r3, [r7, #30]
}
 800651a:	4618      	mov	r0, r3
 800651c:	3720      	adds	r7, #32
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}

08006522 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006522:	b580      	push	{r7, lr}
 8006524:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8006526:	f7ff fdcf 	bl	80060c8 <LL_RCC_MSI_EnablePLLMode>
}
 800652a:	bf00      	nop
 800652c:	bd80      	pop	{r7, pc}

0800652e <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800652e:	b580      	push	{r7, lr}
 8006530:	b082      	sub	sp, #8
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d101      	bne.n	8006540 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e090      	b.n	8006662 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006546:	b2db      	uxtb	r3, r3
 8006548:	2b00      	cmp	r3, #0
 800654a:	d106      	bne.n	800655a <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f7fb ff7f 	bl	8002458 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2202      	movs	r2, #2
 800655e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	22ca      	movs	r2, #202	; 0xca
 8006568:	625a      	str	r2, [r3, #36]	; 0x24
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2253      	movs	r2, #83	; 0x53
 8006570:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 faba 	bl	8006aec <RTC_EnterInitMode>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d009      	beq.n	8006592 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	22ff      	movs	r2, #255	; 0xff
 8006584:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2204      	movs	r2, #4
 800658a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e067      	b.n	8006662 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	6812      	ldr	r2, [r2, #0]
 800659c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80065a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065a4:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	6899      	ldr	r1, [r3, #8]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	685a      	ldr	r2, [r3, #4]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	691b      	ldr	r3, [r3, #16]
 80065b4:	431a      	orrs	r2, r3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	699b      	ldr	r3, [r3, #24]
 80065ba:	431a      	orrs	r2, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	430a      	orrs	r2, r1
 80065c2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	68d2      	ldr	r2, [r2, #12]
 80065cc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	6919      	ldr	r1, [r3, #16]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	041a      	lsls	r2, r3, #16
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	430a      	orrs	r2, r1
 80065e0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68da      	ldr	r2, [r3, #12]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065f0:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f022 0202 	bic.w	r2, r2, #2
 8006600:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	69da      	ldr	r2, [r3, #28]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	695b      	ldr	r3, [r3, #20]
 8006610:	431a      	orrs	r2, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	430a      	orrs	r2, r1
 8006618:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	f003 0320 	and.w	r3, r3, #32
 8006624:	2b00      	cmp	r3, #0
 8006626:	d113      	bne.n	8006650 <HAL_RTC_Init+0x122>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f000 fa39 	bl	8006aa0 <HAL_RTC_WaitForSynchro>
 800662e:	4603      	mov	r3, r0
 8006630:	2b00      	cmp	r3, #0
 8006632:	d00d      	beq.n	8006650 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	22ff      	movs	r2, #255	; 0xff
 800663a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2204      	movs	r2, #4
 8006640:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	e008      	b.n	8006662 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	22ff      	movs	r2, #255	; 0xff
 8006656:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2201      	movs	r2, #1
 800665c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8006660:	2300      	movs	r3, #0
  }
}
 8006662:	4618      	mov	r0, r3
 8006664:	3708      	adds	r7, #8
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}

0800666a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800666a:	b590      	push	{r4, r7, lr}
 800666c:	b087      	sub	sp, #28
 800666e:	af00      	add	r7, sp, #0
 8006670:	60f8      	str	r0, [r7, #12]
 8006672:	60b9      	str	r1, [r7, #8]
 8006674:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f893 3020 	ldrb.w	r3, [r3, #32]
 800667c:	2b01      	cmp	r3, #1
 800667e:	d101      	bne.n	8006684 <HAL_RTC_SetTime+0x1a>
 8006680:	2302      	movs	r3, #2
 8006682:	e0b2      	b.n	80067ea <HAL_RTC_SetTime+0x180>
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2202      	movs	r2, #2
 8006690:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d126      	bne.n	80066e8 <HAL_RTC_SetTime+0x7e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d102      	bne.n	80066ae <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	2200      	movs	r2, #0
 80066ac:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	4618      	mov	r0, r3
 80066b4:	f000 fa44 	bl	8006b40 <RTC_ByteToBcd2>
 80066b8:	4603      	mov	r3, r0
 80066ba:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	785b      	ldrb	r3, [r3, #1]
 80066c0:	4618      	mov	r0, r3
 80066c2:	f000 fa3d 	bl	8006b40 <RTC_ByteToBcd2>
 80066c6:	4603      	mov	r3, r0
 80066c8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80066ca:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	789b      	ldrb	r3, [r3, #2]
 80066d0:	4618      	mov	r0, r3
 80066d2:	f000 fa35 	bl	8006b40 <RTC_ByteToBcd2>
 80066d6:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80066d8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	78db      	ldrb	r3, [r3, #3]
 80066e0:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80066e2:	4313      	orrs	r3, r2
 80066e4:	617b      	str	r3, [r7, #20]
 80066e6:	e018      	b.n	800671a <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d102      	bne.n	80066fc <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	2200      	movs	r2, #0
 80066fa:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	785b      	ldrb	r3, [r3, #1]
 8006706:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006708:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800670a:	68ba      	ldr	r2, [r7, #8]
 800670c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800670e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	78db      	ldrb	r3, [r3, #3]
 8006714:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006716:	4313      	orrs	r3, r2
 8006718:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	22ca      	movs	r2, #202	; 0xca
 8006720:	625a      	str	r2, [r3, #36]	; 0x24
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2253      	movs	r2, #83	; 0x53
 8006728:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800672a:	68f8      	ldr	r0, [r7, #12]
 800672c:	f000 f9de 	bl	8006aec <RTC_EnterInitMode>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d00d      	beq.n	8006752 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	22ff      	movs	r2, #255	; 0xff
 800673c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2204      	movs	r2, #4
 8006742:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2200      	movs	r2, #0
 800674a:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e04b      	b.n	80067ea <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800675c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006760:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	689a      	ldr	r2, [r3, #8]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006770:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	6899      	ldr	r1, [r3, #8]
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	68da      	ldr	r2, [r3, #12]
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	431a      	orrs	r2, r3
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	430a      	orrs	r2, r1
 8006788:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	68da      	ldr	r2, [r3, #12]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006798:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	f003 0320 	and.w	r3, r3, #32
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d113      	bne.n	80067d0 <HAL_RTC_SetTime+0x166>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80067a8:	68f8      	ldr	r0, [r7, #12]
 80067aa:	f000 f979 	bl	8006aa0 <HAL_RTC_WaitForSynchro>
 80067ae:	4603      	mov	r3, r0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d00d      	beq.n	80067d0 <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	22ff      	movs	r2, #255	; 0xff
 80067ba:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2204      	movs	r2, #4
 80067c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	e00c      	b.n	80067ea <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	22ff      	movs	r2, #255	; 0xff
 80067d6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    __HAL_UNLOCK(hrtc);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 80067e8:	2300      	movs	r3, #0
  }
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	371c      	adds	r7, #28
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd90      	pop	{r4, r7, pc}

080067f2 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80067f2:	b580      	push	{r7, lr}
 80067f4:	b086      	sub	sp, #24
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	60f8      	str	r0, [r7, #12]
 80067fa:	60b9      	str	r1, [r7, #8]
 80067fc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006820:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006824:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	0c1b      	lsrs	r3, r3, #16
 800682a:	b2db      	uxtb	r3, r3
 800682c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006830:	b2da      	uxtb	r2, r3
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	0a1b      	lsrs	r3, r3, #8
 800683a:	b2db      	uxtb	r3, r3
 800683c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006840:	b2da      	uxtb	r2, r3
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	b2db      	uxtb	r3, r3
 800684a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800684e:	b2da      	uxtb	r2, r3
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	0c1b      	lsrs	r3, r3, #16
 8006858:	b2db      	uxtb	r3, r3
 800685a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800685e:	b2da      	uxtb	r2, r3
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d11a      	bne.n	80068a0 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	4618      	mov	r0, r3
 8006870:	f000 f986 	bl	8006b80 <RTC_Bcd2ToByte>
 8006874:	4603      	mov	r3, r0
 8006876:	461a      	mov	r2, r3
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	785b      	ldrb	r3, [r3, #1]
 8006880:	4618      	mov	r0, r3
 8006882:	f000 f97d 	bl	8006b80 <RTC_Bcd2ToByte>
 8006886:	4603      	mov	r3, r0
 8006888:	461a      	mov	r2, r3
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	789b      	ldrb	r3, [r3, #2]
 8006892:	4618      	mov	r0, r3
 8006894:	f000 f974 	bl	8006b80 <RTC_Bcd2ToByte>
 8006898:	4603      	mov	r3, r0
 800689a:	461a      	mov	r2, r3
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80068a0:	2300      	movs	r3, #0
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3718      	adds	r7, #24
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}

080068aa <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80068aa:	b590      	push	{r4, r7, lr}
 80068ac:	b087      	sub	sp, #28
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	60f8      	str	r0, [r7, #12]
 80068b2:	60b9      	str	r1, [r7, #8]
 80068b4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d101      	bne.n	80068c4 <HAL_RTC_SetDate+0x1a>
 80068c0:	2302      	movs	r3, #2
 80068c2:	e09c      	b.n	80069fe <HAL_RTC_SetDate+0x154>
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2202      	movs	r2, #2
 80068d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d10e      	bne.n	80068f8 <HAL_RTC_SetDate+0x4e>
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	785b      	ldrb	r3, [r3, #1]
 80068de:	f003 0310 	and.w	r3, r3, #16
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d008      	beq.n	80068f8 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	785b      	ldrb	r3, [r3, #1]
 80068ea:	f023 0310 	bic.w	r3, r3, #16
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	330a      	adds	r3, #10
 80068f2:	b2da      	uxtb	r2, r3
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d11c      	bne.n	8006938 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	78db      	ldrb	r3, [r3, #3]
 8006902:	4618      	mov	r0, r3
 8006904:	f000 f91c 	bl	8006b40 <RTC_ByteToBcd2>
 8006908:	4603      	mov	r3, r0
 800690a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	785b      	ldrb	r3, [r3, #1]
 8006910:	4618      	mov	r0, r3
 8006912:	f000 f915 	bl	8006b40 <RTC_ByteToBcd2>
 8006916:	4603      	mov	r3, r0
 8006918:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800691a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	789b      	ldrb	r3, [r3, #2]
 8006920:	4618      	mov	r0, r3
 8006922:	f000 f90d 	bl	8006b40 <RTC_ByteToBcd2>
 8006926:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006928:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006932:	4313      	orrs	r3, r2
 8006934:	617b      	str	r3, [r7, #20]
 8006936:	e00e      	b.n	8006956 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	78db      	ldrb	r3, [r3, #3]
 800693c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	785b      	ldrb	r3, [r3, #1]
 8006942:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006944:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8006946:	68ba      	ldr	r2, [r7, #8]
 8006948:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800694a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006952:	4313      	orrs	r3, r2
 8006954:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	22ca      	movs	r2, #202	; 0xca
 800695c:	625a      	str	r2, [r3, #36]	; 0x24
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	2253      	movs	r2, #83	; 0x53
 8006964:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006966:	68f8      	ldr	r0, [r7, #12]
 8006968:	f000 f8c0 	bl	8006aec <RTC_EnterInitMode>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00d      	beq.n	800698e <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	22ff      	movs	r2, #255	; 0xff
 8006978:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2204      	movs	r2, #4
 800697e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2200      	movs	r2, #0
 8006986:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	e037      	b.n	80069fe <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006998:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800699c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68da      	ldr	r2, [r3, #12]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069ac:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	f003 0320 	and.w	r3, r3, #32
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d113      	bne.n	80069e4 <HAL_RTC_SetDate+0x13a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80069bc:	68f8      	ldr	r0, [r7, #12]
 80069be:	f000 f86f 	bl	8006aa0 <HAL_RTC_WaitForSynchro>
 80069c2:	4603      	mov	r3, r0
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d00d      	beq.n	80069e4 <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	22ff      	movs	r2, #255	; 0xff
 80069ce:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2204      	movs	r2, #4
 80069d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2200      	movs	r2, #0
 80069dc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	e00c      	b.n	80069fe <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	22ff      	movs	r2, #255	; 0xff
 80069ea:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 80069fc:	2300      	movs	r3, #0
  }
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	371c      	adds	r7, #28
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd90      	pop	{r4, r7, pc}

08006a06 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006a06:	b580      	push	{r7, lr}
 8006a08:	b086      	sub	sp, #24
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	60f8      	str	r0, [r7, #12]
 8006a0e:	60b9      	str	r1, [r7, #8]
 8006a10:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006a1c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006a20:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	0c1b      	lsrs	r3, r3, #16
 8006a26:	b2da      	uxtb	r2, r3
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	0a1b      	lsrs	r3, r3, #8
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	f003 031f 	and.w	r3, r3, #31
 8006a36:	b2da      	uxtb	r2, r3
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a44:	b2da      	uxtb	r2, r3
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	0b5b      	lsrs	r3, r3, #13
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	f003 0307 	and.w	r3, r3, #7
 8006a54:	b2da      	uxtb	r2, r3
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d11a      	bne.n	8006a96 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	78db      	ldrb	r3, [r3, #3]
 8006a64:	4618      	mov	r0, r3
 8006a66:	f000 f88b 	bl	8006b80 <RTC_Bcd2ToByte>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	785b      	ldrb	r3, [r3, #1]
 8006a76:	4618      	mov	r0, r3
 8006a78:	f000 f882 	bl	8006b80 <RTC_Bcd2ToByte>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	461a      	mov	r2, r3
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	789b      	ldrb	r3, [r3, #2]
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f000 f879 	bl	8006b80 <RTC_Bcd2ToByte>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	461a      	mov	r2, r3
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006a96:	2300      	movs	r3, #0
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3718      	adds	r7, #24
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68da      	ldr	r2, [r3, #12]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006ab6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006ab8:	f7fb ff72 	bl	80029a0 <HAL_GetTick>
 8006abc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006abe:	e009      	b.n	8006ad4 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006ac0:	f7fb ff6e 	bl	80029a0 <HAL_GetTick>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	1ad3      	subs	r3, r2, r3
 8006aca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ace:	d901      	bls.n	8006ad4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006ad0:	2303      	movs	r3, #3
 8006ad2:	e007      	b.n	8006ae4 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	f003 0320 	and.w	r3, r3, #32
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d0ee      	beq.n	8006ac0 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3710      	adds	r7, #16
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d119      	bne.n	8006b36 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f04f 32ff 	mov.w	r2, #4294967295
 8006b0a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006b0c:	f7fb ff48 	bl	80029a0 <HAL_GetTick>
 8006b10:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006b12:	e009      	b.n	8006b28 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006b14:	f7fb ff44 	bl	80029a0 <HAL_GetTick>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b22:	d901      	bls.n	8006b28 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8006b24:	2303      	movs	r3, #3
 8006b26:	e007      	b.n	8006b38 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d0ee      	beq.n	8006b14 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8006b36:	2300      	movs	r3, #0
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3710      	adds	r7, #16
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b085      	sub	sp, #20
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	4603      	mov	r3, r0
 8006b48:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8006b4e:	79fb      	ldrb	r3, [r7, #7]
 8006b50:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 8006b52:	e005      	b.n	8006b60 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	3301      	adds	r3, #1
 8006b58:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8006b5a:	7afb      	ldrb	r3, [r7, #11]
 8006b5c:	3b0a      	subs	r3, #10
 8006b5e:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 8006b60:	7afb      	ldrb	r3, [r7, #11]
 8006b62:	2b09      	cmp	r3, #9
 8006b64:	d8f6      	bhi.n	8006b54 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	011b      	lsls	r3, r3, #4
 8006b6c:	b2da      	uxtb	r2, r3
 8006b6e:	7afb      	ldrb	r3, [r7, #11]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	b2db      	uxtb	r3, r3
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3714      	adds	r7, #20
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b085      	sub	sp, #20
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	4603      	mov	r3, r0
 8006b88:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8006b8a:	79fb      	ldrb	r3, [r7, #7]
 8006b8c:	091b      	lsrs	r3, r3, #4
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	461a      	mov	r2, r3
 8006b92:	4613      	mov	r3, r2
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	4413      	add	r3, r2
 8006b98:	005b      	lsls	r3, r3, #1
 8006b9a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	b2da      	uxtb	r2, r3
 8006ba0:	79fb      	ldrb	r3, [r7, #7]
 8006ba2:	f003 030f 	and.w	r3, r3, #15
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	4413      	add	r3, r2
 8006baa:	b2db      	uxtb	r3, r3
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3714      	adds	r7, #20
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b082      	sub	sp, #8
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d101      	bne.n	8006bca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e049      	b.n	8006c5e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d106      	bne.n	8006be4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f7fb fc50 	bl	8002484 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2202      	movs	r2, #2
 8006be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	3304      	adds	r3, #4
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	4610      	mov	r0, r2
 8006bf8:	f000 fad8 	bl	80071ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2201      	movs	r2, #1
 8006c28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c5c:	2300      	movs	r3, #0
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3708      	adds	r7, #8
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
	...

08006c68 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b085      	sub	sp, #20
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d001      	beq.n	8006c80 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	e02e      	b.n	8006cde <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2202      	movs	r2, #2
 8006c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a17      	ldr	r2, [pc, #92]	; (8006cec <HAL_TIM_Base_Start+0x84>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d004      	beq.n	8006c9c <HAL_TIM_Base_Start+0x34>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c9a:	d115      	bne.n	8006cc8 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	689a      	ldr	r2, [r3, #8]
 8006ca2:	4b13      	ldr	r3, [pc, #76]	; (8006cf0 <HAL_TIM_Base_Start+0x88>)
 8006ca4:	4013      	ands	r3, r2
 8006ca6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2b06      	cmp	r3, #6
 8006cac:	d015      	beq.n	8006cda <HAL_TIM_Base_Start+0x72>
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cb4:	d011      	beq.n	8006cda <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f042 0201 	orr.w	r2, r2, #1
 8006cc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cc6:	e008      	b.n	8006cda <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f042 0201 	orr.w	r2, r2, #1
 8006cd6:	601a      	str	r2, [r3, #0]
 8006cd8:	e000      	b.n	8006cdc <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cda:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3714      	adds	r7, #20
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr
 8006cea:	bf00      	nop
 8006cec:	40012c00 	.word	0x40012c00
 8006cf0:	00010007 	.word	0x00010007

08006cf4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d001      	beq.n	8006d0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e036      	b.n	8006d7a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2202      	movs	r2, #2
 8006d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	68da      	ldr	r2, [r3, #12]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f042 0201 	orr.w	r2, r2, #1
 8006d22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a17      	ldr	r2, [pc, #92]	; (8006d88 <HAL_TIM_Base_Start_IT+0x94>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d004      	beq.n	8006d38 <HAL_TIM_Base_Start_IT+0x44>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d36:	d115      	bne.n	8006d64 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	689a      	ldr	r2, [r3, #8]
 8006d3e:	4b13      	ldr	r3, [pc, #76]	; (8006d8c <HAL_TIM_Base_Start_IT+0x98>)
 8006d40:	4013      	ands	r3, r2
 8006d42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2b06      	cmp	r3, #6
 8006d48:	d015      	beq.n	8006d76 <HAL_TIM_Base_Start_IT+0x82>
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d50:	d011      	beq.n	8006d76 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f042 0201 	orr.w	r2, r2, #1
 8006d60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d62:	e008      	b.n	8006d76 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f042 0201 	orr.w	r2, r2, #1
 8006d72:	601a      	str	r2, [r3, #0]
 8006d74:	e000      	b.n	8006d78 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d76:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3714      	adds	r7, #20
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr
 8006d86:	bf00      	nop
 8006d88:	40012c00 	.word	0x40012c00
 8006d8c:	00010007 	.word	0x00010007

08006d90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b082      	sub	sp, #8
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	f003 0302 	and.w	r3, r3, #2
 8006da2:	2b02      	cmp	r3, #2
 8006da4:	d122      	bne.n	8006dec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	f003 0302 	and.w	r3, r3, #2
 8006db0:	2b02      	cmp	r3, #2
 8006db2:	d11b      	bne.n	8006dec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f06f 0202 	mvn.w	r2, #2
 8006dbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	699b      	ldr	r3, [r3, #24]
 8006dca:	f003 0303 	and.w	r3, r3, #3
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d003      	beq.n	8006dda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 f9cb 	bl	800716e <HAL_TIM_IC_CaptureCallback>
 8006dd8:	e005      	b.n	8006de6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 f9bd 	bl	800715a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 f9ce 	bl	8007182 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	f003 0304 	and.w	r3, r3, #4
 8006df6:	2b04      	cmp	r3, #4
 8006df8:	d122      	bne.n	8006e40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	f003 0304 	and.w	r3, r3, #4
 8006e04:	2b04      	cmp	r3, #4
 8006e06:	d11b      	bne.n	8006e40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f06f 0204 	mvn.w	r2, #4
 8006e10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2202      	movs	r2, #2
 8006e16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	699b      	ldr	r3, [r3, #24]
 8006e1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d003      	beq.n	8006e2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 f9a1 	bl	800716e <HAL_TIM_IC_CaptureCallback>
 8006e2c:	e005      	b.n	8006e3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 f993 	bl	800715a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 f9a4 	bl	8007182 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	691b      	ldr	r3, [r3, #16]
 8006e46:	f003 0308 	and.w	r3, r3, #8
 8006e4a:	2b08      	cmp	r3, #8
 8006e4c:	d122      	bne.n	8006e94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	f003 0308 	and.w	r3, r3, #8
 8006e58:	2b08      	cmp	r3, #8
 8006e5a:	d11b      	bne.n	8006e94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f06f 0208 	mvn.w	r2, #8
 8006e64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2204      	movs	r2, #4
 8006e6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	69db      	ldr	r3, [r3, #28]
 8006e72:	f003 0303 	and.w	r3, r3, #3
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d003      	beq.n	8006e82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 f977 	bl	800716e <HAL_TIM_IC_CaptureCallback>
 8006e80:	e005      	b.n	8006e8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 f969 	bl	800715a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 f97a 	bl	8007182 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	691b      	ldr	r3, [r3, #16]
 8006e9a:	f003 0310 	and.w	r3, r3, #16
 8006e9e:	2b10      	cmp	r3, #16
 8006ea0:	d122      	bne.n	8006ee8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	f003 0310 	and.w	r3, r3, #16
 8006eac:	2b10      	cmp	r3, #16
 8006eae:	d11b      	bne.n	8006ee8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f06f 0210 	mvn.w	r2, #16
 8006eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2208      	movs	r2, #8
 8006ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	69db      	ldr	r3, [r3, #28]
 8006ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d003      	beq.n	8006ed6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 f94d 	bl	800716e <HAL_TIM_IC_CaptureCallback>
 8006ed4:	e005      	b.n	8006ee2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 f93f 	bl	800715a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 f950 	bl	8007182 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	f003 0301 	and.w	r3, r3, #1
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d10e      	bne.n	8006f14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	f003 0301 	and.w	r3, r3, #1
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d107      	bne.n	8006f14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f06f 0201 	mvn.w	r2, #1
 8006f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f7fb f8b4 	bl	800207c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	691b      	ldr	r3, [r3, #16]
 8006f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f1e:	2b80      	cmp	r3, #128	; 0x80
 8006f20:	d10e      	bne.n	8006f40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f2c:	2b80      	cmp	r3, #128	; 0x80
 8006f2e:	d107      	bne.n	8006f40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 fa8c 	bl	8007458 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f4e:	d10e      	bne.n	8006f6e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	68db      	ldr	r3, [r3, #12]
 8006f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f5a:	2b80      	cmp	r3, #128	; 0x80
 8006f5c:	d107      	bne.n	8006f6e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006f66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 fa7f 	bl	800746c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	691b      	ldr	r3, [r3, #16]
 8006f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f78:	2b40      	cmp	r3, #64	; 0x40
 8006f7a:	d10e      	bne.n	8006f9a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f86:	2b40      	cmp	r3, #64	; 0x40
 8006f88:	d107      	bne.n	8006f9a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 f8fe 	bl	8007196 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	691b      	ldr	r3, [r3, #16]
 8006fa0:	f003 0320 	and.w	r3, r3, #32
 8006fa4:	2b20      	cmp	r3, #32
 8006fa6:	d10e      	bne.n	8006fc6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	68db      	ldr	r3, [r3, #12]
 8006fae:	f003 0320 	and.w	r3, r3, #32
 8006fb2:	2b20      	cmp	r3, #32
 8006fb4:	d107      	bne.n	8006fc6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f06f 0220 	mvn.w	r2, #32
 8006fbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 fa3f 	bl	8007444 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006fc6:	bf00      	nop
 8006fc8:	3708      	adds	r7, #8
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006fce:	b580      	push	{r7, lr}
 8006fd0:	b084      	sub	sp, #16
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
 8006fd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d101      	bne.n	8006fe6 <HAL_TIM_ConfigClockSource+0x18>
 8006fe2:	2302      	movs	r3, #2
 8006fe4:	e0b5      	b.n	8007152 <HAL_TIM_ConfigClockSource+0x184>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2201      	movs	r2, #1
 8006fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2202      	movs	r2, #2
 8006ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8007004:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007008:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007010:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007022:	d03e      	beq.n	80070a2 <HAL_TIM_ConfigClockSource+0xd4>
 8007024:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007028:	f200 8087 	bhi.w	800713a <HAL_TIM_ConfigClockSource+0x16c>
 800702c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007030:	f000 8085 	beq.w	800713e <HAL_TIM_ConfigClockSource+0x170>
 8007034:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007038:	d87f      	bhi.n	800713a <HAL_TIM_ConfigClockSource+0x16c>
 800703a:	2b70      	cmp	r3, #112	; 0x70
 800703c:	d01a      	beq.n	8007074 <HAL_TIM_ConfigClockSource+0xa6>
 800703e:	2b70      	cmp	r3, #112	; 0x70
 8007040:	d87b      	bhi.n	800713a <HAL_TIM_ConfigClockSource+0x16c>
 8007042:	2b60      	cmp	r3, #96	; 0x60
 8007044:	d050      	beq.n	80070e8 <HAL_TIM_ConfigClockSource+0x11a>
 8007046:	2b60      	cmp	r3, #96	; 0x60
 8007048:	d877      	bhi.n	800713a <HAL_TIM_ConfigClockSource+0x16c>
 800704a:	2b50      	cmp	r3, #80	; 0x50
 800704c:	d03c      	beq.n	80070c8 <HAL_TIM_ConfigClockSource+0xfa>
 800704e:	2b50      	cmp	r3, #80	; 0x50
 8007050:	d873      	bhi.n	800713a <HAL_TIM_ConfigClockSource+0x16c>
 8007052:	2b40      	cmp	r3, #64	; 0x40
 8007054:	d058      	beq.n	8007108 <HAL_TIM_ConfigClockSource+0x13a>
 8007056:	2b40      	cmp	r3, #64	; 0x40
 8007058:	d86f      	bhi.n	800713a <HAL_TIM_ConfigClockSource+0x16c>
 800705a:	2b30      	cmp	r3, #48	; 0x30
 800705c:	d064      	beq.n	8007128 <HAL_TIM_ConfigClockSource+0x15a>
 800705e:	2b30      	cmp	r3, #48	; 0x30
 8007060:	d86b      	bhi.n	800713a <HAL_TIM_ConfigClockSource+0x16c>
 8007062:	2b20      	cmp	r3, #32
 8007064:	d060      	beq.n	8007128 <HAL_TIM_ConfigClockSource+0x15a>
 8007066:	2b20      	cmp	r3, #32
 8007068:	d867      	bhi.n	800713a <HAL_TIM_ConfigClockSource+0x16c>
 800706a:	2b00      	cmp	r3, #0
 800706c:	d05c      	beq.n	8007128 <HAL_TIM_ConfigClockSource+0x15a>
 800706e:	2b10      	cmp	r3, #16
 8007070:	d05a      	beq.n	8007128 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007072:	e062      	b.n	800713a <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6818      	ldr	r0, [r3, #0]
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	6899      	ldr	r1, [r3, #8]
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	685a      	ldr	r2, [r3, #4]
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	f000 f95e 	bl	8007344 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007096:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	609a      	str	r2, [r3, #8]
      break;
 80070a0:	e04e      	b.n	8007140 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6818      	ldr	r0, [r3, #0]
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	6899      	ldr	r1, [r3, #8]
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	685a      	ldr	r2, [r3, #4]
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	f000 f947 	bl	8007344 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	689a      	ldr	r2, [r3, #8]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80070c4:	609a      	str	r2, [r3, #8]
      break;
 80070c6:	e03b      	b.n	8007140 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6818      	ldr	r0, [r3, #0]
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	6859      	ldr	r1, [r3, #4]
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	461a      	mov	r2, r3
 80070d6:	f000 f8b9 	bl	800724c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	2150      	movs	r1, #80	; 0x50
 80070e0:	4618      	mov	r0, r3
 80070e2:	f000 f912 	bl	800730a <TIM_ITRx_SetConfig>
      break;
 80070e6:	e02b      	b.n	8007140 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6818      	ldr	r0, [r3, #0]
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	6859      	ldr	r1, [r3, #4]
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	461a      	mov	r2, r3
 80070f6:	f000 f8d8 	bl	80072aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	2160      	movs	r1, #96	; 0x60
 8007100:	4618      	mov	r0, r3
 8007102:	f000 f902 	bl	800730a <TIM_ITRx_SetConfig>
      break;
 8007106:	e01b      	b.n	8007140 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6818      	ldr	r0, [r3, #0]
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	6859      	ldr	r1, [r3, #4]
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	461a      	mov	r2, r3
 8007116:	f000 f899 	bl	800724c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	2140      	movs	r1, #64	; 0x40
 8007120:	4618      	mov	r0, r3
 8007122:	f000 f8f2 	bl	800730a <TIM_ITRx_SetConfig>
      break;
 8007126:	e00b      	b.n	8007140 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4619      	mov	r1, r3
 8007132:	4610      	mov	r0, r2
 8007134:	f000 f8e9 	bl	800730a <TIM_ITRx_SetConfig>
        break;
 8007138:	e002      	b.n	8007140 <HAL_TIM_ConfigClockSource+0x172>
      break;
 800713a:	bf00      	nop
 800713c:	e000      	b.n	8007140 <HAL_TIM_ConfigClockSource+0x172>
      break;
 800713e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2201      	movs	r2, #1
 8007144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007150:	2300      	movs	r3, #0
}
 8007152:	4618      	mov	r0, r3
 8007154:	3710      	adds	r7, #16
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}

0800715a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800715a:	b480      	push	{r7}
 800715c:	b083      	sub	sp, #12
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007162:	bf00      	nop
 8007164:	370c      	adds	r7, #12
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr

0800716e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800716e:	b480      	push	{r7}
 8007170:	b083      	sub	sp, #12
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007176:	bf00      	nop
 8007178:	370c      	adds	r7, #12
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr

08007182 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007182:	b480      	push	{r7}
 8007184:	b083      	sub	sp, #12
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800718a:	bf00      	nop
 800718c:	370c      	adds	r7, #12
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr

08007196 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007196:	b480      	push	{r7}
 8007198:	b083      	sub	sp, #12
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800719e:	bf00      	nop
 80071a0:	370c      	adds	r7, #12
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr
	...

080071ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b085      	sub	sp, #20
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	4a22      	ldr	r2, [pc, #136]	; (8007248 <TIM_Base_SetConfig+0x9c>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d003      	beq.n	80071cc <TIM_Base_SetConfig+0x20>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071ca:	d108      	bne.n	80071de <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	68fa      	ldr	r2, [r7, #12]
 80071da:	4313      	orrs	r3, r2
 80071dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	4a19      	ldr	r2, [pc, #100]	; (8007248 <TIM_Base_SetConfig+0x9c>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d003      	beq.n	80071ee <TIM_Base_SetConfig+0x42>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071ec:	d108      	bne.n	8007200 <TIM_Base_SetConfig+0x54>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	68db      	ldr	r3, [r3, #12]
 80071fa:	68fa      	ldr	r2, [r7, #12]
 80071fc:	4313      	orrs	r3, r2
 80071fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	695b      	ldr	r3, [r3, #20]
 800720a:	4313      	orrs	r3, r2
 800720c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	68fa      	ldr	r2, [r7, #12]
 8007212:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	689a      	ldr	r2, [r3, #8]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	4a08      	ldr	r2, [pc, #32]	; (8007248 <TIM_Base_SetConfig+0x9c>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d103      	bne.n	8007234 <TIM_Base_SetConfig+0x88>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	691a      	ldr	r2, [r3, #16]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2201      	movs	r2, #1
 8007238:	615a      	str	r2, [r3, #20]
}
 800723a:	bf00      	nop
 800723c:	3714      	adds	r7, #20
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr
 8007246:	bf00      	nop
 8007248:	40012c00 	.word	0x40012c00

0800724c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800724c:	b480      	push	{r7}
 800724e:	b087      	sub	sp, #28
 8007250:	af00      	add	r7, sp, #0
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	60b9      	str	r1, [r7, #8]
 8007256:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6a1b      	ldr	r3, [r3, #32]
 800725c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6a1b      	ldr	r3, [r3, #32]
 8007262:	f023 0201 	bic.w	r2, r3, #1
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	699b      	ldr	r3, [r3, #24]
 800726e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007276:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	011b      	lsls	r3, r3, #4
 800727c:	693a      	ldr	r2, [r7, #16]
 800727e:	4313      	orrs	r3, r2
 8007280:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	f023 030a 	bic.w	r3, r3, #10
 8007288:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800728a:	697a      	ldr	r2, [r7, #20]
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	4313      	orrs	r3, r2
 8007290:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	693a      	ldr	r2, [r7, #16]
 8007296:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	697a      	ldr	r2, [r7, #20]
 800729c:	621a      	str	r2, [r3, #32]
}
 800729e:	bf00      	nop
 80072a0:	371c      	adds	r7, #28
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr

080072aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072aa:	b480      	push	{r7}
 80072ac:	b087      	sub	sp, #28
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	60f8      	str	r0, [r7, #12]
 80072b2:	60b9      	str	r1, [r7, #8]
 80072b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	6a1b      	ldr	r3, [r3, #32]
 80072ba:	f023 0210 	bic.w	r2, r3, #16
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	699b      	ldr	r3, [r3, #24]
 80072c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	6a1b      	ldr	r3, [r3, #32]
 80072cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80072d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	031b      	lsls	r3, r3, #12
 80072da:	697a      	ldr	r2, [r7, #20]
 80072dc:	4313      	orrs	r3, r2
 80072de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80072e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	011b      	lsls	r3, r3, #4
 80072ec:	693a      	ldr	r2, [r7, #16]
 80072ee:	4313      	orrs	r3, r2
 80072f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	697a      	ldr	r2, [r7, #20]
 80072f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	693a      	ldr	r2, [r7, #16]
 80072fc:	621a      	str	r2, [r3, #32]
}
 80072fe:	bf00      	nop
 8007300:	371c      	adds	r7, #28
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr

0800730a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800730a:	b480      	push	{r7}
 800730c:	b085      	sub	sp, #20
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
 8007312:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007320:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007324:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007326:	683a      	ldr	r2, [r7, #0]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	4313      	orrs	r3, r2
 800732c:	f043 0307 	orr.w	r3, r3, #7
 8007330:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	68fa      	ldr	r2, [r7, #12]
 8007336:	609a      	str	r2, [r3, #8]
}
 8007338:	bf00      	nop
 800733a:	3714      	adds	r7, #20
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007344:	b480      	push	{r7}
 8007346:	b087      	sub	sp, #28
 8007348:	af00      	add	r7, sp, #0
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	60b9      	str	r1, [r7, #8]
 800734e:	607a      	str	r2, [r7, #4]
 8007350:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800735e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	021a      	lsls	r2, r3, #8
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	431a      	orrs	r2, r3
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	4313      	orrs	r3, r2
 800736c:	697a      	ldr	r2, [r7, #20]
 800736e:	4313      	orrs	r3, r2
 8007370:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	697a      	ldr	r2, [r7, #20]
 8007376:	609a      	str	r2, [r3, #8]
}
 8007378:	bf00      	nop
 800737a:	371c      	adds	r7, #28
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007384:	b480      	push	{r7}
 8007386:	b085      	sub	sp, #20
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007394:	2b01      	cmp	r3, #1
 8007396:	d101      	bne.n	800739c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007398:	2302      	movs	r3, #2
 800739a:	e04a      	b.n	8007432 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2201      	movs	r2, #1
 80073a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2202      	movs	r2, #2
 80073a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a1f      	ldr	r2, [pc, #124]	; (8007440 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d108      	bne.n	80073d8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80073cc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	68fa      	ldr	r2, [r7, #12]
 80073d4:	4313      	orrs	r3, r2
 80073d6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	68fa      	ldr	r2, [r7, #12]
 80073e6:	4313      	orrs	r3, r2
 80073e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	68fa      	ldr	r2, [r7, #12]
 80073f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a12      	ldr	r2, [pc, #72]	; (8007440 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d004      	beq.n	8007406 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007404:	d10c      	bne.n	8007420 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800740c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	68ba      	ldr	r2, [r7, #8]
 8007414:	4313      	orrs	r3, r2
 8007416:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	68ba      	ldr	r2, [r7, #8]
 800741e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2201      	movs	r2, #1
 8007424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2200      	movs	r2, #0
 800742c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	3714      	adds	r7, #20
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr
 800743e:	bf00      	nop
 8007440:	40012c00 	.word	0x40012c00

08007444 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800744c:	bf00      	nop
 800744e:	370c      	adds	r7, #12
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007458:	b480      	push	{r7}
 800745a:	b083      	sub	sp, #12
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007460:	bf00      	nop
 8007462:	370c      	adds	r7, #12
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007474:	bf00      	nop
 8007476:	370c      	adds	r7, #12
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <LL_RCC_GetUSARTClockSource>:
{
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8007488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800748c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	4013      	ands	r3, r2
}
 8007494:	4618      	mov	r0, r3
 8007496:	370c      	adds	r7, #12
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr

080074a0 <LL_RCC_GetLPUARTClockSource>:
{
 80074a0:	b480      	push	{r7}
 80074a2:	b083      	sub	sp, #12
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80074a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074ac:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	4013      	ands	r3, r2
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	370c      	adds	r7, #12
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr

080074c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b082      	sub	sp, #8
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d101      	bne.n	80074d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80074ce:	2301      	movs	r3, #1
 80074d0:	e042      	b.n	8007558 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d106      	bne.n	80074ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2200      	movs	r2, #0
 80074e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f7fa ffe5 	bl	80024b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2224      	movs	r2, #36	; 0x24
 80074ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f022 0201 	bic.w	r2, r2, #1
 8007500:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 f8c2 	bl	800768c <UART_SetConfig>
 8007508:	4603      	mov	r3, r0
 800750a:	2b01      	cmp	r3, #1
 800750c:	d101      	bne.n	8007512 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800750e:	2301      	movs	r3, #1
 8007510:	e022      	b.n	8007558 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007516:	2b00      	cmp	r3, #0
 8007518:	d002      	beq.n	8007520 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 fabc 	bl	8007a98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	685a      	ldr	r2, [r3, #4]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800752e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	689a      	ldr	r2, [r3, #8]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800753e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	681a      	ldr	r2, [r3, #0]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f042 0201 	orr.w	r2, r2, #1
 800754e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 fb43 	bl	8007bdc <UART_CheckIdleState>
 8007556:	4603      	mov	r3, r0
}
 8007558:	4618      	mov	r0, r3
 800755a:	3708      	adds	r7, #8
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b08a      	sub	sp, #40	; 0x28
 8007564:	af02      	add	r7, sp, #8
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	603b      	str	r3, [r7, #0]
 800756c:	4613      	mov	r3, r2
 800756e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007576:	2b20      	cmp	r3, #32
 8007578:	f040 8083 	bne.w	8007682 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d002      	beq.n	8007588 <HAL_UART_Transmit+0x28>
 8007582:	88fb      	ldrh	r3, [r7, #6]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d101      	bne.n	800758c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007588:	2301      	movs	r3, #1
 800758a:	e07b      	b.n	8007684 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007592:	2b01      	cmp	r3, #1
 8007594:	d101      	bne.n	800759a <HAL_UART_Transmit+0x3a>
 8007596:	2302      	movs	r3, #2
 8007598:	e074      	b.n	8007684 <HAL_UART_Transmit+0x124>
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2201      	movs	r2, #1
 800759e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2221      	movs	r2, #33	; 0x21
 80075ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80075b2:	f7fb f9f5 	bl	80029a0 <HAL_GetTick>
 80075b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	88fa      	ldrh	r2, [r7, #6]
 80075bc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	88fa      	ldrh	r2, [r7, #6]
 80075c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075d0:	d108      	bne.n	80075e4 <HAL_UART_Transmit+0x84>
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d104      	bne.n	80075e4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80075da:	2300      	movs	r3, #0
 80075dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	61bb      	str	r3, [r7, #24]
 80075e2:	e003      	b.n	80075ec <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80075e8:	2300      	movs	r3, #0
 80075ea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2200      	movs	r2, #0
 80075f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80075f4:	e02c      	b.n	8007650 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	9300      	str	r3, [sp, #0]
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	2200      	movs	r2, #0
 80075fe:	2180      	movs	r1, #128	; 0x80
 8007600:	68f8      	ldr	r0, [r7, #12]
 8007602:	f000 fb36 	bl	8007c72 <UART_WaitOnFlagUntilTimeout>
 8007606:	4603      	mov	r3, r0
 8007608:	2b00      	cmp	r3, #0
 800760a:	d001      	beq.n	8007610 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800760c:	2303      	movs	r3, #3
 800760e:	e039      	b.n	8007684 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007610:	69fb      	ldr	r3, [r7, #28]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d10b      	bne.n	800762e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007616:	69bb      	ldr	r3, [r7, #24]
 8007618:	881b      	ldrh	r3, [r3, #0]
 800761a:	461a      	mov	r2, r3
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007624:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007626:	69bb      	ldr	r3, [r7, #24]
 8007628:	3302      	adds	r3, #2
 800762a:	61bb      	str	r3, [r7, #24]
 800762c:	e007      	b.n	800763e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800762e:	69fb      	ldr	r3, [r7, #28]
 8007630:	781a      	ldrb	r2, [r3, #0]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007638:	69fb      	ldr	r3, [r7, #28]
 800763a:	3301      	adds	r3, #1
 800763c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007644:	b29b      	uxth	r3, r3
 8007646:	3b01      	subs	r3, #1
 8007648:	b29a      	uxth	r2, r3
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007656:	b29b      	uxth	r3, r3
 8007658:	2b00      	cmp	r3, #0
 800765a:	d1cc      	bne.n	80075f6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	9300      	str	r3, [sp, #0]
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	2200      	movs	r2, #0
 8007664:	2140      	movs	r1, #64	; 0x40
 8007666:	68f8      	ldr	r0, [r7, #12]
 8007668:	f000 fb03 	bl	8007c72 <UART_WaitOnFlagUntilTimeout>
 800766c:	4603      	mov	r3, r0
 800766e:	2b00      	cmp	r3, #0
 8007670:	d001      	beq.n	8007676 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007672:	2303      	movs	r3, #3
 8007674:	e006      	b.n	8007684 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2220      	movs	r2, #32
 800767a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800767e:	2300      	movs	r3, #0
 8007680:	e000      	b.n	8007684 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007682:	2302      	movs	r3, #2
  }
}
 8007684:	4618      	mov	r0, r3
 8007686:	3720      	adds	r7, #32
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800768c:	b5b0      	push	{r4, r5, r7, lr}
 800768e:	b088      	sub	sp, #32
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007694:	2300      	movs	r3, #0
 8007696:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	689a      	ldr	r2, [r3, #8]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	691b      	ldr	r3, [r3, #16]
 80076a0:	431a      	orrs	r2, r3
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	695b      	ldr	r3, [r3, #20]
 80076a6:	431a      	orrs	r2, r3
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	69db      	ldr	r3, [r3, #28]
 80076ac:	4313      	orrs	r3, r2
 80076ae:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	4ba3      	ldr	r3, [pc, #652]	; (8007944 <UART_SetConfig+0x2b8>)
 80076b8:	4013      	ands	r3, r2
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	6812      	ldr	r2, [r2, #0]
 80076be:	69f9      	ldr	r1, [r7, #28]
 80076c0:	430b      	orrs	r3, r1
 80076c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	68da      	ldr	r2, [r3, #12]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	430a      	orrs	r2, r1
 80076d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	699b      	ldr	r3, [r3, #24]
 80076de:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a98      	ldr	r2, [pc, #608]	; (8007948 <UART_SetConfig+0x2bc>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d004      	beq.n	80076f4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6a1b      	ldr	r3, [r3, #32]
 80076ee:	69fa      	ldr	r2, [r7, #28]
 80076f0:	4313      	orrs	r3, r2
 80076f2:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80076fe:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	6812      	ldr	r2, [r2, #0]
 8007706:	69f9      	ldr	r1, [r7, #28]
 8007708:	430b      	orrs	r3, r1
 800770a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007712:	f023 010f 	bic.w	r1, r3, #15
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	430a      	orrs	r2, r1
 8007720:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a89      	ldr	r2, [pc, #548]	; (800794c <UART_SetConfig+0x2c0>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d120      	bne.n	800776e <UART_SetConfig+0xe2>
 800772c:	2003      	movs	r0, #3
 800772e:	f7ff fea7 	bl	8007480 <LL_RCC_GetUSARTClockSource>
 8007732:	4603      	mov	r3, r0
 8007734:	2b03      	cmp	r3, #3
 8007736:	d817      	bhi.n	8007768 <UART_SetConfig+0xdc>
 8007738:	a201      	add	r2, pc, #4	; (adr r2, 8007740 <UART_SetConfig+0xb4>)
 800773a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800773e:	bf00      	nop
 8007740:	08007751 	.word	0x08007751
 8007744:	0800775d 	.word	0x0800775d
 8007748:	08007757 	.word	0x08007757
 800774c:	08007763 	.word	0x08007763
 8007750:	2301      	movs	r3, #1
 8007752:	76fb      	strb	r3, [r7, #27]
 8007754:	e038      	b.n	80077c8 <UART_SetConfig+0x13c>
 8007756:	2302      	movs	r3, #2
 8007758:	76fb      	strb	r3, [r7, #27]
 800775a:	e035      	b.n	80077c8 <UART_SetConfig+0x13c>
 800775c:	2304      	movs	r3, #4
 800775e:	76fb      	strb	r3, [r7, #27]
 8007760:	e032      	b.n	80077c8 <UART_SetConfig+0x13c>
 8007762:	2308      	movs	r3, #8
 8007764:	76fb      	strb	r3, [r7, #27]
 8007766:	e02f      	b.n	80077c8 <UART_SetConfig+0x13c>
 8007768:	2310      	movs	r3, #16
 800776a:	76fb      	strb	r3, [r7, #27]
 800776c:	e02c      	b.n	80077c8 <UART_SetConfig+0x13c>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a75      	ldr	r2, [pc, #468]	; (8007948 <UART_SetConfig+0x2bc>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d125      	bne.n	80077c4 <UART_SetConfig+0x138>
 8007778:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800777c:	f7ff fe90 	bl	80074a0 <LL_RCC_GetLPUARTClockSource>
 8007780:	4603      	mov	r3, r0
 8007782:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007786:	d017      	beq.n	80077b8 <UART_SetConfig+0x12c>
 8007788:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800778c:	d817      	bhi.n	80077be <UART_SetConfig+0x132>
 800778e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007792:	d00b      	beq.n	80077ac <UART_SetConfig+0x120>
 8007794:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007798:	d811      	bhi.n	80077be <UART_SetConfig+0x132>
 800779a:	2b00      	cmp	r3, #0
 800779c:	d003      	beq.n	80077a6 <UART_SetConfig+0x11a>
 800779e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077a2:	d006      	beq.n	80077b2 <UART_SetConfig+0x126>
 80077a4:	e00b      	b.n	80077be <UART_SetConfig+0x132>
 80077a6:	2300      	movs	r3, #0
 80077a8:	76fb      	strb	r3, [r7, #27]
 80077aa:	e00d      	b.n	80077c8 <UART_SetConfig+0x13c>
 80077ac:	2302      	movs	r3, #2
 80077ae:	76fb      	strb	r3, [r7, #27]
 80077b0:	e00a      	b.n	80077c8 <UART_SetConfig+0x13c>
 80077b2:	2304      	movs	r3, #4
 80077b4:	76fb      	strb	r3, [r7, #27]
 80077b6:	e007      	b.n	80077c8 <UART_SetConfig+0x13c>
 80077b8:	2308      	movs	r3, #8
 80077ba:	76fb      	strb	r3, [r7, #27]
 80077bc:	e004      	b.n	80077c8 <UART_SetConfig+0x13c>
 80077be:	2310      	movs	r3, #16
 80077c0:	76fb      	strb	r3, [r7, #27]
 80077c2:	e001      	b.n	80077c8 <UART_SetConfig+0x13c>
 80077c4:	2310      	movs	r3, #16
 80077c6:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a5e      	ldr	r2, [pc, #376]	; (8007948 <UART_SetConfig+0x2bc>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	f040 808b 	bne.w	80078ea <UART_SetConfig+0x25e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80077d4:	7efb      	ldrb	r3, [r7, #27]
 80077d6:	2b08      	cmp	r3, #8
 80077d8:	d823      	bhi.n	8007822 <UART_SetConfig+0x196>
 80077da:	a201      	add	r2, pc, #4	; (adr r2, 80077e0 <UART_SetConfig+0x154>)
 80077dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e0:	08007805 	.word	0x08007805
 80077e4:	08007823 	.word	0x08007823
 80077e8:	0800780d 	.word	0x0800780d
 80077ec:	08007823 	.word	0x08007823
 80077f0:	08007813 	.word	0x08007813
 80077f4:	08007823 	.word	0x08007823
 80077f8:	08007823 	.word	0x08007823
 80077fc:	08007823 	.word	0x08007823
 8007800:	0800781b 	.word	0x0800781b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007804:	f7fe fb52 	bl	8005eac <HAL_RCC_GetPCLK1Freq>
 8007808:	6178      	str	r0, [r7, #20]
        break;
 800780a:	e00f      	b.n	800782c <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800780c:	4b50      	ldr	r3, [pc, #320]	; (8007950 <UART_SetConfig+0x2c4>)
 800780e:	617b      	str	r3, [r7, #20]
        break;
 8007810:	e00c      	b.n	800782c <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007812:	f7fe fac9 	bl	8005da8 <HAL_RCC_GetSysClockFreq>
 8007816:	6178      	str	r0, [r7, #20]
        break;
 8007818:	e008      	b.n	800782c <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800781a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800781e:	617b      	str	r3, [r7, #20]
        break;
 8007820:	e004      	b.n	800782c <UART_SetConfig+0x1a0>
      default:
        pclk = 0U;
 8007822:	2300      	movs	r3, #0
 8007824:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	76bb      	strb	r3, [r7, #26]
        break;
 800782a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	2b00      	cmp	r3, #0
 8007830:	f000 811a 	beq.w	8007a68 <UART_SetConfig+0x3dc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007838:	4a46      	ldr	r2, [pc, #280]	; (8007954 <UART_SetConfig+0x2c8>)
 800783a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800783e:	461a      	mov	r2, r3
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	fbb3 f3f2 	udiv	r3, r3, r2
 8007846:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	685a      	ldr	r2, [r3, #4]
 800784c:	4613      	mov	r3, r2
 800784e:	005b      	lsls	r3, r3, #1
 8007850:	4413      	add	r3, r2
 8007852:	68ba      	ldr	r2, [r7, #8]
 8007854:	429a      	cmp	r2, r3
 8007856:	d305      	bcc.n	8007864 <UART_SetConfig+0x1d8>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800785e:	68ba      	ldr	r2, [r7, #8]
 8007860:	429a      	cmp	r2, r3
 8007862:	d902      	bls.n	800786a <UART_SetConfig+0x1de>
      {
        ret = HAL_ERROR;
 8007864:	2301      	movs	r3, #1
 8007866:	76bb      	strb	r3, [r7, #26]
 8007868:	e0fe      	b.n	8007a68 <UART_SetConfig+0x3dc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	4618      	mov	r0, r3
 800786e:	f04f 0100 	mov.w	r1, #0
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007876:	4a37      	ldr	r2, [pc, #220]	; (8007954 <UART_SetConfig+0x2c8>)
 8007878:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800787c:	b29a      	uxth	r2, r3
 800787e:	f04f 0300 	mov.w	r3, #0
 8007882:	f7f9 fa09 	bl	8000c98 <__aeabi_uldivmod>
 8007886:	4602      	mov	r2, r0
 8007888:	460b      	mov	r3, r1
 800788a:	4610      	mov	r0, r2
 800788c:	4619      	mov	r1, r3
 800788e:	f04f 0200 	mov.w	r2, #0
 8007892:	f04f 0300 	mov.w	r3, #0
 8007896:	020b      	lsls	r3, r1, #8
 8007898:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800789c:	0202      	lsls	r2, r0, #8
 800789e:	6879      	ldr	r1, [r7, #4]
 80078a0:	6849      	ldr	r1, [r1, #4]
 80078a2:	0849      	lsrs	r1, r1, #1
 80078a4:	4608      	mov	r0, r1
 80078a6:	f04f 0100 	mov.w	r1, #0
 80078aa:	1814      	adds	r4, r2, r0
 80078ac:	eb43 0501 	adc.w	r5, r3, r1
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	461a      	mov	r2, r3
 80078b6:	f04f 0300 	mov.w	r3, #0
 80078ba:	4620      	mov	r0, r4
 80078bc:	4629      	mov	r1, r5
 80078be:	f7f9 f9eb 	bl	8000c98 <__aeabi_uldivmod>
 80078c2:	4602      	mov	r2, r0
 80078c4:	460b      	mov	r3, r1
 80078c6:	4613      	mov	r3, r2
 80078c8:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078d0:	d308      	bcc.n	80078e4 <UART_SetConfig+0x258>
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078d8:	d204      	bcs.n	80078e4 <UART_SetConfig+0x258>
        {
          huart->Instance->BRR = usartdiv;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	693a      	ldr	r2, [r7, #16]
 80078e0:	60da      	str	r2, [r3, #12]
 80078e2:	e0c1      	b.n	8007a68 <UART_SetConfig+0x3dc>
        }
        else
        {
          ret = HAL_ERROR;
 80078e4:	2301      	movs	r3, #1
 80078e6:	76bb      	strb	r3, [r7, #26]
 80078e8:	e0be      	b.n	8007a68 <UART_SetConfig+0x3dc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	69db      	ldr	r3, [r3, #28]
 80078ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078f2:	d16a      	bne.n	80079ca <UART_SetConfig+0x33e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80078f4:	7efb      	ldrb	r3, [r7, #27]
 80078f6:	3b01      	subs	r3, #1
 80078f8:	2b07      	cmp	r3, #7
 80078fa:	d82d      	bhi.n	8007958 <UART_SetConfig+0x2cc>
 80078fc:	a201      	add	r2, pc, #4	; (adr r2, 8007904 <UART_SetConfig+0x278>)
 80078fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007902:	bf00      	nop
 8007904:	08007925 	.word	0x08007925
 8007908:	0800792d 	.word	0x0800792d
 800790c:	08007959 	.word	0x08007959
 8007910:	08007933 	.word	0x08007933
 8007914:	08007959 	.word	0x08007959
 8007918:	08007959 	.word	0x08007959
 800791c:	08007959 	.word	0x08007959
 8007920:	0800793b 	.word	0x0800793b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007924:	f7fe fad8 	bl	8005ed8 <HAL_RCC_GetPCLK2Freq>
 8007928:	6178      	str	r0, [r7, #20]
        break;
 800792a:	e01a      	b.n	8007962 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800792c:	4b08      	ldr	r3, [pc, #32]	; (8007950 <UART_SetConfig+0x2c4>)
 800792e:	617b      	str	r3, [r7, #20]
        break;
 8007930:	e017      	b.n	8007962 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007932:	f7fe fa39 	bl	8005da8 <HAL_RCC_GetSysClockFreq>
 8007936:	6178      	str	r0, [r7, #20]
        break;
 8007938:	e013      	b.n	8007962 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800793a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800793e:	617b      	str	r3, [r7, #20]
        break;
 8007940:	e00f      	b.n	8007962 <UART_SetConfig+0x2d6>
 8007942:	bf00      	nop
 8007944:	cfff69f3 	.word	0xcfff69f3
 8007948:	40008000 	.word	0x40008000
 800794c:	40013800 	.word	0x40013800
 8007950:	00f42400 	.word	0x00f42400
 8007954:	0800aecc 	.word	0x0800aecc
      default:
        pclk = 0U;
 8007958:	2300      	movs	r3, #0
 800795a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800795c:	2301      	movs	r3, #1
 800795e:	76bb      	strb	r3, [r7, #26]
        break;
 8007960:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d07f      	beq.n	8007a68 <UART_SetConfig+0x3dc>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800796c:	4a48      	ldr	r2, [pc, #288]	; (8007a90 <UART_SetConfig+0x404>)
 800796e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007972:	461a      	mov	r2, r3
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	fbb3 f3f2 	udiv	r3, r3, r2
 800797a:	005a      	lsls	r2, r3, #1
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	085b      	lsrs	r3, r3, #1
 8007982:	441a      	add	r2, r3
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	fbb2 f3f3 	udiv	r3, r2, r3
 800798c:	b29b      	uxth	r3, r3
 800798e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	2b0f      	cmp	r3, #15
 8007994:	d916      	bls.n	80079c4 <UART_SetConfig+0x338>
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800799c:	d212      	bcs.n	80079c4 <UART_SetConfig+0x338>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	f023 030f 	bic.w	r3, r3, #15
 80079a6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	085b      	lsrs	r3, r3, #1
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	f003 0307 	and.w	r3, r3, #7
 80079b2:	b29a      	uxth	r2, r3
 80079b4:	89fb      	ldrh	r3, [r7, #14]
 80079b6:	4313      	orrs	r3, r2
 80079b8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	89fa      	ldrh	r2, [r7, #14]
 80079c0:	60da      	str	r2, [r3, #12]
 80079c2:	e051      	b.n	8007a68 <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 80079c4:	2301      	movs	r3, #1
 80079c6:	76bb      	strb	r3, [r7, #26]
 80079c8:	e04e      	b.n	8007a68 <UART_SetConfig+0x3dc>
      }
    }
  }
  else
  {
    switch (clocksource)
 80079ca:	7efb      	ldrb	r3, [r7, #27]
 80079cc:	3b01      	subs	r3, #1
 80079ce:	2b07      	cmp	r3, #7
 80079d0:	d821      	bhi.n	8007a16 <UART_SetConfig+0x38a>
 80079d2:	a201      	add	r2, pc, #4	; (adr r2, 80079d8 <UART_SetConfig+0x34c>)
 80079d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d8:	080079f9 	.word	0x080079f9
 80079dc:	08007a01 	.word	0x08007a01
 80079e0:	08007a17 	.word	0x08007a17
 80079e4:	08007a07 	.word	0x08007a07
 80079e8:	08007a17 	.word	0x08007a17
 80079ec:	08007a17 	.word	0x08007a17
 80079f0:	08007a17 	.word	0x08007a17
 80079f4:	08007a0f 	.word	0x08007a0f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079f8:	f7fe fa6e 	bl	8005ed8 <HAL_RCC_GetPCLK2Freq>
 80079fc:	6178      	str	r0, [r7, #20]
        break;
 80079fe:	e00f      	b.n	8007a20 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a00:	4b24      	ldr	r3, [pc, #144]	; (8007a94 <UART_SetConfig+0x408>)
 8007a02:	617b      	str	r3, [r7, #20]
        break;
 8007a04:	e00c      	b.n	8007a20 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a06:	f7fe f9cf 	bl	8005da8 <HAL_RCC_GetSysClockFreq>
 8007a0a:	6178      	str	r0, [r7, #20]
        break;
 8007a0c:	e008      	b.n	8007a20 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a12:	617b      	str	r3, [r7, #20]
        break;
 8007a14:	e004      	b.n	8007a20 <UART_SetConfig+0x394>
      default:
        pclk = 0U;
 8007a16:	2300      	movs	r3, #0
 8007a18:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	76bb      	strb	r3, [r7, #26]
        break;
 8007a1e:	bf00      	nop
    }

    if (pclk != 0U)
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d020      	beq.n	8007a68 <UART_SetConfig+0x3dc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a2a:	4a19      	ldr	r2, [pc, #100]	; (8007a90 <UART_SetConfig+0x404>)
 8007a2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a30:	461a      	mov	r2, r3
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	fbb3 f2f2 	udiv	r2, r3, r2
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	085b      	lsrs	r3, r3, #1
 8007a3e:	441a      	add	r2, r3
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	2b0f      	cmp	r3, #15
 8007a50:	d908      	bls.n	8007a64 <UART_SetConfig+0x3d8>
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a58:	d204      	bcs.n	8007a64 <UART_SetConfig+0x3d8>
      {
        huart->Instance->BRR = usartdiv;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	693a      	ldr	r2, [r7, #16]
 8007a60:	60da      	str	r2, [r3, #12]
 8007a62:	e001      	b.n	8007a68 <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 8007a64:	2301      	movs	r3, #1
 8007a66:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2201      	movs	r2, #1
 8007a74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2200      	movs	r2, #0
 8007a82:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007a84:	7ebb      	ldrb	r3, [r7, #26]
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3720      	adds	r7, #32
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bdb0      	pop	{r4, r5, r7, pc}
 8007a8e:	bf00      	nop
 8007a90:	0800aecc 	.word	0x0800aecc
 8007a94:	00f42400 	.word	0x00f42400

08007a98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aa4:	f003 0301 	and.w	r3, r3, #1
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d00a      	beq.n	8007ac2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	430a      	orrs	r2, r1
 8007ac0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ac6:	f003 0302 	and.w	r3, r3, #2
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d00a      	beq.n	8007ae4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	430a      	orrs	r2, r1
 8007ae2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ae8:	f003 0304 	and.w	r3, r3, #4
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d00a      	beq.n	8007b06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	430a      	orrs	r2, r1
 8007b04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b0a:	f003 0308 	and.w	r3, r3, #8
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d00a      	beq.n	8007b28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	430a      	orrs	r2, r1
 8007b26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b2c:	f003 0310 	and.w	r3, r3, #16
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d00a      	beq.n	8007b4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	430a      	orrs	r2, r1
 8007b48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b4e:	f003 0320 	and.w	r3, r3, #32
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d00a      	beq.n	8007b6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	430a      	orrs	r2, r1
 8007b6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d01a      	beq.n	8007bae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	430a      	orrs	r2, r1
 8007b8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b96:	d10a      	bne.n	8007bae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	430a      	orrs	r2, r1
 8007bac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d00a      	beq.n	8007bd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	430a      	orrs	r2, r1
 8007bce:	605a      	str	r2, [r3, #4]
  }
}
 8007bd0:	bf00      	nop
 8007bd2:	370c      	adds	r7, #12
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr

08007bdc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b086      	sub	sp, #24
 8007be0:	af02      	add	r7, sp, #8
 8007be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007bec:	f7fa fed8 	bl	80029a0 <HAL_GetTick>
 8007bf0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f003 0308 	and.w	r3, r3, #8
 8007bfc:	2b08      	cmp	r3, #8
 8007bfe:	d10e      	bne.n	8007c1e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c04:	9300      	str	r3, [sp, #0]
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 f82f 	bl	8007c72 <UART_WaitOnFlagUntilTimeout>
 8007c14:	4603      	mov	r3, r0
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d001      	beq.n	8007c1e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c1a:	2303      	movs	r3, #3
 8007c1c:	e025      	b.n	8007c6a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f003 0304 	and.w	r3, r3, #4
 8007c28:	2b04      	cmp	r3, #4
 8007c2a:	d10e      	bne.n	8007c4a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c30:	9300      	str	r3, [sp, #0]
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2200      	movs	r2, #0
 8007c36:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 f819 	bl	8007c72 <UART_WaitOnFlagUntilTimeout>
 8007c40:	4603      	mov	r3, r0
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d001      	beq.n	8007c4a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c46:	2303      	movs	r3, #3
 8007c48:	e00f      	b.n	8007c6a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2220      	movs	r2, #32
 8007c4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2220      	movs	r2, #32
 8007c56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2200      	movs	r2, #0
 8007c64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007c68:	2300      	movs	r3, #0
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3710      	adds	r7, #16
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}

08007c72 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c72:	b580      	push	{r7, lr}
 8007c74:	b09c      	sub	sp, #112	; 0x70
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	60f8      	str	r0, [r7, #12]
 8007c7a:	60b9      	str	r1, [r7, #8]
 8007c7c:	603b      	str	r3, [r7, #0]
 8007c7e:	4613      	mov	r3, r2
 8007c80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c82:	e0a9      	b.n	8007dd8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c8a:	f000 80a5 	beq.w	8007dd8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c8e:	f7fa fe87 	bl	80029a0 <HAL_GetTick>
 8007c92:	4602      	mov	r2, r0
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	1ad3      	subs	r3, r2, r3
 8007c98:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d302      	bcc.n	8007ca4 <UART_WaitOnFlagUntilTimeout+0x32>
 8007c9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d140      	bne.n	8007d26 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007caa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cac:	e853 3f00 	ldrex	r3, [r3]
 8007cb0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007cb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cb4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007cb8:	667b      	str	r3, [r7, #100]	; 0x64
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cc2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007cc4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007cc8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007cca:	e841 2300 	strex	r3, r2, [r1]
 8007cce:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007cd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d1e6      	bne.n	8007ca4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	3308      	adds	r3, #8
 8007cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ce0:	e853 3f00 	ldrex	r3, [r3]
 8007ce4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce8:	f023 0301 	bic.w	r3, r3, #1
 8007cec:	663b      	str	r3, [r7, #96]	; 0x60
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	3308      	adds	r3, #8
 8007cf4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007cf6:	64ba      	str	r2, [r7, #72]	; 0x48
 8007cf8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cfa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007cfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cfe:	e841 2300 	strex	r3, r2, [r1]
 8007d02:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007d04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d1e5      	bne.n	8007cd6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2220      	movs	r2, #32
 8007d0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2220      	movs	r2, #32
 8007d16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007d22:	2303      	movs	r3, #3
 8007d24:	e069      	b.n	8007dfa <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f003 0304 	and.w	r3, r3, #4
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d051      	beq.n	8007dd8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	69db      	ldr	r3, [r3, #28]
 8007d3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d42:	d149      	bne.n	8007dd8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d4c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d56:	e853 3f00 	ldrex	r3, [r3]
 8007d5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007d62:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	461a      	mov	r2, r3
 8007d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d6c:	637b      	str	r3, [r7, #52]	; 0x34
 8007d6e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d74:	e841 2300 	strex	r3, r2, [r1]
 8007d78:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d1e6      	bne.n	8007d4e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	3308      	adds	r3, #8
 8007d86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	e853 3f00 	ldrex	r3, [r3]
 8007d8e:	613b      	str	r3, [r7, #16]
   return(result);
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	f023 0301 	bic.w	r3, r3, #1
 8007d96:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	3308      	adds	r3, #8
 8007d9e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007da0:	623a      	str	r2, [r7, #32]
 8007da2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da4:	69f9      	ldr	r1, [r7, #28]
 8007da6:	6a3a      	ldr	r2, [r7, #32]
 8007da8:	e841 2300 	strex	r3, r2, [r1]
 8007dac:	61bb      	str	r3, [r7, #24]
   return(result);
 8007dae:	69bb      	ldr	r3, [r7, #24]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d1e5      	bne.n	8007d80 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2220      	movs	r2, #32
 8007db8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2220      	movs	r2, #32
 8007dc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2220      	movs	r2, #32
 8007dc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007dd4:	2303      	movs	r3, #3
 8007dd6:	e010      	b.n	8007dfa <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	69da      	ldr	r2, [r3, #28]
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	4013      	ands	r3, r2
 8007de2:	68ba      	ldr	r2, [r7, #8]
 8007de4:	429a      	cmp	r2, r3
 8007de6:	bf0c      	ite	eq
 8007de8:	2301      	moveq	r3, #1
 8007dea:	2300      	movne	r3, #0
 8007dec:	b2db      	uxtb	r3, r3
 8007dee:	461a      	mov	r2, r3
 8007df0:	79fb      	ldrb	r3, [r7, #7]
 8007df2:	429a      	cmp	r2, r3
 8007df4:	f43f af46 	beq.w	8007c84 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007df8:	2300      	movs	r3, #0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3770      	adds	r7, #112	; 0x70
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}

08007e02 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007e02:	b480      	push	{r7}
 8007e04:	b085      	sub	sp, #20
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d101      	bne.n	8007e18 <HAL_UARTEx_DisableFifoMode+0x16>
 8007e14:	2302      	movs	r3, #2
 8007e16:	e027      	b.n	8007e68 <HAL_UARTEx_DisableFifoMode+0x66>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2224      	movs	r2, #36	; 0x24
 8007e24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f022 0201 	bic.w	r2, r2, #1
 8007e3e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007e46:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	68fa      	ldr	r2, [r7, #12]
 8007e54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2220      	movs	r2, #32
 8007e5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2200      	movs	r2, #0
 8007e62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007e66:	2300      	movs	r3, #0
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3714      	adds	r7, #20
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d101      	bne.n	8007e8c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007e88:	2302      	movs	r3, #2
 8007e8a:	e02d      	b.n	8007ee8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2224      	movs	r2, #36	; 0x24
 8007e98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f022 0201 	bic.w	r2, r2, #1
 8007eb2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	683a      	ldr	r2, [r7, #0]
 8007ec4:	430a      	orrs	r2, r1
 8007ec6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f000 f84f 	bl	8007f6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	68fa      	ldr	r2, [r7, #12]
 8007ed4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2220      	movs	r2, #32
 8007eda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007ee6:	2300      	movs	r3, #0
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3710      	adds	r7, #16
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d101      	bne.n	8007f08 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007f04:	2302      	movs	r3, #2
 8007f06:	e02d      	b.n	8007f64 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2224      	movs	r2, #36	; 0x24
 8007f14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f022 0201 	bic.w	r2, r2, #1
 8007f2e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	689b      	ldr	r3, [r3, #8]
 8007f36:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	683a      	ldr	r2, [r7, #0]
 8007f40:	430a      	orrs	r2, r1
 8007f42:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f000 f811 	bl	8007f6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	68fa      	ldr	r2, [r7, #12]
 8007f50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2220      	movs	r2, #32
 8007f56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007f62:	2300      	movs	r3, #0
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3710      	adds	r7, #16
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b085      	sub	sp, #20
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d108      	bne.n	8007f8e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2201      	movs	r2, #1
 8007f80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2201      	movs	r2, #1
 8007f88:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007f8c:	e031      	b.n	8007ff2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007f8e:	2308      	movs	r3, #8
 8007f90:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007f92:	2308      	movs	r3, #8
 8007f94:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	0e5b      	lsrs	r3, r3, #25
 8007f9e:	b2db      	uxtb	r3, r3
 8007fa0:	f003 0307 	and.w	r3, r3, #7
 8007fa4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	0f5b      	lsrs	r3, r3, #29
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	f003 0307 	and.w	r3, r3, #7
 8007fb4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007fb6:	7bbb      	ldrb	r3, [r7, #14]
 8007fb8:	7b3a      	ldrb	r2, [r7, #12]
 8007fba:	4911      	ldr	r1, [pc, #68]	; (8008000 <UARTEx_SetNbDataToProcess+0x94>)
 8007fbc:	5c8a      	ldrb	r2, [r1, r2]
 8007fbe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007fc2:	7b3a      	ldrb	r2, [r7, #12]
 8007fc4:	490f      	ldr	r1, [pc, #60]	; (8008004 <UARTEx_SetNbDataToProcess+0x98>)
 8007fc6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007fc8:	fb93 f3f2 	sdiv	r3, r3, r2
 8007fcc:	b29a      	uxth	r2, r3
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007fd4:	7bfb      	ldrb	r3, [r7, #15]
 8007fd6:	7b7a      	ldrb	r2, [r7, #13]
 8007fd8:	4909      	ldr	r1, [pc, #36]	; (8008000 <UARTEx_SetNbDataToProcess+0x94>)
 8007fda:	5c8a      	ldrb	r2, [r1, r2]
 8007fdc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007fe0:	7b7a      	ldrb	r2, [r7, #13]
 8007fe2:	4908      	ldr	r1, [pc, #32]	; (8008004 <UARTEx_SetNbDataToProcess+0x98>)
 8007fe4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007fe6:	fb93 f3f2 	sdiv	r3, r3, r2
 8007fea:	b29a      	uxth	r2, r3
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007ff2:	bf00      	nop
 8007ff4:	3714      	adds	r7, #20
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr
 8007ffe:	bf00      	nop
 8008000:	0800aee4 	.word	0x0800aee4
 8008004:	0800aeec 	.word	0x0800aeec

08008008 <__errno>:
 8008008:	4b01      	ldr	r3, [pc, #4]	; (8008010 <__errno+0x8>)
 800800a:	6818      	ldr	r0, [r3, #0]
 800800c:	4770      	bx	lr
 800800e:	bf00      	nop
 8008010:	20000010 	.word	0x20000010

08008014 <__libc_init_array>:
 8008014:	b570      	push	{r4, r5, r6, lr}
 8008016:	4d0d      	ldr	r5, [pc, #52]	; (800804c <__libc_init_array+0x38>)
 8008018:	4c0d      	ldr	r4, [pc, #52]	; (8008050 <__libc_init_array+0x3c>)
 800801a:	1b64      	subs	r4, r4, r5
 800801c:	10a4      	asrs	r4, r4, #2
 800801e:	2600      	movs	r6, #0
 8008020:	42a6      	cmp	r6, r4
 8008022:	d109      	bne.n	8008038 <__libc_init_array+0x24>
 8008024:	4d0b      	ldr	r5, [pc, #44]	; (8008054 <__libc_init_array+0x40>)
 8008026:	4c0c      	ldr	r4, [pc, #48]	; (8008058 <__libc_init_array+0x44>)
 8008028:	f002 fec2 	bl	800adb0 <_init>
 800802c:	1b64      	subs	r4, r4, r5
 800802e:	10a4      	asrs	r4, r4, #2
 8008030:	2600      	movs	r6, #0
 8008032:	42a6      	cmp	r6, r4
 8008034:	d105      	bne.n	8008042 <__libc_init_array+0x2e>
 8008036:	bd70      	pop	{r4, r5, r6, pc}
 8008038:	f855 3b04 	ldr.w	r3, [r5], #4
 800803c:	4798      	blx	r3
 800803e:	3601      	adds	r6, #1
 8008040:	e7ee      	b.n	8008020 <__libc_init_array+0xc>
 8008042:	f855 3b04 	ldr.w	r3, [r5], #4
 8008046:	4798      	blx	r3
 8008048:	3601      	adds	r6, #1
 800804a:	e7f2      	b.n	8008032 <__libc_init_array+0x1e>
 800804c:	0800b2dc 	.word	0x0800b2dc
 8008050:	0800b2dc 	.word	0x0800b2dc
 8008054:	0800b2dc 	.word	0x0800b2dc
 8008058:	0800b2e0 	.word	0x0800b2e0

0800805c <malloc>:
 800805c:	4b02      	ldr	r3, [pc, #8]	; (8008068 <malloc+0xc>)
 800805e:	4601      	mov	r1, r0
 8008060:	6818      	ldr	r0, [r3, #0]
 8008062:	f000 b869 	b.w	8008138 <_malloc_r>
 8008066:	bf00      	nop
 8008068:	20000010 	.word	0x20000010

0800806c <memcpy>:
 800806c:	440a      	add	r2, r1
 800806e:	4291      	cmp	r1, r2
 8008070:	f100 33ff 	add.w	r3, r0, #4294967295
 8008074:	d100      	bne.n	8008078 <memcpy+0xc>
 8008076:	4770      	bx	lr
 8008078:	b510      	push	{r4, lr}
 800807a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800807e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008082:	4291      	cmp	r1, r2
 8008084:	d1f9      	bne.n	800807a <memcpy+0xe>
 8008086:	bd10      	pop	{r4, pc}

08008088 <memset>:
 8008088:	4402      	add	r2, r0
 800808a:	4603      	mov	r3, r0
 800808c:	4293      	cmp	r3, r2
 800808e:	d100      	bne.n	8008092 <memset+0xa>
 8008090:	4770      	bx	lr
 8008092:	f803 1b01 	strb.w	r1, [r3], #1
 8008096:	e7f9      	b.n	800808c <memset+0x4>

08008098 <_free_r>:
 8008098:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800809a:	2900      	cmp	r1, #0
 800809c:	d048      	beq.n	8008130 <_free_r+0x98>
 800809e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080a2:	9001      	str	r0, [sp, #4]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	f1a1 0404 	sub.w	r4, r1, #4
 80080aa:	bfb8      	it	lt
 80080ac:	18e4      	addlt	r4, r4, r3
 80080ae:	f001 fbc3 	bl	8009838 <__malloc_lock>
 80080b2:	4a20      	ldr	r2, [pc, #128]	; (8008134 <_free_r+0x9c>)
 80080b4:	9801      	ldr	r0, [sp, #4]
 80080b6:	6813      	ldr	r3, [r2, #0]
 80080b8:	4615      	mov	r5, r2
 80080ba:	b933      	cbnz	r3, 80080ca <_free_r+0x32>
 80080bc:	6063      	str	r3, [r4, #4]
 80080be:	6014      	str	r4, [r2, #0]
 80080c0:	b003      	add	sp, #12
 80080c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80080c6:	f001 bbbd 	b.w	8009844 <__malloc_unlock>
 80080ca:	42a3      	cmp	r3, r4
 80080cc:	d90b      	bls.n	80080e6 <_free_r+0x4e>
 80080ce:	6821      	ldr	r1, [r4, #0]
 80080d0:	1862      	adds	r2, r4, r1
 80080d2:	4293      	cmp	r3, r2
 80080d4:	bf04      	itt	eq
 80080d6:	681a      	ldreq	r2, [r3, #0]
 80080d8:	685b      	ldreq	r3, [r3, #4]
 80080da:	6063      	str	r3, [r4, #4]
 80080dc:	bf04      	itt	eq
 80080de:	1852      	addeq	r2, r2, r1
 80080e0:	6022      	streq	r2, [r4, #0]
 80080e2:	602c      	str	r4, [r5, #0]
 80080e4:	e7ec      	b.n	80080c0 <_free_r+0x28>
 80080e6:	461a      	mov	r2, r3
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	b10b      	cbz	r3, 80080f0 <_free_r+0x58>
 80080ec:	42a3      	cmp	r3, r4
 80080ee:	d9fa      	bls.n	80080e6 <_free_r+0x4e>
 80080f0:	6811      	ldr	r1, [r2, #0]
 80080f2:	1855      	adds	r5, r2, r1
 80080f4:	42a5      	cmp	r5, r4
 80080f6:	d10b      	bne.n	8008110 <_free_r+0x78>
 80080f8:	6824      	ldr	r4, [r4, #0]
 80080fa:	4421      	add	r1, r4
 80080fc:	1854      	adds	r4, r2, r1
 80080fe:	42a3      	cmp	r3, r4
 8008100:	6011      	str	r1, [r2, #0]
 8008102:	d1dd      	bne.n	80080c0 <_free_r+0x28>
 8008104:	681c      	ldr	r4, [r3, #0]
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	6053      	str	r3, [r2, #4]
 800810a:	4421      	add	r1, r4
 800810c:	6011      	str	r1, [r2, #0]
 800810e:	e7d7      	b.n	80080c0 <_free_r+0x28>
 8008110:	d902      	bls.n	8008118 <_free_r+0x80>
 8008112:	230c      	movs	r3, #12
 8008114:	6003      	str	r3, [r0, #0]
 8008116:	e7d3      	b.n	80080c0 <_free_r+0x28>
 8008118:	6825      	ldr	r5, [r4, #0]
 800811a:	1961      	adds	r1, r4, r5
 800811c:	428b      	cmp	r3, r1
 800811e:	bf04      	itt	eq
 8008120:	6819      	ldreq	r1, [r3, #0]
 8008122:	685b      	ldreq	r3, [r3, #4]
 8008124:	6063      	str	r3, [r4, #4]
 8008126:	bf04      	itt	eq
 8008128:	1949      	addeq	r1, r1, r5
 800812a:	6021      	streq	r1, [r4, #0]
 800812c:	6054      	str	r4, [r2, #4]
 800812e:	e7c7      	b.n	80080c0 <_free_r+0x28>
 8008130:	b003      	add	sp, #12
 8008132:	bd30      	pop	{r4, r5, pc}
 8008134:	2000020c 	.word	0x2000020c

08008138 <_malloc_r>:
 8008138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800813a:	1ccd      	adds	r5, r1, #3
 800813c:	f025 0503 	bic.w	r5, r5, #3
 8008140:	3508      	adds	r5, #8
 8008142:	2d0c      	cmp	r5, #12
 8008144:	bf38      	it	cc
 8008146:	250c      	movcc	r5, #12
 8008148:	2d00      	cmp	r5, #0
 800814a:	4606      	mov	r6, r0
 800814c:	db01      	blt.n	8008152 <_malloc_r+0x1a>
 800814e:	42a9      	cmp	r1, r5
 8008150:	d903      	bls.n	800815a <_malloc_r+0x22>
 8008152:	230c      	movs	r3, #12
 8008154:	6033      	str	r3, [r6, #0]
 8008156:	2000      	movs	r0, #0
 8008158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800815a:	f001 fb6d 	bl	8009838 <__malloc_lock>
 800815e:	4921      	ldr	r1, [pc, #132]	; (80081e4 <_malloc_r+0xac>)
 8008160:	680a      	ldr	r2, [r1, #0]
 8008162:	4614      	mov	r4, r2
 8008164:	b99c      	cbnz	r4, 800818e <_malloc_r+0x56>
 8008166:	4f20      	ldr	r7, [pc, #128]	; (80081e8 <_malloc_r+0xb0>)
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	b923      	cbnz	r3, 8008176 <_malloc_r+0x3e>
 800816c:	4621      	mov	r1, r4
 800816e:	4630      	mov	r0, r6
 8008170:	f000 fca6 	bl	8008ac0 <_sbrk_r>
 8008174:	6038      	str	r0, [r7, #0]
 8008176:	4629      	mov	r1, r5
 8008178:	4630      	mov	r0, r6
 800817a:	f000 fca1 	bl	8008ac0 <_sbrk_r>
 800817e:	1c43      	adds	r3, r0, #1
 8008180:	d123      	bne.n	80081ca <_malloc_r+0x92>
 8008182:	230c      	movs	r3, #12
 8008184:	6033      	str	r3, [r6, #0]
 8008186:	4630      	mov	r0, r6
 8008188:	f001 fb5c 	bl	8009844 <__malloc_unlock>
 800818c:	e7e3      	b.n	8008156 <_malloc_r+0x1e>
 800818e:	6823      	ldr	r3, [r4, #0]
 8008190:	1b5b      	subs	r3, r3, r5
 8008192:	d417      	bmi.n	80081c4 <_malloc_r+0x8c>
 8008194:	2b0b      	cmp	r3, #11
 8008196:	d903      	bls.n	80081a0 <_malloc_r+0x68>
 8008198:	6023      	str	r3, [r4, #0]
 800819a:	441c      	add	r4, r3
 800819c:	6025      	str	r5, [r4, #0]
 800819e:	e004      	b.n	80081aa <_malloc_r+0x72>
 80081a0:	6863      	ldr	r3, [r4, #4]
 80081a2:	42a2      	cmp	r2, r4
 80081a4:	bf0c      	ite	eq
 80081a6:	600b      	streq	r3, [r1, #0]
 80081a8:	6053      	strne	r3, [r2, #4]
 80081aa:	4630      	mov	r0, r6
 80081ac:	f001 fb4a 	bl	8009844 <__malloc_unlock>
 80081b0:	f104 000b 	add.w	r0, r4, #11
 80081b4:	1d23      	adds	r3, r4, #4
 80081b6:	f020 0007 	bic.w	r0, r0, #7
 80081ba:	1ac2      	subs	r2, r0, r3
 80081bc:	d0cc      	beq.n	8008158 <_malloc_r+0x20>
 80081be:	1a1b      	subs	r3, r3, r0
 80081c0:	50a3      	str	r3, [r4, r2]
 80081c2:	e7c9      	b.n	8008158 <_malloc_r+0x20>
 80081c4:	4622      	mov	r2, r4
 80081c6:	6864      	ldr	r4, [r4, #4]
 80081c8:	e7cc      	b.n	8008164 <_malloc_r+0x2c>
 80081ca:	1cc4      	adds	r4, r0, #3
 80081cc:	f024 0403 	bic.w	r4, r4, #3
 80081d0:	42a0      	cmp	r0, r4
 80081d2:	d0e3      	beq.n	800819c <_malloc_r+0x64>
 80081d4:	1a21      	subs	r1, r4, r0
 80081d6:	4630      	mov	r0, r6
 80081d8:	f000 fc72 	bl	8008ac0 <_sbrk_r>
 80081dc:	3001      	adds	r0, #1
 80081de:	d1dd      	bne.n	800819c <_malloc_r+0x64>
 80081e0:	e7cf      	b.n	8008182 <_malloc_r+0x4a>
 80081e2:	bf00      	nop
 80081e4:	2000020c 	.word	0x2000020c
 80081e8:	20000210 	.word	0x20000210

080081ec <__cvt>:
 80081ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081f0:	ec55 4b10 	vmov	r4, r5, d0
 80081f4:	2d00      	cmp	r5, #0
 80081f6:	460e      	mov	r6, r1
 80081f8:	4619      	mov	r1, r3
 80081fa:	462b      	mov	r3, r5
 80081fc:	bfbb      	ittet	lt
 80081fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008202:	461d      	movlt	r5, r3
 8008204:	2300      	movge	r3, #0
 8008206:	232d      	movlt	r3, #45	; 0x2d
 8008208:	700b      	strb	r3, [r1, #0]
 800820a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800820c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008210:	4691      	mov	r9, r2
 8008212:	f023 0820 	bic.w	r8, r3, #32
 8008216:	bfbc      	itt	lt
 8008218:	4622      	movlt	r2, r4
 800821a:	4614      	movlt	r4, r2
 800821c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008220:	d005      	beq.n	800822e <__cvt+0x42>
 8008222:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008226:	d100      	bne.n	800822a <__cvt+0x3e>
 8008228:	3601      	adds	r6, #1
 800822a:	2102      	movs	r1, #2
 800822c:	e000      	b.n	8008230 <__cvt+0x44>
 800822e:	2103      	movs	r1, #3
 8008230:	ab03      	add	r3, sp, #12
 8008232:	9301      	str	r3, [sp, #4]
 8008234:	ab02      	add	r3, sp, #8
 8008236:	9300      	str	r3, [sp, #0]
 8008238:	ec45 4b10 	vmov	d0, r4, r5
 800823c:	4653      	mov	r3, sl
 800823e:	4632      	mov	r2, r6
 8008240:	f000 fd0a 	bl	8008c58 <_dtoa_r>
 8008244:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008248:	4607      	mov	r7, r0
 800824a:	d102      	bne.n	8008252 <__cvt+0x66>
 800824c:	f019 0f01 	tst.w	r9, #1
 8008250:	d022      	beq.n	8008298 <__cvt+0xac>
 8008252:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008256:	eb07 0906 	add.w	r9, r7, r6
 800825a:	d110      	bne.n	800827e <__cvt+0x92>
 800825c:	783b      	ldrb	r3, [r7, #0]
 800825e:	2b30      	cmp	r3, #48	; 0x30
 8008260:	d10a      	bne.n	8008278 <__cvt+0x8c>
 8008262:	2200      	movs	r2, #0
 8008264:	2300      	movs	r3, #0
 8008266:	4620      	mov	r0, r4
 8008268:	4629      	mov	r1, r5
 800826a:	f7f8 fc05 	bl	8000a78 <__aeabi_dcmpeq>
 800826e:	b918      	cbnz	r0, 8008278 <__cvt+0x8c>
 8008270:	f1c6 0601 	rsb	r6, r6, #1
 8008274:	f8ca 6000 	str.w	r6, [sl]
 8008278:	f8da 3000 	ldr.w	r3, [sl]
 800827c:	4499      	add	r9, r3
 800827e:	2200      	movs	r2, #0
 8008280:	2300      	movs	r3, #0
 8008282:	4620      	mov	r0, r4
 8008284:	4629      	mov	r1, r5
 8008286:	f7f8 fbf7 	bl	8000a78 <__aeabi_dcmpeq>
 800828a:	b108      	cbz	r0, 8008290 <__cvt+0xa4>
 800828c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008290:	2230      	movs	r2, #48	; 0x30
 8008292:	9b03      	ldr	r3, [sp, #12]
 8008294:	454b      	cmp	r3, r9
 8008296:	d307      	bcc.n	80082a8 <__cvt+0xbc>
 8008298:	9b03      	ldr	r3, [sp, #12]
 800829a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800829c:	1bdb      	subs	r3, r3, r7
 800829e:	4638      	mov	r0, r7
 80082a0:	6013      	str	r3, [r2, #0]
 80082a2:	b004      	add	sp, #16
 80082a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082a8:	1c59      	adds	r1, r3, #1
 80082aa:	9103      	str	r1, [sp, #12]
 80082ac:	701a      	strb	r2, [r3, #0]
 80082ae:	e7f0      	b.n	8008292 <__cvt+0xa6>

080082b0 <__exponent>:
 80082b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082b2:	4603      	mov	r3, r0
 80082b4:	2900      	cmp	r1, #0
 80082b6:	bfb8      	it	lt
 80082b8:	4249      	neglt	r1, r1
 80082ba:	f803 2b02 	strb.w	r2, [r3], #2
 80082be:	bfb4      	ite	lt
 80082c0:	222d      	movlt	r2, #45	; 0x2d
 80082c2:	222b      	movge	r2, #43	; 0x2b
 80082c4:	2909      	cmp	r1, #9
 80082c6:	7042      	strb	r2, [r0, #1]
 80082c8:	dd2a      	ble.n	8008320 <__exponent+0x70>
 80082ca:	f10d 0407 	add.w	r4, sp, #7
 80082ce:	46a4      	mov	ip, r4
 80082d0:	270a      	movs	r7, #10
 80082d2:	46a6      	mov	lr, r4
 80082d4:	460a      	mov	r2, r1
 80082d6:	fb91 f6f7 	sdiv	r6, r1, r7
 80082da:	fb07 1516 	mls	r5, r7, r6, r1
 80082de:	3530      	adds	r5, #48	; 0x30
 80082e0:	2a63      	cmp	r2, #99	; 0x63
 80082e2:	f104 34ff 	add.w	r4, r4, #4294967295
 80082e6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80082ea:	4631      	mov	r1, r6
 80082ec:	dcf1      	bgt.n	80082d2 <__exponent+0x22>
 80082ee:	3130      	adds	r1, #48	; 0x30
 80082f0:	f1ae 0502 	sub.w	r5, lr, #2
 80082f4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80082f8:	1c44      	adds	r4, r0, #1
 80082fa:	4629      	mov	r1, r5
 80082fc:	4561      	cmp	r1, ip
 80082fe:	d30a      	bcc.n	8008316 <__exponent+0x66>
 8008300:	f10d 0209 	add.w	r2, sp, #9
 8008304:	eba2 020e 	sub.w	r2, r2, lr
 8008308:	4565      	cmp	r5, ip
 800830a:	bf88      	it	hi
 800830c:	2200      	movhi	r2, #0
 800830e:	4413      	add	r3, r2
 8008310:	1a18      	subs	r0, r3, r0
 8008312:	b003      	add	sp, #12
 8008314:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008316:	f811 2b01 	ldrb.w	r2, [r1], #1
 800831a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800831e:	e7ed      	b.n	80082fc <__exponent+0x4c>
 8008320:	2330      	movs	r3, #48	; 0x30
 8008322:	3130      	adds	r1, #48	; 0x30
 8008324:	7083      	strb	r3, [r0, #2]
 8008326:	70c1      	strb	r1, [r0, #3]
 8008328:	1d03      	adds	r3, r0, #4
 800832a:	e7f1      	b.n	8008310 <__exponent+0x60>

0800832c <_printf_float>:
 800832c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008330:	ed2d 8b02 	vpush	{d8}
 8008334:	b08d      	sub	sp, #52	; 0x34
 8008336:	460c      	mov	r4, r1
 8008338:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800833c:	4616      	mov	r6, r2
 800833e:	461f      	mov	r7, r3
 8008340:	4605      	mov	r5, r0
 8008342:	f001 fa75 	bl	8009830 <_localeconv_r>
 8008346:	f8d0 a000 	ldr.w	sl, [r0]
 800834a:	4650      	mov	r0, sl
 800834c:	f7f7 ff18 	bl	8000180 <strlen>
 8008350:	2300      	movs	r3, #0
 8008352:	930a      	str	r3, [sp, #40]	; 0x28
 8008354:	6823      	ldr	r3, [r4, #0]
 8008356:	9305      	str	r3, [sp, #20]
 8008358:	f8d8 3000 	ldr.w	r3, [r8]
 800835c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008360:	3307      	adds	r3, #7
 8008362:	f023 0307 	bic.w	r3, r3, #7
 8008366:	f103 0208 	add.w	r2, r3, #8
 800836a:	f8c8 2000 	str.w	r2, [r8]
 800836e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008372:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008376:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800837a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800837e:	9307      	str	r3, [sp, #28]
 8008380:	f8cd 8018 	str.w	r8, [sp, #24]
 8008384:	ee08 0a10 	vmov	s16, r0
 8008388:	4b9f      	ldr	r3, [pc, #636]	; (8008608 <_printf_float+0x2dc>)
 800838a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800838e:	f04f 32ff 	mov.w	r2, #4294967295
 8008392:	f7f8 fba3 	bl	8000adc <__aeabi_dcmpun>
 8008396:	bb88      	cbnz	r0, 80083fc <_printf_float+0xd0>
 8008398:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800839c:	4b9a      	ldr	r3, [pc, #616]	; (8008608 <_printf_float+0x2dc>)
 800839e:	f04f 32ff 	mov.w	r2, #4294967295
 80083a2:	f7f8 fb7d 	bl	8000aa0 <__aeabi_dcmple>
 80083a6:	bb48      	cbnz	r0, 80083fc <_printf_float+0xd0>
 80083a8:	2200      	movs	r2, #0
 80083aa:	2300      	movs	r3, #0
 80083ac:	4640      	mov	r0, r8
 80083ae:	4649      	mov	r1, r9
 80083b0:	f7f8 fb6c 	bl	8000a8c <__aeabi_dcmplt>
 80083b4:	b110      	cbz	r0, 80083bc <_printf_float+0x90>
 80083b6:	232d      	movs	r3, #45	; 0x2d
 80083b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083bc:	4b93      	ldr	r3, [pc, #588]	; (800860c <_printf_float+0x2e0>)
 80083be:	4894      	ldr	r0, [pc, #592]	; (8008610 <_printf_float+0x2e4>)
 80083c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80083c4:	bf94      	ite	ls
 80083c6:	4698      	movls	r8, r3
 80083c8:	4680      	movhi	r8, r0
 80083ca:	2303      	movs	r3, #3
 80083cc:	6123      	str	r3, [r4, #16]
 80083ce:	9b05      	ldr	r3, [sp, #20]
 80083d0:	f023 0204 	bic.w	r2, r3, #4
 80083d4:	6022      	str	r2, [r4, #0]
 80083d6:	f04f 0900 	mov.w	r9, #0
 80083da:	9700      	str	r7, [sp, #0]
 80083dc:	4633      	mov	r3, r6
 80083de:	aa0b      	add	r2, sp, #44	; 0x2c
 80083e0:	4621      	mov	r1, r4
 80083e2:	4628      	mov	r0, r5
 80083e4:	f000 f9d8 	bl	8008798 <_printf_common>
 80083e8:	3001      	adds	r0, #1
 80083ea:	f040 8090 	bne.w	800850e <_printf_float+0x1e2>
 80083ee:	f04f 30ff 	mov.w	r0, #4294967295
 80083f2:	b00d      	add	sp, #52	; 0x34
 80083f4:	ecbd 8b02 	vpop	{d8}
 80083f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083fc:	4642      	mov	r2, r8
 80083fe:	464b      	mov	r3, r9
 8008400:	4640      	mov	r0, r8
 8008402:	4649      	mov	r1, r9
 8008404:	f7f8 fb6a 	bl	8000adc <__aeabi_dcmpun>
 8008408:	b140      	cbz	r0, 800841c <_printf_float+0xf0>
 800840a:	464b      	mov	r3, r9
 800840c:	2b00      	cmp	r3, #0
 800840e:	bfbc      	itt	lt
 8008410:	232d      	movlt	r3, #45	; 0x2d
 8008412:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008416:	487f      	ldr	r0, [pc, #508]	; (8008614 <_printf_float+0x2e8>)
 8008418:	4b7f      	ldr	r3, [pc, #508]	; (8008618 <_printf_float+0x2ec>)
 800841a:	e7d1      	b.n	80083c0 <_printf_float+0x94>
 800841c:	6863      	ldr	r3, [r4, #4]
 800841e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008422:	9206      	str	r2, [sp, #24]
 8008424:	1c5a      	adds	r2, r3, #1
 8008426:	d13f      	bne.n	80084a8 <_printf_float+0x17c>
 8008428:	2306      	movs	r3, #6
 800842a:	6063      	str	r3, [r4, #4]
 800842c:	9b05      	ldr	r3, [sp, #20]
 800842e:	6861      	ldr	r1, [r4, #4]
 8008430:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008434:	2300      	movs	r3, #0
 8008436:	9303      	str	r3, [sp, #12]
 8008438:	ab0a      	add	r3, sp, #40	; 0x28
 800843a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800843e:	ab09      	add	r3, sp, #36	; 0x24
 8008440:	ec49 8b10 	vmov	d0, r8, r9
 8008444:	9300      	str	r3, [sp, #0]
 8008446:	6022      	str	r2, [r4, #0]
 8008448:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800844c:	4628      	mov	r0, r5
 800844e:	f7ff fecd 	bl	80081ec <__cvt>
 8008452:	9b06      	ldr	r3, [sp, #24]
 8008454:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008456:	2b47      	cmp	r3, #71	; 0x47
 8008458:	4680      	mov	r8, r0
 800845a:	d108      	bne.n	800846e <_printf_float+0x142>
 800845c:	1cc8      	adds	r0, r1, #3
 800845e:	db02      	blt.n	8008466 <_printf_float+0x13a>
 8008460:	6863      	ldr	r3, [r4, #4]
 8008462:	4299      	cmp	r1, r3
 8008464:	dd41      	ble.n	80084ea <_printf_float+0x1be>
 8008466:	f1ab 0b02 	sub.w	fp, fp, #2
 800846a:	fa5f fb8b 	uxtb.w	fp, fp
 800846e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008472:	d820      	bhi.n	80084b6 <_printf_float+0x18a>
 8008474:	3901      	subs	r1, #1
 8008476:	465a      	mov	r2, fp
 8008478:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800847c:	9109      	str	r1, [sp, #36]	; 0x24
 800847e:	f7ff ff17 	bl	80082b0 <__exponent>
 8008482:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008484:	1813      	adds	r3, r2, r0
 8008486:	2a01      	cmp	r2, #1
 8008488:	4681      	mov	r9, r0
 800848a:	6123      	str	r3, [r4, #16]
 800848c:	dc02      	bgt.n	8008494 <_printf_float+0x168>
 800848e:	6822      	ldr	r2, [r4, #0]
 8008490:	07d2      	lsls	r2, r2, #31
 8008492:	d501      	bpl.n	8008498 <_printf_float+0x16c>
 8008494:	3301      	adds	r3, #1
 8008496:	6123      	str	r3, [r4, #16]
 8008498:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800849c:	2b00      	cmp	r3, #0
 800849e:	d09c      	beq.n	80083da <_printf_float+0xae>
 80084a0:	232d      	movs	r3, #45	; 0x2d
 80084a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084a6:	e798      	b.n	80083da <_printf_float+0xae>
 80084a8:	9a06      	ldr	r2, [sp, #24]
 80084aa:	2a47      	cmp	r2, #71	; 0x47
 80084ac:	d1be      	bne.n	800842c <_printf_float+0x100>
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d1bc      	bne.n	800842c <_printf_float+0x100>
 80084b2:	2301      	movs	r3, #1
 80084b4:	e7b9      	b.n	800842a <_printf_float+0xfe>
 80084b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80084ba:	d118      	bne.n	80084ee <_printf_float+0x1c2>
 80084bc:	2900      	cmp	r1, #0
 80084be:	6863      	ldr	r3, [r4, #4]
 80084c0:	dd0b      	ble.n	80084da <_printf_float+0x1ae>
 80084c2:	6121      	str	r1, [r4, #16]
 80084c4:	b913      	cbnz	r3, 80084cc <_printf_float+0x1a0>
 80084c6:	6822      	ldr	r2, [r4, #0]
 80084c8:	07d0      	lsls	r0, r2, #31
 80084ca:	d502      	bpl.n	80084d2 <_printf_float+0x1a6>
 80084cc:	3301      	adds	r3, #1
 80084ce:	440b      	add	r3, r1
 80084d0:	6123      	str	r3, [r4, #16]
 80084d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80084d4:	f04f 0900 	mov.w	r9, #0
 80084d8:	e7de      	b.n	8008498 <_printf_float+0x16c>
 80084da:	b913      	cbnz	r3, 80084e2 <_printf_float+0x1b6>
 80084dc:	6822      	ldr	r2, [r4, #0]
 80084de:	07d2      	lsls	r2, r2, #31
 80084e0:	d501      	bpl.n	80084e6 <_printf_float+0x1ba>
 80084e2:	3302      	adds	r3, #2
 80084e4:	e7f4      	b.n	80084d0 <_printf_float+0x1a4>
 80084e6:	2301      	movs	r3, #1
 80084e8:	e7f2      	b.n	80084d0 <_printf_float+0x1a4>
 80084ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80084ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084f0:	4299      	cmp	r1, r3
 80084f2:	db05      	blt.n	8008500 <_printf_float+0x1d4>
 80084f4:	6823      	ldr	r3, [r4, #0]
 80084f6:	6121      	str	r1, [r4, #16]
 80084f8:	07d8      	lsls	r0, r3, #31
 80084fa:	d5ea      	bpl.n	80084d2 <_printf_float+0x1a6>
 80084fc:	1c4b      	adds	r3, r1, #1
 80084fe:	e7e7      	b.n	80084d0 <_printf_float+0x1a4>
 8008500:	2900      	cmp	r1, #0
 8008502:	bfd4      	ite	le
 8008504:	f1c1 0202 	rsble	r2, r1, #2
 8008508:	2201      	movgt	r2, #1
 800850a:	4413      	add	r3, r2
 800850c:	e7e0      	b.n	80084d0 <_printf_float+0x1a4>
 800850e:	6823      	ldr	r3, [r4, #0]
 8008510:	055a      	lsls	r2, r3, #21
 8008512:	d407      	bmi.n	8008524 <_printf_float+0x1f8>
 8008514:	6923      	ldr	r3, [r4, #16]
 8008516:	4642      	mov	r2, r8
 8008518:	4631      	mov	r1, r6
 800851a:	4628      	mov	r0, r5
 800851c:	47b8      	blx	r7
 800851e:	3001      	adds	r0, #1
 8008520:	d12c      	bne.n	800857c <_printf_float+0x250>
 8008522:	e764      	b.n	80083ee <_printf_float+0xc2>
 8008524:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008528:	f240 80e0 	bls.w	80086ec <_printf_float+0x3c0>
 800852c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008530:	2200      	movs	r2, #0
 8008532:	2300      	movs	r3, #0
 8008534:	f7f8 faa0 	bl	8000a78 <__aeabi_dcmpeq>
 8008538:	2800      	cmp	r0, #0
 800853a:	d034      	beq.n	80085a6 <_printf_float+0x27a>
 800853c:	4a37      	ldr	r2, [pc, #220]	; (800861c <_printf_float+0x2f0>)
 800853e:	2301      	movs	r3, #1
 8008540:	4631      	mov	r1, r6
 8008542:	4628      	mov	r0, r5
 8008544:	47b8      	blx	r7
 8008546:	3001      	adds	r0, #1
 8008548:	f43f af51 	beq.w	80083ee <_printf_float+0xc2>
 800854c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008550:	429a      	cmp	r2, r3
 8008552:	db02      	blt.n	800855a <_printf_float+0x22e>
 8008554:	6823      	ldr	r3, [r4, #0]
 8008556:	07d8      	lsls	r0, r3, #31
 8008558:	d510      	bpl.n	800857c <_printf_float+0x250>
 800855a:	ee18 3a10 	vmov	r3, s16
 800855e:	4652      	mov	r2, sl
 8008560:	4631      	mov	r1, r6
 8008562:	4628      	mov	r0, r5
 8008564:	47b8      	blx	r7
 8008566:	3001      	adds	r0, #1
 8008568:	f43f af41 	beq.w	80083ee <_printf_float+0xc2>
 800856c:	f04f 0800 	mov.w	r8, #0
 8008570:	f104 091a 	add.w	r9, r4, #26
 8008574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008576:	3b01      	subs	r3, #1
 8008578:	4543      	cmp	r3, r8
 800857a:	dc09      	bgt.n	8008590 <_printf_float+0x264>
 800857c:	6823      	ldr	r3, [r4, #0]
 800857e:	079b      	lsls	r3, r3, #30
 8008580:	f100 8105 	bmi.w	800878e <_printf_float+0x462>
 8008584:	68e0      	ldr	r0, [r4, #12]
 8008586:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008588:	4298      	cmp	r0, r3
 800858a:	bfb8      	it	lt
 800858c:	4618      	movlt	r0, r3
 800858e:	e730      	b.n	80083f2 <_printf_float+0xc6>
 8008590:	2301      	movs	r3, #1
 8008592:	464a      	mov	r2, r9
 8008594:	4631      	mov	r1, r6
 8008596:	4628      	mov	r0, r5
 8008598:	47b8      	blx	r7
 800859a:	3001      	adds	r0, #1
 800859c:	f43f af27 	beq.w	80083ee <_printf_float+0xc2>
 80085a0:	f108 0801 	add.w	r8, r8, #1
 80085a4:	e7e6      	b.n	8008574 <_printf_float+0x248>
 80085a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	dc39      	bgt.n	8008620 <_printf_float+0x2f4>
 80085ac:	4a1b      	ldr	r2, [pc, #108]	; (800861c <_printf_float+0x2f0>)
 80085ae:	2301      	movs	r3, #1
 80085b0:	4631      	mov	r1, r6
 80085b2:	4628      	mov	r0, r5
 80085b4:	47b8      	blx	r7
 80085b6:	3001      	adds	r0, #1
 80085b8:	f43f af19 	beq.w	80083ee <_printf_float+0xc2>
 80085bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80085c0:	4313      	orrs	r3, r2
 80085c2:	d102      	bne.n	80085ca <_printf_float+0x29e>
 80085c4:	6823      	ldr	r3, [r4, #0]
 80085c6:	07d9      	lsls	r1, r3, #31
 80085c8:	d5d8      	bpl.n	800857c <_printf_float+0x250>
 80085ca:	ee18 3a10 	vmov	r3, s16
 80085ce:	4652      	mov	r2, sl
 80085d0:	4631      	mov	r1, r6
 80085d2:	4628      	mov	r0, r5
 80085d4:	47b8      	blx	r7
 80085d6:	3001      	adds	r0, #1
 80085d8:	f43f af09 	beq.w	80083ee <_printf_float+0xc2>
 80085dc:	f04f 0900 	mov.w	r9, #0
 80085e0:	f104 0a1a 	add.w	sl, r4, #26
 80085e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085e6:	425b      	negs	r3, r3
 80085e8:	454b      	cmp	r3, r9
 80085ea:	dc01      	bgt.n	80085f0 <_printf_float+0x2c4>
 80085ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085ee:	e792      	b.n	8008516 <_printf_float+0x1ea>
 80085f0:	2301      	movs	r3, #1
 80085f2:	4652      	mov	r2, sl
 80085f4:	4631      	mov	r1, r6
 80085f6:	4628      	mov	r0, r5
 80085f8:	47b8      	blx	r7
 80085fa:	3001      	adds	r0, #1
 80085fc:	f43f aef7 	beq.w	80083ee <_printf_float+0xc2>
 8008600:	f109 0901 	add.w	r9, r9, #1
 8008604:	e7ee      	b.n	80085e4 <_printf_float+0x2b8>
 8008606:	bf00      	nop
 8008608:	7fefffff 	.word	0x7fefffff
 800860c:	0800aef8 	.word	0x0800aef8
 8008610:	0800aefc 	.word	0x0800aefc
 8008614:	0800af04 	.word	0x0800af04
 8008618:	0800af00 	.word	0x0800af00
 800861c:	0800af08 	.word	0x0800af08
 8008620:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008622:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008624:	429a      	cmp	r2, r3
 8008626:	bfa8      	it	ge
 8008628:	461a      	movge	r2, r3
 800862a:	2a00      	cmp	r2, #0
 800862c:	4691      	mov	r9, r2
 800862e:	dc37      	bgt.n	80086a0 <_printf_float+0x374>
 8008630:	f04f 0b00 	mov.w	fp, #0
 8008634:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008638:	f104 021a 	add.w	r2, r4, #26
 800863c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800863e:	9305      	str	r3, [sp, #20]
 8008640:	eba3 0309 	sub.w	r3, r3, r9
 8008644:	455b      	cmp	r3, fp
 8008646:	dc33      	bgt.n	80086b0 <_printf_float+0x384>
 8008648:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800864c:	429a      	cmp	r2, r3
 800864e:	db3b      	blt.n	80086c8 <_printf_float+0x39c>
 8008650:	6823      	ldr	r3, [r4, #0]
 8008652:	07da      	lsls	r2, r3, #31
 8008654:	d438      	bmi.n	80086c8 <_printf_float+0x39c>
 8008656:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008658:	9b05      	ldr	r3, [sp, #20]
 800865a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800865c:	1ad3      	subs	r3, r2, r3
 800865e:	eba2 0901 	sub.w	r9, r2, r1
 8008662:	4599      	cmp	r9, r3
 8008664:	bfa8      	it	ge
 8008666:	4699      	movge	r9, r3
 8008668:	f1b9 0f00 	cmp.w	r9, #0
 800866c:	dc35      	bgt.n	80086da <_printf_float+0x3ae>
 800866e:	f04f 0800 	mov.w	r8, #0
 8008672:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008676:	f104 0a1a 	add.w	sl, r4, #26
 800867a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800867e:	1a9b      	subs	r3, r3, r2
 8008680:	eba3 0309 	sub.w	r3, r3, r9
 8008684:	4543      	cmp	r3, r8
 8008686:	f77f af79 	ble.w	800857c <_printf_float+0x250>
 800868a:	2301      	movs	r3, #1
 800868c:	4652      	mov	r2, sl
 800868e:	4631      	mov	r1, r6
 8008690:	4628      	mov	r0, r5
 8008692:	47b8      	blx	r7
 8008694:	3001      	adds	r0, #1
 8008696:	f43f aeaa 	beq.w	80083ee <_printf_float+0xc2>
 800869a:	f108 0801 	add.w	r8, r8, #1
 800869e:	e7ec      	b.n	800867a <_printf_float+0x34e>
 80086a0:	4613      	mov	r3, r2
 80086a2:	4631      	mov	r1, r6
 80086a4:	4642      	mov	r2, r8
 80086a6:	4628      	mov	r0, r5
 80086a8:	47b8      	blx	r7
 80086aa:	3001      	adds	r0, #1
 80086ac:	d1c0      	bne.n	8008630 <_printf_float+0x304>
 80086ae:	e69e      	b.n	80083ee <_printf_float+0xc2>
 80086b0:	2301      	movs	r3, #1
 80086b2:	4631      	mov	r1, r6
 80086b4:	4628      	mov	r0, r5
 80086b6:	9205      	str	r2, [sp, #20]
 80086b8:	47b8      	blx	r7
 80086ba:	3001      	adds	r0, #1
 80086bc:	f43f ae97 	beq.w	80083ee <_printf_float+0xc2>
 80086c0:	9a05      	ldr	r2, [sp, #20]
 80086c2:	f10b 0b01 	add.w	fp, fp, #1
 80086c6:	e7b9      	b.n	800863c <_printf_float+0x310>
 80086c8:	ee18 3a10 	vmov	r3, s16
 80086cc:	4652      	mov	r2, sl
 80086ce:	4631      	mov	r1, r6
 80086d0:	4628      	mov	r0, r5
 80086d2:	47b8      	blx	r7
 80086d4:	3001      	adds	r0, #1
 80086d6:	d1be      	bne.n	8008656 <_printf_float+0x32a>
 80086d8:	e689      	b.n	80083ee <_printf_float+0xc2>
 80086da:	9a05      	ldr	r2, [sp, #20]
 80086dc:	464b      	mov	r3, r9
 80086de:	4442      	add	r2, r8
 80086e0:	4631      	mov	r1, r6
 80086e2:	4628      	mov	r0, r5
 80086e4:	47b8      	blx	r7
 80086e6:	3001      	adds	r0, #1
 80086e8:	d1c1      	bne.n	800866e <_printf_float+0x342>
 80086ea:	e680      	b.n	80083ee <_printf_float+0xc2>
 80086ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086ee:	2a01      	cmp	r2, #1
 80086f0:	dc01      	bgt.n	80086f6 <_printf_float+0x3ca>
 80086f2:	07db      	lsls	r3, r3, #31
 80086f4:	d538      	bpl.n	8008768 <_printf_float+0x43c>
 80086f6:	2301      	movs	r3, #1
 80086f8:	4642      	mov	r2, r8
 80086fa:	4631      	mov	r1, r6
 80086fc:	4628      	mov	r0, r5
 80086fe:	47b8      	blx	r7
 8008700:	3001      	adds	r0, #1
 8008702:	f43f ae74 	beq.w	80083ee <_printf_float+0xc2>
 8008706:	ee18 3a10 	vmov	r3, s16
 800870a:	4652      	mov	r2, sl
 800870c:	4631      	mov	r1, r6
 800870e:	4628      	mov	r0, r5
 8008710:	47b8      	blx	r7
 8008712:	3001      	adds	r0, #1
 8008714:	f43f ae6b 	beq.w	80083ee <_printf_float+0xc2>
 8008718:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800871c:	2200      	movs	r2, #0
 800871e:	2300      	movs	r3, #0
 8008720:	f7f8 f9aa 	bl	8000a78 <__aeabi_dcmpeq>
 8008724:	b9d8      	cbnz	r0, 800875e <_printf_float+0x432>
 8008726:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008728:	f108 0201 	add.w	r2, r8, #1
 800872c:	3b01      	subs	r3, #1
 800872e:	4631      	mov	r1, r6
 8008730:	4628      	mov	r0, r5
 8008732:	47b8      	blx	r7
 8008734:	3001      	adds	r0, #1
 8008736:	d10e      	bne.n	8008756 <_printf_float+0x42a>
 8008738:	e659      	b.n	80083ee <_printf_float+0xc2>
 800873a:	2301      	movs	r3, #1
 800873c:	4652      	mov	r2, sl
 800873e:	4631      	mov	r1, r6
 8008740:	4628      	mov	r0, r5
 8008742:	47b8      	blx	r7
 8008744:	3001      	adds	r0, #1
 8008746:	f43f ae52 	beq.w	80083ee <_printf_float+0xc2>
 800874a:	f108 0801 	add.w	r8, r8, #1
 800874e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008750:	3b01      	subs	r3, #1
 8008752:	4543      	cmp	r3, r8
 8008754:	dcf1      	bgt.n	800873a <_printf_float+0x40e>
 8008756:	464b      	mov	r3, r9
 8008758:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800875c:	e6dc      	b.n	8008518 <_printf_float+0x1ec>
 800875e:	f04f 0800 	mov.w	r8, #0
 8008762:	f104 0a1a 	add.w	sl, r4, #26
 8008766:	e7f2      	b.n	800874e <_printf_float+0x422>
 8008768:	2301      	movs	r3, #1
 800876a:	4642      	mov	r2, r8
 800876c:	e7df      	b.n	800872e <_printf_float+0x402>
 800876e:	2301      	movs	r3, #1
 8008770:	464a      	mov	r2, r9
 8008772:	4631      	mov	r1, r6
 8008774:	4628      	mov	r0, r5
 8008776:	47b8      	blx	r7
 8008778:	3001      	adds	r0, #1
 800877a:	f43f ae38 	beq.w	80083ee <_printf_float+0xc2>
 800877e:	f108 0801 	add.w	r8, r8, #1
 8008782:	68e3      	ldr	r3, [r4, #12]
 8008784:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008786:	1a5b      	subs	r3, r3, r1
 8008788:	4543      	cmp	r3, r8
 800878a:	dcf0      	bgt.n	800876e <_printf_float+0x442>
 800878c:	e6fa      	b.n	8008584 <_printf_float+0x258>
 800878e:	f04f 0800 	mov.w	r8, #0
 8008792:	f104 0919 	add.w	r9, r4, #25
 8008796:	e7f4      	b.n	8008782 <_printf_float+0x456>

08008798 <_printf_common>:
 8008798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800879c:	4616      	mov	r6, r2
 800879e:	4699      	mov	r9, r3
 80087a0:	688a      	ldr	r2, [r1, #8]
 80087a2:	690b      	ldr	r3, [r1, #16]
 80087a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80087a8:	4293      	cmp	r3, r2
 80087aa:	bfb8      	it	lt
 80087ac:	4613      	movlt	r3, r2
 80087ae:	6033      	str	r3, [r6, #0]
 80087b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80087b4:	4607      	mov	r7, r0
 80087b6:	460c      	mov	r4, r1
 80087b8:	b10a      	cbz	r2, 80087be <_printf_common+0x26>
 80087ba:	3301      	adds	r3, #1
 80087bc:	6033      	str	r3, [r6, #0]
 80087be:	6823      	ldr	r3, [r4, #0]
 80087c0:	0699      	lsls	r1, r3, #26
 80087c2:	bf42      	ittt	mi
 80087c4:	6833      	ldrmi	r3, [r6, #0]
 80087c6:	3302      	addmi	r3, #2
 80087c8:	6033      	strmi	r3, [r6, #0]
 80087ca:	6825      	ldr	r5, [r4, #0]
 80087cc:	f015 0506 	ands.w	r5, r5, #6
 80087d0:	d106      	bne.n	80087e0 <_printf_common+0x48>
 80087d2:	f104 0a19 	add.w	sl, r4, #25
 80087d6:	68e3      	ldr	r3, [r4, #12]
 80087d8:	6832      	ldr	r2, [r6, #0]
 80087da:	1a9b      	subs	r3, r3, r2
 80087dc:	42ab      	cmp	r3, r5
 80087de:	dc26      	bgt.n	800882e <_printf_common+0x96>
 80087e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80087e4:	1e13      	subs	r3, r2, #0
 80087e6:	6822      	ldr	r2, [r4, #0]
 80087e8:	bf18      	it	ne
 80087ea:	2301      	movne	r3, #1
 80087ec:	0692      	lsls	r2, r2, #26
 80087ee:	d42b      	bmi.n	8008848 <_printf_common+0xb0>
 80087f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80087f4:	4649      	mov	r1, r9
 80087f6:	4638      	mov	r0, r7
 80087f8:	47c0      	blx	r8
 80087fa:	3001      	adds	r0, #1
 80087fc:	d01e      	beq.n	800883c <_printf_common+0xa4>
 80087fe:	6823      	ldr	r3, [r4, #0]
 8008800:	68e5      	ldr	r5, [r4, #12]
 8008802:	6832      	ldr	r2, [r6, #0]
 8008804:	f003 0306 	and.w	r3, r3, #6
 8008808:	2b04      	cmp	r3, #4
 800880a:	bf08      	it	eq
 800880c:	1aad      	subeq	r5, r5, r2
 800880e:	68a3      	ldr	r3, [r4, #8]
 8008810:	6922      	ldr	r2, [r4, #16]
 8008812:	bf0c      	ite	eq
 8008814:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008818:	2500      	movne	r5, #0
 800881a:	4293      	cmp	r3, r2
 800881c:	bfc4      	itt	gt
 800881e:	1a9b      	subgt	r3, r3, r2
 8008820:	18ed      	addgt	r5, r5, r3
 8008822:	2600      	movs	r6, #0
 8008824:	341a      	adds	r4, #26
 8008826:	42b5      	cmp	r5, r6
 8008828:	d11a      	bne.n	8008860 <_printf_common+0xc8>
 800882a:	2000      	movs	r0, #0
 800882c:	e008      	b.n	8008840 <_printf_common+0xa8>
 800882e:	2301      	movs	r3, #1
 8008830:	4652      	mov	r2, sl
 8008832:	4649      	mov	r1, r9
 8008834:	4638      	mov	r0, r7
 8008836:	47c0      	blx	r8
 8008838:	3001      	adds	r0, #1
 800883a:	d103      	bne.n	8008844 <_printf_common+0xac>
 800883c:	f04f 30ff 	mov.w	r0, #4294967295
 8008840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008844:	3501      	adds	r5, #1
 8008846:	e7c6      	b.n	80087d6 <_printf_common+0x3e>
 8008848:	18e1      	adds	r1, r4, r3
 800884a:	1c5a      	adds	r2, r3, #1
 800884c:	2030      	movs	r0, #48	; 0x30
 800884e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008852:	4422      	add	r2, r4
 8008854:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008858:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800885c:	3302      	adds	r3, #2
 800885e:	e7c7      	b.n	80087f0 <_printf_common+0x58>
 8008860:	2301      	movs	r3, #1
 8008862:	4622      	mov	r2, r4
 8008864:	4649      	mov	r1, r9
 8008866:	4638      	mov	r0, r7
 8008868:	47c0      	blx	r8
 800886a:	3001      	adds	r0, #1
 800886c:	d0e6      	beq.n	800883c <_printf_common+0xa4>
 800886e:	3601      	adds	r6, #1
 8008870:	e7d9      	b.n	8008826 <_printf_common+0x8e>
	...

08008874 <_printf_i>:
 8008874:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008878:	460c      	mov	r4, r1
 800887a:	4691      	mov	r9, r2
 800887c:	7e27      	ldrb	r7, [r4, #24]
 800887e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008880:	2f78      	cmp	r7, #120	; 0x78
 8008882:	4680      	mov	r8, r0
 8008884:	469a      	mov	sl, r3
 8008886:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800888a:	d807      	bhi.n	800889c <_printf_i+0x28>
 800888c:	2f62      	cmp	r7, #98	; 0x62
 800888e:	d80a      	bhi.n	80088a6 <_printf_i+0x32>
 8008890:	2f00      	cmp	r7, #0
 8008892:	f000 80d8 	beq.w	8008a46 <_printf_i+0x1d2>
 8008896:	2f58      	cmp	r7, #88	; 0x58
 8008898:	f000 80a3 	beq.w	80089e2 <_printf_i+0x16e>
 800889c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80088a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80088a4:	e03a      	b.n	800891c <_printf_i+0xa8>
 80088a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80088aa:	2b15      	cmp	r3, #21
 80088ac:	d8f6      	bhi.n	800889c <_printf_i+0x28>
 80088ae:	a001      	add	r0, pc, #4	; (adr r0, 80088b4 <_printf_i+0x40>)
 80088b0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80088b4:	0800890d 	.word	0x0800890d
 80088b8:	08008921 	.word	0x08008921
 80088bc:	0800889d 	.word	0x0800889d
 80088c0:	0800889d 	.word	0x0800889d
 80088c4:	0800889d 	.word	0x0800889d
 80088c8:	0800889d 	.word	0x0800889d
 80088cc:	08008921 	.word	0x08008921
 80088d0:	0800889d 	.word	0x0800889d
 80088d4:	0800889d 	.word	0x0800889d
 80088d8:	0800889d 	.word	0x0800889d
 80088dc:	0800889d 	.word	0x0800889d
 80088e0:	08008a2d 	.word	0x08008a2d
 80088e4:	08008951 	.word	0x08008951
 80088e8:	08008a0f 	.word	0x08008a0f
 80088ec:	0800889d 	.word	0x0800889d
 80088f0:	0800889d 	.word	0x0800889d
 80088f4:	08008a4f 	.word	0x08008a4f
 80088f8:	0800889d 	.word	0x0800889d
 80088fc:	08008951 	.word	0x08008951
 8008900:	0800889d 	.word	0x0800889d
 8008904:	0800889d 	.word	0x0800889d
 8008908:	08008a17 	.word	0x08008a17
 800890c:	680b      	ldr	r3, [r1, #0]
 800890e:	1d1a      	adds	r2, r3, #4
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	600a      	str	r2, [r1, #0]
 8008914:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008918:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800891c:	2301      	movs	r3, #1
 800891e:	e0a3      	b.n	8008a68 <_printf_i+0x1f4>
 8008920:	6825      	ldr	r5, [r4, #0]
 8008922:	6808      	ldr	r0, [r1, #0]
 8008924:	062e      	lsls	r6, r5, #24
 8008926:	f100 0304 	add.w	r3, r0, #4
 800892a:	d50a      	bpl.n	8008942 <_printf_i+0xce>
 800892c:	6805      	ldr	r5, [r0, #0]
 800892e:	600b      	str	r3, [r1, #0]
 8008930:	2d00      	cmp	r5, #0
 8008932:	da03      	bge.n	800893c <_printf_i+0xc8>
 8008934:	232d      	movs	r3, #45	; 0x2d
 8008936:	426d      	negs	r5, r5
 8008938:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800893c:	485e      	ldr	r0, [pc, #376]	; (8008ab8 <_printf_i+0x244>)
 800893e:	230a      	movs	r3, #10
 8008940:	e019      	b.n	8008976 <_printf_i+0x102>
 8008942:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008946:	6805      	ldr	r5, [r0, #0]
 8008948:	600b      	str	r3, [r1, #0]
 800894a:	bf18      	it	ne
 800894c:	b22d      	sxthne	r5, r5
 800894e:	e7ef      	b.n	8008930 <_printf_i+0xbc>
 8008950:	680b      	ldr	r3, [r1, #0]
 8008952:	6825      	ldr	r5, [r4, #0]
 8008954:	1d18      	adds	r0, r3, #4
 8008956:	6008      	str	r0, [r1, #0]
 8008958:	0628      	lsls	r0, r5, #24
 800895a:	d501      	bpl.n	8008960 <_printf_i+0xec>
 800895c:	681d      	ldr	r5, [r3, #0]
 800895e:	e002      	b.n	8008966 <_printf_i+0xf2>
 8008960:	0669      	lsls	r1, r5, #25
 8008962:	d5fb      	bpl.n	800895c <_printf_i+0xe8>
 8008964:	881d      	ldrh	r5, [r3, #0]
 8008966:	4854      	ldr	r0, [pc, #336]	; (8008ab8 <_printf_i+0x244>)
 8008968:	2f6f      	cmp	r7, #111	; 0x6f
 800896a:	bf0c      	ite	eq
 800896c:	2308      	moveq	r3, #8
 800896e:	230a      	movne	r3, #10
 8008970:	2100      	movs	r1, #0
 8008972:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008976:	6866      	ldr	r6, [r4, #4]
 8008978:	60a6      	str	r6, [r4, #8]
 800897a:	2e00      	cmp	r6, #0
 800897c:	bfa2      	ittt	ge
 800897e:	6821      	ldrge	r1, [r4, #0]
 8008980:	f021 0104 	bicge.w	r1, r1, #4
 8008984:	6021      	strge	r1, [r4, #0]
 8008986:	b90d      	cbnz	r5, 800898c <_printf_i+0x118>
 8008988:	2e00      	cmp	r6, #0
 800898a:	d04d      	beq.n	8008a28 <_printf_i+0x1b4>
 800898c:	4616      	mov	r6, r2
 800898e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008992:	fb03 5711 	mls	r7, r3, r1, r5
 8008996:	5dc7      	ldrb	r7, [r0, r7]
 8008998:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800899c:	462f      	mov	r7, r5
 800899e:	42bb      	cmp	r3, r7
 80089a0:	460d      	mov	r5, r1
 80089a2:	d9f4      	bls.n	800898e <_printf_i+0x11a>
 80089a4:	2b08      	cmp	r3, #8
 80089a6:	d10b      	bne.n	80089c0 <_printf_i+0x14c>
 80089a8:	6823      	ldr	r3, [r4, #0]
 80089aa:	07df      	lsls	r7, r3, #31
 80089ac:	d508      	bpl.n	80089c0 <_printf_i+0x14c>
 80089ae:	6923      	ldr	r3, [r4, #16]
 80089b0:	6861      	ldr	r1, [r4, #4]
 80089b2:	4299      	cmp	r1, r3
 80089b4:	bfde      	ittt	le
 80089b6:	2330      	movle	r3, #48	; 0x30
 80089b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80089bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80089c0:	1b92      	subs	r2, r2, r6
 80089c2:	6122      	str	r2, [r4, #16]
 80089c4:	f8cd a000 	str.w	sl, [sp]
 80089c8:	464b      	mov	r3, r9
 80089ca:	aa03      	add	r2, sp, #12
 80089cc:	4621      	mov	r1, r4
 80089ce:	4640      	mov	r0, r8
 80089d0:	f7ff fee2 	bl	8008798 <_printf_common>
 80089d4:	3001      	adds	r0, #1
 80089d6:	d14c      	bne.n	8008a72 <_printf_i+0x1fe>
 80089d8:	f04f 30ff 	mov.w	r0, #4294967295
 80089dc:	b004      	add	sp, #16
 80089de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089e2:	4835      	ldr	r0, [pc, #212]	; (8008ab8 <_printf_i+0x244>)
 80089e4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80089e8:	6823      	ldr	r3, [r4, #0]
 80089ea:	680e      	ldr	r6, [r1, #0]
 80089ec:	061f      	lsls	r7, r3, #24
 80089ee:	f856 5b04 	ldr.w	r5, [r6], #4
 80089f2:	600e      	str	r6, [r1, #0]
 80089f4:	d514      	bpl.n	8008a20 <_printf_i+0x1ac>
 80089f6:	07d9      	lsls	r1, r3, #31
 80089f8:	bf44      	itt	mi
 80089fa:	f043 0320 	orrmi.w	r3, r3, #32
 80089fe:	6023      	strmi	r3, [r4, #0]
 8008a00:	b91d      	cbnz	r5, 8008a0a <_printf_i+0x196>
 8008a02:	6823      	ldr	r3, [r4, #0]
 8008a04:	f023 0320 	bic.w	r3, r3, #32
 8008a08:	6023      	str	r3, [r4, #0]
 8008a0a:	2310      	movs	r3, #16
 8008a0c:	e7b0      	b.n	8008970 <_printf_i+0xfc>
 8008a0e:	6823      	ldr	r3, [r4, #0]
 8008a10:	f043 0320 	orr.w	r3, r3, #32
 8008a14:	6023      	str	r3, [r4, #0]
 8008a16:	2378      	movs	r3, #120	; 0x78
 8008a18:	4828      	ldr	r0, [pc, #160]	; (8008abc <_printf_i+0x248>)
 8008a1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a1e:	e7e3      	b.n	80089e8 <_printf_i+0x174>
 8008a20:	065e      	lsls	r6, r3, #25
 8008a22:	bf48      	it	mi
 8008a24:	b2ad      	uxthmi	r5, r5
 8008a26:	e7e6      	b.n	80089f6 <_printf_i+0x182>
 8008a28:	4616      	mov	r6, r2
 8008a2a:	e7bb      	b.n	80089a4 <_printf_i+0x130>
 8008a2c:	680b      	ldr	r3, [r1, #0]
 8008a2e:	6826      	ldr	r6, [r4, #0]
 8008a30:	6960      	ldr	r0, [r4, #20]
 8008a32:	1d1d      	adds	r5, r3, #4
 8008a34:	600d      	str	r5, [r1, #0]
 8008a36:	0635      	lsls	r5, r6, #24
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	d501      	bpl.n	8008a40 <_printf_i+0x1cc>
 8008a3c:	6018      	str	r0, [r3, #0]
 8008a3e:	e002      	b.n	8008a46 <_printf_i+0x1d2>
 8008a40:	0671      	lsls	r1, r6, #25
 8008a42:	d5fb      	bpl.n	8008a3c <_printf_i+0x1c8>
 8008a44:	8018      	strh	r0, [r3, #0]
 8008a46:	2300      	movs	r3, #0
 8008a48:	6123      	str	r3, [r4, #16]
 8008a4a:	4616      	mov	r6, r2
 8008a4c:	e7ba      	b.n	80089c4 <_printf_i+0x150>
 8008a4e:	680b      	ldr	r3, [r1, #0]
 8008a50:	1d1a      	adds	r2, r3, #4
 8008a52:	600a      	str	r2, [r1, #0]
 8008a54:	681e      	ldr	r6, [r3, #0]
 8008a56:	6862      	ldr	r2, [r4, #4]
 8008a58:	2100      	movs	r1, #0
 8008a5a:	4630      	mov	r0, r6
 8008a5c:	f7f7 fb98 	bl	8000190 <memchr>
 8008a60:	b108      	cbz	r0, 8008a66 <_printf_i+0x1f2>
 8008a62:	1b80      	subs	r0, r0, r6
 8008a64:	6060      	str	r0, [r4, #4]
 8008a66:	6863      	ldr	r3, [r4, #4]
 8008a68:	6123      	str	r3, [r4, #16]
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a70:	e7a8      	b.n	80089c4 <_printf_i+0x150>
 8008a72:	6923      	ldr	r3, [r4, #16]
 8008a74:	4632      	mov	r2, r6
 8008a76:	4649      	mov	r1, r9
 8008a78:	4640      	mov	r0, r8
 8008a7a:	47d0      	blx	sl
 8008a7c:	3001      	adds	r0, #1
 8008a7e:	d0ab      	beq.n	80089d8 <_printf_i+0x164>
 8008a80:	6823      	ldr	r3, [r4, #0]
 8008a82:	079b      	lsls	r3, r3, #30
 8008a84:	d413      	bmi.n	8008aae <_printf_i+0x23a>
 8008a86:	68e0      	ldr	r0, [r4, #12]
 8008a88:	9b03      	ldr	r3, [sp, #12]
 8008a8a:	4298      	cmp	r0, r3
 8008a8c:	bfb8      	it	lt
 8008a8e:	4618      	movlt	r0, r3
 8008a90:	e7a4      	b.n	80089dc <_printf_i+0x168>
 8008a92:	2301      	movs	r3, #1
 8008a94:	4632      	mov	r2, r6
 8008a96:	4649      	mov	r1, r9
 8008a98:	4640      	mov	r0, r8
 8008a9a:	47d0      	blx	sl
 8008a9c:	3001      	adds	r0, #1
 8008a9e:	d09b      	beq.n	80089d8 <_printf_i+0x164>
 8008aa0:	3501      	adds	r5, #1
 8008aa2:	68e3      	ldr	r3, [r4, #12]
 8008aa4:	9903      	ldr	r1, [sp, #12]
 8008aa6:	1a5b      	subs	r3, r3, r1
 8008aa8:	42ab      	cmp	r3, r5
 8008aaa:	dcf2      	bgt.n	8008a92 <_printf_i+0x21e>
 8008aac:	e7eb      	b.n	8008a86 <_printf_i+0x212>
 8008aae:	2500      	movs	r5, #0
 8008ab0:	f104 0619 	add.w	r6, r4, #25
 8008ab4:	e7f5      	b.n	8008aa2 <_printf_i+0x22e>
 8008ab6:	bf00      	nop
 8008ab8:	0800af0a 	.word	0x0800af0a
 8008abc:	0800af1b 	.word	0x0800af1b

08008ac0 <_sbrk_r>:
 8008ac0:	b538      	push	{r3, r4, r5, lr}
 8008ac2:	4d06      	ldr	r5, [pc, #24]	; (8008adc <_sbrk_r+0x1c>)
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	4604      	mov	r4, r0
 8008ac8:	4608      	mov	r0, r1
 8008aca:	602b      	str	r3, [r5, #0]
 8008acc:	f7f9 fe78 	bl	80027c0 <_sbrk>
 8008ad0:	1c43      	adds	r3, r0, #1
 8008ad2:	d102      	bne.n	8008ada <_sbrk_r+0x1a>
 8008ad4:	682b      	ldr	r3, [r5, #0]
 8008ad6:	b103      	cbz	r3, 8008ada <_sbrk_r+0x1a>
 8008ad8:	6023      	str	r3, [r4, #0]
 8008ada:	bd38      	pop	{r3, r4, r5, pc}
 8008adc:	200029d4 	.word	0x200029d4

08008ae0 <siprintf>:
 8008ae0:	b40e      	push	{r1, r2, r3}
 8008ae2:	b500      	push	{lr}
 8008ae4:	b09c      	sub	sp, #112	; 0x70
 8008ae6:	ab1d      	add	r3, sp, #116	; 0x74
 8008ae8:	9002      	str	r0, [sp, #8]
 8008aea:	9006      	str	r0, [sp, #24]
 8008aec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008af0:	4809      	ldr	r0, [pc, #36]	; (8008b18 <siprintf+0x38>)
 8008af2:	9107      	str	r1, [sp, #28]
 8008af4:	9104      	str	r1, [sp, #16]
 8008af6:	4909      	ldr	r1, [pc, #36]	; (8008b1c <siprintf+0x3c>)
 8008af8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008afc:	9105      	str	r1, [sp, #20]
 8008afe:	6800      	ldr	r0, [r0, #0]
 8008b00:	9301      	str	r3, [sp, #4]
 8008b02:	a902      	add	r1, sp, #8
 8008b04:	f001 fa8c 	bl	800a020 <_svfiprintf_r>
 8008b08:	9b02      	ldr	r3, [sp, #8]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	701a      	strb	r2, [r3, #0]
 8008b0e:	b01c      	add	sp, #112	; 0x70
 8008b10:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b14:	b003      	add	sp, #12
 8008b16:	4770      	bx	lr
 8008b18:	20000010 	.word	0x20000010
 8008b1c:	ffff0208 	.word	0xffff0208

08008b20 <strcat>:
 8008b20:	b510      	push	{r4, lr}
 8008b22:	4602      	mov	r2, r0
 8008b24:	7814      	ldrb	r4, [r2, #0]
 8008b26:	4613      	mov	r3, r2
 8008b28:	3201      	adds	r2, #1
 8008b2a:	2c00      	cmp	r4, #0
 8008b2c:	d1fa      	bne.n	8008b24 <strcat+0x4>
 8008b2e:	3b01      	subs	r3, #1
 8008b30:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b34:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b38:	2a00      	cmp	r2, #0
 8008b3a:	d1f9      	bne.n	8008b30 <strcat+0x10>
 8008b3c:	bd10      	pop	{r4, pc}

08008b3e <quorem>:
 8008b3e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b42:	6903      	ldr	r3, [r0, #16]
 8008b44:	690c      	ldr	r4, [r1, #16]
 8008b46:	42a3      	cmp	r3, r4
 8008b48:	4607      	mov	r7, r0
 8008b4a:	f2c0 8081 	blt.w	8008c50 <quorem+0x112>
 8008b4e:	3c01      	subs	r4, #1
 8008b50:	f101 0814 	add.w	r8, r1, #20
 8008b54:	f100 0514 	add.w	r5, r0, #20
 8008b58:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b5c:	9301      	str	r3, [sp, #4]
 8008b5e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008b62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b66:	3301      	adds	r3, #1
 8008b68:	429a      	cmp	r2, r3
 8008b6a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008b6e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008b72:	fbb2 f6f3 	udiv	r6, r2, r3
 8008b76:	d331      	bcc.n	8008bdc <quorem+0x9e>
 8008b78:	f04f 0e00 	mov.w	lr, #0
 8008b7c:	4640      	mov	r0, r8
 8008b7e:	46ac      	mov	ip, r5
 8008b80:	46f2      	mov	sl, lr
 8008b82:	f850 2b04 	ldr.w	r2, [r0], #4
 8008b86:	b293      	uxth	r3, r2
 8008b88:	fb06 e303 	mla	r3, r6, r3, lr
 8008b8c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008b90:	b29b      	uxth	r3, r3
 8008b92:	ebaa 0303 	sub.w	r3, sl, r3
 8008b96:	0c12      	lsrs	r2, r2, #16
 8008b98:	f8dc a000 	ldr.w	sl, [ip]
 8008b9c:	fb06 e202 	mla	r2, r6, r2, lr
 8008ba0:	fa13 f38a 	uxtah	r3, r3, sl
 8008ba4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008ba8:	fa1f fa82 	uxth.w	sl, r2
 8008bac:	f8dc 2000 	ldr.w	r2, [ip]
 8008bb0:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008bb4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008bbe:	4581      	cmp	r9, r0
 8008bc0:	f84c 3b04 	str.w	r3, [ip], #4
 8008bc4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008bc8:	d2db      	bcs.n	8008b82 <quorem+0x44>
 8008bca:	f855 300b 	ldr.w	r3, [r5, fp]
 8008bce:	b92b      	cbnz	r3, 8008bdc <quorem+0x9e>
 8008bd0:	9b01      	ldr	r3, [sp, #4]
 8008bd2:	3b04      	subs	r3, #4
 8008bd4:	429d      	cmp	r5, r3
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	d32e      	bcc.n	8008c38 <quorem+0xfa>
 8008bda:	613c      	str	r4, [r7, #16]
 8008bdc:	4638      	mov	r0, r7
 8008bde:	f001 f8b5 	bl	8009d4c <__mcmp>
 8008be2:	2800      	cmp	r0, #0
 8008be4:	db24      	blt.n	8008c30 <quorem+0xf2>
 8008be6:	3601      	adds	r6, #1
 8008be8:	4628      	mov	r0, r5
 8008bea:	f04f 0c00 	mov.w	ip, #0
 8008bee:	f858 2b04 	ldr.w	r2, [r8], #4
 8008bf2:	f8d0 e000 	ldr.w	lr, [r0]
 8008bf6:	b293      	uxth	r3, r2
 8008bf8:	ebac 0303 	sub.w	r3, ip, r3
 8008bfc:	0c12      	lsrs	r2, r2, #16
 8008bfe:	fa13 f38e 	uxtah	r3, r3, lr
 8008c02:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008c06:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c10:	45c1      	cmp	r9, r8
 8008c12:	f840 3b04 	str.w	r3, [r0], #4
 8008c16:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008c1a:	d2e8      	bcs.n	8008bee <quorem+0xb0>
 8008c1c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c20:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c24:	b922      	cbnz	r2, 8008c30 <quorem+0xf2>
 8008c26:	3b04      	subs	r3, #4
 8008c28:	429d      	cmp	r5, r3
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	d30a      	bcc.n	8008c44 <quorem+0x106>
 8008c2e:	613c      	str	r4, [r7, #16]
 8008c30:	4630      	mov	r0, r6
 8008c32:	b003      	add	sp, #12
 8008c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c38:	6812      	ldr	r2, [r2, #0]
 8008c3a:	3b04      	subs	r3, #4
 8008c3c:	2a00      	cmp	r2, #0
 8008c3e:	d1cc      	bne.n	8008bda <quorem+0x9c>
 8008c40:	3c01      	subs	r4, #1
 8008c42:	e7c7      	b.n	8008bd4 <quorem+0x96>
 8008c44:	6812      	ldr	r2, [r2, #0]
 8008c46:	3b04      	subs	r3, #4
 8008c48:	2a00      	cmp	r2, #0
 8008c4a:	d1f0      	bne.n	8008c2e <quorem+0xf0>
 8008c4c:	3c01      	subs	r4, #1
 8008c4e:	e7eb      	b.n	8008c28 <quorem+0xea>
 8008c50:	2000      	movs	r0, #0
 8008c52:	e7ee      	b.n	8008c32 <quorem+0xf4>
 8008c54:	0000      	movs	r0, r0
	...

08008c58 <_dtoa_r>:
 8008c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c5c:	ed2d 8b02 	vpush	{d8}
 8008c60:	ec57 6b10 	vmov	r6, r7, d0
 8008c64:	b095      	sub	sp, #84	; 0x54
 8008c66:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008c68:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008c6c:	9105      	str	r1, [sp, #20]
 8008c6e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008c72:	4604      	mov	r4, r0
 8008c74:	9209      	str	r2, [sp, #36]	; 0x24
 8008c76:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c78:	b975      	cbnz	r5, 8008c98 <_dtoa_r+0x40>
 8008c7a:	2010      	movs	r0, #16
 8008c7c:	f7ff f9ee 	bl	800805c <malloc>
 8008c80:	4602      	mov	r2, r0
 8008c82:	6260      	str	r0, [r4, #36]	; 0x24
 8008c84:	b920      	cbnz	r0, 8008c90 <_dtoa_r+0x38>
 8008c86:	4bb2      	ldr	r3, [pc, #712]	; (8008f50 <_dtoa_r+0x2f8>)
 8008c88:	21ea      	movs	r1, #234	; 0xea
 8008c8a:	48b2      	ldr	r0, [pc, #712]	; (8008f54 <_dtoa_r+0x2fc>)
 8008c8c:	f001 fac8 	bl	800a220 <__assert_func>
 8008c90:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008c94:	6005      	str	r5, [r0, #0]
 8008c96:	60c5      	str	r5, [r0, #12]
 8008c98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c9a:	6819      	ldr	r1, [r3, #0]
 8008c9c:	b151      	cbz	r1, 8008cb4 <_dtoa_r+0x5c>
 8008c9e:	685a      	ldr	r2, [r3, #4]
 8008ca0:	604a      	str	r2, [r1, #4]
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	4093      	lsls	r3, r2
 8008ca6:	608b      	str	r3, [r1, #8]
 8008ca8:	4620      	mov	r0, r4
 8008caa:	f000 fe11 	bl	80098d0 <_Bfree>
 8008cae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	601a      	str	r2, [r3, #0]
 8008cb4:	1e3b      	subs	r3, r7, #0
 8008cb6:	bfb9      	ittee	lt
 8008cb8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008cbc:	9303      	strlt	r3, [sp, #12]
 8008cbe:	2300      	movge	r3, #0
 8008cc0:	f8c8 3000 	strge.w	r3, [r8]
 8008cc4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008cc8:	4ba3      	ldr	r3, [pc, #652]	; (8008f58 <_dtoa_r+0x300>)
 8008cca:	bfbc      	itt	lt
 8008ccc:	2201      	movlt	r2, #1
 8008cce:	f8c8 2000 	strlt.w	r2, [r8]
 8008cd2:	ea33 0309 	bics.w	r3, r3, r9
 8008cd6:	d11b      	bne.n	8008d10 <_dtoa_r+0xb8>
 8008cd8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008cda:	f242 730f 	movw	r3, #9999	; 0x270f
 8008cde:	6013      	str	r3, [r2, #0]
 8008ce0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008ce4:	4333      	orrs	r3, r6
 8008ce6:	f000 857a 	beq.w	80097de <_dtoa_r+0xb86>
 8008cea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cec:	b963      	cbnz	r3, 8008d08 <_dtoa_r+0xb0>
 8008cee:	4b9b      	ldr	r3, [pc, #620]	; (8008f5c <_dtoa_r+0x304>)
 8008cf0:	e024      	b.n	8008d3c <_dtoa_r+0xe4>
 8008cf2:	4b9b      	ldr	r3, [pc, #620]	; (8008f60 <_dtoa_r+0x308>)
 8008cf4:	9300      	str	r3, [sp, #0]
 8008cf6:	3308      	adds	r3, #8
 8008cf8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008cfa:	6013      	str	r3, [r2, #0]
 8008cfc:	9800      	ldr	r0, [sp, #0]
 8008cfe:	b015      	add	sp, #84	; 0x54
 8008d00:	ecbd 8b02 	vpop	{d8}
 8008d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d08:	4b94      	ldr	r3, [pc, #592]	; (8008f5c <_dtoa_r+0x304>)
 8008d0a:	9300      	str	r3, [sp, #0]
 8008d0c:	3303      	adds	r3, #3
 8008d0e:	e7f3      	b.n	8008cf8 <_dtoa_r+0xa0>
 8008d10:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008d14:	2200      	movs	r2, #0
 8008d16:	ec51 0b17 	vmov	r0, r1, d7
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008d20:	f7f7 feaa 	bl	8000a78 <__aeabi_dcmpeq>
 8008d24:	4680      	mov	r8, r0
 8008d26:	b158      	cbz	r0, 8008d40 <_dtoa_r+0xe8>
 8008d28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	6013      	str	r3, [r2, #0]
 8008d2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	f000 8551 	beq.w	80097d8 <_dtoa_r+0xb80>
 8008d36:	488b      	ldr	r0, [pc, #556]	; (8008f64 <_dtoa_r+0x30c>)
 8008d38:	6018      	str	r0, [r3, #0]
 8008d3a:	1e43      	subs	r3, r0, #1
 8008d3c:	9300      	str	r3, [sp, #0]
 8008d3e:	e7dd      	b.n	8008cfc <_dtoa_r+0xa4>
 8008d40:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008d44:	aa12      	add	r2, sp, #72	; 0x48
 8008d46:	a913      	add	r1, sp, #76	; 0x4c
 8008d48:	4620      	mov	r0, r4
 8008d4a:	f001 f8a3 	bl	8009e94 <__d2b>
 8008d4e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008d52:	4683      	mov	fp, r0
 8008d54:	2d00      	cmp	r5, #0
 8008d56:	d07c      	beq.n	8008e52 <_dtoa_r+0x1fa>
 8008d58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d5a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008d5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d62:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008d66:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008d6a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008d6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008d72:	4b7d      	ldr	r3, [pc, #500]	; (8008f68 <_dtoa_r+0x310>)
 8008d74:	2200      	movs	r2, #0
 8008d76:	4630      	mov	r0, r6
 8008d78:	4639      	mov	r1, r7
 8008d7a:	f7f7 fa5d 	bl	8000238 <__aeabi_dsub>
 8008d7e:	a36e      	add	r3, pc, #440	; (adr r3, 8008f38 <_dtoa_r+0x2e0>)
 8008d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d84:	f7f7 fc10 	bl	80005a8 <__aeabi_dmul>
 8008d88:	a36d      	add	r3, pc, #436	; (adr r3, 8008f40 <_dtoa_r+0x2e8>)
 8008d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d8e:	f7f7 fa55 	bl	800023c <__adddf3>
 8008d92:	4606      	mov	r6, r0
 8008d94:	4628      	mov	r0, r5
 8008d96:	460f      	mov	r7, r1
 8008d98:	f7f7 fb9c 	bl	80004d4 <__aeabi_i2d>
 8008d9c:	a36a      	add	r3, pc, #424	; (adr r3, 8008f48 <_dtoa_r+0x2f0>)
 8008d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da2:	f7f7 fc01 	bl	80005a8 <__aeabi_dmul>
 8008da6:	4602      	mov	r2, r0
 8008da8:	460b      	mov	r3, r1
 8008daa:	4630      	mov	r0, r6
 8008dac:	4639      	mov	r1, r7
 8008dae:	f7f7 fa45 	bl	800023c <__adddf3>
 8008db2:	4606      	mov	r6, r0
 8008db4:	460f      	mov	r7, r1
 8008db6:	f7f7 fea7 	bl	8000b08 <__aeabi_d2iz>
 8008dba:	2200      	movs	r2, #0
 8008dbc:	4682      	mov	sl, r0
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	4630      	mov	r0, r6
 8008dc2:	4639      	mov	r1, r7
 8008dc4:	f7f7 fe62 	bl	8000a8c <__aeabi_dcmplt>
 8008dc8:	b148      	cbz	r0, 8008dde <_dtoa_r+0x186>
 8008dca:	4650      	mov	r0, sl
 8008dcc:	f7f7 fb82 	bl	80004d4 <__aeabi_i2d>
 8008dd0:	4632      	mov	r2, r6
 8008dd2:	463b      	mov	r3, r7
 8008dd4:	f7f7 fe50 	bl	8000a78 <__aeabi_dcmpeq>
 8008dd8:	b908      	cbnz	r0, 8008dde <_dtoa_r+0x186>
 8008dda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008dde:	f1ba 0f16 	cmp.w	sl, #22
 8008de2:	d854      	bhi.n	8008e8e <_dtoa_r+0x236>
 8008de4:	4b61      	ldr	r3, [pc, #388]	; (8008f6c <_dtoa_r+0x314>)
 8008de6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008df2:	f7f7 fe4b 	bl	8000a8c <__aeabi_dcmplt>
 8008df6:	2800      	cmp	r0, #0
 8008df8:	d04b      	beq.n	8008e92 <_dtoa_r+0x23a>
 8008dfa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008dfe:	2300      	movs	r3, #0
 8008e00:	930e      	str	r3, [sp, #56]	; 0x38
 8008e02:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008e04:	1b5d      	subs	r5, r3, r5
 8008e06:	1e6b      	subs	r3, r5, #1
 8008e08:	9304      	str	r3, [sp, #16]
 8008e0a:	bf43      	ittte	mi
 8008e0c:	2300      	movmi	r3, #0
 8008e0e:	f1c5 0801 	rsbmi	r8, r5, #1
 8008e12:	9304      	strmi	r3, [sp, #16]
 8008e14:	f04f 0800 	movpl.w	r8, #0
 8008e18:	f1ba 0f00 	cmp.w	sl, #0
 8008e1c:	db3b      	blt.n	8008e96 <_dtoa_r+0x23e>
 8008e1e:	9b04      	ldr	r3, [sp, #16]
 8008e20:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008e24:	4453      	add	r3, sl
 8008e26:	9304      	str	r3, [sp, #16]
 8008e28:	2300      	movs	r3, #0
 8008e2a:	9306      	str	r3, [sp, #24]
 8008e2c:	9b05      	ldr	r3, [sp, #20]
 8008e2e:	2b09      	cmp	r3, #9
 8008e30:	d869      	bhi.n	8008f06 <_dtoa_r+0x2ae>
 8008e32:	2b05      	cmp	r3, #5
 8008e34:	bfc4      	itt	gt
 8008e36:	3b04      	subgt	r3, #4
 8008e38:	9305      	strgt	r3, [sp, #20]
 8008e3a:	9b05      	ldr	r3, [sp, #20]
 8008e3c:	f1a3 0302 	sub.w	r3, r3, #2
 8008e40:	bfcc      	ite	gt
 8008e42:	2500      	movgt	r5, #0
 8008e44:	2501      	movle	r5, #1
 8008e46:	2b03      	cmp	r3, #3
 8008e48:	d869      	bhi.n	8008f1e <_dtoa_r+0x2c6>
 8008e4a:	e8df f003 	tbb	[pc, r3]
 8008e4e:	4e2c      	.short	0x4e2c
 8008e50:	5a4c      	.short	0x5a4c
 8008e52:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008e56:	441d      	add	r5, r3
 8008e58:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008e5c:	2b20      	cmp	r3, #32
 8008e5e:	bfc1      	itttt	gt
 8008e60:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008e64:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008e68:	fa09 f303 	lslgt.w	r3, r9, r3
 8008e6c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008e70:	bfda      	itte	le
 8008e72:	f1c3 0320 	rsble	r3, r3, #32
 8008e76:	fa06 f003 	lslle.w	r0, r6, r3
 8008e7a:	4318      	orrgt	r0, r3
 8008e7c:	f7f7 fb1a 	bl	80004b4 <__aeabi_ui2d>
 8008e80:	2301      	movs	r3, #1
 8008e82:	4606      	mov	r6, r0
 8008e84:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008e88:	3d01      	subs	r5, #1
 8008e8a:	9310      	str	r3, [sp, #64]	; 0x40
 8008e8c:	e771      	b.n	8008d72 <_dtoa_r+0x11a>
 8008e8e:	2301      	movs	r3, #1
 8008e90:	e7b6      	b.n	8008e00 <_dtoa_r+0x1a8>
 8008e92:	900e      	str	r0, [sp, #56]	; 0x38
 8008e94:	e7b5      	b.n	8008e02 <_dtoa_r+0x1aa>
 8008e96:	f1ca 0300 	rsb	r3, sl, #0
 8008e9a:	9306      	str	r3, [sp, #24]
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	eba8 080a 	sub.w	r8, r8, sl
 8008ea2:	930d      	str	r3, [sp, #52]	; 0x34
 8008ea4:	e7c2      	b.n	8008e2c <_dtoa_r+0x1d4>
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	9308      	str	r3, [sp, #32]
 8008eaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	dc39      	bgt.n	8008f24 <_dtoa_r+0x2cc>
 8008eb0:	f04f 0901 	mov.w	r9, #1
 8008eb4:	f8cd 9004 	str.w	r9, [sp, #4]
 8008eb8:	464b      	mov	r3, r9
 8008eba:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008ebe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	6042      	str	r2, [r0, #4]
 8008ec4:	2204      	movs	r2, #4
 8008ec6:	f102 0614 	add.w	r6, r2, #20
 8008eca:	429e      	cmp	r6, r3
 8008ecc:	6841      	ldr	r1, [r0, #4]
 8008ece:	d92f      	bls.n	8008f30 <_dtoa_r+0x2d8>
 8008ed0:	4620      	mov	r0, r4
 8008ed2:	f000 fcbd 	bl	8009850 <_Balloc>
 8008ed6:	9000      	str	r0, [sp, #0]
 8008ed8:	2800      	cmp	r0, #0
 8008eda:	d14b      	bne.n	8008f74 <_dtoa_r+0x31c>
 8008edc:	4b24      	ldr	r3, [pc, #144]	; (8008f70 <_dtoa_r+0x318>)
 8008ede:	4602      	mov	r2, r0
 8008ee0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008ee4:	e6d1      	b.n	8008c8a <_dtoa_r+0x32>
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	e7de      	b.n	8008ea8 <_dtoa_r+0x250>
 8008eea:	2300      	movs	r3, #0
 8008eec:	9308      	str	r3, [sp, #32]
 8008eee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ef0:	eb0a 0903 	add.w	r9, sl, r3
 8008ef4:	f109 0301 	add.w	r3, r9, #1
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	9301      	str	r3, [sp, #4]
 8008efc:	bfb8      	it	lt
 8008efe:	2301      	movlt	r3, #1
 8008f00:	e7dd      	b.n	8008ebe <_dtoa_r+0x266>
 8008f02:	2301      	movs	r3, #1
 8008f04:	e7f2      	b.n	8008eec <_dtoa_r+0x294>
 8008f06:	2501      	movs	r5, #1
 8008f08:	2300      	movs	r3, #0
 8008f0a:	9305      	str	r3, [sp, #20]
 8008f0c:	9508      	str	r5, [sp, #32]
 8008f0e:	f04f 39ff 	mov.w	r9, #4294967295
 8008f12:	2200      	movs	r2, #0
 8008f14:	f8cd 9004 	str.w	r9, [sp, #4]
 8008f18:	2312      	movs	r3, #18
 8008f1a:	9209      	str	r2, [sp, #36]	; 0x24
 8008f1c:	e7cf      	b.n	8008ebe <_dtoa_r+0x266>
 8008f1e:	2301      	movs	r3, #1
 8008f20:	9308      	str	r3, [sp, #32]
 8008f22:	e7f4      	b.n	8008f0e <_dtoa_r+0x2b6>
 8008f24:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008f28:	f8cd 9004 	str.w	r9, [sp, #4]
 8008f2c:	464b      	mov	r3, r9
 8008f2e:	e7c6      	b.n	8008ebe <_dtoa_r+0x266>
 8008f30:	3101      	adds	r1, #1
 8008f32:	6041      	str	r1, [r0, #4]
 8008f34:	0052      	lsls	r2, r2, #1
 8008f36:	e7c6      	b.n	8008ec6 <_dtoa_r+0x26e>
 8008f38:	636f4361 	.word	0x636f4361
 8008f3c:	3fd287a7 	.word	0x3fd287a7
 8008f40:	8b60c8b3 	.word	0x8b60c8b3
 8008f44:	3fc68a28 	.word	0x3fc68a28
 8008f48:	509f79fb 	.word	0x509f79fb
 8008f4c:	3fd34413 	.word	0x3fd34413
 8008f50:	0800af39 	.word	0x0800af39
 8008f54:	0800af50 	.word	0x0800af50
 8008f58:	7ff00000 	.word	0x7ff00000
 8008f5c:	0800af35 	.word	0x0800af35
 8008f60:	0800af2c 	.word	0x0800af2c
 8008f64:	0800af09 	.word	0x0800af09
 8008f68:	3ff80000 	.word	0x3ff80000
 8008f6c:	0800b048 	.word	0x0800b048
 8008f70:	0800afaf 	.word	0x0800afaf
 8008f74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f76:	9a00      	ldr	r2, [sp, #0]
 8008f78:	601a      	str	r2, [r3, #0]
 8008f7a:	9b01      	ldr	r3, [sp, #4]
 8008f7c:	2b0e      	cmp	r3, #14
 8008f7e:	f200 80ad 	bhi.w	80090dc <_dtoa_r+0x484>
 8008f82:	2d00      	cmp	r5, #0
 8008f84:	f000 80aa 	beq.w	80090dc <_dtoa_r+0x484>
 8008f88:	f1ba 0f00 	cmp.w	sl, #0
 8008f8c:	dd36      	ble.n	8008ffc <_dtoa_r+0x3a4>
 8008f8e:	4ac3      	ldr	r2, [pc, #780]	; (800929c <_dtoa_r+0x644>)
 8008f90:	f00a 030f 	and.w	r3, sl, #15
 8008f94:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008f98:	ed93 7b00 	vldr	d7, [r3]
 8008f9c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008fa0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008fa4:	eeb0 8a47 	vmov.f32	s16, s14
 8008fa8:	eef0 8a67 	vmov.f32	s17, s15
 8008fac:	d016      	beq.n	8008fdc <_dtoa_r+0x384>
 8008fae:	4bbc      	ldr	r3, [pc, #752]	; (80092a0 <_dtoa_r+0x648>)
 8008fb0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008fb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008fb8:	f7f7 fc20 	bl	80007fc <__aeabi_ddiv>
 8008fbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fc0:	f007 070f 	and.w	r7, r7, #15
 8008fc4:	2503      	movs	r5, #3
 8008fc6:	4eb6      	ldr	r6, [pc, #728]	; (80092a0 <_dtoa_r+0x648>)
 8008fc8:	b957      	cbnz	r7, 8008fe0 <_dtoa_r+0x388>
 8008fca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fce:	ec53 2b18 	vmov	r2, r3, d8
 8008fd2:	f7f7 fc13 	bl	80007fc <__aeabi_ddiv>
 8008fd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fda:	e029      	b.n	8009030 <_dtoa_r+0x3d8>
 8008fdc:	2502      	movs	r5, #2
 8008fde:	e7f2      	b.n	8008fc6 <_dtoa_r+0x36e>
 8008fe0:	07f9      	lsls	r1, r7, #31
 8008fe2:	d508      	bpl.n	8008ff6 <_dtoa_r+0x39e>
 8008fe4:	ec51 0b18 	vmov	r0, r1, d8
 8008fe8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008fec:	f7f7 fadc 	bl	80005a8 <__aeabi_dmul>
 8008ff0:	ec41 0b18 	vmov	d8, r0, r1
 8008ff4:	3501      	adds	r5, #1
 8008ff6:	107f      	asrs	r7, r7, #1
 8008ff8:	3608      	adds	r6, #8
 8008ffa:	e7e5      	b.n	8008fc8 <_dtoa_r+0x370>
 8008ffc:	f000 80a6 	beq.w	800914c <_dtoa_r+0x4f4>
 8009000:	f1ca 0600 	rsb	r6, sl, #0
 8009004:	4ba5      	ldr	r3, [pc, #660]	; (800929c <_dtoa_r+0x644>)
 8009006:	4fa6      	ldr	r7, [pc, #664]	; (80092a0 <_dtoa_r+0x648>)
 8009008:	f006 020f 	and.w	r2, r6, #15
 800900c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009014:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009018:	f7f7 fac6 	bl	80005a8 <__aeabi_dmul>
 800901c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009020:	1136      	asrs	r6, r6, #4
 8009022:	2300      	movs	r3, #0
 8009024:	2502      	movs	r5, #2
 8009026:	2e00      	cmp	r6, #0
 8009028:	f040 8085 	bne.w	8009136 <_dtoa_r+0x4de>
 800902c:	2b00      	cmp	r3, #0
 800902e:	d1d2      	bne.n	8008fd6 <_dtoa_r+0x37e>
 8009030:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009032:	2b00      	cmp	r3, #0
 8009034:	f000 808c 	beq.w	8009150 <_dtoa_r+0x4f8>
 8009038:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800903c:	4b99      	ldr	r3, [pc, #612]	; (80092a4 <_dtoa_r+0x64c>)
 800903e:	2200      	movs	r2, #0
 8009040:	4630      	mov	r0, r6
 8009042:	4639      	mov	r1, r7
 8009044:	f7f7 fd22 	bl	8000a8c <__aeabi_dcmplt>
 8009048:	2800      	cmp	r0, #0
 800904a:	f000 8081 	beq.w	8009150 <_dtoa_r+0x4f8>
 800904e:	9b01      	ldr	r3, [sp, #4]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d07d      	beq.n	8009150 <_dtoa_r+0x4f8>
 8009054:	f1b9 0f00 	cmp.w	r9, #0
 8009058:	dd3c      	ble.n	80090d4 <_dtoa_r+0x47c>
 800905a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800905e:	9307      	str	r3, [sp, #28]
 8009060:	2200      	movs	r2, #0
 8009062:	4b91      	ldr	r3, [pc, #580]	; (80092a8 <_dtoa_r+0x650>)
 8009064:	4630      	mov	r0, r6
 8009066:	4639      	mov	r1, r7
 8009068:	f7f7 fa9e 	bl	80005a8 <__aeabi_dmul>
 800906c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009070:	3501      	adds	r5, #1
 8009072:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009076:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800907a:	4628      	mov	r0, r5
 800907c:	f7f7 fa2a 	bl	80004d4 <__aeabi_i2d>
 8009080:	4632      	mov	r2, r6
 8009082:	463b      	mov	r3, r7
 8009084:	f7f7 fa90 	bl	80005a8 <__aeabi_dmul>
 8009088:	4b88      	ldr	r3, [pc, #544]	; (80092ac <_dtoa_r+0x654>)
 800908a:	2200      	movs	r2, #0
 800908c:	f7f7 f8d6 	bl	800023c <__adddf3>
 8009090:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009094:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009098:	9303      	str	r3, [sp, #12]
 800909a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800909c:	2b00      	cmp	r3, #0
 800909e:	d15c      	bne.n	800915a <_dtoa_r+0x502>
 80090a0:	4b83      	ldr	r3, [pc, #524]	; (80092b0 <_dtoa_r+0x658>)
 80090a2:	2200      	movs	r2, #0
 80090a4:	4630      	mov	r0, r6
 80090a6:	4639      	mov	r1, r7
 80090a8:	f7f7 f8c6 	bl	8000238 <__aeabi_dsub>
 80090ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80090b0:	4606      	mov	r6, r0
 80090b2:	460f      	mov	r7, r1
 80090b4:	f7f7 fd08 	bl	8000ac8 <__aeabi_dcmpgt>
 80090b8:	2800      	cmp	r0, #0
 80090ba:	f040 8296 	bne.w	80095ea <_dtoa_r+0x992>
 80090be:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80090c2:	4630      	mov	r0, r6
 80090c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80090c8:	4639      	mov	r1, r7
 80090ca:	f7f7 fcdf 	bl	8000a8c <__aeabi_dcmplt>
 80090ce:	2800      	cmp	r0, #0
 80090d0:	f040 8288 	bne.w	80095e4 <_dtoa_r+0x98c>
 80090d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80090d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80090dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80090de:	2b00      	cmp	r3, #0
 80090e0:	f2c0 8158 	blt.w	8009394 <_dtoa_r+0x73c>
 80090e4:	f1ba 0f0e 	cmp.w	sl, #14
 80090e8:	f300 8154 	bgt.w	8009394 <_dtoa_r+0x73c>
 80090ec:	4b6b      	ldr	r3, [pc, #428]	; (800929c <_dtoa_r+0x644>)
 80090ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80090f2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80090f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	f280 80e3 	bge.w	80092c4 <_dtoa_r+0x66c>
 80090fe:	9b01      	ldr	r3, [sp, #4]
 8009100:	2b00      	cmp	r3, #0
 8009102:	f300 80df 	bgt.w	80092c4 <_dtoa_r+0x66c>
 8009106:	f040 826d 	bne.w	80095e4 <_dtoa_r+0x98c>
 800910a:	4b69      	ldr	r3, [pc, #420]	; (80092b0 <_dtoa_r+0x658>)
 800910c:	2200      	movs	r2, #0
 800910e:	4640      	mov	r0, r8
 8009110:	4649      	mov	r1, r9
 8009112:	f7f7 fa49 	bl	80005a8 <__aeabi_dmul>
 8009116:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800911a:	f7f7 fccb 	bl	8000ab4 <__aeabi_dcmpge>
 800911e:	9e01      	ldr	r6, [sp, #4]
 8009120:	4637      	mov	r7, r6
 8009122:	2800      	cmp	r0, #0
 8009124:	f040 8243 	bne.w	80095ae <_dtoa_r+0x956>
 8009128:	9d00      	ldr	r5, [sp, #0]
 800912a:	2331      	movs	r3, #49	; 0x31
 800912c:	f805 3b01 	strb.w	r3, [r5], #1
 8009130:	f10a 0a01 	add.w	sl, sl, #1
 8009134:	e23f      	b.n	80095b6 <_dtoa_r+0x95e>
 8009136:	07f2      	lsls	r2, r6, #31
 8009138:	d505      	bpl.n	8009146 <_dtoa_r+0x4ee>
 800913a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800913e:	f7f7 fa33 	bl	80005a8 <__aeabi_dmul>
 8009142:	3501      	adds	r5, #1
 8009144:	2301      	movs	r3, #1
 8009146:	1076      	asrs	r6, r6, #1
 8009148:	3708      	adds	r7, #8
 800914a:	e76c      	b.n	8009026 <_dtoa_r+0x3ce>
 800914c:	2502      	movs	r5, #2
 800914e:	e76f      	b.n	8009030 <_dtoa_r+0x3d8>
 8009150:	9b01      	ldr	r3, [sp, #4]
 8009152:	f8cd a01c 	str.w	sl, [sp, #28]
 8009156:	930c      	str	r3, [sp, #48]	; 0x30
 8009158:	e78d      	b.n	8009076 <_dtoa_r+0x41e>
 800915a:	9900      	ldr	r1, [sp, #0]
 800915c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800915e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009160:	4b4e      	ldr	r3, [pc, #312]	; (800929c <_dtoa_r+0x644>)
 8009162:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009166:	4401      	add	r1, r0
 8009168:	9102      	str	r1, [sp, #8]
 800916a:	9908      	ldr	r1, [sp, #32]
 800916c:	eeb0 8a47 	vmov.f32	s16, s14
 8009170:	eef0 8a67 	vmov.f32	s17, s15
 8009174:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009178:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800917c:	2900      	cmp	r1, #0
 800917e:	d045      	beq.n	800920c <_dtoa_r+0x5b4>
 8009180:	494c      	ldr	r1, [pc, #304]	; (80092b4 <_dtoa_r+0x65c>)
 8009182:	2000      	movs	r0, #0
 8009184:	f7f7 fb3a 	bl	80007fc <__aeabi_ddiv>
 8009188:	ec53 2b18 	vmov	r2, r3, d8
 800918c:	f7f7 f854 	bl	8000238 <__aeabi_dsub>
 8009190:	9d00      	ldr	r5, [sp, #0]
 8009192:	ec41 0b18 	vmov	d8, r0, r1
 8009196:	4639      	mov	r1, r7
 8009198:	4630      	mov	r0, r6
 800919a:	f7f7 fcb5 	bl	8000b08 <__aeabi_d2iz>
 800919e:	900c      	str	r0, [sp, #48]	; 0x30
 80091a0:	f7f7 f998 	bl	80004d4 <__aeabi_i2d>
 80091a4:	4602      	mov	r2, r0
 80091a6:	460b      	mov	r3, r1
 80091a8:	4630      	mov	r0, r6
 80091aa:	4639      	mov	r1, r7
 80091ac:	f7f7 f844 	bl	8000238 <__aeabi_dsub>
 80091b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091b2:	3330      	adds	r3, #48	; 0x30
 80091b4:	f805 3b01 	strb.w	r3, [r5], #1
 80091b8:	ec53 2b18 	vmov	r2, r3, d8
 80091bc:	4606      	mov	r6, r0
 80091be:	460f      	mov	r7, r1
 80091c0:	f7f7 fc64 	bl	8000a8c <__aeabi_dcmplt>
 80091c4:	2800      	cmp	r0, #0
 80091c6:	d165      	bne.n	8009294 <_dtoa_r+0x63c>
 80091c8:	4632      	mov	r2, r6
 80091ca:	463b      	mov	r3, r7
 80091cc:	4935      	ldr	r1, [pc, #212]	; (80092a4 <_dtoa_r+0x64c>)
 80091ce:	2000      	movs	r0, #0
 80091d0:	f7f7 f832 	bl	8000238 <__aeabi_dsub>
 80091d4:	ec53 2b18 	vmov	r2, r3, d8
 80091d8:	f7f7 fc58 	bl	8000a8c <__aeabi_dcmplt>
 80091dc:	2800      	cmp	r0, #0
 80091de:	f040 80b9 	bne.w	8009354 <_dtoa_r+0x6fc>
 80091e2:	9b02      	ldr	r3, [sp, #8]
 80091e4:	429d      	cmp	r5, r3
 80091e6:	f43f af75 	beq.w	80090d4 <_dtoa_r+0x47c>
 80091ea:	4b2f      	ldr	r3, [pc, #188]	; (80092a8 <_dtoa_r+0x650>)
 80091ec:	ec51 0b18 	vmov	r0, r1, d8
 80091f0:	2200      	movs	r2, #0
 80091f2:	f7f7 f9d9 	bl	80005a8 <__aeabi_dmul>
 80091f6:	4b2c      	ldr	r3, [pc, #176]	; (80092a8 <_dtoa_r+0x650>)
 80091f8:	ec41 0b18 	vmov	d8, r0, r1
 80091fc:	2200      	movs	r2, #0
 80091fe:	4630      	mov	r0, r6
 8009200:	4639      	mov	r1, r7
 8009202:	f7f7 f9d1 	bl	80005a8 <__aeabi_dmul>
 8009206:	4606      	mov	r6, r0
 8009208:	460f      	mov	r7, r1
 800920a:	e7c4      	b.n	8009196 <_dtoa_r+0x53e>
 800920c:	ec51 0b17 	vmov	r0, r1, d7
 8009210:	f7f7 f9ca 	bl	80005a8 <__aeabi_dmul>
 8009214:	9b02      	ldr	r3, [sp, #8]
 8009216:	9d00      	ldr	r5, [sp, #0]
 8009218:	930c      	str	r3, [sp, #48]	; 0x30
 800921a:	ec41 0b18 	vmov	d8, r0, r1
 800921e:	4639      	mov	r1, r7
 8009220:	4630      	mov	r0, r6
 8009222:	f7f7 fc71 	bl	8000b08 <__aeabi_d2iz>
 8009226:	9011      	str	r0, [sp, #68]	; 0x44
 8009228:	f7f7 f954 	bl	80004d4 <__aeabi_i2d>
 800922c:	4602      	mov	r2, r0
 800922e:	460b      	mov	r3, r1
 8009230:	4630      	mov	r0, r6
 8009232:	4639      	mov	r1, r7
 8009234:	f7f7 f800 	bl	8000238 <__aeabi_dsub>
 8009238:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800923a:	3330      	adds	r3, #48	; 0x30
 800923c:	f805 3b01 	strb.w	r3, [r5], #1
 8009240:	9b02      	ldr	r3, [sp, #8]
 8009242:	429d      	cmp	r5, r3
 8009244:	4606      	mov	r6, r0
 8009246:	460f      	mov	r7, r1
 8009248:	f04f 0200 	mov.w	r2, #0
 800924c:	d134      	bne.n	80092b8 <_dtoa_r+0x660>
 800924e:	4b19      	ldr	r3, [pc, #100]	; (80092b4 <_dtoa_r+0x65c>)
 8009250:	ec51 0b18 	vmov	r0, r1, d8
 8009254:	f7f6 fff2 	bl	800023c <__adddf3>
 8009258:	4602      	mov	r2, r0
 800925a:	460b      	mov	r3, r1
 800925c:	4630      	mov	r0, r6
 800925e:	4639      	mov	r1, r7
 8009260:	f7f7 fc32 	bl	8000ac8 <__aeabi_dcmpgt>
 8009264:	2800      	cmp	r0, #0
 8009266:	d175      	bne.n	8009354 <_dtoa_r+0x6fc>
 8009268:	ec53 2b18 	vmov	r2, r3, d8
 800926c:	4911      	ldr	r1, [pc, #68]	; (80092b4 <_dtoa_r+0x65c>)
 800926e:	2000      	movs	r0, #0
 8009270:	f7f6 ffe2 	bl	8000238 <__aeabi_dsub>
 8009274:	4602      	mov	r2, r0
 8009276:	460b      	mov	r3, r1
 8009278:	4630      	mov	r0, r6
 800927a:	4639      	mov	r1, r7
 800927c:	f7f7 fc06 	bl	8000a8c <__aeabi_dcmplt>
 8009280:	2800      	cmp	r0, #0
 8009282:	f43f af27 	beq.w	80090d4 <_dtoa_r+0x47c>
 8009286:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009288:	1e6b      	subs	r3, r5, #1
 800928a:	930c      	str	r3, [sp, #48]	; 0x30
 800928c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009290:	2b30      	cmp	r3, #48	; 0x30
 8009292:	d0f8      	beq.n	8009286 <_dtoa_r+0x62e>
 8009294:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009298:	e04a      	b.n	8009330 <_dtoa_r+0x6d8>
 800929a:	bf00      	nop
 800929c:	0800b048 	.word	0x0800b048
 80092a0:	0800b020 	.word	0x0800b020
 80092a4:	3ff00000 	.word	0x3ff00000
 80092a8:	40240000 	.word	0x40240000
 80092ac:	401c0000 	.word	0x401c0000
 80092b0:	40140000 	.word	0x40140000
 80092b4:	3fe00000 	.word	0x3fe00000
 80092b8:	4baf      	ldr	r3, [pc, #700]	; (8009578 <_dtoa_r+0x920>)
 80092ba:	f7f7 f975 	bl	80005a8 <__aeabi_dmul>
 80092be:	4606      	mov	r6, r0
 80092c0:	460f      	mov	r7, r1
 80092c2:	e7ac      	b.n	800921e <_dtoa_r+0x5c6>
 80092c4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80092c8:	9d00      	ldr	r5, [sp, #0]
 80092ca:	4642      	mov	r2, r8
 80092cc:	464b      	mov	r3, r9
 80092ce:	4630      	mov	r0, r6
 80092d0:	4639      	mov	r1, r7
 80092d2:	f7f7 fa93 	bl	80007fc <__aeabi_ddiv>
 80092d6:	f7f7 fc17 	bl	8000b08 <__aeabi_d2iz>
 80092da:	9002      	str	r0, [sp, #8]
 80092dc:	f7f7 f8fa 	bl	80004d4 <__aeabi_i2d>
 80092e0:	4642      	mov	r2, r8
 80092e2:	464b      	mov	r3, r9
 80092e4:	f7f7 f960 	bl	80005a8 <__aeabi_dmul>
 80092e8:	4602      	mov	r2, r0
 80092ea:	460b      	mov	r3, r1
 80092ec:	4630      	mov	r0, r6
 80092ee:	4639      	mov	r1, r7
 80092f0:	f7f6 ffa2 	bl	8000238 <__aeabi_dsub>
 80092f4:	9e02      	ldr	r6, [sp, #8]
 80092f6:	9f01      	ldr	r7, [sp, #4]
 80092f8:	3630      	adds	r6, #48	; 0x30
 80092fa:	f805 6b01 	strb.w	r6, [r5], #1
 80092fe:	9e00      	ldr	r6, [sp, #0]
 8009300:	1bae      	subs	r6, r5, r6
 8009302:	42b7      	cmp	r7, r6
 8009304:	4602      	mov	r2, r0
 8009306:	460b      	mov	r3, r1
 8009308:	d137      	bne.n	800937a <_dtoa_r+0x722>
 800930a:	f7f6 ff97 	bl	800023c <__adddf3>
 800930e:	4642      	mov	r2, r8
 8009310:	464b      	mov	r3, r9
 8009312:	4606      	mov	r6, r0
 8009314:	460f      	mov	r7, r1
 8009316:	f7f7 fbd7 	bl	8000ac8 <__aeabi_dcmpgt>
 800931a:	b9c8      	cbnz	r0, 8009350 <_dtoa_r+0x6f8>
 800931c:	4642      	mov	r2, r8
 800931e:	464b      	mov	r3, r9
 8009320:	4630      	mov	r0, r6
 8009322:	4639      	mov	r1, r7
 8009324:	f7f7 fba8 	bl	8000a78 <__aeabi_dcmpeq>
 8009328:	b110      	cbz	r0, 8009330 <_dtoa_r+0x6d8>
 800932a:	9b02      	ldr	r3, [sp, #8]
 800932c:	07d9      	lsls	r1, r3, #31
 800932e:	d40f      	bmi.n	8009350 <_dtoa_r+0x6f8>
 8009330:	4620      	mov	r0, r4
 8009332:	4659      	mov	r1, fp
 8009334:	f000 facc 	bl	80098d0 <_Bfree>
 8009338:	2300      	movs	r3, #0
 800933a:	702b      	strb	r3, [r5, #0]
 800933c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800933e:	f10a 0001 	add.w	r0, sl, #1
 8009342:	6018      	str	r0, [r3, #0]
 8009344:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009346:	2b00      	cmp	r3, #0
 8009348:	f43f acd8 	beq.w	8008cfc <_dtoa_r+0xa4>
 800934c:	601d      	str	r5, [r3, #0]
 800934e:	e4d5      	b.n	8008cfc <_dtoa_r+0xa4>
 8009350:	f8cd a01c 	str.w	sl, [sp, #28]
 8009354:	462b      	mov	r3, r5
 8009356:	461d      	mov	r5, r3
 8009358:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800935c:	2a39      	cmp	r2, #57	; 0x39
 800935e:	d108      	bne.n	8009372 <_dtoa_r+0x71a>
 8009360:	9a00      	ldr	r2, [sp, #0]
 8009362:	429a      	cmp	r2, r3
 8009364:	d1f7      	bne.n	8009356 <_dtoa_r+0x6fe>
 8009366:	9a07      	ldr	r2, [sp, #28]
 8009368:	9900      	ldr	r1, [sp, #0]
 800936a:	3201      	adds	r2, #1
 800936c:	9207      	str	r2, [sp, #28]
 800936e:	2230      	movs	r2, #48	; 0x30
 8009370:	700a      	strb	r2, [r1, #0]
 8009372:	781a      	ldrb	r2, [r3, #0]
 8009374:	3201      	adds	r2, #1
 8009376:	701a      	strb	r2, [r3, #0]
 8009378:	e78c      	b.n	8009294 <_dtoa_r+0x63c>
 800937a:	4b7f      	ldr	r3, [pc, #508]	; (8009578 <_dtoa_r+0x920>)
 800937c:	2200      	movs	r2, #0
 800937e:	f7f7 f913 	bl	80005a8 <__aeabi_dmul>
 8009382:	2200      	movs	r2, #0
 8009384:	2300      	movs	r3, #0
 8009386:	4606      	mov	r6, r0
 8009388:	460f      	mov	r7, r1
 800938a:	f7f7 fb75 	bl	8000a78 <__aeabi_dcmpeq>
 800938e:	2800      	cmp	r0, #0
 8009390:	d09b      	beq.n	80092ca <_dtoa_r+0x672>
 8009392:	e7cd      	b.n	8009330 <_dtoa_r+0x6d8>
 8009394:	9a08      	ldr	r2, [sp, #32]
 8009396:	2a00      	cmp	r2, #0
 8009398:	f000 80c4 	beq.w	8009524 <_dtoa_r+0x8cc>
 800939c:	9a05      	ldr	r2, [sp, #20]
 800939e:	2a01      	cmp	r2, #1
 80093a0:	f300 80a8 	bgt.w	80094f4 <_dtoa_r+0x89c>
 80093a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80093a6:	2a00      	cmp	r2, #0
 80093a8:	f000 80a0 	beq.w	80094ec <_dtoa_r+0x894>
 80093ac:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80093b0:	9e06      	ldr	r6, [sp, #24]
 80093b2:	4645      	mov	r5, r8
 80093b4:	9a04      	ldr	r2, [sp, #16]
 80093b6:	2101      	movs	r1, #1
 80093b8:	441a      	add	r2, r3
 80093ba:	4620      	mov	r0, r4
 80093bc:	4498      	add	r8, r3
 80093be:	9204      	str	r2, [sp, #16]
 80093c0:	f000 fb42 	bl	8009a48 <__i2b>
 80093c4:	4607      	mov	r7, r0
 80093c6:	2d00      	cmp	r5, #0
 80093c8:	dd0b      	ble.n	80093e2 <_dtoa_r+0x78a>
 80093ca:	9b04      	ldr	r3, [sp, #16]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	dd08      	ble.n	80093e2 <_dtoa_r+0x78a>
 80093d0:	42ab      	cmp	r3, r5
 80093d2:	9a04      	ldr	r2, [sp, #16]
 80093d4:	bfa8      	it	ge
 80093d6:	462b      	movge	r3, r5
 80093d8:	eba8 0803 	sub.w	r8, r8, r3
 80093dc:	1aed      	subs	r5, r5, r3
 80093de:	1ad3      	subs	r3, r2, r3
 80093e0:	9304      	str	r3, [sp, #16]
 80093e2:	9b06      	ldr	r3, [sp, #24]
 80093e4:	b1fb      	cbz	r3, 8009426 <_dtoa_r+0x7ce>
 80093e6:	9b08      	ldr	r3, [sp, #32]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	f000 809f 	beq.w	800952c <_dtoa_r+0x8d4>
 80093ee:	2e00      	cmp	r6, #0
 80093f0:	dd11      	ble.n	8009416 <_dtoa_r+0x7be>
 80093f2:	4639      	mov	r1, r7
 80093f4:	4632      	mov	r2, r6
 80093f6:	4620      	mov	r0, r4
 80093f8:	f000 fbe2 	bl	8009bc0 <__pow5mult>
 80093fc:	465a      	mov	r2, fp
 80093fe:	4601      	mov	r1, r0
 8009400:	4607      	mov	r7, r0
 8009402:	4620      	mov	r0, r4
 8009404:	f000 fb36 	bl	8009a74 <__multiply>
 8009408:	4659      	mov	r1, fp
 800940a:	9007      	str	r0, [sp, #28]
 800940c:	4620      	mov	r0, r4
 800940e:	f000 fa5f 	bl	80098d0 <_Bfree>
 8009412:	9b07      	ldr	r3, [sp, #28]
 8009414:	469b      	mov	fp, r3
 8009416:	9b06      	ldr	r3, [sp, #24]
 8009418:	1b9a      	subs	r2, r3, r6
 800941a:	d004      	beq.n	8009426 <_dtoa_r+0x7ce>
 800941c:	4659      	mov	r1, fp
 800941e:	4620      	mov	r0, r4
 8009420:	f000 fbce 	bl	8009bc0 <__pow5mult>
 8009424:	4683      	mov	fp, r0
 8009426:	2101      	movs	r1, #1
 8009428:	4620      	mov	r0, r4
 800942a:	f000 fb0d 	bl	8009a48 <__i2b>
 800942e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009430:	2b00      	cmp	r3, #0
 8009432:	4606      	mov	r6, r0
 8009434:	dd7c      	ble.n	8009530 <_dtoa_r+0x8d8>
 8009436:	461a      	mov	r2, r3
 8009438:	4601      	mov	r1, r0
 800943a:	4620      	mov	r0, r4
 800943c:	f000 fbc0 	bl	8009bc0 <__pow5mult>
 8009440:	9b05      	ldr	r3, [sp, #20]
 8009442:	2b01      	cmp	r3, #1
 8009444:	4606      	mov	r6, r0
 8009446:	dd76      	ble.n	8009536 <_dtoa_r+0x8de>
 8009448:	2300      	movs	r3, #0
 800944a:	9306      	str	r3, [sp, #24]
 800944c:	6933      	ldr	r3, [r6, #16]
 800944e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009452:	6918      	ldr	r0, [r3, #16]
 8009454:	f000 faa8 	bl	80099a8 <__hi0bits>
 8009458:	f1c0 0020 	rsb	r0, r0, #32
 800945c:	9b04      	ldr	r3, [sp, #16]
 800945e:	4418      	add	r0, r3
 8009460:	f010 001f 	ands.w	r0, r0, #31
 8009464:	f000 8086 	beq.w	8009574 <_dtoa_r+0x91c>
 8009468:	f1c0 0320 	rsb	r3, r0, #32
 800946c:	2b04      	cmp	r3, #4
 800946e:	dd7f      	ble.n	8009570 <_dtoa_r+0x918>
 8009470:	f1c0 001c 	rsb	r0, r0, #28
 8009474:	9b04      	ldr	r3, [sp, #16]
 8009476:	4403      	add	r3, r0
 8009478:	4480      	add	r8, r0
 800947a:	4405      	add	r5, r0
 800947c:	9304      	str	r3, [sp, #16]
 800947e:	f1b8 0f00 	cmp.w	r8, #0
 8009482:	dd05      	ble.n	8009490 <_dtoa_r+0x838>
 8009484:	4659      	mov	r1, fp
 8009486:	4642      	mov	r2, r8
 8009488:	4620      	mov	r0, r4
 800948a:	f000 fbf3 	bl	8009c74 <__lshift>
 800948e:	4683      	mov	fp, r0
 8009490:	9b04      	ldr	r3, [sp, #16]
 8009492:	2b00      	cmp	r3, #0
 8009494:	dd05      	ble.n	80094a2 <_dtoa_r+0x84a>
 8009496:	4631      	mov	r1, r6
 8009498:	461a      	mov	r2, r3
 800949a:	4620      	mov	r0, r4
 800949c:	f000 fbea 	bl	8009c74 <__lshift>
 80094a0:	4606      	mov	r6, r0
 80094a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d069      	beq.n	800957c <_dtoa_r+0x924>
 80094a8:	4631      	mov	r1, r6
 80094aa:	4658      	mov	r0, fp
 80094ac:	f000 fc4e 	bl	8009d4c <__mcmp>
 80094b0:	2800      	cmp	r0, #0
 80094b2:	da63      	bge.n	800957c <_dtoa_r+0x924>
 80094b4:	2300      	movs	r3, #0
 80094b6:	4659      	mov	r1, fp
 80094b8:	220a      	movs	r2, #10
 80094ba:	4620      	mov	r0, r4
 80094bc:	f000 fa2a 	bl	8009914 <__multadd>
 80094c0:	9b08      	ldr	r3, [sp, #32]
 80094c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80094c6:	4683      	mov	fp, r0
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	f000 818f 	beq.w	80097ec <_dtoa_r+0xb94>
 80094ce:	4639      	mov	r1, r7
 80094d0:	2300      	movs	r3, #0
 80094d2:	220a      	movs	r2, #10
 80094d4:	4620      	mov	r0, r4
 80094d6:	f000 fa1d 	bl	8009914 <__multadd>
 80094da:	f1b9 0f00 	cmp.w	r9, #0
 80094de:	4607      	mov	r7, r0
 80094e0:	f300 808e 	bgt.w	8009600 <_dtoa_r+0x9a8>
 80094e4:	9b05      	ldr	r3, [sp, #20]
 80094e6:	2b02      	cmp	r3, #2
 80094e8:	dc50      	bgt.n	800958c <_dtoa_r+0x934>
 80094ea:	e089      	b.n	8009600 <_dtoa_r+0x9a8>
 80094ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80094ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80094f2:	e75d      	b.n	80093b0 <_dtoa_r+0x758>
 80094f4:	9b01      	ldr	r3, [sp, #4]
 80094f6:	1e5e      	subs	r6, r3, #1
 80094f8:	9b06      	ldr	r3, [sp, #24]
 80094fa:	42b3      	cmp	r3, r6
 80094fc:	bfbf      	itttt	lt
 80094fe:	9b06      	ldrlt	r3, [sp, #24]
 8009500:	9606      	strlt	r6, [sp, #24]
 8009502:	1af2      	sublt	r2, r6, r3
 8009504:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8009506:	bfb6      	itet	lt
 8009508:	189b      	addlt	r3, r3, r2
 800950a:	1b9e      	subge	r6, r3, r6
 800950c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800950e:	9b01      	ldr	r3, [sp, #4]
 8009510:	bfb8      	it	lt
 8009512:	2600      	movlt	r6, #0
 8009514:	2b00      	cmp	r3, #0
 8009516:	bfb5      	itete	lt
 8009518:	eba8 0503 	sublt.w	r5, r8, r3
 800951c:	9b01      	ldrge	r3, [sp, #4]
 800951e:	2300      	movlt	r3, #0
 8009520:	4645      	movge	r5, r8
 8009522:	e747      	b.n	80093b4 <_dtoa_r+0x75c>
 8009524:	9e06      	ldr	r6, [sp, #24]
 8009526:	9f08      	ldr	r7, [sp, #32]
 8009528:	4645      	mov	r5, r8
 800952a:	e74c      	b.n	80093c6 <_dtoa_r+0x76e>
 800952c:	9a06      	ldr	r2, [sp, #24]
 800952e:	e775      	b.n	800941c <_dtoa_r+0x7c4>
 8009530:	9b05      	ldr	r3, [sp, #20]
 8009532:	2b01      	cmp	r3, #1
 8009534:	dc18      	bgt.n	8009568 <_dtoa_r+0x910>
 8009536:	9b02      	ldr	r3, [sp, #8]
 8009538:	b9b3      	cbnz	r3, 8009568 <_dtoa_r+0x910>
 800953a:	9b03      	ldr	r3, [sp, #12]
 800953c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009540:	b9a3      	cbnz	r3, 800956c <_dtoa_r+0x914>
 8009542:	9b03      	ldr	r3, [sp, #12]
 8009544:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009548:	0d1b      	lsrs	r3, r3, #20
 800954a:	051b      	lsls	r3, r3, #20
 800954c:	b12b      	cbz	r3, 800955a <_dtoa_r+0x902>
 800954e:	9b04      	ldr	r3, [sp, #16]
 8009550:	3301      	adds	r3, #1
 8009552:	9304      	str	r3, [sp, #16]
 8009554:	f108 0801 	add.w	r8, r8, #1
 8009558:	2301      	movs	r3, #1
 800955a:	9306      	str	r3, [sp, #24]
 800955c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800955e:	2b00      	cmp	r3, #0
 8009560:	f47f af74 	bne.w	800944c <_dtoa_r+0x7f4>
 8009564:	2001      	movs	r0, #1
 8009566:	e779      	b.n	800945c <_dtoa_r+0x804>
 8009568:	2300      	movs	r3, #0
 800956a:	e7f6      	b.n	800955a <_dtoa_r+0x902>
 800956c:	9b02      	ldr	r3, [sp, #8]
 800956e:	e7f4      	b.n	800955a <_dtoa_r+0x902>
 8009570:	d085      	beq.n	800947e <_dtoa_r+0x826>
 8009572:	4618      	mov	r0, r3
 8009574:	301c      	adds	r0, #28
 8009576:	e77d      	b.n	8009474 <_dtoa_r+0x81c>
 8009578:	40240000 	.word	0x40240000
 800957c:	9b01      	ldr	r3, [sp, #4]
 800957e:	2b00      	cmp	r3, #0
 8009580:	dc38      	bgt.n	80095f4 <_dtoa_r+0x99c>
 8009582:	9b05      	ldr	r3, [sp, #20]
 8009584:	2b02      	cmp	r3, #2
 8009586:	dd35      	ble.n	80095f4 <_dtoa_r+0x99c>
 8009588:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800958c:	f1b9 0f00 	cmp.w	r9, #0
 8009590:	d10d      	bne.n	80095ae <_dtoa_r+0x956>
 8009592:	4631      	mov	r1, r6
 8009594:	464b      	mov	r3, r9
 8009596:	2205      	movs	r2, #5
 8009598:	4620      	mov	r0, r4
 800959a:	f000 f9bb 	bl	8009914 <__multadd>
 800959e:	4601      	mov	r1, r0
 80095a0:	4606      	mov	r6, r0
 80095a2:	4658      	mov	r0, fp
 80095a4:	f000 fbd2 	bl	8009d4c <__mcmp>
 80095a8:	2800      	cmp	r0, #0
 80095aa:	f73f adbd 	bgt.w	8009128 <_dtoa_r+0x4d0>
 80095ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095b0:	9d00      	ldr	r5, [sp, #0]
 80095b2:	ea6f 0a03 	mvn.w	sl, r3
 80095b6:	f04f 0800 	mov.w	r8, #0
 80095ba:	4631      	mov	r1, r6
 80095bc:	4620      	mov	r0, r4
 80095be:	f000 f987 	bl	80098d0 <_Bfree>
 80095c2:	2f00      	cmp	r7, #0
 80095c4:	f43f aeb4 	beq.w	8009330 <_dtoa_r+0x6d8>
 80095c8:	f1b8 0f00 	cmp.w	r8, #0
 80095cc:	d005      	beq.n	80095da <_dtoa_r+0x982>
 80095ce:	45b8      	cmp	r8, r7
 80095d0:	d003      	beq.n	80095da <_dtoa_r+0x982>
 80095d2:	4641      	mov	r1, r8
 80095d4:	4620      	mov	r0, r4
 80095d6:	f000 f97b 	bl	80098d0 <_Bfree>
 80095da:	4639      	mov	r1, r7
 80095dc:	4620      	mov	r0, r4
 80095de:	f000 f977 	bl	80098d0 <_Bfree>
 80095e2:	e6a5      	b.n	8009330 <_dtoa_r+0x6d8>
 80095e4:	2600      	movs	r6, #0
 80095e6:	4637      	mov	r7, r6
 80095e8:	e7e1      	b.n	80095ae <_dtoa_r+0x956>
 80095ea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80095ec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80095f0:	4637      	mov	r7, r6
 80095f2:	e599      	b.n	8009128 <_dtoa_r+0x4d0>
 80095f4:	9b08      	ldr	r3, [sp, #32]
 80095f6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	f000 80fd 	beq.w	80097fa <_dtoa_r+0xba2>
 8009600:	2d00      	cmp	r5, #0
 8009602:	dd05      	ble.n	8009610 <_dtoa_r+0x9b8>
 8009604:	4639      	mov	r1, r7
 8009606:	462a      	mov	r2, r5
 8009608:	4620      	mov	r0, r4
 800960a:	f000 fb33 	bl	8009c74 <__lshift>
 800960e:	4607      	mov	r7, r0
 8009610:	9b06      	ldr	r3, [sp, #24]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d05c      	beq.n	80096d0 <_dtoa_r+0xa78>
 8009616:	6879      	ldr	r1, [r7, #4]
 8009618:	4620      	mov	r0, r4
 800961a:	f000 f919 	bl	8009850 <_Balloc>
 800961e:	4605      	mov	r5, r0
 8009620:	b928      	cbnz	r0, 800962e <_dtoa_r+0x9d6>
 8009622:	4b80      	ldr	r3, [pc, #512]	; (8009824 <_dtoa_r+0xbcc>)
 8009624:	4602      	mov	r2, r0
 8009626:	f240 21ea 	movw	r1, #746	; 0x2ea
 800962a:	f7ff bb2e 	b.w	8008c8a <_dtoa_r+0x32>
 800962e:	693a      	ldr	r2, [r7, #16]
 8009630:	3202      	adds	r2, #2
 8009632:	0092      	lsls	r2, r2, #2
 8009634:	f107 010c 	add.w	r1, r7, #12
 8009638:	300c      	adds	r0, #12
 800963a:	f7fe fd17 	bl	800806c <memcpy>
 800963e:	2201      	movs	r2, #1
 8009640:	4629      	mov	r1, r5
 8009642:	4620      	mov	r0, r4
 8009644:	f000 fb16 	bl	8009c74 <__lshift>
 8009648:	9b00      	ldr	r3, [sp, #0]
 800964a:	3301      	adds	r3, #1
 800964c:	9301      	str	r3, [sp, #4]
 800964e:	9b00      	ldr	r3, [sp, #0]
 8009650:	444b      	add	r3, r9
 8009652:	9307      	str	r3, [sp, #28]
 8009654:	9b02      	ldr	r3, [sp, #8]
 8009656:	f003 0301 	and.w	r3, r3, #1
 800965a:	46b8      	mov	r8, r7
 800965c:	9306      	str	r3, [sp, #24]
 800965e:	4607      	mov	r7, r0
 8009660:	9b01      	ldr	r3, [sp, #4]
 8009662:	4631      	mov	r1, r6
 8009664:	3b01      	subs	r3, #1
 8009666:	4658      	mov	r0, fp
 8009668:	9302      	str	r3, [sp, #8]
 800966a:	f7ff fa68 	bl	8008b3e <quorem>
 800966e:	4603      	mov	r3, r0
 8009670:	3330      	adds	r3, #48	; 0x30
 8009672:	9004      	str	r0, [sp, #16]
 8009674:	4641      	mov	r1, r8
 8009676:	4658      	mov	r0, fp
 8009678:	9308      	str	r3, [sp, #32]
 800967a:	f000 fb67 	bl	8009d4c <__mcmp>
 800967e:	463a      	mov	r2, r7
 8009680:	4681      	mov	r9, r0
 8009682:	4631      	mov	r1, r6
 8009684:	4620      	mov	r0, r4
 8009686:	f000 fb7d 	bl	8009d84 <__mdiff>
 800968a:	68c2      	ldr	r2, [r0, #12]
 800968c:	9b08      	ldr	r3, [sp, #32]
 800968e:	4605      	mov	r5, r0
 8009690:	bb02      	cbnz	r2, 80096d4 <_dtoa_r+0xa7c>
 8009692:	4601      	mov	r1, r0
 8009694:	4658      	mov	r0, fp
 8009696:	f000 fb59 	bl	8009d4c <__mcmp>
 800969a:	9b08      	ldr	r3, [sp, #32]
 800969c:	4602      	mov	r2, r0
 800969e:	4629      	mov	r1, r5
 80096a0:	4620      	mov	r0, r4
 80096a2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80096a6:	f000 f913 	bl	80098d0 <_Bfree>
 80096aa:	9b05      	ldr	r3, [sp, #20]
 80096ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096ae:	9d01      	ldr	r5, [sp, #4]
 80096b0:	ea43 0102 	orr.w	r1, r3, r2
 80096b4:	9b06      	ldr	r3, [sp, #24]
 80096b6:	430b      	orrs	r3, r1
 80096b8:	9b08      	ldr	r3, [sp, #32]
 80096ba:	d10d      	bne.n	80096d8 <_dtoa_r+0xa80>
 80096bc:	2b39      	cmp	r3, #57	; 0x39
 80096be:	d029      	beq.n	8009714 <_dtoa_r+0xabc>
 80096c0:	f1b9 0f00 	cmp.w	r9, #0
 80096c4:	dd01      	ble.n	80096ca <_dtoa_r+0xa72>
 80096c6:	9b04      	ldr	r3, [sp, #16]
 80096c8:	3331      	adds	r3, #49	; 0x31
 80096ca:	9a02      	ldr	r2, [sp, #8]
 80096cc:	7013      	strb	r3, [r2, #0]
 80096ce:	e774      	b.n	80095ba <_dtoa_r+0x962>
 80096d0:	4638      	mov	r0, r7
 80096d2:	e7b9      	b.n	8009648 <_dtoa_r+0x9f0>
 80096d4:	2201      	movs	r2, #1
 80096d6:	e7e2      	b.n	800969e <_dtoa_r+0xa46>
 80096d8:	f1b9 0f00 	cmp.w	r9, #0
 80096dc:	db06      	blt.n	80096ec <_dtoa_r+0xa94>
 80096de:	9905      	ldr	r1, [sp, #20]
 80096e0:	ea41 0909 	orr.w	r9, r1, r9
 80096e4:	9906      	ldr	r1, [sp, #24]
 80096e6:	ea59 0101 	orrs.w	r1, r9, r1
 80096ea:	d120      	bne.n	800972e <_dtoa_r+0xad6>
 80096ec:	2a00      	cmp	r2, #0
 80096ee:	ddec      	ble.n	80096ca <_dtoa_r+0xa72>
 80096f0:	4659      	mov	r1, fp
 80096f2:	2201      	movs	r2, #1
 80096f4:	4620      	mov	r0, r4
 80096f6:	9301      	str	r3, [sp, #4]
 80096f8:	f000 fabc 	bl	8009c74 <__lshift>
 80096fc:	4631      	mov	r1, r6
 80096fe:	4683      	mov	fp, r0
 8009700:	f000 fb24 	bl	8009d4c <__mcmp>
 8009704:	2800      	cmp	r0, #0
 8009706:	9b01      	ldr	r3, [sp, #4]
 8009708:	dc02      	bgt.n	8009710 <_dtoa_r+0xab8>
 800970a:	d1de      	bne.n	80096ca <_dtoa_r+0xa72>
 800970c:	07da      	lsls	r2, r3, #31
 800970e:	d5dc      	bpl.n	80096ca <_dtoa_r+0xa72>
 8009710:	2b39      	cmp	r3, #57	; 0x39
 8009712:	d1d8      	bne.n	80096c6 <_dtoa_r+0xa6e>
 8009714:	9a02      	ldr	r2, [sp, #8]
 8009716:	2339      	movs	r3, #57	; 0x39
 8009718:	7013      	strb	r3, [r2, #0]
 800971a:	462b      	mov	r3, r5
 800971c:	461d      	mov	r5, r3
 800971e:	3b01      	subs	r3, #1
 8009720:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009724:	2a39      	cmp	r2, #57	; 0x39
 8009726:	d050      	beq.n	80097ca <_dtoa_r+0xb72>
 8009728:	3201      	adds	r2, #1
 800972a:	701a      	strb	r2, [r3, #0]
 800972c:	e745      	b.n	80095ba <_dtoa_r+0x962>
 800972e:	2a00      	cmp	r2, #0
 8009730:	dd03      	ble.n	800973a <_dtoa_r+0xae2>
 8009732:	2b39      	cmp	r3, #57	; 0x39
 8009734:	d0ee      	beq.n	8009714 <_dtoa_r+0xabc>
 8009736:	3301      	adds	r3, #1
 8009738:	e7c7      	b.n	80096ca <_dtoa_r+0xa72>
 800973a:	9a01      	ldr	r2, [sp, #4]
 800973c:	9907      	ldr	r1, [sp, #28]
 800973e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009742:	428a      	cmp	r2, r1
 8009744:	d02a      	beq.n	800979c <_dtoa_r+0xb44>
 8009746:	4659      	mov	r1, fp
 8009748:	2300      	movs	r3, #0
 800974a:	220a      	movs	r2, #10
 800974c:	4620      	mov	r0, r4
 800974e:	f000 f8e1 	bl	8009914 <__multadd>
 8009752:	45b8      	cmp	r8, r7
 8009754:	4683      	mov	fp, r0
 8009756:	f04f 0300 	mov.w	r3, #0
 800975a:	f04f 020a 	mov.w	r2, #10
 800975e:	4641      	mov	r1, r8
 8009760:	4620      	mov	r0, r4
 8009762:	d107      	bne.n	8009774 <_dtoa_r+0xb1c>
 8009764:	f000 f8d6 	bl	8009914 <__multadd>
 8009768:	4680      	mov	r8, r0
 800976a:	4607      	mov	r7, r0
 800976c:	9b01      	ldr	r3, [sp, #4]
 800976e:	3301      	adds	r3, #1
 8009770:	9301      	str	r3, [sp, #4]
 8009772:	e775      	b.n	8009660 <_dtoa_r+0xa08>
 8009774:	f000 f8ce 	bl	8009914 <__multadd>
 8009778:	4639      	mov	r1, r7
 800977a:	4680      	mov	r8, r0
 800977c:	2300      	movs	r3, #0
 800977e:	220a      	movs	r2, #10
 8009780:	4620      	mov	r0, r4
 8009782:	f000 f8c7 	bl	8009914 <__multadd>
 8009786:	4607      	mov	r7, r0
 8009788:	e7f0      	b.n	800976c <_dtoa_r+0xb14>
 800978a:	f1b9 0f00 	cmp.w	r9, #0
 800978e:	9a00      	ldr	r2, [sp, #0]
 8009790:	bfcc      	ite	gt
 8009792:	464d      	movgt	r5, r9
 8009794:	2501      	movle	r5, #1
 8009796:	4415      	add	r5, r2
 8009798:	f04f 0800 	mov.w	r8, #0
 800979c:	4659      	mov	r1, fp
 800979e:	2201      	movs	r2, #1
 80097a0:	4620      	mov	r0, r4
 80097a2:	9301      	str	r3, [sp, #4]
 80097a4:	f000 fa66 	bl	8009c74 <__lshift>
 80097a8:	4631      	mov	r1, r6
 80097aa:	4683      	mov	fp, r0
 80097ac:	f000 face 	bl	8009d4c <__mcmp>
 80097b0:	2800      	cmp	r0, #0
 80097b2:	dcb2      	bgt.n	800971a <_dtoa_r+0xac2>
 80097b4:	d102      	bne.n	80097bc <_dtoa_r+0xb64>
 80097b6:	9b01      	ldr	r3, [sp, #4]
 80097b8:	07db      	lsls	r3, r3, #31
 80097ba:	d4ae      	bmi.n	800971a <_dtoa_r+0xac2>
 80097bc:	462b      	mov	r3, r5
 80097be:	461d      	mov	r5, r3
 80097c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80097c4:	2a30      	cmp	r2, #48	; 0x30
 80097c6:	d0fa      	beq.n	80097be <_dtoa_r+0xb66>
 80097c8:	e6f7      	b.n	80095ba <_dtoa_r+0x962>
 80097ca:	9a00      	ldr	r2, [sp, #0]
 80097cc:	429a      	cmp	r2, r3
 80097ce:	d1a5      	bne.n	800971c <_dtoa_r+0xac4>
 80097d0:	f10a 0a01 	add.w	sl, sl, #1
 80097d4:	2331      	movs	r3, #49	; 0x31
 80097d6:	e779      	b.n	80096cc <_dtoa_r+0xa74>
 80097d8:	4b13      	ldr	r3, [pc, #76]	; (8009828 <_dtoa_r+0xbd0>)
 80097da:	f7ff baaf 	b.w	8008d3c <_dtoa_r+0xe4>
 80097de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	f47f aa86 	bne.w	8008cf2 <_dtoa_r+0x9a>
 80097e6:	4b11      	ldr	r3, [pc, #68]	; (800982c <_dtoa_r+0xbd4>)
 80097e8:	f7ff baa8 	b.w	8008d3c <_dtoa_r+0xe4>
 80097ec:	f1b9 0f00 	cmp.w	r9, #0
 80097f0:	dc03      	bgt.n	80097fa <_dtoa_r+0xba2>
 80097f2:	9b05      	ldr	r3, [sp, #20]
 80097f4:	2b02      	cmp	r3, #2
 80097f6:	f73f aec9 	bgt.w	800958c <_dtoa_r+0x934>
 80097fa:	9d00      	ldr	r5, [sp, #0]
 80097fc:	4631      	mov	r1, r6
 80097fe:	4658      	mov	r0, fp
 8009800:	f7ff f99d 	bl	8008b3e <quorem>
 8009804:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009808:	f805 3b01 	strb.w	r3, [r5], #1
 800980c:	9a00      	ldr	r2, [sp, #0]
 800980e:	1aaa      	subs	r2, r5, r2
 8009810:	4591      	cmp	r9, r2
 8009812:	ddba      	ble.n	800978a <_dtoa_r+0xb32>
 8009814:	4659      	mov	r1, fp
 8009816:	2300      	movs	r3, #0
 8009818:	220a      	movs	r2, #10
 800981a:	4620      	mov	r0, r4
 800981c:	f000 f87a 	bl	8009914 <__multadd>
 8009820:	4683      	mov	fp, r0
 8009822:	e7eb      	b.n	80097fc <_dtoa_r+0xba4>
 8009824:	0800afaf 	.word	0x0800afaf
 8009828:	0800af08 	.word	0x0800af08
 800982c:	0800af2c 	.word	0x0800af2c

08009830 <_localeconv_r>:
 8009830:	4800      	ldr	r0, [pc, #0]	; (8009834 <_localeconv_r+0x4>)
 8009832:	4770      	bx	lr
 8009834:	20000164 	.word	0x20000164

08009838 <__malloc_lock>:
 8009838:	4801      	ldr	r0, [pc, #4]	; (8009840 <__malloc_lock+0x8>)
 800983a:	f000 bd22 	b.w	800a282 <__retarget_lock_acquire_recursive>
 800983e:	bf00      	nop
 8009840:	200029dc 	.word	0x200029dc

08009844 <__malloc_unlock>:
 8009844:	4801      	ldr	r0, [pc, #4]	; (800984c <__malloc_unlock+0x8>)
 8009846:	f000 bd1d 	b.w	800a284 <__retarget_lock_release_recursive>
 800984a:	bf00      	nop
 800984c:	200029dc 	.word	0x200029dc

08009850 <_Balloc>:
 8009850:	b570      	push	{r4, r5, r6, lr}
 8009852:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009854:	4604      	mov	r4, r0
 8009856:	460d      	mov	r5, r1
 8009858:	b976      	cbnz	r6, 8009878 <_Balloc+0x28>
 800985a:	2010      	movs	r0, #16
 800985c:	f7fe fbfe 	bl	800805c <malloc>
 8009860:	4602      	mov	r2, r0
 8009862:	6260      	str	r0, [r4, #36]	; 0x24
 8009864:	b920      	cbnz	r0, 8009870 <_Balloc+0x20>
 8009866:	4b18      	ldr	r3, [pc, #96]	; (80098c8 <_Balloc+0x78>)
 8009868:	4818      	ldr	r0, [pc, #96]	; (80098cc <_Balloc+0x7c>)
 800986a:	2166      	movs	r1, #102	; 0x66
 800986c:	f000 fcd8 	bl	800a220 <__assert_func>
 8009870:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009874:	6006      	str	r6, [r0, #0]
 8009876:	60c6      	str	r6, [r0, #12]
 8009878:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800987a:	68f3      	ldr	r3, [r6, #12]
 800987c:	b183      	cbz	r3, 80098a0 <_Balloc+0x50>
 800987e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009880:	68db      	ldr	r3, [r3, #12]
 8009882:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009886:	b9b8      	cbnz	r0, 80098b8 <_Balloc+0x68>
 8009888:	2101      	movs	r1, #1
 800988a:	fa01 f605 	lsl.w	r6, r1, r5
 800988e:	1d72      	adds	r2, r6, #5
 8009890:	0092      	lsls	r2, r2, #2
 8009892:	4620      	mov	r0, r4
 8009894:	f000 fb5a 	bl	8009f4c <_calloc_r>
 8009898:	b160      	cbz	r0, 80098b4 <_Balloc+0x64>
 800989a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800989e:	e00e      	b.n	80098be <_Balloc+0x6e>
 80098a0:	2221      	movs	r2, #33	; 0x21
 80098a2:	2104      	movs	r1, #4
 80098a4:	4620      	mov	r0, r4
 80098a6:	f000 fb51 	bl	8009f4c <_calloc_r>
 80098aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098ac:	60f0      	str	r0, [r6, #12]
 80098ae:	68db      	ldr	r3, [r3, #12]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d1e4      	bne.n	800987e <_Balloc+0x2e>
 80098b4:	2000      	movs	r0, #0
 80098b6:	bd70      	pop	{r4, r5, r6, pc}
 80098b8:	6802      	ldr	r2, [r0, #0]
 80098ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80098be:	2300      	movs	r3, #0
 80098c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80098c4:	e7f7      	b.n	80098b6 <_Balloc+0x66>
 80098c6:	bf00      	nop
 80098c8:	0800af39 	.word	0x0800af39
 80098cc:	0800afc0 	.word	0x0800afc0

080098d0 <_Bfree>:
 80098d0:	b570      	push	{r4, r5, r6, lr}
 80098d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80098d4:	4605      	mov	r5, r0
 80098d6:	460c      	mov	r4, r1
 80098d8:	b976      	cbnz	r6, 80098f8 <_Bfree+0x28>
 80098da:	2010      	movs	r0, #16
 80098dc:	f7fe fbbe 	bl	800805c <malloc>
 80098e0:	4602      	mov	r2, r0
 80098e2:	6268      	str	r0, [r5, #36]	; 0x24
 80098e4:	b920      	cbnz	r0, 80098f0 <_Bfree+0x20>
 80098e6:	4b09      	ldr	r3, [pc, #36]	; (800990c <_Bfree+0x3c>)
 80098e8:	4809      	ldr	r0, [pc, #36]	; (8009910 <_Bfree+0x40>)
 80098ea:	218a      	movs	r1, #138	; 0x8a
 80098ec:	f000 fc98 	bl	800a220 <__assert_func>
 80098f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80098f4:	6006      	str	r6, [r0, #0]
 80098f6:	60c6      	str	r6, [r0, #12]
 80098f8:	b13c      	cbz	r4, 800990a <_Bfree+0x3a>
 80098fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80098fc:	6862      	ldr	r2, [r4, #4]
 80098fe:	68db      	ldr	r3, [r3, #12]
 8009900:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009904:	6021      	str	r1, [r4, #0]
 8009906:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800990a:	bd70      	pop	{r4, r5, r6, pc}
 800990c:	0800af39 	.word	0x0800af39
 8009910:	0800afc0 	.word	0x0800afc0

08009914 <__multadd>:
 8009914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009918:	690e      	ldr	r6, [r1, #16]
 800991a:	4607      	mov	r7, r0
 800991c:	4698      	mov	r8, r3
 800991e:	460c      	mov	r4, r1
 8009920:	f101 0014 	add.w	r0, r1, #20
 8009924:	2300      	movs	r3, #0
 8009926:	6805      	ldr	r5, [r0, #0]
 8009928:	b2a9      	uxth	r1, r5
 800992a:	fb02 8101 	mla	r1, r2, r1, r8
 800992e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009932:	0c2d      	lsrs	r5, r5, #16
 8009934:	fb02 c505 	mla	r5, r2, r5, ip
 8009938:	b289      	uxth	r1, r1
 800993a:	3301      	adds	r3, #1
 800993c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009940:	429e      	cmp	r6, r3
 8009942:	f840 1b04 	str.w	r1, [r0], #4
 8009946:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800994a:	dcec      	bgt.n	8009926 <__multadd+0x12>
 800994c:	f1b8 0f00 	cmp.w	r8, #0
 8009950:	d022      	beq.n	8009998 <__multadd+0x84>
 8009952:	68a3      	ldr	r3, [r4, #8]
 8009954:	42b3      	cmp	r3, r6
 8009956:	dc19      	bgt.n	800998c <__multadd+0x78>
 8009958:	6861      	ldr	r1, [r4, #4]
 800995a:	4638      	mov	r0, r7
 800995c:	3101      	adds	r1, #1
 800995e:	f7ff ff77 	bl	8009850 <_Balloc>
 8009962:	4605      	mov	r5, r0
 8009964:	b928      	cbnz	r0, 8009972 <__multadd+0x5e>
 8009966:	4602      	mov	r2, r0
 8009968:	4b0d      	ldr	r3, [pc, #52]	; (80099a0 <__multadd+0x8c>)
 800996a:	480e      	ldr	r0, [pc, #56]	; (80099a4 <__multadd+0x90>)
 800996c:	21b5      	movs	r1, #181	; 0xb5
 800996e:	f000 fc57 	bl	800a220 <__assert_func>
 8009972:	6922      	ldr	r2, [r4, #16]
 8009974:	3202      	adds	r2, #2
 8009976:	f104 010c 	add.w	r1, r4, #12
 800997a:	0092      	lsls	r2, r2, #2
 800997c:	300c      	adds	r0, #12
 800997e:	f7fe fb75 	bl	800806c <memcpy>
 8009982:	4621      	mov	r1, r4
 8009984:	4638      	mov	r0, r7
 8009986:	f7ff ffa3 	bl	80098d0 <_Bfree>
 800998a:	462c      	mov	r4, r5
 800998c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009990:	3601      	adds	r6, #1
 8009992:	f8c3 8014 	str.w	r8, [r3, #20]
 8009996:	6126      	str	r6, [r4, #16]
 8009998:	4620      	mov	r0, r4
 800999a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800999e:	bf00      	nop
 80099a0:	0800afaf 	.word	0x0800afaf
 80099a4:	0800afc0 	.word	0x0800afc0

080099a8 <__hi0bits>:
 80099a8:	0c03      	lsrs	r3, r0, #16
 80099aa:	041b      	lsls	r3, r3, #16
 80099ac:	b9d3      	cbnz	r3, 80099e4 <__hi0bits+0x3c>
 80099ae:	0400      	lsls	r0, r0, #16
 80099b0:	2310      	movs	r3, #16
 80099b2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80099b6:	bf04      	itt	eq
 80099b8:	0200      	lsleq	r0, r0, #8
 80099ba:	3308      	addeq	r3, #8
 80099bc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80099c0:	bf04      	itt	eq
 80099c2:	0100      	lsleq	r0, r0, #4
 80099c4:	3304      	addeq	r3, #4
 80099c6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80099ca:	bf04      	itt	eq
 80099cc:	0080      	lsleq	r0, r0, #2
 80099ce:	3302      	addeq	r3, #2
 80099d0:	2800      	cmp	r0, #0
 80099d2:	db05      	blt.n	80099e0 <__hi0bits+0x38>
 80099d4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80099d8:	f103 0301 	add.w	r3, r3, #1
 80099dc:	bf08      	it	eq
 80099de:	2320      	moveq	r3, #32
 80099e0:	4618      	mov	r0, r3
 80099e2:	4770      	bx	lr
 80099e4:	2300      	movs	r3, #0
 80099e6:	e7e4      	b.n	80099b2 <__hi0bits+0xa>

080099e8 <__lo0bits>:
 80099e8:	6803      	ldr	r3, [r0, #0]
 80099ea:	f013 0207 	ands.w	r2, r3, #7
 80099ee:	4601      	mov	r1, r0
 80099f0:	d00b      	beq.n	8009a0a <__lo0bits+0x22>
 80099f2:	07da      	lsls	r2, r3, #31
 80099f4:	d424      	bmi.n	8009a40 <__lo0bits+0x58>
 80099f6:	0798      	lsls	r0, r3, #30
 80099f8:	bf49      	itett	mi
 80099fa:	085b      	lsrmi	r3, r3, #1
 80099fc:	089b      	lsrpl	r3, r3, #2
 80099fe:	2001      	movmi	r0, #1
 8009a00:	600b      	strmi	r3, [r1, #0]
 8009a02:	bf5c      	itt	pl
 8009a04:	600b      	strpl	r3, [r1, #0]
 8009a06:	2002      	movpl	r0, #2
 8009a08:	4770      	bx	lr
 8009a0a:	b298      	uxth	r0, r3
 8009a0c:	b9b0      	cbnz	r0, 8009a3c <__lo0bits+0x54>
 8009a0e:	0c1b      	lsrs	r3, r3, #16
 8009a10:	2010      	movs	r0, #16
 8009a12:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009a16:	bf04      	itt	eq
 8009a18:	0a1b      	lsreq	r3, r3, #8
 8009a1a:	3008      	addeq	r0, #8
 8009a1c:	071a      	lsls	r2, r3, #28
 8009a1e:	bf04      	itt	eq
 8009a20:	091b      	lsreq	r3, r3, #4
 8009a22:	3004      	addeq	r0, #4
 8009a24:	079a      	lsls	r2, r3, #30
 8009a26:	bf04      	itt	eq
 8009a28:	089b      	lsreq	r3, r3, #2
 8009a2a:	3002      	addeq	r0, #2
 8009a2c:	07da      	lsls	r2, r3, #31
 8009a2e:	d403      	bmi.n	8009a38 <__lo0bits+0x50>
 8009a30:	085b      	lsrs	r3, r3, #1
 8009a32:	f100 0001 	add.w	r0, r0, #1
 8009a36:	d005      	beq.n	8009a44 <__lo0bits+0x5c>
 8009a38:	600b      	str	r3, [r1, #0]
 8009a3a:	4770      	bx	lr
 8009a3c:	4610      	mov	r0, r2
 8009a3e:	e7e8      	b.n	8009a12 <__lo0bits+0x2a>
 8009a40:	2000      	movs	r0, #0
 8009a42:	4770      	bx	lr
 8009a44:	2020      	movs	r0, #32
 8009a46:	4770      	bx	lr

08009a48 <__i2b>:
 8009a48:	b510      	push	{r4, lr}
 8009a4a:	460c      	mov	r4, r1
 8009a4c:	2101      	movs	r1, #1
 8009a4e:	f7ff feff 	bl	8009850 <_Balloc>
 8009a52:	4602      	mov	r2, r0
 8009a54:	b928      	cbnz	r0, 8009a62 <__i2b+0x1a>
 8009a56:	4b05      	ldr	r3, [pc, #20]	; (8009a6c <__i2b+0x24>)
 8009a58:	4805      	ldr	r0, [pc, #20]	; (8009a70 <__i2b+0x28>)
 8009a5a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009a5e:	f000 fbdf 	bl	800a220 <__assert_func>
 8009a62:	2301      	movs	r3, #1
 8009a64:	6144      	str	r4, [r0, #20]
 8009a66:	6103      	str	r3, [r0, #16]
 8009a68:	bd10      	pop	{r4, pc}
 8009a6a:	bf00      	nop
 8009a6c:	0800afaf 	.word	0x0800afaf
 8009a70:	0800afc0 	.word	0x0800afc0

08009a74 <__multiply>:
 8009a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a78:	4614      	mov	r4, r2
 8009a7a:	690a      	ldr	r2, [r1, #16]
 8009a7c:	6923      	ldr	r3, [r4, #16]
 8009a7e:	429a      	cmp	r2, r3
 8009a80:	bfb8      	it	lt
 8009a82:	460b      	movlt	r3, r1
 8009a84:	460d      	mov	r5, r1
 8009a86:	bfbc      	itt	lt
 8009a88:	4625      	movlt	r5, r4
 8009a8a:	461c      	movlt	r4, r3
 8009a8c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009a90:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009a94:	68ab      	ldr	r3, [r5, #8]
 8009a96:	6869      	ldr	r1, [r5, #4]
 8009a98:	eb0a 0709 	add.w	r7, sl, r9
 8009a9c:	42bb      	cmp	r3, r7
 8009a9e:	b085      	sub	sp, #20
 8009aa0:	bfb8      	it	lt
 8009aa2:	3101      	addlt	r1, #1
 8009aa4:	f7ff fed4 	bl	8009850 <_Balloc>
 8009aa8:	b930      	cbnz	r0, 8009ab8 <__multiply+0x44>
 8009aaa:	4602      	mov	r2, r0
 8009aac:	4b42      	ldr	r3, [pc, #264]	; (8009bb8 <__multiply+0x144>)
 8009aae:	4843      	ldr	r0, [pc, #268]	; (8009bbc <__multiply+0x148>)
 8009ab0:	f240 115d 	movw	r1, #349	; 0x15d
 8009ab4:	f000 fbb4 	bl	800a220 <__assert_func>
 8009ab8:	f100 0614 	add.w	r6, r0, #20
 8009abc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009ac0:	4633      	mov	r3, r6
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	4543      	cmp	r3, r8
 8009ac6:	d31e      	bcc.n	8009b06 <__multiply+0x92>
 8009ac8:	f105 0c14 	add.w	ip, r5, #20
 8009acc:	f104 0314 	add.w	r3, r4, #20
 8009ad0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009ad4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009ad8:	9202      	str	r2, [sp, #8]
 8009ada:	ebac 0205 	sub.w	r2, ip, r5
 8009ade:	3a15      	subs	r2, #21
 8009ae0:	f022 0203 	bic.w	r2, r2, #3
 8009ae4:	3204      	adds	r2, #4
 8009ae6:	f105 0115 	add.w	r1, r5, #21
 8009aea:	458c      	cmp	ip, r1
 8009aec:	bf38      	it	cc
 8009aee:	2204      	movcc	r2, #4
 8009af0:	9201      	str	r2, [sp, #4]
 8009af2:	9a02      	ldr	r2, [sp, #8]
 8009af4:	9303      	str	r3, [sp, #12]
 8009af6:	429a      	cmp	r2, r3
 8009af8:	d808      	bhi.n	8009b0c <__multiply+0x98>
 8009afa:	2f00      	cmp	r7, #0
 8009afc:	dc55      	bgt.n	8009baa <__multiply+0x136>
 8009afe:	6107      	str	r7, [r0, #16]
 8009b00:	b005      	add	sp, #20
 8009b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b06:	f843 2b04 	str.w	r2, [r3], #4
 8009b0a:	e7db      	b.n	8009ac4 <__multiply+0x50>
 8009b0c:	f8b3 a000 	ldrh.w	sl, [r3]
 8009b10:	f1ba 0f00 	cmp.w	sl, #0
 8009b14:	d020      	beq.n	8009b58 <__multiply+0xe4>
 8009b16:	f105 0e14 	add.w	lr, r5, #20
 8009b1a:	46b1      	mov	r9, r6
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009b22:	f8d9 b000 	ldr.w	fp, [r9]
 8009b26:	b2a1      	uxth	r1, r4
 8009b28:	fa1f fb8b 	uxth.w	fp, fp
 8009b2c:	fb0a b101 	mla	r1, sl, r1, fp
 8009b30:	4411      	add	r1, r2
 8009b32:	f8d9 2000 	ldr.w	r2, [r9]
 8009b36:	0c24      	lsrs	r4, r4, #16
 8009b38:	0c12      	lsrs	r2, r2, #16
 8009b3a:	fb0a 2404 	mla	r4, sl, r4, r2
 8009b3e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009b42:	b289      	uxth	r1, r1
 8009b44:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009b48:	45f4      	cmp	ip, lr
 8009b4a:	f849 1b04 	str.w	r1, [r9], #4
 8009b4e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009b52:	d8e4      	bhi.n	8009b1e <__multiply+0xaa>
 8009b54:	9901      	ldr	r1, [sp, #4]
 8009b56:	5072      	str	r2, [r6, r1]
 8009b58:	9a03      	ldr	r2, [sp, #12]
 8009b5a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009b5e:	3304      	adds	r3, #4
 8009b60:	f1b9 0f00 	cmp.w	r9, #0
 8009b64:	d01f      	beq.n	8009ba6 <__multiply+0x132>
 8009b66:	6834      	ldr	r4, [r6, #0]
 8009b68:	f105 0114 	add.w	r1, r5, #20
 8009b6c:	46b6      	mov	lr, r6
 8009b6e:	f04f 0a00 	mov.w	sl, #0
 8009b72:	880a      	ldrh	r2, [r1, #0]
 8009b74:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009b78:	fb09 b202 	mla	r2, r9, r2, fp
 8009b7c:	4492      	add	sl, r2
 8009b7e:	b2a4      	uxth	r4, r4
 8009b80:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009b84:	f84e 4b04 	str.w	r4, [lr], #4
 8009b88:	f851 4b04 	ldr.w	r4, [r1], #4
 8009b8c:	f8be 2000 	ldrh.w	r2, [lr]
 8009b90:	0c24      	lsrs	r4, r4, #16
 8009b92:	fb09 2404 	mla	r4, r9, r4, r2
 8009b96:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009b9a:	458c      	cmp	ip, r1
 8009b9c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009ba0:	d8e7      	bhi.n	8009b72 <__multiply+0xfe>
 8009ba2:	9a01      	ldr	r2, [sp, #4]
 8009ba4:	50b4      	str	r4, [r6, r2]
 8009ba6:	3604      	adds	r6, #4
 8009ba8:	e7a3      	b.n	8009af2 <__multiply+0x7e>
 8009baa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d1a5      	bne.n	8009afe <__multiply+0x8a>
 8009bb2:	3f01      	subs	r7, #1
 8009bb4:	e7a1      	b.n	8009afa <__multiply+0x86>
 8009bb6:	bf00      	nop
 8009bb8:	0800afaf 	.word	0x0800afaf
 8009bbc:	0800afc0 	.word	0x0800afc0

08009bc0 <__pow5mult>:
 8009bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bc4:	4615      	mov	r5, r2
 8009bc6:	f012 0203 	ands.w	r2, r2, #3
 8009bca:	4606      	mov	r6, r0
 8009bcc:	460f      	mov	r7, r1
 8009bce:	d007      	beq.n	8009be0 <__pow5mult+0x20>
 8009bd0:	4c25      	ldr	r4, [pc, #148]	; (8009c68 <__pow5mult+0xa8>)
 8009bd2:	3a01      	subs	r2, #1
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009bda:	f7ff fe9b 	bl	8009914 <__multadd>
 8009bde:	4607      	mov	r7, r0
 8009be0:	10ad      	asrs	r5, r5, #2
 8009be2:	d03d      	beq.n	8009c60 <__pow5mult+0xa0>
 8009be4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009be6:	b97c      	cbnz	r4, 8009c08 <__pow5mult+0x48>
 8009be8:	2010      	movs	r0, #16
 8009bea:	f7fe fa37 	bl	800805c <malloc>
 8009bee:	4602      	mov	r2, r0
 8009bf0:	6270      	str	r0, [r6, #36]	; 0x24
 8009bf2:	b928      	cbnz	r0, 8009c00 <__pow5mult+0x40>
 8009bf4:	4b1d      	ldr	r3, [pc, #116]	; (8009c6c <__pow5mult+0xac>)
 8009bf6:	481e      	ldr	r0, [pc, #120]	; (8009c70 <__pow5mult+0xb0>)
 8009bf8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009bfc:	f000 fb10 	bl	800a220 <__assert_func>
 8009c00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009c04:	6004      	str	r4, [r0, #0]
 8009c06:	60c4      	str	r4, [r0, #12]
 8009c08:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009c0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009c10:	b94c      	cbnz	r4, 8009c26 <__pow5mult+0x66>
 8009c12:	f240 2171 	movw	r1, #625	; 0x271
 8009c16:	4630      	mov	r0, r6
 8009c18:	f7ff ff16 	bl	8009a48 <__i2b>
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009c22:	4604      	mov	r4, r0
 8009c24:	6003      	str	r3, [r0, #0]
 8009c26:	f04f 0900 	mov.w	r9, #0
 8009c2a:	07eb      	lsls	r3, r5, #31
 8009c2c:	d50a      	bpl.n	8009c44 <__pow5mult+0x84>
 8009c2e:	4639      	mov	r1, r7
 8009c30:	4622      	mov	r2, r4
 8009c32:	4630      	mov	r0, r6
 8009c34:	f7ff ff1e 	bl	8009a74 <__multiply>
 8009c38:	4639      	mov	r1, r7
 8009c3a:	4680      	mov	r8, r0
 8009c3c:	4630      	mov	r0, r6
 8009c3e:	f7ff fe47 	bl	80098d0 <_Bfree>
 8009c42:	4647      	mov	r7, r8
 8009c44:	106d      	asrs	r5, r5, #1
 8009c46:	d00b      	beq.n	8009c60 <__pow5mult+0xa0>
 8009c48:	6820      	ldr	r0, [r4, #0]
 8009c4a:	b938      	cbnz	r0, 8009c5c <__pow5mult+0x9c>
 8009c4c:	4622      	mov	r2, r4
 8009c4e:	4621      	mov	r1, r4
 8009c50:	4630      	mov	r0, r6
 8009c52:	f7ff ff0f 	bl	8009a74 <__multiply>
 8009c56:	6020      	str	r0, [r4, #0]
 8009c58:	f8c0 9000 	str.w	r9, [r0]
 8009c5c:	4604      	mov	r4, r0
 8009c5e:	e7e4      	b.n	8009c2a <__pow5mult+0x6a>
 8009c60:	4638      	mov	r0, r7
 8009c62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c66:	bf00      	nop
 8009c68:	0800b110 	.word	0x0800b110
 8009c6c:	0800af39 	.word	0x0800af39
 8009c70:	0800afc0 	.word	0x0800afc0

08009c74 <__lshift>:
 8009c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c78:	460c      	mov	r4, r1
 8009c7a:	6849      	ldr	r1, [r1, #4]
 8009c7c:	6923      	ldr	r3, [r4, #16]
 8009c7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009c82:	68a3      	ldr	r3, [r4, #8]
 8009c84:	4607      	mov	r7, r0
 8009c86:	4691      	mov	r9, r2
 8009c88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009c8c:	f108 0601 	add.w	r6, r8, #1
 8009c90:	42b3      	cmp	r3, r6
 8009c92:	db0b      	blt.n	8009cac <__lshift+0x38>
 8009c94:	4638      	mov	r0, r7
 8009c96:	f7ff fddb 	bl	8009850 <_Balloc>
 8009c9a:	4605      	mov	r5, r0
 8009c9c:	b948      	cbnz	r0, 8009cb2 <__lshift+0x3e>
 8009c9e:	4602      	mov	r2, r0
 8009ca0:	4b28      	ldr	r3, [pc, #160]	; (8009d44 <__lshift+0xd0>)
 8009ca2:	4829      	ldr	r0, [pc, #164]	; (8009d48 <__lshift+0xd4>)
 8009ca4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009ca8:	f000 faba 	bl	800a220 <__assert_func>
 8009cac:	3101      	adds	r1, #1
 8009cae:	005b      	lsls	r3, r3, #1
 8009cb0:	e7ee      	b.n	8009c90 <__lshift+0x1c>
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	f100 0114 	add.w	r1, r0, #20
 8009cb8:	f100 0210 	add.w	r2, r0, #16
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	4553      	cmp	r3, sl
 8009cc0:	db33      	blt.n	8009d2a <__lshift+0xb6>
 8009cc2:	6920      	ldr	r0, [r4, #16]
 8009cc4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009cc8:	f104 0314 	add.w	r3, r4, #20
 8009ccc:	f019 091f 	ands.w	r9, r9, #31
 8009cd0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009cd4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009cd8:	d02b      	beq.n	8009d32 <__lshift+0xbe>
 8009cda:	f1c9 0e20 	rsb	lr, r9, #32
 8009cde:	468a      	mov	sl, r1
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	6818      	ldr	r0, [r3, #0]
 8009ce4:	fa00 f009 	lsl.w	r0, r0, r9
 8009ce8:	4302      	orrs	r2, r0
 8009cea:	f84a 2b04 	str.w	r2, [sl], #4
 8009cee:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cf2:	459c      	cmp	ip, r3
 8009cf4:	fa22 f20e 	lsr.w	r2, r2, lr
 8009cf8:	d8f3      	bhi.n	8009ce2 <__lshift+0x6e>
 8009cfa:	ebac 0304 	sub.w	r3, ip, r4
 8009cfe:	3b15      	subs	r3, #21
 8009d00:	f023 0303 	bic.w	r3, r3, #3
 8009d04:	3304      	adds	r3, #4
 8009d06:	f104 0015 	add.w	r0, r4, #21
 8009d0a:	4584      	cmp	ip, r0
 8009d0c:	bf38      	it	cc
 8009d0e:	2304      	movcc	r3, #4
 8009d10:	50ca      	str	r2, [r1, r3]
 8009d12:	b10a      	cbz	r2, 8009d18 <__lshift+0xa4>
 8009d14:	f108 0602 	add.w	r6, r8, #2
 8009d18:	3e01      	subs	r6, #1
 8009d1a:	4638      	mov	r0, r7
 8009d1c:	612e      	str	r6, [r5, #16]
 8009d1e:	4621      	mov	r1, r4
 8009d20:	f7ff fdd6 	bl	80098d0 <_Bfree>
 8009d24:	4628      	mov	r0, r5
 8009d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d2a:	f842 0f04 	str.w	r0, [r2, #4]!
 8009d2e:	3301      	adds	r3, #1
 8009d30:	e7c5      	b.n	8009cbe <__lshift+0x4a>
 8009d32:	3904      	subs	r1, #4
 8009d34:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d38:	f841 2f04 	str.w	r2, [r1, #4]!
 8009d3c:	459c      	cmp	ip, r3
 8009d3e:	d8f9      	bhi.n	8009d34 <__lshift+0xc0>
 8009d40:	e7ea      	b.n	8009d18 <__lshift+0xa4>
 8009d42:	bf00      	nop
 8009d44:	0800afaf 	.word	0x0800afaf
 8009d48:	0800afc0 	.word	0x0800afc0

08009d4c <__mcmp>:
 8009d4c:	b530      	push	{r4, r5, lr}
 8009d4e:	6902      	ldr	r2, [r0, #16]
 8009d50:	690c      	ldr	r4, [r1, #16]
 8009d52:	1b12      	subs	r2, r2, r4
 8009d54:	d10e      	bne.n	8009d74 <__mcmp+0x28>
 8009d56:	f100 0314 	add.w	r3, r0, #20
 8009d5a:	3114      	adds	r1, #20
 8009d5c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009d60:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009d64:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009d68:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009d6c:	42a5      	cmp	r5, r4
 8009d6e:	d003      	beq.n	8009d78 <__mcmp+0x2c>
 8009d70:	d305      	bcc.n	8009d7e <__mcmp+0x32>
 8009d72:	2201      	movs	r2, #1
 8009d74:	4610      	mov	r0, r2
 8009d76:	bd30      	pop	{r4, r5, pc}
 8009d78:	4283      	cmp	r3, r0
 8009d7a:	d3f3      	bcc.n	8009d64 <__mcmp+0x18>
 8009d7c:	e7fa      	b.n	8009d74 <__mcmp+0x28>
 8009d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8009d82:	e7f7      	b.n	8009d74 <__mcmp+0x28>

08009d84 <__mdiff>:
 8009d84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d88:	460c      	mov	r4, r1
 8009d8a:	4606      	mov	r6, r0
 8009d8c:	4611      	mov	r1, r2
 8009d8e:	4620      	mov	r0, r4
 8009d90:	4617      	mov	r7, r2
 8009d92:	f7ff ffdb 	bl	8009d4c <__mcmp>
 8009d96:	1e05      	subs	r5, r0, #0
 8009d98:	d110      	bne.n	8009dbc <__mdiff+0x38>
 8009d9a:	4629      	mov	r1, r5
 8009d9c:	4630      	mov	r0, r6
 8009d9e:	f7ff fd57 	bl	8009850 <_Balloc>
 8009da2:	b930      	cbnz	r0, 8009db2 <__mdiff+0x2e>
 8009da4:	4b39      	ldr	r3, [pc, #228]	; (8009e8c <__mdiff+0x108>)
 8009da6:	4602      	mov	r2, r0
 8009da8:	f240 2132 	movw	r1, #562	; 0x232
 8009dac:	4838      	ldr	r0, [pc, #224]	; (8009e90 <__mdiff+0x10c>)
 8009dae:	f000 fa37 	bl	800a220 <__assert_func>
 8009db2:	2301      	movs	r3, #1
 8009db4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009db8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dbc:	bfa4      	itt	ge
 8009dbe:	463b      	movge	r3, r7
 8009dc0:	4627      	movge	r7, r4
 8009dc2:	4630      	mov	r0, r6
 8009dc4:	6879      	ldr	r1, [r7, #4]
 8009dc6:	bfa6      	itte	ge
 8009dc8:	461c      	movge	r4, r3
 8009dca:	2500      	movge	r5, #0
 8009dcc:	2501      	movlt	r5, #1
 8009dce:	f7ff fd3f 	bl	8009850 <_Balloc>
 8009dd2:	b920      	cbnz	r0, 8009dde <__mdiff+0x5a>
 8009dd4:	4b2d      	ldr	r3, [pc, #180]	; (8009e8c <__mdiff+0x108>)
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009ddc:	e7e6      	b.n	8009dac <__mdiff+0x28>
 8009dde:	693e      	ldr	r6, [r7, #16]
 8009de0:	60c5      	str	r5, [r0, #12]
 8009de2:	6925      	ldr	r5, [r4, #16]
 8009de4:	f107 0114 	add.w	r1, r7, #20
 8009de8:	f104 0914 	add.w	r9, r4, #20
 8009dec:	f100 0e14 	add.w	lr, r0, #20
 8009df0:	f107 0210 	add.w	r2, r7, #16
 8009df4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009df8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009dfc:	46f2      	mov	sl, lr
 8009dfe:	2700      	movs	r7, #0
 8009e00:	f859 3b04 	ldr.w	r3, [r9], #4
 8009e04:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009e08:	fa1f f883 	uxth.w	r8, r3
 8009e0c:	fa17 f78b 	uxtah	r7, r7, fp
 8009e10:	0c1b      	lsrs	r3, r3, #16
 8009e12:	eba7 0808 	sub.w	r8, r7, r8
 8009e16:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009e1a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009e1e:	fa1f f888 	uxth.w	r8, r8
 8009e22:	141f      	asrs	r7, r3, #16
 8009e24:	454d      	cmp	r5, r9
 8009e26:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009e2a:	f84a 3b04 	str.w	r3, [sl], #4
 8009e2e:	d8e7      	bhi.n	8009e00 <__mdiff+0x7c>
 8009e30:	1b2b      	subs	r3, r5, r4
 8009e32:	3b15      	subs	r3, #21
 8009e34:	f023 0303 	bic.w	r3, r3, #3
 8009e38:	3304      	adds	r3, #4
 8009e3a:	3415      	adds	r4, #21
 8009e3c:	42a5      	cmp	r5, r4
 8009e3e:	bf38      	it	cc
 8009e40:	2304      	movcc	r3, #4
 8009e42:	4419      	add	r1, r3
 8009e44:	4473      	add	r3, lr
 8009e46:	469e      	mov	lr, r3
 8009e48:	460d      	mov	r5, r1
 8009e4a:	4565      	cmp	r5, ip
 8009e4c:	d30e      	bcc.n	8009e6c <__mdiff+0xe8>
 8009e4e:	f10c 0203 	add.w	r2, ip, #3
 8009e52:	1a52      	subs	r2, r2, r1
 8009e54:	f022 0203 	bic.w	r2, r2, #3
 8009e58:	3903      	subs	r1, #3
 8009e5a:	458c      	cmp	ip, r1
 8009e5c:	bf38      	it	cc
 8009e5e:	2200      	movcc	r2, #0
 8009e60:	441a      	add	r2, r3
 8009e62:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009e66:	b17b      	cbz	r3, 8009e88 <__mdiff+0x104>
 8009e68:	6106      	str	r6, [r0, #16]
 8009e6a:	e7a5      	b.n	8009db8 <__mdiff+0x34>
 8009e6c:	f855 8b04 	ldr.w	r8, [r5], #4
 8009e70:	fa17 f488 	uxtah	r4, r7, r8
 8009e74:	1422      	asrs	r2, r4, #16
 8009e76:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009e7a:	b2a4      	uxth	r4, r4
 8009e7c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009e80:	f84e 4b04 	str.w	r4, [lr], #4
 8009e84:	1417      	asrs	r7, r2, #16
 8009e86:	e7e0      	b.n	8009e4a <__mdiff+0xc6>
 8009e88:	3e01      	subs	r6, #1
 8009e8a:	e7ea      	b.n	8009e62 <__mdiff+0xde>
 8009e8c:	0800afaf 	.word	0x0800afaf
 8009e90:	0800afc0 	.word	0x0800afc0

08009e94 <__d2b>:
 8009e94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009e98:	4689      	mov	r9, r1
 8009e9a:	2101      	movs	r1, #1
 8009e9c:	ec57 6b10 	vmov	r6, r7, d0
 8009ea0:	4690      	mov	r8, r2
 8009ea2:	f7ff fcd5 	bl	8009850 <_Balloc>
 8009ea6:	4604      	mov	r4, r0
 8009ea8:	b930      	cbnz	r0, 8009eb8 <__d2b+0x24>
 8009eaa:	4602      	mov	r2, r0
 8009eac:	4b25      	ldr	r3, [pc, #148]	; (8009f44 <__d2b+0xb0>)
 8009eae:	4826      	ldr	r0, [pc, #152]	; (8009f48 <__d2b+0xb4>)
 8009eb0:	f240 310a 	movw	r1, #778	; 0x30a
 8009eb4:	f000 f9b4 	bl	800a220 <__assert_func>
 8009eb8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009ebc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009ec0:	bb35      	cbnz	r5, 8009f10 <__d2b+0x7c>
 8009ec2:	2e00      	cmp	r6, #0
 8009ec4:	9301      	str	r3, [sp, #4]
 8009ec6:	d028      	beq.n	8009f1a <__d2b+0x86>
 8009ec8:	4668      	mov	r0, sp
 8009eca:	9600      	str	r6, [sp, #0]
 8009ecc:	f7ff fd8c 	bl	80099e8 <__lo0bits>
 8009ed0:	9900      	ldr	r1, [sp, #0]
 8009ed2:	b300      	cbz	r0, 8009f16 <__d2b+0x82>
 8009ed4:	9a01      	ldr	r2, [sp, #4]
 8009ed6:	f1c0 0320 	rsb	r3, r0, #32
 8009eda:	fa02 f303 	lsl.w	r3, r2, r3
 8009ede:	430b      	orrs	r3, r1
 8009ee0:	40c2      	lsrs	r2, r0
 8009ee2:	6163      	str	r3, [r4, #20]
 8009ee4:	9201      	str	r2, [sp, #4]
 8009ee6:	9b01      	ldr	r3, [sp, #4]
 8009ee8:	61a3      	str	r3, [r4, #24]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	bf14      	ite	ne
 8009eee:	2202      	movne	r2, #2
 8009ef0:	2201      	moveq	r2, #1
 8009ef2:	6122      	str	r2, [r4, #16]
 8009ef4:	b1d5      	cbz	r5, 8009f2c <__d2b+0x98>
 8009ef6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009efa:	4405      	add	r5, r0
 8009efc:	f8c9 5000 	str.w	r5, [r9]
 8009f00:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009f04:	f8c8 0000 	str.w	r0, [r8]
 8009f08:	4620      	mov	r0, r4
 8009f0a:	b003      	add	sp, #12
 8009f0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f14:	e7d5      	b.n	8009ec2 <__d2b+0x2e>
 8009f16:	6161      	str	r1, [r4, #20]
 8009f18:	e7e5      	b.n	8009ee6 <__d2b+0x52>
 8009f1a:	a801      	add	r0, sp, #4
 8009f1c:	f7ff fd64 	bl	80099e8 <__lo0bits>
 8009f20:	9b01      	ldr	r3, [sp, #4]
 8009f22:	6163      	str	r3, [r4, #20]
 8009f24:	2201      	movs	r2, #1
 8009f26:	6122      	str	r2, [r4, #16]
 8009f28:	3020      	adds	r0, #32
 8009f2a:	e7e3      	b.n	8009ef4 <__d2b+0x60>
 8009f2c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009f30:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009f34:	f8c9 0000 	str.w	r0, [r9]
 8009f38:	6918      	ldr	r0, [r3, #16]
 8009f3a:	f7ff fd35 	bl	80099a8 <__hi0bits>
 8009f3e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009f42:	e7df      	b.n	8009f04 <__d2b+0x70>
 8009f44:	0800afaf 	.word	0x0800afaf
 8009f48:	0800afc0 	.word	0x0800afc0

08009f4c <_calloc_r>:
 8009f4c:	b513      	push	{r0, r1, r4, lr}
 8009f4e:	434a      	muls	r2, r1
 8009f50:	4611      	mov	r1, r2
 8009f52:	9201      	str	r2, [sp, #4]
 8009f54:	f7fe f8f0 	bl	8008138 <_malloc_r>
 8009f58:	4604      	mov	r4, r0
 8009f5a:	b118      	cbz	r0, 8009f64 <_calloc_r+0x18>
 8009f5c:	9a01      	ldr	r2, [sp, #4]
 8009f5e:	2100      	movs	r1, #0
 8009f60:	f7fe f892 	bl	8008088 <memset>
 8009f64:	4620      	mov	r0, r4
 8009f66:	b002      	add	sp, #8
 8009f68:	bd10      	pop	{r4, pc}

08009f6a <__ssputs_r>:
 8009f6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f6e:	688e      	ldr	r6, [r1, #8]
 8009f70:	429e      	cmp	r6, r3
 8009f72:	4682      	mov	sl, r0
 8009f74:	460c      	mov	r4, r1
 8009f76:	4690      	mov	r8, r2
 8009f78:	461f      	mov	r7, r3
 8009f7a:	d838      	bhi.n	8009fee <__ssputs_r+0x84>
 8009f7c:	898a      	ldrh	r2, [r1, #12]
 8009f7e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009f82:	d032      	beq.n	8009fea <__ssputs_r+0x80>
 8009f84:	6825      	ldr	r5, [r4, #0]
 8009f86:	6909      	ldr	r1, [r1, #16]
 8009f88:	eba5 0901 	sub.w	r9, r5, r1
 8009f8c:	6965      	ldr	r5, [r4, #20]
 8009f8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f92:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f96:	3301      	adds	r3, #1
 8009f98:	444b      	add	r3, r9
 8009f9a:	106d      	asrs	r5, r5, #1
 8009f9c:	429d      	cmp	r5, r3
 8009f9e:	bf38      	it	cc
 8009fa0:	461d      	movcc	r5, r3
 8009fa2:	0553      	lsls	r3, r2, #21
 8009fa4:	d531      	bpl.n	800a00a <__ssputs_r+0xa0>
 8009fa6:	4629      	mov	r1, r5
 8009fa8:	f7fe f8c6 	bl	8008138 <_malloc_r>
 8009fac:	4606      	mov	r6, r0
 8009fae:	b950      	cbnz	r0, 8009fc6 <__ssputs_r+0x5c>
 8009fb0:	230c      	movs	r3, #12
 8009fb2:	f8ca 3000 	str.w	r3, [sl]
 8009fb6:	89a3      	ldrh	r3, [r4, #12]
 8009fb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fbc:	81a3      	strh	r3, [r4, #12]
 8009fbe:	f04f 30ff 	mov.w	r0, #4294967295
 8009fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fc6:	6921      	ldr	r1, [r4, #16]
 8009fc8:	464a      	mov	r2, r9
 8009fca:	f7fe f84f 	bl	800806c <memcpy>
 8009fce:	89a3      	ldrh	r3, [r4, #12]
 8009fd0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fd8:	81a3      	strh	r3, [r4, #12]
 8009fda:	6126      	str	r6, [r4, #16]
 8009fdc:	6165      	str	r5, [r4, #20]
 8009fde:	444e      	add	r6, r9
 8009fe0:	eba5 0509 	sub.w	r5, r5, r9
 8009fe4:	6026      	str	r6, [r4, #0]
 8009fe6:	60a5      	str	r5, [r4, #8]
 8009fe8:	463e      	mov	r6, r7
 8009fea:	42be      	cmp	r6, r7
 8009fec:	d900      	bls.n	8009ff0 <__ssputs_r+0x86>
 8009fee:	463e      	mov	r6, r7
 8009ff0:	4632      	mov	r2, r6
 8009ff2:	6820      	ldr	r0, [r4, #0]
 8009ff4:	4641      	mov	r1, r8
 8009ff6:	f000 f958 	bl	800a2aa <memmove>
 8009ffa:	68a3      	ldr	r3, [r4, #8]
 8009ffc:	6822      	ldr	r2, [r4, #0]
 8009ffe:	1b9b      	subs	r3, r3, r6
 800a000:	4432      	add	r2, r6
 800a002:	60a3      	str	r3, [r4, #8]
 800a004:	6022      	str	r2, [r4, #0]
 800a006:	2000      	movs	r0, #0
 800a008:	e7db      	b.n	8009fc2 <__ssputs_r+0x58>
 800a00a:	462a      	mov	r2, r5
 800a00c:	f000 f967 	bl	800a2de <_realloc_r>
 800a010:	4606      	mov	r6, r0
 800a012:	2800      	cmp	r0, #0
 800a014:	d1e1      	bne.n	8009fda <__ssputs_r+0x70>
 800a016:	6921      	ldr	r1, [r4, #16]
 800a018:	4650      	mov	r0, sl
 800a01a:	f7fe f83d 	bl	8008098 <_free_r>
 800a01e:	e7c7      	b.n	8009fb0 <__ssputs_r+0x46>

0800a020 <_svfiprintf_r>:
 800a020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a024:	4698      	mov	r8, r3
 800a026:	898b      	ldrh	r3, [r1, #12]
 800a028:	061b      	lsls	r3, r3, #24
 800a02a:	b09d      	sub	sp, #116	; 0x74
 800a02c:	4607      	mov	r7, r0
 800a02e:	460d      	mov	r5, r1
 800a030:	4614      	mov	r4, r2
 800a032:	d50e      	bpl.n	800a052 <_svfiprintf_r+0x32>
 800a034:	690b      	ldr	r3, [r1, #16]
 800a036:	b963      	cbnz	r3, 800a052 <_svfiprintf_r+0x32>
 800a038:	2140      	movs	r1, #64	; 0x40
 800a03a:	f7fe f87d 	bl	8008138 <_malloc_r>
 800a03e:	6028      	str	r0, [r5, #0]
 800a040:	6128      	str	r0, [r5, #16]
 800a042:	b920      	cbnz	r0, 800a04e <_svfiprintf_r+0x2e>
 800a044:	230c      	movs	r3, #12
 800a046:	603b      	str	r3, [r7, #0]
 800a048:	f04f 30ff 	mov.w	r0, #4294967295
 800a04c:	e0d1      	b.n	800a1f2 <_svfiprintf_r+0x1d2>
 800a04e:	2340      	movs	r3, #64	; 0x40
 800a050:	616b      	str	r3, [r5, #20]
 800a052:	2300      	movs	r3, #0
 800a054:	9309      	str	r3, [sp, #36]	; 0x24
 800a056:	2320      	movs	r3, #32
 800a058:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a05c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a060:	2330      	movs	r3, #48	; 0x30
 800a062:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a20c <_svfiprintf_r+0x1ec>
 800a066:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a06a:	f04f 0901 	mov.w	r9, #1
 800a06e:	4623      	mov	r3, r4
 800a070:	469a      	mov	sl, r3
 800a072:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a076:	b10a      	cbz	r2, 800a07c <_svfiprintf_r+0x5c>
 800a078:	2a25      	cmp	r2, #37	; 0x25
 800a07a:	d1f9      	bne.n	800a070 <_svfiprintf_r+0x50>
 800a07c:	ebba 0b04 	subs.w	fp, sl, r4
 800a080:	d00b      	beq.n	800a09a <_svfiprintf_r+0x7a>
 800a082:	465b      	mov	r3, fp
 800a084:	4622      	mov	r2, r4
 800a086:	4629      	mov	r1, r5
 800a088:	4638      	mov	r0, r7
 800a08a:	f7ff ff6e 	bl	8009f6a <__ssputs_r>
 800a08e:	3001      	adds	r0, #1
 800a090:	f000 80aa 	beq.w	800a1e8 <_svfiprintf_r+0x1c8>
 800a094:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a096:	445a      	add	r2, fp
 800a098:	9209      	str	r2, [sp, #36]	; 0x24
 800a09a:	f89a 3000 	ldrb.w	r3, [sl]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	f000 80a2 	beq.w	800a1e8 <_svfiprintf_r+0x1c8>
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	f04f 32ff 	mov.w	r2, #4294967295
 800a0aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0ae:	f10a 0a01 	add.w	sl, sl, #1
 800a0b2:	9304      	str	r3, [sp, #16]
 800a0b4:	9307      	str	r3, [sp, #28]
 800a0b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0ba:	931a      	str	r3, [sp, #104]	; 0x68
 800a0bc:	4654      	mov	r4, sl
 800a0be:	2205      	movs	r2, #5
 800a0c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0c4:	4851      	ldr	r0, [pc, #324]	; (800a20c <_svfiprintf_r+0x1ec>)
 800a0c6:	f7f6 f863 	bl	8000190 <memchr>
 800a0ca:	9a04      	ldr	r2, [sp, #16]
 800a0cc:	b9d8      	cbnz	r0, 800a106 <_svfiprintf_r+0xe6>
 800a0ce:	06d0      	lsls	r0, r2, #27
 800a0d0:	bf44      	itt	mi
 800a0d2:	2320      	movmi	r3, #32
 800a0d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0d8:	0711      	lsls	r1, r2, #28
 800a0da:	bf44      	itt	mi
 800a0dc:	232b      	movmi	r3, #43	; 0x2b
 800a0de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0e2:	f89a 3000 	ldrb.w	r3, [sl]
 800a0e6:	2b2a      	cmp	r3, #42	; 0x2a
 800a0e8:	d015      	beq.n	800a116 <_svfiprintf_r+0xf6>
 800a0ea:	9a07      	ldr	r2, [sp, #28]
 800a0ec:	4654      	mov	r4, sl
 800a0ee:	2000      	movs	r0, #0
 800a0f0:	f04f 0c0a 	mov.w	ip, #10
 800a0f4:	4621      	mov	r1, r4
 800a0f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0fa:	3b30      	subs	r3, #48	; 0x30
 800a0fc:	2b09      	cmp	r3, #9
 800a0fe:	d94e      	bls.n	800a19e <_svfiprintf_r+0x17e>
 800a100:	b1b0      	cbz	r0, 800a130 <_svfiprintf_r+0x110>
 800a102:	9207      	str	r2, [sp, #28]
 800a104:	e014      	b.n	800a130 <_svfiprintf_r+0x110>
 800a106:	eba0 0308 	sub.w	r3, r0, r8
 800a10a:	fa09 f303 	lsl.w	r3, r9, r3
 800a10e:	4313      	orrs	r3, r2
 800a110:	9304      	str	r3, [sp, #16]
 800a112:	46a2      	mov	sl, r4
 800a114:	e7d2      	b.n	800a0bc <_svfiprintf_r+0x9c>
 800a116:	9b03      	ldr	r3, [sp, #12]
 800a118:	1d19      	adds	r1, r3, #4
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	9103      	str	r1, [sp, #12]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	bfbb      	ittet	lt
 800a122:	425b      	neglt	r3, r3
 800a124:	f042 0202 	orrlt.w	r2, r2, #2
 800a128:	9307      	strge	r3, [sp, #28]
 800a12a:	9307      	strlt	r3, [sp, #28]
 800a12c:	bfb8      	it	lt
 800a12e:	9204      	strlt	r2, [sp, #16]
 800a130:	7823      	ldrb	r3, [r4, #0]
 800a132:	2b2e      	cmp	r3, #46	; 0x2e
 800a134:	d10c      	bne.n	800a150 <_svfiprintf_r+0x130>
 800a136:	7863      	ldrb	r3, [r4, #1]
 800a138:	2b2a      	cmp	r3, #42	; 0x2a
 800a13a:	d135      	bne.n	800a1a8 <_svfiprintf_r+0x188>
 800a13c:	9b03      	ldr	r3, [sp, #12]
 800a13e:	1d1a      	adds	r2, r3, #4
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	9203      	str	r2, [sp, #12]
 800a144:	2b00      	cmp	r3, #0
 800a146:	bfb8      	it	lt
 800a148:	f04f 33ff 	movlt.w	r3, #4294967295
 800a14c:	3402      	adds	r4, #2
 800a14e:	9305      	str	r3, [sp, #20]
 800a150:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a21c <_svfiprintf_r+0x1fc>
 800a154:	7821      	ldrb	r1, [r4, #0]
 800a156:	2203      	movs	r2, #3
 800a158:	4650      	mov	r0, sl
 800a15a:	f7f6 f819 	bl	8000190 <memchr>
 800a15e:	b140      	cbz	r0, 800a172 <_svfiprintf_r+0x152>
 800a160:	2340      	movs	r3, #64	; 0x40
 800a162:	eba0 000a 	sub.w	r0, r0, sl
 800a166:	fa03 f000 	lsl.w	r0, r3, r0
 800a16a:	9b04      	ldr	r3, [sp, #16]
 800a16c:	4303      	orrs	r3, r0
 800a16e:	3401      	adds	r4, #1
 800a170:	9304      	str	r3, [sp, #16]
 800a172:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a176:	4826      	ldr	r0, [pc, #152]	; (800a210 <_svfiprintf_r+0x1f0>)
 800a178:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a17c:	2206      	movs	r2, #6
 800a17e:	f7f6 f807 	bl	8000190 <memchr>
 800a182:	2800      	cmp	r0, #0
 800a184:	d038      	beq.n	800a1f8 <_svfiprintf_r+0x1d8>
 800a186:	4b23      	ldr	r3, [pc, #140]	; (800a214 <_svfiprintf_r+0x1f4>)
 800a188:	bb1b      	cbnz	r3, 800a1d2 <_svfiprintf_r+0x1b2>
 800a18a:	9b03      	ldr	r3, [sp, #12]
 800a18c:	3307      	adds	r3, #7
 800a18e:	f023 0307 	bic.w	r3, r3, #7
 800a192:	3308      	adds	r3, #8
 800a194:	9303      	str	r3, [sp, #12]
 800a196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a198:	4433      	add	r3, r6
 800a19a:	9309      	str	r3, [sp, #36]	; 0x24
 800a19c:	e767      	b.n	800a06e <_svfiprintf_r+0x4e>
 800a19e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1a2:	460c      	mov	r4, r1
 800a1a4:	2001      	movs	r0, #1
 800a1a6:	e7a5      	b.n	800a0f4 <_svfiprintf_r+0xd4>
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	3401      	adds	r4, #1
 800a1ac:	9305      	str	r3, [sp, #20]
 800a1ae:	4619      	mov	r1, r3
 800a1b0:	f04f 0c0a 	mov.w	ip, #10
 800a1b4:	4620      	mov	r0, r4
 800a1b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1ba:	3a30      	subs	r2, #48	; 0x30
 800a1bc:	2a09      	cmp	r2, #9
 800a1be:	d903      	bls.n	800a1c8 <_svfiprintf_r+0x1a8>
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d0c5      	beq.n	800a150 <_svfiprintf_r+0x130>
 800a1c4:	9105      	str	r1, [sp, #20]
 800a1c6:	e7c3      	b.n	800a150 <_svfiprintf_r+0x130>
 800a1c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1cc:	4604      	mov	r4, r0
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	e7f0      	b.n	800a1b4 <_svfiprintf_r+0x194>
 800a1d2:	ab03      	add	r3, sp, #12
 800a1d4:	9300      	str	r3, [sp, #0]
 800a1d6:	462a      	mov	r2, r5
 800a1d8:	4b0f      	ldr	r3, [pc, #60]	; (800a218 <_svfiprintf_r+0x1f8>)
 800a1da:	a904      	add	r1, sp, #16
 800a1dc:	4638      	mov	r0, r7
 800a1de:	f7fe f8a5 	bl	800832c <_printf_float>
 800a1e2:	1c42      	adds	r2, r0, #1
 800a1e4:	4606      	mov	r6, r0
 800a1e6:	d1d6      	bne.n	800a196 <_svfiprintf_r+0x176>
 800a1e8:	89ab      	ldrh	r3, [r5, #12]
 800a1ea:	065b      	lsls	r3, r3, #25
 800a1ec:	f53f af2c 	bmi.w	800a048 <_svfiprintf_r+0x28>
 800a1f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1f2:	b01d      	add	sp, #116	; 0x74
 800a1f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1f8:	ab03      	add	r3, sp, #12
 800a1fa:	9300      	str	r3, [sp, #0]
 800a1fc:	462a      	mov	r2, r5
 800a1fe:	4b06      	ldr	r3, [pc, #24]	; (800a218 <_svfiprintf_r+0x1f8>)
 800a200:	a904      	add	r1, sp, #16
 800a202:	4638      	mov	r0, r7
 800a204:	f7fe fb36 	bl	8008874 <_printf_i>
 800a208:	e7eb      	b.n	800a1e2 <_svfiprintf_r+0x1c2>
 800a20a:	bf00      	nop
 800a20c:	0800b11c 	.word	0x0800b11c
 800a210:	0800b126 	.word	0x0800b126
 800a214:	0800832d 	.word	0x0800832d
 800a218:	08009f6b 	.word	0x08009f6b
 800a21c:	0800b122 	.word	0x0800b122

0800a220 <__assert_func>:
 800a220:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a222:	4614      	mov	r4, r2
 800a224:	461a      	mov	r2, r3
 800a226:	4b09      	ldr	r3, [pc, #36]	; (800a24c <__assert_func+0x2c>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	4605      	mov	r5, r0
 800a22c:	68d8      	ldr	r0, [r3, #12]
 800a22e:	b14c      	cbz	r4, 800a244 <__assert_func+0x24>
 800a230:	4b07      	ldr	r3, [pc, #28]	; (800a250 <__assert_func+0x30>)
 800a232:	9100      	str	r1, [sp, #0]
 800a234:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a238:	4906      	ldr	r1, [pc, #24]	; (800a254 <__assert_func+0x34>)
 800a23a:	462b      	mov	r3, r5
 800a23c:	f000 f80e 	bl	800a25c <fiprintf>
 800a240:	f000 fa9a 	bl	800a778 <abort>
 800a244:	4b04      	ldr	r3, [pc, #16]	; (800a258 <__assert_func+0x38>)
 800a246:	461c      	mov	r4, r3
 800a248:	e7f3      	b.n	800a232 <__assert_func+0x12>
 800a24a:	bf00      	nop
 800a24c:	20000010 	.word	0x20000010
 800a250:	0800b12d 	.word	0x0800b12d
 800a254:	0800b13a 	.word	0x0800b13a
 800a258:	0800b168 	.word	0x0800b168

0800a25c <fiprintf>:
 800a25c:	b40e      	push	{r1, r2, r3}
 800a25e:	b503      	push	{r0, r1, lr}
 800a260:	4601      	mov	r1, r0
 800a262:	ab03      	add	r3, sp, #12
 800a264:	4805      	ldr	r0, [pc, #20]	; (800a27c <fiprintf+0x20>)
 800a266:	f853 2b04 	ldr.w	r2, [r3], #4
 800a26a:	6800      	ldr	r0, [r0, #0]
 800a26c:	9301      	str	r3, [sp, #4]
 800a26e:	f000 f885 	bl	800a37c <_vfiprintf_r>
 800a272:	b002      	add	sp, #8
 800a274:	f85d eb04 	ldr.w	lr, [sp], #4
 800a278:	b003      	add	sp, #12
 800a27a:	4770      	bx	lr
 800a27c:	20000010 	.word	0x20000010

0800a280 <__retarget_lock_init_recursive>:
 800a280:	4770      	bx	lr

0800a282 <__retarget_lock_acquire_recursive>:
 800a282:	4770      	bx	lr

0800a284 <__retarget_lock_release_recursive>:
 800a284:	4770      	bx	lr

0800a286 <__ascii_mbtowc>:
 800a286:	b082      	sub	sp, #8
 800a288:	b901      	cbnz	r1, 800a28c <__ascii_mbtowc+0x6>
 800a28a:	a901      	add	r1, sp, #4
 800a28c:	b142      	cbz	r2, 800a2a0 <__ascii_mbtowc+0x1a>
 800a28e:	b14b      	cbz	r3, 800a2a4 <__ascii_mbtowc+0x1e>
 800a290:	7813      	ldrb	r3, [r2, #0]
 800a292:	600b      	str	r3, [r1, #0]
 800a294:	7812      	ldrb	r2, [r2, #0]
 800a296:	1e10      	subs	r0, r2, #0
 800a298:	bf18      	it	ne
 800a29a:	2001      	movne	r0, #1
 800a29c:	b002      	add	sp, #8
 800a29e:	4770      	bx	lr
 800a2a0:	4610      	mov	r0, r2
 800a2a2:	e7fb      	b.n	800a29c <__ascii_mbtowc+0x16>
 800a2a4:	f06f 0001 	mvn.w	r0, #1
 800a2a8:	e7f8      	b.n	800a29c <__ascii_mbtowc+0x16>

0800a2aa <memmove>:
 800a2aa:	4288      	cmp	r0, r1
 800a2ac:	b510      	push	{r4, lr}
 800a2ae:	eb01 0402 	add.w	r4, r1, r2
 800a2b2:	d902      	bls.n	800a2ba <memmove+0x10>
 800a2b4:	4284      	cmp	r4, r0
 800a2b6:	4623      	mov	r3, r4
 800a2b8:	d807      	bhi.n	800a2ca <memmove+0x20>
 800a2ba:	1e43      	subs	r3, r0, #1
 800a2bc:	42a1      	cmp	r1, r4
 800a2be:	d008      	beq.n	800a2d2 <memmove+0x28>
 800a2c0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a2c4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a2c8:	e7f8      	b.n	800a2bc <memmove+0x12>
 800a2ca:	4402      	add	r2, r0
 800a2cc:	4601      	mov	r1, r0
 800a2ce:	428a      	cmp	r2, r1
 800a2d0:	d100      	bne.n	800a2d4 <memmove+0x2a>
 800a2d2:	bd10      	pop	{r4, pc}
 800a2d4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a2d8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a2dc:	e7f7      	b.n	800a2ce <memmove+0x24>

0800a2de <_realloc_r>:
 800a2de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2e0:	4607      	mov	r7, r0
 800a2e2:	4614      	mov	r4, r2
 800a2e4:	460e      	mov	r6, r1
 800a2e6:	b921      	cbnz	r1, 800a2f2 <_realloc_r+0x14>
 800a2e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a2ec:	4611      	mov	r1, r2
 800a2ee:	f7fd bf23 	b.w	8008138 <_malloc_r>
 800a2f2:	b922      	cbnz	r2, 800a2fe <_realloc_r+0x20>
 800a2f4:	f7fd fed0 	bl	8008098 <_free_r>
 800a2f8:	4625      	mov	r5, r4
 800a2fa:	4628      	mov	r0, r5
 800a2fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2fe:	f000 fc5f 	bl	800abc0 <_malloc_usable_size_r>
 800a302:	42a0      	cmp	r0, r4
 800a304:	d20f      	bcs.n	800a326 <_realloc_r+0x48>
 800a306:	4621      	mov	r1, r4
 800a308:	4638      	mov	r0, r7
 800a30a:	f7fd ff15 	bl	8008138 <_malloc_r>
 800a30e:	4605      	mov	r5, r0
 800a310:	2800      	cmp	r0, #0
 800a312:	d0f2      	beq.n	800a2fa <_realloc_r+0x1c>
 800a314:	4631      	mov	r1, r6
 800a316:	4622      	mov	r2, r4
 800a318:	f7fd fea8 	bl	800806c <memcpy>
 800a31c:	4631      	mov	r1, r6
 800a31e:	4638      	mov	r0, r7
 800a320:	f7fd feba 	bl	8008098 <_free_r>
 800a324:	e7e9      	b.n	800a2fa <_realloc_r+0x1c>
 800a326:	4635      	mov	r5, r6
 800a328:	e7e7      	b.n	800a2fa <_realloc_r+0x1c>

0800a32a <__sfputc_r>:
 800a32a:	6893      	ldr	r3, [r2, #8]
 800a32c:	3b01      	subs	r3, #1
 800a32e:	2b00      	cmp	r3, #0
 800a330:	b410      	push	{r4}
 800a332:	6093      	str	r3, [r2, #8]
 800a334:	da08      	bge.n	800a348 <__sfputc_r+0x1e>
 800a336:	6994      	ldr	r4, [r2, #24]
 800a338:	42a3      	cmp	r3, r4
 800a33a:	db01      	blt.n	800a340 <__sfputc_r+0x16>
 800a33c:	290a      	cmp	r1, #10
 800a33e:	d103      	bne.n	800a348 <__sfputc_r+0x1e>
 800a340:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a344:	f000 b94a 	b.w	800a5dc <__swbuf_r>
 800a348:	6813      	ldr	r3, [r2, #0]
 800a34a:	1c58      	adds	r0, r3, #1
 800a34c:	6010      	str	r0, [r2, #0]
 800a34e:	7019      	strb	r1, [r3, #0]
 800a350:	4608      	mov	r0, r1
 800a352:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a356:	4770      	bx	lr

0800a358 <__sfputs_r>:
 800a358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a35a:	4606      	mov	r6, r0
 800a35c:	460f      	mov	r7, r1
 800a35e:	4614      	mov	r4, r2
 800a360:	18d5      	adds	r5, r2, r3
 800a362:	42ac      	cmp	r4, r5
 800a364:	d101      	bne.n	800a36a <__sfputs_r+0x12>
 800a366:	2000      	movs	r0, #0
 800a368:	e007      	b.n	800a37a <__sfputs_r+0x22>
 800a36a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a36e:	463a      	mov	r2, r7
 800a370:	4630      	mov	r0, r6
 800a372:	f7ff ffda 	bl	800a32a <__sfputc_r>
 800a376:	1c43      	adds	r3, r0, #1
 800a378:	d1f3      	bne.n	800a362 <__sfputs_r+0xa>
 800a37a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a37c <_vfiprintf_r>:
 800a37c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a380:	460d      	mov	r5, r1
 800a382:	b09d      	sub	sp, #116	; 0x74
 800a384:	4614      	mov	r4, r2
 800a386:	4698      	mov	r8, r3
 800a388:	4606      	mov	r6, r0
 800a38a:	b118      	cbz	r0, 800a394 <_vfiprintf_r+0x18>
 800a38c:	6983      	ldr	r3, [r0, #24]
 800a38e:	b90b      	cbnz	r3, 800a394 <_vfiprintf_r+0x18>
 800a390:	f000 fb14 	bl	800a9bc <__sinit>
 800a394:	4b89      	ldr	r3, [pc, #548]	; (800a5bc <_vfiprintf_r+0x240>)
 800a396:	429d      	cmp	r5, r3
 800a398:	d11b      	bne.n	800a3d2 <_vfiprintf_r+0x56>
 800a39a:	6875      	ldr	r5, [r6, #4]
 800a39c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a39e:	07d9      	lsls	r1, r3, #31
 800a3a0:	d405      	bmi.n	800a3ae <_vfiprintf_r+0x32>
 800a3a2:	89ab      	ldrh	r3, [r5, #12]
 800a3a4:	059a      	lsls	r2, r3, #22
 800a3a6:	d402      	bmi.n	800a3ae <_vfiprintf_r+0x32>
 800a3a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a3aa:	f7ff ff6a 	bl	800a282 <__retarget_lock_acquire_recursive>
 800a3ae:	89ab      	ldrh	r3, [r5, #12]
 800a3b0:	071b      	lsls	r3, r3, #28
 800a3b2:	d501      	bpl.n	800a3b8 <_vfiprintf_r+0x3c>
 800a3b4:	692b      	ldr	r3, [r5, #16]
 800a3b6:	b9eb      	cbnz	r3, 800a3f4 <_vfiprintf_r+0x78>
 800a3b8:	4629      	mov	r1, r5
 800a3ba:	4630      	mov	r0, r6
 800a3bc:	f000 f96e 	bl	800a69c <__swsetup_r>
 800a3c0:	b1c0      	cbz	r0, 800a3f4 <_vfiprintf_r+0x78>
 800a3c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3c4:	07dc      	lsls	r4, r3, #31
 800a3c6:	d50e      	bpl.n	800a3e6 <_vfiprintf_r+0x6a>
 800a3c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a3cc:	b01d      	add	sp, #116	; 0x74
 800a3ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3d2:	4b7b      	ldr	r3, [pc, #492]	; (800a5c0 <_vfiprintf_r+0x244>)
 800a3d4:	429d      	cmp	r5, r3
 800a3d6:	d101      	bne.n	800a3dc <_vfiprintf_r+0x60>
 800a3d8:	68b5      	ldr	r5, [r6, #8]
 800a3da:	e7df      	b.n	800a39c <_vfiprintf_r+0x20>
 800a3dc:	4b79      	ldr	r3, [pc, #484]	; (800a5c4 <_vfiprintf_r+0x248>)
 800a3de:	429d      	cmp	r5, r3
 800a3e0:	bf08      	it	eq
 800a3e2:	68f5      	ldreq	r5, [r6, #12]
 800a3e4:	e7da      	b.n	800a39c <_vfiprintf_r+0x20>
 800a3e6:	89ab      	ldrh	r3, [r5, #12]
 800a3e8:	0598      	lsls	r0, r3, #22
 800a3ea:	d4ed      	bmi.n	800a3c8 <_vfiprintf_r+0x4c>
 800a3ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a3ee:	f7ff ff49 	bl	800a284 <__retarget_lock_release_recursive>
 800a3f2:	e7e9      	b.n	800a3c8 <_vfiprintf_r+0x4c>
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	9309      	str	r3, [sp, #36]	; 0x24
 800a3f8:	2320      	movs	r3, #32
 800a3fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a3fe:	f8cd 800c 	str.w	r8, [sp, #12]
 800a402:	2330      	movs	r3, #48	; 0x30
 800a404:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a5c8 <_vfiprintf_r+0x24c>
 800a408:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a40c:	f04f 0901 	mov.w	r9, #1
 800a410:	4623      	mov	r3, r4
 800a412:	469a      	mov	sl, r3
 800a414:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a418:	b10a      	cbz	r2, 800a41e <_vfiprintf_r+0xa2>
 800a41a:	2a25      	cmp	r2, #37	; 0x25
 800a41c:	d1f9      	bne.n	800a412 <_vfiprintf_r+0x96>
 800a41e:	ebba 0b04 	subs.w	fp, sl, r4
 800a422:	d00b      	beq.n	800a43c <_vfiprintf_r+0xc0>
 800a424:	465b      	mov	r3, fp
 800a426:	4622      	mov	r2, r4
 800a428:	4629      	mov	r1, r5
 800a42a:	4630      	mov	r0, r6
 800a42c:	f7ff ff94 	bl	800a358 <__sfputs_r>
 800a430:	3001      	adds	r0, #1
 800a432:	f000 80aa 	beq.w	800a58a <_vfiprintf_r+0x20e>
 800a436:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a438:	445a      	add	r2, fp
 800a43a:	9209      	str	r2, [sp, #36]	; 0x24
 800a43c:	f89a 3000 	ldrb.w	r3, [sl]
 800a440:	2b00      	cmp	r3, #0
 800a442:	f000 80a2 	beq.w	800a58a <_vfiprintf_r+0x20e>
 800a446:	2300      	movs	r3, #0
 800a448:	f04f 32ff 	mov.w	r2, #4294967295
 800a44c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a450:	f10a 0a01 	add.w	sl, sl, #1
 800a454:	9304      	str	r3, [sp, #16]
 800a456:	9307      	str	r3, [sp, #28]
 800a458:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a45c:	931a      	str	r3, [sp, #104]	; 0x68
 800a45e:	4654      	mov	r4, sl
 800a460:	2205      	movs	r2, #5
 800a462:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a466:	4858      	ldr	r0, [pc, #352]	; (800a5c8 <_vfiprintf_r+0x24c>)
 800a468:	f7f5 fe92 	bl	8000190 <memchr>
 800a46c:	9a04      	ldr	r2, [sp, #16]
 800a46e:	b9d8      	cbnz	r0, 800a4a8 <_vfiprintf_r+0x12c>
 800a470:	06d1      	lsls	r1, r2, #27
 800a472:	bf44      	itt	mi
 800a474:	2320      	movmi	r3, #32
 800a476:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a47a:	0713      	lsls	r3, r2, #28
 800a47c:	bf44      	itt	mi
 800a47e:	232b      	movmi	r3, #43	; 0x2b
 800a480:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a484:	f89a 3000 	ldrb.w	r3, [sl]
 800a488:	2b2a      	cmp	r3, #42	; 0x2a
 800a48a:	d015      	beq.n	800a4b8 <_vfiprintf_r+0x13c>
 800a48c:	9a07      	ldr	r2, [sp, #28]
 800a48e:	4654      	mov	r4, sl
 800a490:	2000      	movs	r0, #0
 800a492:	f04f 0c0a 	mov.w	ip, #10
 800a496:	4621      	mov	r1, r4
 800a498:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a49c:	3b30      	subs	r3, #48	; 0x30
 800a49e:	2b09      	cmp	r3, #9
 800a4a0:	d94e      	bls.n	800a540 <_vfiprintf_r+0x1c4>
 800a4a2:	b1b0      	cbz	r0, 800a4d2 <_vfiprintf_r+0x156>
 800a4a4:	9207      	str	r2, [sp, #28]
 800a4a6:	e014      	b.n	800a4d2 <_vfiprintf_r+0x156>
 800a4a8:	eba0 0308 	sub.w	r3, r0, r8
 800a4ac:	fa09 f303 	lsl.w	r3, r9, r3
 800a4b0:	4313      	orrs	r3, r2
 800a4b2:	9304      	str	r3, [sp, #16]
 800a4b4:	46a2      	mov	sl, r4
 800a4b6:	e7d2      	b.n	800a45e <_vfiprintf_r+0xe2>
 800a4b8:	9b03      	ldr	r3, [sp, #12]
 800a4ba:	1d19      	adds	r1, r3, #4
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	9103      	str	r1, [sp, #12]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	bfbb      	ittet	lt
 800a4c4:	425b      	neglt	r3, r3
 800a4c6:	f042 0202 	orrlt.w	r2, r2, #2
 800a4ca:	9307      	strge	r3, [sp, #28]
 800a4cc:	9307      	strlt	r3, [sp, #28]
 800a4ce:	bfb8      	it	lt
 800a4d0:	9204      	strlt	r2, [sp, #16]
 800a4d2:	7823      	ldrb	r3, [r4, #0]
 800a4d4:	2b2e      	cmp	r3, #46	; 0x2e
 800a4d6:	d10c      	bne.n	800a4f2 <_vfiprintf_r+0x176>
 800a4d8:	7863      	ldrb	r3, [r4, #1]
 800a4da:	2b2a      	cmp	r3, #42	; 0x2a
 800a4dc:	d135      	bne.n	800a54a <_vfiprintf_r+0x1ce>
 800a4de:	9b03      	ldr	r3, [sp, #12]
 800a4e0:	1d1a      	adds	r2, r3, #4
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	9203      	str	r2, [sp, #12]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	bfb8      	it	lt
 800a4ea:	f04f 33ff 	movlt.w	r3, #4294967295
 800a4ee:	3402      	adds	r4, #2
 800a4f0:	9305      	str	r3, [sp, #20]
 800a4f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a5d8 <_vfiprintf_r+0x25c>
 800a4f6:	7821      	ldrb	r1, [r4, #0]
 800a4f8:	2203      	movs	r2, #3
 800a4fa:	4650      	mov	r0, sl
 800a4fc:	f7f5 fe48 	bl	8000190 <memchr>
 800a500:	b140      	cbz	r0, 800a514 <_vfiprintf_r+0x198>
 800a502:	2340      	movs	r3, #64	; 0x40
 800a504:	eba0 000a 	sub.w	r0, r0, sl
 800a508:	fa03 f000 	lsl.w	r0, r3, r0
 800a50c:	9b04      	ldr	r3, [sp, #16]
 800a50e:	4303      	orrs	r3, r0
 800a510:	3401      	adds	r4, #1
 800a512:	9304      	str	r3, [sp, #16]
 800a514:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a518:	482c      	ldr	r0, [pc, #176]	; (800a5cc <_vfiprintf_r+0x250>)
 800a51a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a51e:	2206      	movs	r2, #6
 800a520:	f7f5 fe36 	bl	8000190 <memchr>
 800a524:	2800      	cmp	r0, #0
 800a526:	d03f      	beq.n	800a5a8 <_vfiprintf_r+0x22c>
 800a528:	4b29      	ldr	r3, [pc, #164]	; (800a5d0 <_vfiprintf_r+0x254>)
 800a52a:	bb1b      	cbnz	r3, 800a574 <_vfiprintf_r+0x1f8>
 800a52c:	9b03      	ldr	r3, [sp, #12]
 800a52e:	3307      	adds	r3, #7
 800a530:	f023 0307 	bic.w	r3, r3, #7
 800a534:	3308      	adds	r3, #8
 800a536:	9303      	str	r3, [sp, #12]
 800a538:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a53a:	443b      	add	r3, r7
 800a53c:	9309      	str	r3, [sp, #36]	; 0x24
 800a53e:	e767      	b.n	800a410 <_vfiprintf_r+0x94>
 800a540:	fb0c 3202 	mla	r2, ip, r2, r3
 800a544:	460c      	mov	r4, r1
 800a546:	2001      	movs	r0, #1
 800a548:	e7a5      	b.n	800a496 <_vfiprintf_r+0x11a>
 800a54a:	2300      	movs	r3, #0
 800a54c:	3401      	adds	r4, #1
 800a54e:	9305      	str	r3, [sp, #20]
 800a550:	4619      	mov	r1, r3
 800a552:	f04f 0c0a 	mov.w	ip, #10
 800a556:	4620      	mov	r0, r4
 800a558:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a55c:	3a30      	subs	r2, #48	; 0x30
 800a55e:	2a09      	cmp	r2, #9
 800a560:	d903      	bls.n	800a56a <_vfiprintf_r+0x1ee>
 800a562:	2b00      	cmp	r3, #0
 800a564:	d0c5      	beq.n	800a4f2 <_vfiprintf_r+0x176>
 800a566:	9105      	str	r1, [sp, #20]
 800a568:	e7c3      	b.n	800a4f2 <_vfiprintf_r+0x176>
 800a56a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a56e:	4604      	mov	r4, r0
 800a570:	2301      	movs	r3, #1
 800a572:	e7f0      	b.n	800a556 <_vfiprintf_r+0x1da>
 800a574:	ab03      	add	r3, sp, #12
 800a576:	9300      	str	r3, [sp, #0]
 800a578:	462a      	mov	r2, r5
 800a57a:	4b16      	ldr	r3, [pc, #88]	; (800a5d4 <_vfiprintf_r+0x258>)
 800a57c:	a904      	add	r1, sp, #16
 800a57e:	4630      	mov	r0, r6
 800a580:	f7fd fed4 	bl	800832c <_printf_float>
 800a584:	4607      	mov	r7, r0
 800a586:	1c78      	adds	r0, r7, #1
 800a588:	d1d6      	bne.n	800a538 <_vfiprintf_r+0x1bc>
 800a58a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a58c:	07d9      	lsls	r1, r3, #31
 800a58e:	d405      	bmi.n	800a59c <_vfiprintf_r+0x220>
 800a590:	89ab      	ldrh	r3, [r5, #12]
 800a592:	059a      	lsls	r2, r3, #22
 800a594:	d402      	bmi.n	800a59c <_vfiprintf_r+0x220>
 800a596:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a598:	f7ff fe74 	bl	800a284 <__retarget_lock_release_recursive>
 800a59c:	89ab      	ldrh	r3, [r5, #12]
 800a59e:	065b      	lsls	r3, r3, #25
 800a5a0:	f53f af12 	bmi.w	800a3c8 <_vfiprintf_r+0x4c>
 800a5a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a5a6:	e711      	b.n	800a3cc <_vfiprintf_r+0x50>
 800a5a8:	ab03      	add	r3, sp, #12
 800a5aa:	9300      	str	r3, [sp, #0]
 800a5ac:	462a      	mov	r2, r5
 800a5ae:	4b09      	ldr	r3, [pc, #36]	; (800a5d4 <_vfiprintf_r+0x258>)
 800a5b0:	a904      	add	r1, sp, #16
 800a5b2:	4630      	mov	r0, r6
 800a5b4:	f7fe f95e 	bl	8008874 <_printf_i>
 800a5b8:	e7e4      	b.n	800a584 <_vfiprintf_r+0x208>
 800a5ba:	bf00      	nop
 800a5bc:	0800b294 	.word	0x0800b294
 800a5c0:	0800b2b4 	.word	0x0800b2b4
 800a5c4:	0800b274 	.word	0x0800b274
 800a5c8:	0800b11c 	.word	0x0800b11c
 800a5cc:	0800b126 	.word	0x0800b126
 800a5d0:	0800832d 	.word	0x0800832d
 800a5d4:	0800a359 	.word	0x0800a359
 800a5d8:	0800b122 	.word	0x0800b122

0800a5dc <__swbuf_r>:
 800a5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5de:	460e      	mov	r6, r1
 800a5e0:	4614      	mov	r4, r2
 800a5e2:	4605      	mov	r5, r0
 800a5e4:	b118      	cbz	r0, 800a5ee <__swbuf_r+0x12>
 800a5e6:	6983      	ldr	r3, [r0, #24]
 800a5e8:	b90b      	cbnz	r3, 800a5ee <__swbuf_r+0x12>
 800a5ea:	f000 f9e7 	bl	800a9bc <__sinit>
 800a5ee:	4b21      	ldr	r3, [pc, #132]	; (800a674 <__swbuf_r+0x98>)
 800a5f0:	429c      	cmp	r4, r3
 800a5f2:	d12b      	bne.n	800a64c <__swbuf_r+0x70>
 800a5f4:	686c      	ldr	r4, [r5, #4]
 800a5f6:	69a3      	ldr	r3, [r4, #24]
 800a5f8:	60a3      	str	r3, [r4, #8]
 800a5fa:	89a3      	ldrh	r3, [r4, #12]
 800a5fc:	071a      	lsls	r2, r3, #28
 800a5fe:	d52f      	bpl.n	800a660 <__swbuf_r+0x84>
 800a600:	6923      	ldr	r3, [r4, #16]
 800a602:	b36b      	cbz	r3, 800a660 <__swbuf_r+0x84>
 800a604:	6923      	ldr	r3, [r4, #16]
 800a606:	6820      	ldr	r0, [r4, #0]
 800a608:	1ac0      	subs	r0, r0, r3
 800a60a:	6963      	ldr	r3, [r4, #20]
 800a60c:	b2f6      	uxtb	r6, r6
 800a60e:	4283      	cmp	r3, r0
 800a610:	4637      	mov	r7, r6
 800a612:	dc04      	bgt.n	800a61e <__swbuf_r+0x42>
 800a614:	4621      	mov	r1, r4
 800a616:	4628      	mov	r0, r5
 800a618:	f000 f93c 	bl	800a894 <_fflush_r>
 800a61c:	bb30      	cbnz	r0, 800a66c <__swbuf_r+0x90>
 800a61e:	68a3      	ldr	r3, [r4, #8]
 800a620:	3b01      	subs	r3, #1
 800a622:	60a3      	str	r3, [r4, #8]
 800a624:	6823      	ldr	r3, [r4, #0]
 800a626:	1c5a      	adds	r2, r3, #1
 800a628:	6022      	str	r2, [r4, #0]
 800a62a:	701e      	strb	r6, [r3, #0]
 800a62c:	6963      	ldr	r3, [r4, #20]
 800a62e:	3001      	adds	r0, #1
 800a630:	4283      	cmp	r3, r0
 800a632:	d004      	beq.n	800a63e <__swbuf_r+0x62>
 800a634:	89a3      	ldrh	r3, [r4, #12]
 800a636:	07db      	lsls	r3, r3, #31
 800a638:	d506      	bpl.n	800a648 <__swbuf_r+0x6c>
 800a63a:	2e0a      	cmp	r6, #10
 800a63c:	d104      	bne.n	800a648 <__swbuf_r+0x6c>
 800a63e:	4621      	mov	r1, r4
 800a640:	4628      	mov	r0, r5
 800a642:	f000 f927 	bl	800a894 <_fflush_r>
 800a646:	b988      	cbnz	r0, 800a66c <__swbuf_r+0x90>
 800a648:	4638      	mov	r0, r7
 800a64a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a64c:	4b0a      	ldr	r3, [pc, #40]	; (800a678 <__swbuf_r+0x9c>)
 800a64e:	429c      	cmp	r4, r3
 800a650:	d101      	bne.n	800a656 <__swbuf_r+0x7a>
 800a652:	68ac      	ldr	r4, [r5, #8]
 800a654:	e7cf      	b.n	800a5f6 <__swbuf_r+0x1a>
 800a656:	4b09      	ldr	r3, [pc, #36]	; (800a67c <__swbuf_r+0xa0>)
 800a658:	429c      	cmp	r4, r3
 800a65a:	bf08      	it	eq
 800a65c:	68ec      	ldreq	r4, [r5, #12]
 800a65e:	e7ca      	b.n	800a5f6 <__swbuf_r+0x1a>
 800a660:	4621      	mov	r1, r4
 800a662:	4628      	mov	r0, r5
 800a664:	f000 f81a 	bl	800a69c <__swsetup_r>
 800a668:	2800      	cmp	r0, #0
 800a66a:	d0cb      	beq.n	800a604 <__swbuf_r+0x28>
 800a66c:	f04f 37ff 	mov.w	r7, #4294967295
 800a670:	e7ea      	b.n	800a648 <__swbuf_r+0x6c>
 800a672:	bf00      	nop
 800a674:	0800b294 	.word	0x0800b294
 800a678:	0800b2b4 	.word	0x0800b2b4
 800a67c:	0800b274 	.word	0x0800b274

0800a680 <__ascii_wctomb>:
 800a680:	b149      	cbz	r1, 800a696 <__ascii_wctomb+0x16>
 800a682:	2aff      	cmp	r2, #255	; 0xff
 800a684:	bf85      	ittet	hi
 800a686:	238a      	movhi	r3, #138	; 0x8a
 800a688:	6003      	strhi	r3, [r0, #0]
 800a68a:	700a      	strbls	r2, [r1, #0]
 800a68c:	f04f 30ff 	movhi.w	r0, #4294967295
 800a690:	bf98      	it	ls
 800a692:	2001      	movls	r0, #1
 800a694:	4770      	bx	lr
 800a696:	4608      	mov	r0, r1
 800a698:	4770      	bx	lr
	...

0800a69c <__swsetup_r>:
 800a69c:	4b32      	ldr	r3, [pc, #200]	; (800a768 <__swsetup_r+0xcc>)
 800a69e:	b570      	push	{r4, r5, r6, lr}
 800a6a0:	681d      	ldr	r5, [r3, #0]
 800a6a2:	4606      	mov	r6, r0
 800a6a4:	460c      	mov	r4, r1
 800a6a6:	b125      	cbz	r5, 800a6b2 <__swsetup_r+0x16>
 800a6a8:	69ab      	ldr	r3, [r5, #24]
 800a6aa:	b913      	cbnz	r3, 800a6b2 <__swsetup_r+0x16>
 800a6ac:	4628      	mov	r0, r5
 800a6ae:	f000 f985 	bl	800a9bc <__sinit>
 800a6b2:	4b2e      	ldr	r3, [pc, #184]	; (800a76c <__swsetup_r+0xd0>)
 800a6b4:	429c      	cmp	r4, r3
 800a6b6:	d10f      	bne.n	800a6d8 <__swsetup_r+0x3c>
 800a6b8:	686c      	ldr	r4, [r5, #4]
 800a6ba:	89a3      	ldrh	r3, [r4, #12]
 800a6bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a6c0:	0719      	lsls	r1, r3, #28
 800a6c2:	d42c      	bmi.n	800a71e <__swsetup_r+0x82>
 800a6c4:	06dd      	lsls	r5, r3, #27
 800a6c6:	d411      	bmi.n	800a6ec <__swsetup_r+0x50>
 800a6c8:	2309      	movs	r3, #9
 800a6ca:	6033      	str	r3, [r6, #0]
 800a6cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a6d0:	81a3      	strh	r3, [r4, #12]
 800a6d2:	f04f 30ff 	mov.w	r0, #4294967295
 800a6d6:	e03e      	b.n	800a756 <__swsetup_r+0xba>
 800a6d8:	4b25      	ldr	r3, [pc, #148]	; (800a770 <__swsetup_r+0xd4>)
 800a6da:	429c      	cmp	r4, r3
 800a6dc:	d101      	bne.n	800a6e2 <__swsetup_r+0x46>
 800a6de:	68ac      	ldr	r4, [r5, #8]
 800a6e0:	e7eb      	b.n	800a6ba <__swsetup_r+0x1e>
 800a6e2:	4b24      	ldr	r3, [pc, #144]	; (800a774 <__swsetup_r+0xd8>)
 800a6e4:	429c      	cmp	r4, r3
 800a6e6:	bf08      	it	eq
 800a6e8:	68ec      	ldreq	r4, [r5, #12]
 800a6ea:	e7e6      	b.n	800a6ba <__swsetup_r+0x1e>
 800a6ec:	0758      	lsls	r0, r3, #29
 800a6ee:	d512      	bpl.n	800a716 <__swsetup_r+0x7a>
 800a6f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6f2:	b141      	cbz	r1, 800a706 <__swsetup_r+0x6a>
 800a6f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6f8:	4299      	cmp	r1, r3
 800a6fa:	d002      	beq.n	800a702 <__swsetup_r+0x66>
 800a6fc:	4630      	mov	r0, r6
 800a6fe:	f7fd fccb 	bl	8008098 <_free_r>
 800a702:	2300      	movs	r3, #0
 800a704:	6363      	str	r3, [r4, #52]	; 0x34
 800a706:	89a3      	ldrh	r3, [r4, #12]
 800a708:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a70c:	81a3      	strh	r3, [r4, #12]
 800a70e:	2300      	movs	r3, #0
 800a710:	6063      	str	r3, [r4, #4]
 800a712:	6923      	ldr	r3, [r4, #16]
 800a714:	6023      	str	r3, [r4, #0]
 800a716:	89a3      	ldrh	r3, [r4, #12]
 800a718:	f043 0308 	orr.w	r3, r3, #8
 800a71c:	81a3      	strh	r3, [r4, #12]
 800a71e:	6923      	ldr	r3, [r4, #16]
 800a720:	b94b      	cbnz	r3, 800a736 <__swsetup_r+0x9a>
 800a722:	89a3      	ldrh	r3, [r4, #12]
 800a724:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a728:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a72c:	d003      	beq.n	800a736 <__swsetup_r+0x9a>
 800a72e:	4621      	mov	r1, r4
 800a730:	4630      	mov	r0, r6
 800a732:	f000 fa05 	bl	800ab40 <__smakebuf_r>
 800a736:	89a0      	ldrh	r0, [r4, #12]
 800a738:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a73c:	f010 0301 	ands.w	r3, r0, #1
 800a740:	d00a      	beq.n	800a758 <__swsetup_r+0xbc>
 800a742:	2300      	movs	r3, #0
 800a744:	60a3      	str	r3, [r4, #8]
 800a746:	6963      	ldr	r3, [r4, #20]
 800a748:	425b      	negs	r3, r3
 800a74a:	61a3      	str	r3, [r4, #24]
 800a74c:	6923      	ldr	r3, [r4, #16]
 800a74e:	b943      	cbnz	r3, 800a762 <__swsetup_r+0xc6>
 800a750:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a754:	d1ba      	bne.n	800a6cc <__swsetup_r+0x30>
 800a756:	bd70      	pop	{r4, r5, r6, pc}
 800a758:	0781      	lsls	r1, r0, #30
 800a75a:	bf58      	it	pl
 800a75c:	6963      	ldrpl	r3, [r4, #20]
 800a75e:	60a3      	str	r3, [r4, #8]
 800a760:	e7f4      	b.n	800a74c <__swsetup_r+0xb0>
 800a762:	2000      	movs	r0, #0
 800a764:	e7f7      	b.n	800a756 <__swsetup_r+0xba>
 800a766:	bf00      	nop
 800a768:	20000010 	.word	0x20000010
 800a76c:	0800b294 	.word	0x0800b294
 800a770:	0800b2b4 	.word	0x0800b2b4
 800a774:	0800b274 	.word	0x0800b274

0800a778 <abort>:
 800a778:	b508      	push	{r3, lr}
 800a77a:	2006      	movs	r0, #6
 800a77c:	f000 fa50 	bl	800ac20 <raise>
 800a780:	2001      	movs	r0, #1
 800a782:	f7f7 ffa5 	bl	80026d0 <_exit>
	...

0800a788 <__sflush_r>:
 800a788:	898a      	ldrh	r2, [r1, #12]
 800a78a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a78e:	4605      	mov	r5, r0
 800a790:	0710      	lsls	r0, r2, #28
 800a792:	460c      	mov	r4, r1
 800a794:	d458      	bmi.n	800a848 <__sflush_r+0xc0>
 800a796:	684b      	ldr	r3, [r1, #4]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	dc05      	bgt.n	800a7a8 <__sflush_r+0x20>
 800a79c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	dc02      	bgt.n	800a7a8 <__sflush_r+0x20>
 800a7a2:	2000      	movs	r0, #0
 800a7a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a7aa:	2e00      	cmp	r6, #0
 800a7ac:	d0f9      	beq.n	800a7a2 <__sflush_r+0x1a>
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a7b4:	682f      	ldr	r7, [r5, #0]
 800a7b6:	602b      	str	r3, [r5, #0]
 800a7b8:	d032      	beq.n	800a820 <__sflush_r+0x98>
 800a7ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a7bc:	89a3      	ldrh	r3, [r4, #12]
 800a7be:	075a      	lsls	r2, r3, #29
 800a7c0:	d505      	bpl.n	800a7ce <__sflush_r+0x46>
 800a7c2:	6863      	ldr	r3, [r4, #4]
 800a7c4:	1ac0      	subs	r0, r0, r3
 800a7c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a7c8:	b10b      	cbz	r3, 800a7ce <__sflush_r+0x46>
 800a7ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a7cc:	1ac0      	subs	r0, r0, r3
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	4602      	mov	r2, r0
 800a7d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a7d4:	6a21      	ldr	r1, [r4, #32]
 800a7d6:	4628      	mov	r0, r5
 800a7d8:	47b0      	blx	r6
 800a7da:	1c43      	adds	r3, r0, #1
 800a7dc:	89a3      	ldrh	r3, [r4, #12]
 800a7de:	d106      	bne.n	800a7ee <__sflush_r+0x66>
 800a7e0:	6829      	ldr	r1, [r5, #0]
 800a7e2:	291d      	cmp	r1, #29
 800a7e4:	d82c      	bhi.n	800a840 <__sflush_r+0xb8>
 800a7e6:	4a2a      	ldr	r2, [pc, #168]	; (800a890 <__sflush_r+0x108>)
 800a7e8:	40ca      	lsrs	r2, r1
 800a7ea:	07d6      	lsls	r6, r2, #31
 800a7ec:	d528      	bpl.n	800a840 <__sflush_r+0xb8>
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	6062      	str	r2, [r4, #4]
 800a7f2:	04d9      	lsls	r1, r3, #19
 800a7f4:	6922      	ldr	r2, [r4, #16]
 800a7f6:	6022      	str	r2, [r4, #0]
 800a7f8:	d504      	bpl.n	800a804 <__sflush_r+0x7c>
 800a7fa:	1c42      	adds	r2, r0, #1
 800a7fc:	d101      	bne.n	800a802 <__sflush_r+0x7a>
 800a7fe:	682b      	ldr	r3, [r5, #0]
 800a800:	b903      	cbnz	r3, 800a804 <__sflush_r+0x7c>
 800a802:	6560      	str	r0, [r4, #84]	; 0x54
 800a804:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a806:	602f      	str	r7, [r5, #0]
 800a808:	2900      	cmp	r1, #0
 800a80a:	d0ca      	beq.n	800a7a2 <__sflush_r+0x1a>
 800a80c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a810:	4299      	cmp	r1, r3
 800a812:	d002      	beq.n	800a81a <__sflush_r+0x92>
 800a814:	4628      	mov	r0, r5
 800a816:	f7fd fc3f 	bl	8008098 <_free_r>
 800a81a:	2000      	movs	r0, #0
 800a81c:	6360      	str	r0, [r4, #52]	; 0x34
 800a81e:	e7c1      	b.n	800a7a4 <__sflush_r+0x1c>
 800a820:	6a21      	ldr	r1, [r4, #32]
 800a822:	2301      	movs	r3, #1
 800a824:	4628      	mov	r0, r5
 800a826:	47b0      	blx	r6
 800a828:	1c41      	adds	r1, r0, #1
 800a82a:	d1c7      	bne.n	800a7bc <__sflush_r+0x34>
 800a82c:	682b      	ldr	r3, [r5, #0]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d0c4      	beq.n	800a7bc <__sflush_r+0x34>
 800a832:	2b1d      	cmp	r3, #29
 800a834:	d001      	beq.n	800a83a <__sflush_r+0xb2>
 800a836:	2b16      	cmp	r3, #22
 800a838:	d101      	bne.n	800a83e <__sflush_r+0xb6>
 800a83a:	602f      	str	r7, [r5, #0]
 800a83c:	e7b1      	b.n	800a7a2 <__sflush_r+0x1a>
 800a83e:	89a3      	ldrh	r3, [r4, #12]
 800a840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a844:	81a3      	strh	r3, [r4, #12]
 800a846:	e7ad      	b.n	800a7a4 <__sflush_r+0x1c>
 800a848:	690f      	ldr	r7, [r1, #16]
 800a84a:	2f00      	cmp	r7, #0
 800a84c:	d0a9      	beq.n	800a7a2 <__sflush_r+0x1a>
 800a84e:	0793      	lsls	r3, r2, #30
 800a850:	680e      	ldr	r6, [r1, #0]
 800a852:	bf08      	it	eq
 800a854:	694b      	ldreq	r3, [r1, #20]
 800a856:	600f      	str	r7, [r1, #0]
 800a858:	bf18      	it	ne
 800a85a:	2300      	movne	r3, #0
 800a85c:	eba6 0807 	sub.w	r8, r6, r7
 800a860:	608b      	str	r3, [r1, #8]
 800a862:	f1b8 0f00 	cmp.w	r8, #0
 800a866:	dd9c      	ble.n	800a7a2 <__sflush_r+0x1a>
 800a868:	6a21      	ldr	r1, [r4, #32]
 800a86a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a86c:	4643      	mov	r3, r8
 800a86e:	463a      	mov	r2, r7
 800a870:	4628      	mov	r0, r5
 800a872:	47b0      	blx	r6
 800a874:	2800      	cmp	r0, #0
 800a876:	dc06      	bgt.n	800a886 <__sflush_r+0xfe>
 800a878:	89a3      	ldrh	r3, [r4, #12]
 800a87a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a87e:	81a3      	strh	r3, [r4, #12]
 800a880:	f04f 30ff 	mov.w	r0, #4294967295
 800a884:	e78e      	b.n	800a7a4 <__sflush_r+0x1c>
 800a886:	4407      	add	r7, r0
 800a888:	eba8 0800 	sub.w	r8, r8, r0
 800a88c:	e7e9      	b.n	800a862 <__sflush_r+0xda>
 800a88e:	bf00      	nop
 800a890:	20400001 	.word	0x20400001

0800a894 <_fflush_r>:
 800a894:	b538      	push	{r3, r4, r5, lr}
 800a896:	690b      	ldr	r3, [r1, #16]
 800a898:	4605      	mov	r5, r0
 800a89a:	460c      	mov	r4, r1
 800a89c:	b913      	cbnz	r3, 800a8a4 <_fflush_r+0x10>
 800a89e:	2500      	movs	r5, #0
 800a8a0:	4628      	mov	r0, r5
 800a8a2:	bd38      	pop	{r3, r4, r5, pc}
 800a8a4:	b118      	cbz	r0, 800a8ae <_fflush_r+0x1a>
 800a8a6:	6983      	ldr	r3, [r0, #24]
 800a8a8:	b90b      	cbnz	r3, 800a8ae <_fflush_r+0x1a>
 800a8aa:	f000 f887 	bl	800a9bc <__sinit>
 800a8ae:	4b14      	ldr	r3, [pc, #80]	; (800a900 <_fflush_r+0x6c>)
 800a8b0:	429c      	cmp	r4, r3
 800a8b2:	d11b      	bne.n	800a8ec <_fflush_r+0x58>
 800a8b4:	686c      	ldr	r4, [r5, #4]
 800a8b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d0ef      	beq.n	800a89e <_fflush_r+0xa>
 800a8be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a8c0:	07d0      	lsls	r0, r2, #31
 800a8c2:	d404      	bmi.n	800a8ce <_fflush_r+0x3a>
 800a8c4:	0599      	lsls	r1, r3, #22
 800a8c6:	d402      	bmi.n	800a8ce <_fflush_r+0x3a>
 800a8c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8ca:	f7ff fcda 	bl	800a282 <__retarget_lock_acquire_recursive>
 800a8ce:	4628      	mov	r0, r5
 800a8d0:	4621      	mov	r1, r4
 800a8d2:	f7ff ff59 	bl	800a788 <__sflush_r>
 800a8d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a8d8:	07da      	lsls	r2, r3, #31
 800a8da:	4605      	mov	r5, r0
 800a8dc:	d4e0      	bmi.n	800a8a0 <_fflush_r+0xc>
 800a8de:	89a3      	ldrh	r3, [r4, #12]
 800a8e0:	059b      	lsls	r3, r3, #22
 800a8e2:	d4dd      	bmi.n	800a8a0 <_fflush_r+0xc>
 800a8e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8e6:	f7ff fccd 	bl	800a284 <__retarget_lock_release_recursive>
 800a8ea:	e7d9      	b.n	800a8a0 <_fflush_r+0xc>
 800a8ec:	4b05      	ldr	r3, [pc, #20]	; (800a904 <_fflush_r+0x70>)
 800a8ee:	429c      	cmp	r4, r3
 800a8f0:	d101      	bne.n	800a8f6 <_fflush_r+0x62>
 800a8f2:	68ac      	ldr	r4, [r5, #8]
 800a8f4:	e7df      	b.n	800a8b6 <_fflush_r+0x22>
 800a8f6:	4b04      	ldr	r3, [pc, #16]	; (800a908 <_fflush_r+0x74>)
 800a8f8:	429c      	cmp	r4, r3
 800a8fa:	bf08      	it	eq
 800a8fc:	68ec      	ldreq	r4, [r5, #12]
 800a8fe:	e7da      	b.n	800a8b6 <_fflush_r+0x22>
 800a900:	0800b294 	.word	0x0800b294
 800a904:	0800b2b4 	.word	0x0800b2b4
 800a908:	0800b274 	.word	0x0800b274

0800a90c <std>:
 800a90c:	2300      	movs	r3, #0
 800a90e:	b510      	push	{r4, lr}
 800a910:	4604      	mov	r4, r0
 800a912:	e9c0 3300 	strd	r3, r3, [r0]
 800a916:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a91a:	6083      	str	r3, [r0, #8]
 800a91c:	8181      	strh	r1, [r0, #12]
 800a91e:	6643      	str	r3, [r0, #100]	; 0x64
 800a920:	81c2      	strh	r2, [r0, #14]
 800a922:	6183      	str	r3, [r0, #24]
 800a924:	4619      	mov	r1, r3
 800a926:	2208      	movs	r2, #8
 800a928:	305c      	adds	r0, #92	; 0x5c
 800a92a:	f7fd fbad 	bl	8008088 <memset>
 800a92e:	4b05      	ldr	r3, [pc, #20]	; (800a944 <std+0x38>)
 800a930:	6263      	str	r3, [r4, #36]	; 0x24
 800a932:	4b05      	ldr	r3, [pc, #20]	; (800a948 <std+0x3c>)
 800a934:	62a3      	str	r3, [r4, #40]	; 0x28
 800a936:	4b05      	ldr	r3, [pc, #20]	; (800a94c <std+0x40>)
 800a938:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a93a:	4b05      	ldr	r3, [pc, #20]	; (800a950 <std+0x44>)
 800a93c:	6224      	str	r4, [r4, #32]
 800a93e:	6323      	str	r3, [r4, #48]	; 0x30
 800a940:	bd10      	pop	{r4, pc}
 800a942:	bf00      	nop
 800a944:	0800ac59 	.word	0x0800ac59
 800a948:	0800ac7b 	.word	0x0800ac7b
 800a94c:	0800acb3 	.word	0x0800acb3
 800a950:	0800acd7 	.word	0x0800acd7

0800a954 <_cleanup_r>:
 800a954:	4901      	ldr	r1, [pc, #4]	; (800a95c <_cleanup_r+0x8>)
 800a956:	f000 b8af 	b.w	800aab8 <_fwalk_reent>
 800a95a:	bf00      	nop
 800a95c:	0800a895 	.word	0x0800a895

0800a960 <__sfmoreglue>:
 800a960:	b570      	push	{r4, r5, r6, lr}
 800a962:	1e4a      	subs	r2, r1, #1
 800a964:	2568      	movs	r5, #104	; 0x68
 800a966:	4355      	muls	r5, r2
 800a968:	460e      	mov	r6, r1
 800a96a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a96e:	f7fd fbe3 	bl	8008138 <_malloc_r>
 800a972:	4604      	mov	r4, r0
 800a974:	b140      	cbz	r0, 800a988 <__sfmoreglue+0x28>
 800a976:	2100      	movs	r1, #0
 800a978:	e9c0 1600 	strd	r1, r6, [r0]
 800a97c:	300c      	adds	r0, #12
 800a97e:	60a0      	str	r0, [r4, #8]
 800a980:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a984:	f7fd fb80 	bl	8008088 <memset>
 800a988:	4620      	mov	r0, r4
 800a98a:	bd70      	pop	{r4, r5, r6, pc}

0800a98c <__sfp_lock_acquire>:
 800a98c:	4801      	ldr	r0, [pc, #4]	; (800a994 <__sfp_lock_acquire+0x8>)
 800a98e:	f7ff bc78 	b.w	800a282 <__retarget_lock_acquire_recursive>
 800a992:	bf00      	nop
 800a994:	200029e0 	.word	0x200029e0

0800a998 <__sfp_lock_release>:
 800a998:	4801      	ldr	r0, [pc, #4]	; (800a9a0 <__sfp_lock_release+0x8>)
 800a99a:	f7ff bc73 	b.w	800a284 <__retarget_lock_release_recursive>
 800a99e:	bf00      	nop
 800a9a0:	200029e0 	.word	0x200029e0

0800a9a4 <__sinit_lock_acquire>:
 800a9a4:	4801      	ldr	r0, [pc, #4]	; (800a9ac <__sinit_lock_acquire+0x8>)
 800a9a6:	f7ff bc6c 	b.w	800a282 <__retarget_lock_acquire_recursive>
 800a9aa:	bf00      	nop
 800a9ac:	200029db 	.word	0x200029db

0800a9b0 <__sinit_lock_release>:
 800a9b0:	4801      	ldr	r0, [pc, #4]	; (800a9b8 <__sinit_lock_release+0x8>)
 800a9b2:	f7ff bc67 	b.w	800a284 <__retarget_lock_release_recursive>
 800a9b6:	bf00      	nop
 800a9b8:	200029db 	.word	0x200029db

0800a9bc <__sinit>:
 800a9bc:	b510      	push	{r4, lr}
 800a9be:	4604      	mov	r4, r0
 800a9c0:	f7ff fff0 	bl	800a9a4 <__sinit_lock_acquire>
 800a9c4:	69a3      	ldr	r3, [r4, #24]
 800a9c6:	b11b      	cbz	r3, 800a9d0 <__sinit+0x14>
 800a9c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9cc:	f7ff bff0 	b.w	800a9b0 <__sinit_lock_release>
 800a9d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a9d4:	6523      	str	r3, [r4, #80]	; 0x50
 800a9d6:	4b13      	ldr	r3, [pc, #76]	; (800aa24 <__sinit+0x68>)
 800a9d8:	4a13      	ldr	r2, [pc, #76]	; (800aa28 <__sinit+0x6c>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	62a2      	str	r2, [r4, #40]	; 0x28
 800a9de:	42a3      	cmp	r3, r4
 800a9e0:	bf04      	itt	eq
 800a9e2:	2301      	moveq	r3, #1
 800a9e4:	61a3      	streq	r3, [r4, #24]
 800a9e6:	4620      	mov	r0, r4
 800a9e8:	f000 f820 	bl	800aa2c <__sfp>
 800a9ec:	6060      	str	r0, [r4, #4]
 800a9ee:	4620      	mov	r0, r4
 800a9f0:	f000 f81c 	bl	800aa2c <__sfp>
 800a9f4:	60a0      	str	r0, [r4, #8]
 800a9f6:	4620      	mov	r0, r4
 800a9f8:	f000 f818 	bl	800aa2c <__sfp>
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	60e0      	str	r0, [r4, #12]
 800aa00:	2104      	movs	r1, #4
 800aa02:	6860      	ldr	r0, [r4, #4]
 800aa04:	f7ff ff82 	bl	800a90c <std>
 800aa08:	68a0      	ldr	r0, [r4, #8]
 800aa0a:	2201      	movs	r2, #1
 800aa0c:	2109      	movs	r1, #9
 800aa0e:	f7ff ff7d 	bl	800a90c <std>
 800aa12:	68e0      	ldr	r0, [r4, #12]
 800aa14:	2202      	movs	r2, #2
 800aa16:	2112      	movs	r1, #18
 800aa18:	f7ff ff78 	bl	800a90c <std>
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	61a3      	str	r3, [r4, #24]
 800aa20:	e7d2      	b.n	800a9c8 <__sinit+0xc>
 800aa22:	bf00      	nop
 800aa24:	0800aef4 	.word	0x0800aef4
 800aa28:	0800a955 	.word	0x0800a955

0800aa2c <__sfp>:
 800aa2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa2e:	4607      	mov	r7, r0
 800aa30:	f7ff ffac 	bl	800a98c <__sfp_lock_acquire>
 800aa34:	4b1e      	ldr	r3, [pc, #120]	; (800aab0 <__sfp+0x84>)
 800aa36:	681e      	ldr	r6, [r3, #0]
 800aa38:	69b3      	ldr	r3, [r6, #24]
 800aa3a:	b913      	cbnz	r3, 800aa42 <__sfp+0x16>
 800aa3c:	4630      	mov	r0, r6
 800aa3e:	f7ff ffbd 	bl	800a9bc <__sinit>
 800aa42:	3648      	adds	r6, #72	; 0x48
 800aa44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aa48:	3b01      	subs	r3, #1
 800aa4a:	d503      	bpl.n	800aa54 <__sfp+0x28>
 800aa4c:	6833      	ldr	r3, [r6, #0]
 800aa4e:	b30b      	cbz	r3, 800aa94 <__sfp+0x68>
 800aa50:	6836      	ldr	r6, [r6, #0]
 800aa52:	e7f7      	b.n	800aa44 <__sfp+0x18>
 800aa54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aa58:	b9d5      	cbnz	r5, 800aa90 <__sfp+0x64>
 800aa5a:	4b16      	ldr	r3, [pc, #88]	; (800aab4 <__sfp+0x88>)
 800aa5c:	60e3      	str	r3, [r4, #12]
 800aa5e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aa62:	6665      	str	r5, [r4, #100]	; 0x64
 800aa64:	f7ff fc0c 	bl	800a280 <__retarget_lock_init_recursive>
 800aa68:	f7ff ff96 	bl	800a998 <__sfp_lock_release>
 800aa6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aa70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aa74:	6025      	str	r5, [r4, #0]
 800aa76:	61a5      	str	r5, [r4, #24]
 800aa78:	2208      	movs	r2, #8
 800aa7a:	4629      	mov	r1, r5
 800aa7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aa80:	f7fd fb02 	bl	8008088 <memset>
 800aa84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aa88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aa8c:	4620      	mov	r0, r4
 800aa8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa90:	3468      	adds	r4, #104	; 0x68
 800aa92:	e7d9      	b.n	800aa48 <__sfp+0x1c>
 800aa94:	2104      	movs	r1, #4
 800aa96:	4638      	mov	r0, r7
 800aa98:	f7ff ff62 	bl	800a960 <__sfmoreglue>
 800aa9c:	4604      	mov	r4, r0
 800aa9e:	6030      	str	r0, [r6, #0]
 800aaa0:	2800      	cmp	r0, #0
 800aaa2:	d1d5      	bne.n	800aa50 <__sfp+0x24>
 800aaa4:	f7ff ff78 	bl	800a998 <__sfp_lock_release>
 800aaa8:	230c      	movs	r3, #12
 800aaaa:	603b      	str	r3, [r7, #0]
 800aaac:	e7ee      	b.n	800aa8c <__sfp+0x60>
 800aaae:	bf00      	nop
 800aab0:	0800aef4 	.word	0x0800aef4
 800aab4:	ffff0001 	.word	0xffff0001

0800aab8 <_fwalk_reent>:
 800aab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aabc:	4606      	mov	r6, r0
 800aabe:	4688      	mov	r8, r1
 800aac0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aac4:	2700      	movs	r7, #0
 800aac6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aaca:	f1b9 0901 	subs.w	r9, r9, #1
 800aace:	d505      	bpl.n	800aadc <_fwalk_reent+0x24>
 800aad0:	6824      	ldr	r4, [r4, #0]
 800aad2:	2c00      	cmp	r4, #0
 800aad4:	d1f7      	bne.n	800aac6 <_fwalk_reent+0xe>
 800aad6:	4638      	mov	r0, r7
 800aad8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aadc:	89ab      	ldrh	r3, [r5, #12]
 800aade:	2b01      	cmp	r3, #1
 800aae0:	d907      	bls.n	800aaf2 <_fwalk_reent+0x3a>
 800aae2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aae6:	3301      	adds	r3, #1
 800aae8:	d003      	beq.n	800aaf2 <_fwalk_reent+0x3a>
 800aaea:	4629      	mov	r1, r5
 800aaec:	4630      	mov	r0, r6
 800aaee:	47c0      	blx	r8
 800aaf0:	4307      	orrs	r7, r0
 800aaf2:	3568      	adds	r5, #104	; 0x68
 800aaf4:	e7e9      	b.n	800aaca <_fwalk_reent+0x12>

0800aaf6 <__swhatbuf_r>:
 800aaf6:	b570      	push	{r4, r5, r6, lr}
 800aaf8:	460e      	mov	r6, r1
 800aafa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aafe:	2900      	cmp	r1, #0
 800ab00:	b096      	sub	sp, #88	; 0x58
 800ab02:	4614      	mov	r4, r2
 800ab04:	461d      	mov	r5, r3
 800ab06:	da07      	bge.n	800ab18 <__swhatbuf_r+0x22>
 800ab08:	2300      	movs	r3, #0
 800ab0a:	602b      	str	r3, [r5, #0]
 800ab0c:	89b3      	ldrh	r3, [r6, #12]
 800ab0e:	061a      	lsls	r2, r3, #24
 800ab10:	d410      	bmi.n	800ab34 <__swhatbuf_r+0x3e>
 800ab12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab16:	e00e      	b.n	800ab36 <__swhatbuf_r+0x40>
 800ab18:	466a      	mov	r2, sp
 800ab1a:	f000 f903 	bl	800ad24 <_fstat_r>
 800ab1e:	2800      	cmp	r0, #0
 800ab20:	dbf2      	blt.n	800ab08 <__swhatbuf_r+0x12>
 800ab22:	9a01      	ldr	r2, [sp, #4]
 800ab24:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ab28:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ab2c:	425a      	negs	r2, r3
 800ab2e:	415a      	adcs	r2, r3
 800ab30:	602a      	str	r2, [r5, #0]
 800ab32:	e7ee      	b.n	800ab12 <__swhatbuf_r+0x1c>
 800ab34:	2340      	movs	r3, #64	; 0x40
 800ab36:	2000      	movs	r0, #0
 800ab38:	6023      	str	r3, [r4, #0]
 800ab3a:	b016      	add	sp, #88	; 0x58
 800ab3c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ab40 <__smakebuf_r>:
 800ab40:	898b      	ldrh	r3, [r1, #12]
 800ab42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ab44:	079d      	lsls	r5, r3, #30
 800ab46:	4606      	mov	r6, r0
 800ab48:	460c      	mov	r4, r1
 800ab4a:	d507      	bpl.n	800ab5c <__smakebuf_r+0x1c>
 800ab4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ab50:	6023      	str	r3, [r4, #0]
 800ab52:	6123      	str	r3, [r4, #16]
 800ab54:	2301      	movs	r3, #1
 800ab56:	6163      	str	r3, [r4, #20]
 800ab58:	b002      	add	sp, #8
 800ab5a:	bd70      	pop	{r4, r5, r6, pc}
 800ab5c:	ab01      	add	r3, sp, #4
 800ab5e:	466a      	mov	r2, sp
 800ab60:	f7ff ffc9 	bl	800aaf6 <__swhatbuf_r>
 800ab64:	9900      	ldr	r1, [sp, #0]
 800ab66:	4605      	mov	r5, r0
 800ab68:	4630      	mov	r0, r6
 800ab6a:	f7fd fae5 	bl	8008138 <_malloc_r>
 800ab6e:	b948      	cbnz	r0, 800ab84 <__smakebuf_r+0x44>
 800ab70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab74:	059a      	lsls	r2, r3, #22
 800ab76:	d4ef      	bmi.n	800ab58 <__smakebuf_r+0x18>
 800ab78:	f023 0303 	bic.w	r3, r3, #3
 800ab7c:	f043 0302 	orr.w	r3, r3, #2
 800ab80:	81a3      	strh	r3, [r4, #12]
 800ab82:	e7e3      	b.n	800ab4c <__smakebuf_r+0xc>
 800ab84:	4b0d      	ldr	r3, [pc, #52]	; (800abbc <__smakebuf_r+0x7c>)
 800ab86:	62b3      	str	r3, [r6, #40]	; 0x28
 800ab88:	89a3      	ldrh	r3, [r4, #12]
 800ab8a:	6020      	str	r0, [r4, #0]
 800ab8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab90:	81a3      	strh	r3, [r4, #12]
 800ab92:	9b00      	ldr	r3, [sp, #0]
 800ab94:	6163      	str	r3, [r4, #20]
 800ab96:	9b01      	ldr	r3, [sp, #4]
 800ab98:	6120      	str	r0, [r4, #16]
 800ab9a:	b15b      	cbz	r3, 800abb4 <__smakebuf_r+0x74>
 800ab9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aba0:	4630      	mov	r0, r6
 800aba2:	f000 f8d1 	bl	800ad48 <_isatty_r>
 800aba6:	b128      	cbz	r0, 800abb4 <__smakebuf_r+0x74>
 800aba8:	89a3      	ldrh	r3, [r4, #12]
 800abaa:	f023 0303 	bic.w	r3, r3, #3
 800abae:	f043 0301 	orr.w	r3, r3, #1
 800abb2:	81a3      	strh	r3, [r4, #12]
 800abb4:	89a0      	ldrh	r0, [r4, #12]
 800abb6:	4305      	orrs	r5, r0
 800abb8:	81a5      	strh	r5, [r4, #12]
 800abba:	e7cd      	b.n	800ab58 <__smakebuf_r+0x18>
 800abbc:	0800a955 	.word	0x0800a955

0800abc0 <_malloc_usable_size_r>:
 800abc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abc4:	1f18      	subs	r0, r3, #4
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	bfbc      	itt	lt
 800abca:	580b      	ldrlt	r3, [r1, r0]
 800abcc:	18c0      	addlt	r0, r0, r3
 800abce:	4770      	bx	lr

0800abd0 <_raise_r>:
 800abd0:	291f      	cmp	r1, #31
 800abd2:	b538      	push	{r3, r4, r5, lr}
 800abd4:	4604      	mov	r4, r0
 800abd6:	460d      	mov	r5, r1
 800abd8:	d904      	bls.n	800abe4 <_raise_r+0x14>
 800abda:	2316      	movs	r3, #22
 800abdc:	6003      	str	r3, [r0, #0]
 800abde:	f04f 30ff 	mov.w	r0, #4294967295
 800abe2:	bd38      	pop	{r3, r4, r5, pc}
 800abe4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800abe6:	b112      	cbz	r2, 800abee <_raise_r+0x1e>
 800abe8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800abec:	b94b      	cbnz	r3, 800ac02 <_raise_r+0x32>
 800abee:	4620      	mov	r0, r4
 800abf0:	f000 f830 	bl	800ac54 <_getpid_r>
 800abf4:	462a      	mov	r2, r5
 800abf6:	4601      	mov	r1, r0
 800abf8:	4620      	mov	r0, r4
 800abfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abfe:	f000 b817 	b.w	800ac30 <_kill_r>
 800ac02:	2b01      	cmp	r3, #1
 800ac04:	d00a      	beq.n	800ac1c <_raise_r+0x4c>
 800ac06:	1c59      	adds	r1, r3, #1
 800ac08:	d103      	bne.n	800ac12 <_raise_r+0x42>
 800ac0a:	2316      	movs	r3, #22
 800ac0c:	6003      	str	r3, [r0, #0]
 800ac0e:	2001      	movs	r0, #1
 800ac10:	e7e7      	b.n	800abe2 <_raise_r+0x12>
 800ac12:	2400      	movs	r4, #0
 800ac14:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ac18:	4628      	mov	r0, r5
 800ac1a:	4798      	blx	r3
 800ac1c:	2000      	movs	r0, #0
 800ac1e:	e7e0      	b.n	800abe2 <_raise_r+0x12>

0800ac20 <raise>:
 800ac20:	4b02      	ldr	r3, [pc, #8]	; (800ac2c <raise+0xc>)
 800ac22:	4601      	mov	r1, r0
 800ac24:	6818      	ldr	r0, [r3, #0]
 800ac26:	f7ff bfd3 	b.w	800abd0 <_raise_r>
 800ac2a:	bf00      	nop
 800ac2c:	20000010 	.word	0x20000010

0800ac30 <_kill_r>:
 800ac30:	b538      	push	{r3, r4, r5, lr}
 800ac32:	4d07      	ldr	r5, [pc, #28]	; (800ac50 <_kill_r+0x20>)
 800ac34:	2300      	movs	r3, #0
 800ac36:	4604      	mov	r4, r0
 800ac38:	4608      	mov	r0, r1
 800ac3a:	4611      	mov	r1, r2
 800ac3c:	602b      	str	r3, [r5, #0]
 800ac3e:	f7f7 fd37 	bl	80026b0 <_kill>
 800ac42:	1c43      	adds	r3, r0, #1
 800ac44:	d102      	bne.n	800ac4c <_kill_r+0x1c>
 800ac46:	682b      	ldr	r3, [r5, #0]
 800ac48:	b103      	cbz	r3, 800ac4c <_kill_r+0x1c>
 800ac4a:	6023      	str	r3, [r4, #0]
 800ac4c:	bd38      	pop	{r3, r4, r5, pc}
 800ac4e:	bf00      	nop
 800ac50:	200029d4 	.word	0x200029d4

0800ac54 <_getpid_r>:
 800ac54:	f7f7 bd24 	b.w	80026a0 <_getpid>

0800ac58 <__sread>:
 800ac58:	b510      	push	{r4, lr}
 800ac5a:	460c      	mov	r4, r1
 800ac5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac60:	f000 f894 	bl	800ad8c <_read_r>
 800ac64:	2800      	cmp	r0, #0
 800ac66:	bfab      	itete	ge
 800ac68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ac6a:	89a3      	ldrhlt	r3, [r4, #12]
 800ac6c:	181b      	addge	r3, r3, r0
 800ac6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ac72:	bfac      	ite	ge
 800ac74:	6563      	strge	r3, [r4, #84]	; 0x54
 800ac76:	81a3      	strhlt	r3, [r4, #12]
 800ac78:	bd10      	pop	{r4, pc}

0800ac7a <__swrite>:
 800ac7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac7e:	461f      	mov	r7, r3
 800ac80:	898b      	ldrh	r3, [r1, #12]
 800ac82:	05db      	lsls	r3, r3, #23
 800ac84:	4605      	mov	r5, r0
 800ac86:	460c      	mov	r4, r1
 800ac88:	4616      	mov	r6, r2
 800ac8a:	d505      	bpl.n	800ac98 <__swrite+0x1e>
 800ac8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac90:	2302      	movs	r3, #2
 800ac92:	2200      	movs	r2, #0
 800ac94:	f000 f868 	bl	800ad68 <_lseek_r>
 800ac98:	89a3      	ldrh	r3, [r4, #12]
 800ac9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aca2:	81a3      	strh	r3, [r4, #12]
 800aca4:	4632      	mov	r2, r6
 800aca6:	463b      	mov	r3, r7
 800aca8:	4628      	mov	r0, r5
 800acaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800acae:	f000 b817 	b.w	800ace0 <_write_r>

0800acb2 <__sseek>:
 800acb2:	b510      	push	{r4, lr}
 800acb4:	460c      	mov	r4, r1
 800acb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acba:	f000 f855 	bl	800ad68 <_lseek_r>
 800acbe:	1c43      	adds	r3, r0, #1
 800acc0:	89a3      	ldrh	r3, [r4, #12]
 800acc2:	bf15      	itete	ne
 800acc4:	6560      	strne	r0, [r4, #84]	; 0x54
 800acc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800acca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800acce:	81a3      	strheq	r3, [r4, #12]
 800acd0:	bf18      	it	ne
 800acd2:	81a3      	strhne	r3, [r4, #12]
 800acd4:	bd10      	pop	{r4, pc}

0800acd6 <__sclose>:
 800acd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acda:	f000 b813 	b.w	800ad04 <_close_r>
	...

0800ace0 <_write_r>:
 800ace0:	b538      	push	{r3, r4, r5, lr}
 800ace2:	4d07      	ldr	r5, [pc, #28]	; (800ad00 <_write_r+0x20>)
 800ace4:	4604      	mov	r4, r0
 800ace6:	4608      	mov	r0, r1
 800ace8:	4611      	mov	r1, r2
 800acea:	2200      	movs	r2, #0
 800acec:	602a      	str	r2, [r5, #0]
 800acee:	461a      	mov	r2, r3
 800acf0:	f7f7 fd15 	bl	800271e <_write>
 800acf4:	1c43      	adds	r3, r0, #1
 800acf6:	d102      	bne.n	800acfe <_write_r+0x1e>
 800acf8:	682b      	ldr	r3, [r5, #0]
 800acfa:	b103      	cbz	r3, 800acfe <_write_r+0x1e>
 800acfc:	6023      	str	r3, [r4, #0]
 800acfe:	bd38      	pop	{r3, r4, r5, pc}
 800ad00:	200029d4 	.word	0x200029d4

0800ad04 <_close_r>:
 800ad04:	b538      	push	{r3, r4, r5, lr}
 800ad06:	4d06      	ldr	r5, [pc, #24]	; (800ad20 <_close_r+0x1c>)
 800ad08:	2300      	movs	r3, #0
 800ad0a:	4604      	mov	r4, r0
 800ad0c:	4608      	mov	r0, r1
 800ad0e:	602b      	str	r3, [r5, #0]
 800ad10:	f7f7 fd21 	bl	8002756 <_close>
 800ad14:	1c43      	adds	r3, r0, #1
 800ad16:	d102      	bne.n	800ad1e <_close_r+0x1a>
 800ad18:	682b      	ldr	r3, [r5, #0]
 800ad1a:	b103      	cbz	r3, 800ad1e <_close_r+0x1a>
 800ad1c:	6023      	str	r3, [r4, #0]
 800ad1e:	bd38      	pop	{r3, r4, r5, pc}
 800ad20:	200029d4 	.word	0x200029d4

0800ad24 <_fstat_r>:
 800ad24:	b538      	push	{r3, r4, r5, lr}
 800ad26:	4d07      	ldr	r5, [pc, #28]	; (800ad44 <_fstat_r+0x20>)
 800ad28:	2300      	movs	r3, #0
 800ad2a:	4604      	mov	r4, r0
 800ad2c:	4608      	mov	r0, r1
 800ad2e:	4611      	mov	r1, r2
 800ad30:	602b      	str	r3, [r5, #0]
 800ad32:	f7f7 fd1c 	bl	800276e <_fstat>
 800ad36:	1c43      	adds	r3, r0, #1
 800ad38:	d102      	bne.n	800ad40 <_fstat_r+0x1c>
 800ad3a:	682b      	ldr	r3, [r5, #0]
 800ad3c:	b103      	cbz	r3, 800ad40 <_fstat_r+0x1c>
 800ad3e:	6023      	str	r3, [r4, #0]
 800ad40:	bd38      	pop	{r3, r4, r5, pc}
 800ad42:	bf00      	nop
 800ad44:	200029d4 	.word	0x200029d4

0800ad48 <_isatty_r>:
 800ad48:	b538      	push	{r3, r4, r5, lr}
 800ad4a:	4d06      	ldr	r5, [pc, #24]	; (800ad64 <_isatty_r+0x1c>)
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	4604      	mov	r4, r0
 800ad50:	4608      	mov	r0, r1
 800ad52:	602b      	str	r3, [r5, #0]
 800ad54:	f7f7 fd1b 	bl	800278e <_isatty>
 800ad58:	1c43      	adds	r3, r0, #1
 800ad5a:	d102      	bne.n	800ad62 <_isatty_r+0x1a>
 800ad5c:	682b      	ldr	r3, [r5, #0]
 800ad5e:	b103      	cbz	r3, 800ad62 <_isatty_r+0x1a>
 800ad60:	6023      	str	r3, [r4, #0]
 800ad62:	bd38      	pop	{r3, r4, r5, pc}
 800ad64:	200029d4 	.word	0x200029d4

0800ad68 <_lseek_r>:
 800ad68:	b538      	push	{r3, r4, r5, lr}
 800ad6a:	4d07      	ldr	r5, [pc, #28]	; (800ad88 <_lseek_r+0x20>)
 800ad6c:	4604      	mov	r4, r0
 800ad6e:	4608      	mov	r0, r1
 800ad70:	4611      	mov	r1, r2
 800ad72:	2200      	movs	r2, #0
 800ad74:	602a      	str	r2, [r5, #0]
 800ad76:	461a      	mov	r2, r3
 800ad78:	f7f7 fd14 	bl	80027a4 <_lseek>
 800ad7c:	1c43      	adds	r3, r0, #1
 800ad7e:	d102      	bne.n	800ad86 <_lseek_r+0x1e>
 800ad80:	682b      	ldr	r3, [r5, #0]
 800ad82:	b103      	cbz	r3, 800ad86 <_lseek_r+0x1e>
 800ad84:	6023      	str	r3, [r4, #0]
 800ad86:	bd38      	pop	{r3, r4, r5, pc}
 800ad88:	200029d4 	.word	0x200029d4

0800ad8c <_read_r>:
 800ad8c:	b538      	push	{r3, r4, r5, lr}
 800ad8e:	4d07      	ldr	r5, [pc, #28]	; (800adac <_read_r+0x20>)
 800ad90:	4604      	mov	r4, r0
 800ad92:	4608      	mov	r0, r1
 800ad94:	4611      	mov	r1, r2
 800ad96:	2200      	movs	r2, #0
 800ad98:	602a      	str	r2, [r5, #0]
 800ad9a:	461a      	mov	r2, r3
 800ad9c:	f7f7 fca2 	bl	80026e4 <_read>
 800ada0:	1c43      	adds	r3, r0, #1
 800ada2:	d102      	bne.n	800adaa <_read_r+0x1e>
 800ada4:	682b      	ldr	r3, [r5, #0]
 800ada6:	b103      	cbz	r3, 800adaa <_read_r+0x1e>
 800ada8:	6023      	str	r3, [r4, #0]
 800adaa:	bd38      	pop	{r3, r4, r5, pc}
 800adac:	200029d4 	.word	0x200029d4

0800adb0 <_init>:
 800adb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adb2:	bf00      	nop
 800adb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adb6:	bc08      	pop	{r3}
 800adb8:	469e      	mov	lr, r3
 800adba:	4770      	bx	lr

0800adbc <_fini>:
 800adbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adbe:	bf00      	nop
 800adc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adc2:	bc08      	pop	{r3}
 800adc4:	469e      	mov	lr, r3
 800adc6:	4770      	bx	lr
