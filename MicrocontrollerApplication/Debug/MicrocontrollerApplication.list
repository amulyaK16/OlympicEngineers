
MicrocontrollerApplication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c248  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c54  0800c388  0800c388  0001c388  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800cfdc  0800cfdc  0001cfdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800cfe4  0800cfe4  0001cfe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800cfe8  0800cfe8  0001cfe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  20000004  0800cfec  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000ad4  200001e0  0800d1c8  000201e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000cb4  0800d1c8  00020cb4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00022102  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003ae1  00000000  00000000  00042312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001b90  00000000  00000000  00045df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001a28  00000000  00000000  00047988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00021e7f  00000000  00000000  000493b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001d770  00000000  00000000  0006b22f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000d221f  00000000  00000000  0008899f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0015abbe  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000876c  00000000  00000000  0015ac14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e0 	.word	0x200001e0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800c370 	.word	0x0800c370

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e4 	.word	0x200001e4
 800017c:	0800c370 	.word	0x0800c370

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_ldivmod>:
 8000b58:	b97b      	cbnz	r3, 8000b7a <__aeabi_ldivmod+0x22>
 8000b5a:	b972      	cbnz	r2, 8000b7a <__aeabi_ldivmod+0x22>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bfbe      	ittt	lt
 8000b60:	2000      	movlt	r0, #0
 8000b62:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000b66:	e006      	blt.n	8000b76 <__aeabi_ldivmod+0x1e>
 8000b68:	bf08      	it	eq
 8000b6a:	2800      	cmpeq	r0, #0
 8000b6c:	bf1c      	itt	ne
 8000b6e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000b72:	f04f 30ff 	movne.w	r0, #4294967295
 8000b76:	f000 b9b9 	b.w	8000eec <__aeabi_idiv0>
 8000b7a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b7e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b82:	2900      	cmp	r1, #0
 8000b84:	db09      	blt.n	8000b9a <__aeabi_ldivmod+0x42>
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	db1a      	blt.n	8000bc0 <__aeabi_ldivmod+0x68>
 8000b8a:	f000 f84d 	bl	8000c28 <__udivmoddi4>
 8000b8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b96:	b004      	add	sp, #16
 8000b98:	4770      	bx	lr
 8000b9a:	4240      	negs	r0, r0
 8000b9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	db1b      	blt.n	8000bdc <__aeabi_ldivmod+0x84>
 8000ba4:	f000 f840 	bl	8000c28 <__udivmoddi4>
 8000ba8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb0:	b004      	add	sp, #16
 8000bb2:	4240      	negs	r0, r0
 8000bb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bb8:	4252      	negs	r2, r2
 8000bba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bbe:	4770      	bx	lr
 8000bc0:	4252      	negs	r2, r2
 8000bc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bc6:	f000 f82f 	bl	8000c28 <__udivmoddi4>
 8000bca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd2:	b004      	add	sp, #16
 8000bd4:	4240      	negs	r0, r0
 8000bd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bda:	4770      	bx	lr
 8000bdc:	4252      	negs	r2, r2
 8000bde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000be2:	f000 f821 	bl	8000c28 <__udivmoddi4>
 8000be6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bee:	b004      	add	sp, #16
 8000bf0:	4252      	negs	r2, r2
 8000bf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96e 	b.w	8000eec <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468c      	mov	ip, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f040 8083 	bne.w	8000d3e <__udivmoddi4+0x116>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d947      	bls.n	8000cce <__udivmoddi4+0xa6>
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	b142      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	f1c2 0020 	rsb	r0, r2, #32
 8000c48:	fa24 f000 	lsr.w	r0, r4, r0
 8000c4c:	4091      	lsls	r1, r2
 8000c4e:	4097      	lsls	r7, r2
 8000c50:	ea40 0c01 	orr.w	ip, r0, r1
 8000c54:	4094      	lsls	r4, r2
 8000c56:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c5a:	0c23      	lsrs	r3, r4, #16
 8000c5c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c60:	fa1f fe87 	uxth.w	lr, r7
 8000c64:	fb08 c116 	mls	r1, r8, r6, ip
 8000c68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c70:	4299      	cmp	r1, r3
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x60>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7a:	f080 8119 	bcs.w	8000eb0 <__udivmoddi4+0x288>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 8116 	bls.w	8000eb0 <__udivmoddi4+0x288>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c90:	fb08 3310 	mls	r3, r8, r0, r3
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c9c:	45a6      	cmp	lr, r4
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x8c>
 8000ca0:	193c      	adds	r4, r7, r4
 8000ca2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ca6:	f080 8105 	bcs.w	8000eb4 <__udivmoddi4+0x28c>
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	f240 8102 	bls.w	8000eb4 <__udivmoddi4+0x28c>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	443c      	add	r4, r7
 8000cb4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cb8:	eba4 040e 	sub.w	r4, r4, lr
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	b11d      	cbz	r5, 8000cc8 <__udivmoddi4+0xa0>
 8000cc0:	40d4      	lsrs	r4, r2
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	b902      	cbnz	r2, 8000cd2 <__udivmoddi4+0xaa>
 8000cd0:	deff      	udf	#255	; 0xff
 8000cd2:	fab2 f282 	clz	r2, r2
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	d150      	bne.n	8000d7c <__udivmoddi4+0x154>
 8000cda:	1bcb      	subs	r3, r1, r7
 8000cdc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	2601      	movs	r6, #1
 8000ce6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cea:	0c21      	lsrs	r1, r4, #16
 8000cec:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0xe4>
 8000cfc:	1879      	adds	r1, r7, r1
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0xe2>
 8000d04:	428b      	cmp	r3, r1
 8000d06:	f200 80e9 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1ac9      	subs	r1, r1, r3
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d18:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x10c>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x10a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80d9 	bhi.w	8000ee4 <__udivmoddi4+0x2bc>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e7bf      	b.n	8000cbe <__udivmoddi4+0x96>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0x12e>
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	f000 80b1 	beq.w	8000eaa <__udivmoddi4+0x282>
 8000d48:	2600      	movs	r6, #0
 8000d4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4e:	4630      	mov	r0, r6
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f683 	clz	r6, r3
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	d14a      	bne.n	8000df4 <__udivmoddi4+0x1cc>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0x140>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80b8 	bhi.w	8000ed8 <__udivmoddi4+0x2b0>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	468c      	mov	ip, r1
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	d0a8      	beq.n	8000cc8 <__udivmoddi4+0xa0>
 8000d76:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d7a:	e7a5      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000d7c:	f1c2 0320 	rsb	r3, r2, #32
 8000d80:	fa20 f603 	lsr.w	r6, r0, r3
 8000d84:	4097      	lsls	r7, r2
 8000d86:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8e:	40d9      	lsrs	r1, r3
 8000d90:	4330      	orrs	r0, r6
 8000d92:	0c03      	lsrs	r3, r0, #16
 8000d94:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d98:	fa1f f887 	uxth.w	r8, r7
 8000d9c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb06 f108 	mul.w	r1, r6, r8
 8000da8:	4299      	cmp	r1, r3
 8000daa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x19c>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000db6:	f080 808d 	bcs.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 808a 	bls.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b281      	uxth	r1, r0
 8000dc8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dcc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd4:	fb00 f308 	mul.w	r3, r0, r8
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x1c4>
 8000ddc:	1879      	adds	r1, r7, r1
 8000dde:	f100 3cff 	add.w	ip, r0, #4294967295
 8000de2:	d273      	bcs.n	8000ecc <__udivmoddi4+0x2a4>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d971      	bls.n	8000ecc <__udivmoddi4+0x2a4>
 8000de8:	3802      	subs	r0, #2
 8000dea:	4439      	add	r1, r7
 8000dec:	1acb      	subs	r3, r1, r3
 8000dee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000df2:	e778      	b.n	8000ce6 <__udivmoddi4+0xbe>
 8000df4:	f1c6 0c20 	rsb	ip, r6, #32
 8000df8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dfc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e00:	431c      	orrs	r4, r3
 8000e02:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e06:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e0e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e12:	431f      	orrs	r7, r3
 8000e14:	0c3b      	lsrs	r3, r7, #16
 8000e16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1a:	fa1f f884 	uxth.w	r8, r4
 8000e1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e26:	fb09 fa08 	mul.w	sl, r9, r8
 8000e2a:	458a      	cmp	sl, r1
 8000e2c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e30:	fa00 f306 	lsl.w	r3, r0, r6
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x220>
 8000e36:	1861      	adds	r1, r4, r1
 8000e38:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e3c:	d248      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e3e:	458a      	cmp	sl, r1
 8000e40:	d946      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4421      	add	r1, r4
 8000e48:	eba1 010a 	sub.w	r1, r1, sl
 8000e4c:	b2bf      	uxth	r7, r7
 8000e4e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e52:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e56:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e5a:	fb00 f808 	mul.w	r8, r0, r8
 8000e5e:	45b8      	cmp	r8, r7
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x24a>
 8000e62:	19e7      	adds	r7, r4, r7
 8000e64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e68:	d22e      	bcs.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6a:	45b8      	cmp	r8, r7
 8000e6c:	d92c      	bls.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4427      	add	r7, r4
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	eba7 0708 	sub.w	r7, r7, r8
 8000e7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7e:	454f      	cmp	r7, r9
 8000e80:	46c6      	mov	lr, r8
 8000e82:	4649      	mov	r1, r9
 8000e84:	d31a      	bcc.n	8000ebc <__udivmoddi4+0x294>
 8000e86:	d017      	beq.n	8000eb8 <__udivmoddi4+0x290>
 8000e88:	b15d      	cbz	r5, 8000ea2 <__udivmoddi4+0x27a>
 8000e8a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e8e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e92:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e96:	40f2      	lsrs	r2, r6
 8000e98:	ea4c 0202 	orr.w	r2, ip, r2
 8000e9c:	40f7      	lsrs	r7, r6
 8000e9e:	e9c5 2700 	strd	r2, r7, [r5]
 8000ea2:	2600      	movs	r6, #0
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e70b      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0x60>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6fd      	b.n	8000cb4 <__udivmoddi4+0x8c>
 8000eb8:	4543      	cmp	r3, r8
 8000eba:	d2e5      	bcs.n	8000e88 <__udivmoddi4+0x260>
 8000ebc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ec0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7df      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e7d2      	b.n	8000e72 <__udivmoddi4+0x24a>
 8000ecc:	4660      	mov	r0, ip
 8000ece:	e78d      	b.n	8000dec <__udivmoddi4+0x1c4>
 8000ed0:	4681      	mov	r9, r0
 8000ed2:	e7b9      	b.n	8000e48 <__udivmoddi4+0x220>
 8000ed4:	4666      	mov	r6, ip
 8000ed6:	e775      	b.n	8000dc4 <__udivmoddi4+0x19c>
 8000ed8:	4630      	mov	r0, r6
 8000eda:	e74a      	b.n	8000d72 <__udivmoddi4+0x14a>
 8000edc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee0:	4439      	add	r1, r7
 8000ee2:	e713      	b.n	8000d0c <__udivmoddi4+0xe4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	443c      	add	r4, r7
 8000ee8:	e724      	b.n	8000d34 <__udivmoddi4+0x10c>
 8000eea:	bf00      	nop

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <DWT_Init>:
#endif

//#############################################################################################
TIM_HandleTypeDef htim2;
__STATIC_INLINE void DWT_Init(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // allow to use counter
 8000ef4:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <DWT_Init+0x28>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	4a07      	ldr	r2, [pc, #28]	; (8000f18 <DWT_Init+0x28>)
 8000efa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000efe:	60d3      	str	r3, [r2, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   // start counter
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <DWT_Init+0x2c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a05      	ldr	r2, [pc, #20]	; (8000f1c <DWT_Init+0x2c>)
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	6013      	str	r3, [r2, #0]
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000edf0 	.word	0xe000edf0
 8000f1c:	e0001000 	.word	0xe0001000

08000f20 <hx711_delay_us>:
void hx711_delay_us(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
	uint32_t delay = _HX711_DELAY_US_LOOP;
 8000f26:	2304      	movs	r3, #4
 8000f28:	607b      	str	r3, [r7, #4]
	  while (delay > 0)
 8000f2a:	e006      	b.n	8000f3a <hx711_delay_us+0x1a>
	  {
	    delay--;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	607b      	str	r3, [r7, #4]
	    asm("NOP"); asm("NOP"); asm("NOP"); asm("NOP");
 8000f32:	bf00      	nop
 8000f34:	bf00      	nop
 8000f36:	bf00      	nop
 8000f38:	bf00      	nop
	  while (delay > 0)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d1f5      	bne.n	8000f2c <hx711_delay_us+0xc>
	  }

}
 8000f40:	bf00      	nop
 8000f42:	bf00      	nop
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <hx711_lock>:
//#############################################################################################
void hx711_lock(hx711_t *hx711)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b082      	sub	sp, #8
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
  while (hx711->lock)
 8000f56:	e002      	b.n	8000f5e <hx711_lock+0x10>
    hx711_delay(1);
 8000f58:	2001      	movs	r0, #1
 8000f5a:	f001 fdd3 	bl	8002b04 <HAL_Delay>
  while (hx711->lock)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	7d1b      	ldrb	r3, [r3, #20]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d1f8      	bne.n	8000f58 <hx711_lock+0xa>
  hx711->lock = 1;      
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2201      	movs	r2, #1
 8000f6a:	751a      	strb	r2, [r3, #20]
}
 8000f6c:	bf00      	nop
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <hx711_unlock>:
//#############################################################################################
void hx711_unlock(hx711_t *hx711)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  hx711->lock = 0;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	751a      	strb	r2, [r3, #20]
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr

08000f8e <hx711_init>:
//#############################################################################################
void hx711_init(hx711_t *hx711, GPIO_TypeDef *clk_gpio, uint16_t clk_pin, GPIO_TypeDef *dat_gpio, uint16_t dat_pin)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b08a      	sub	sp, #40	; 0x28
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	60f8      	str	r0, [r7, #12]
 8000f96:	60b9      	str	r1, [r7, #8]
 8000f98:	603b      	str	r3, [r7, #0]
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	80fb      	strh	r3, [r7, #6]
  DWT_Init();
 8000f9e:	f7ff ffa7 	bl	8000ef0 <DWT_Init>
  hx711_lock(hx711);
 8000fa2:	68f8      	ldr	r0, [r7, #12]
 8000fa4:	f7ff ffd3 	bl	8000f4e <hx711_lock>
  hx711->clk_gpio = clk_gpio;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	68ba      	ldr	r2, [r7, #8]
 8000fac:	601a      	str	r2, [r3, #0]
  hx711->clk_pin = clk_pin;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	88fa      	ldrh	r2, [r7, #6]
 8000fb2:	811a      	strh	r2, [r3, #8]
  hx711->dat_gpio = dat_gpio;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	683a      	ldr	r2, [r7, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
  hx711->dat_pin = dat_pin;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000fbe:	815a      	strh	r2, [r3, #10]
  
  GPIO_InitTypeDef  gpio = {0};
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]
  gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	623b      	str	r3, [r7, #32]
  gpio.Pin = clk_pin;
 8000fdc:	88fb      	ldrh	r3, [r7, #6]
 8000fde:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(clk_gpio, &gpio);
 8000fe0:	f107 0314 	add.w	r3, r7, #20
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	68b8      	ldr	r0, [r7, #8]
 8000fe8:	f003 f930 	bl	800424c <HAL_GPIO_Init>
  gpio.Mode = GPIO_MODE_INPUT;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_PULLUP;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	623b      	str	r3, [r7, #32]
  gpio.Pin = dat_pin;
 8000ff8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000ffa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(dat_gpio, &gpio);
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	4619      	mov	r1, r3
 8001002:	6838      	ldr	r0, [r7, #0]
 8001004:	f003 f922 	bl	800424c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	6818      	ldr	r0, [r3, #0]
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	891b      	ldrh	r3, [r3, #8]
 8001010:	2201      	movs	r2, #1
 8001012:	4619      	mov	r1, r3
 8001014:	f003 fa9a 	bl	800454c <HAL_GPIO_WritePin>
  hx711_delay(10);
 8001018:	200a      	movs	r0, #10
 800101a:	f001 fd73 	bl	8002b04 <HAL_Delay>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	6818      	ldr	r0, [r3, #0]
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	891b      	ldrh	r3, [r3, #8]
 8001026:	2200      	movs	r2, #0
 8001028:	4619      	mov	r1, r3
 800102a:	f003 fa8f 	bl	800454c <HAL_GPIO_WritePin>
  hx711_delay(10);  
 800102e:	200a      	movs	r0, #10
 8001030:	f001 fd68 	bl	8002b04 <HAL_Delay>
  hx711_value(hx711);
 8001034:	68f8      	ldr	r0, [r7, #12]
 8001036:	f000 f80a 	bl	800104e <hx711_value>
  hx711_value(hx711);
 800103a:	68f8      	ldr	r0, [r7, #12]
 800103c:	f000 f807 	bl	800104e <hx711_value>
  hx711_unlock(hx711); 
 8001040:	68f8      	ldr	r0, [r7, #12]
 8001042:	f7ff ff97 	bl	8000f74 <hx711_unlock>
}
 8001046:	bf00      	nop
 8001048:	3728      	adds	r7, #40	; 0x28
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <hx711_value>:
//#############################################################################################
int32_t hx711_value(hx711_t *hx711)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b086      	sub	sp, #24
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
  uint32_t data = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]
  uint32_t  startTime = HAL_GetTick();
 800105a:	f001 fd3b 	bl	8002ad4 <HAL_GetTick>
 800105e:	60f8      	str	r0, [r7, #12]
  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8001060:	e00b      	b.n	800107a <hx711_value+0x2c>
  {
    hx711_delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f001 fd4e 	bl	8002b04 <HAL_Delay>
    if(HAL_GetTick() - startTime > 150)
 8001068:	f001 fd34 	bl	8002ad4 <HAL_GetTick>
 800106c:	4602      	mov	r2, r0
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	2b96      	cmp	r3, #150	; 0x96
 8001074:	d901      	bls.n	800107a <hx711_value+0x2c>
      return 0;
 8001076:	2300      	movs	r3, #0
 8001078:	e055      	b.n	8001126 <hx711_value+0xd8>
  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	685a      	ldr	r2, [r3, #4]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	895b      	ldrh	r3, [r3, #10]
 8001082:	4619      	mov	r1, r3
 8001084:	4610      	mov	r0, r2
 8001086:	f003 fa49 	bl	800451c <HAL_GPIO_ReadPin>
 800108a:	4603      	mov	r3, r0
 800108c:	2b01      	cmp	r3, #1
 800108e:	d0e8      	beq.n	8001062 <hx711_value+0x14>
  }
  for(int8_t i=0; i<24 ; i++)
 8001090:	2300      	movs	r3, #0
 8001092:	74fb      	strb	r3, [r7, #19]
 8001094:	e02a      	b.n	80010ec <hx711_value+0x9e>
  {
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);   
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6818      	ldr	r0, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	891b      	ldrh	r3, [r3, #8]
 800109e:	2201      	movs	r2, #1
 80010a0:	4619      	mov	r1, r3
 80010a2:	f003 fa53 	bl	800454c <HAL_GPIO_WritePin>
    hx711_delay_us();
 80010a6:	f7ff ff3b 	bl	8000f20 <hx711_delay_us>
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6818      	ldr	r0, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	891b      	ldrh	r3, [r3, #8]
 80010b2:	2200      	movs	r2, #0
 80010b4:	4619      	mov	r1, r3
 80010b6:	f003 fa49 	bl	800454c <HAL_GPIO_WritePin>
    hx711_delay_us();
 80010ba:	f7ff ff31 	bl	8000f20 <hx711_delay_us>
    data = data << 1;    
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	617b      	str	r3, [r7, #20]
    if(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685a      	ldr	r2, [r3, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	895b      	ldrh	r3, [r3, #10]
 80010cc:	4619      	mov	r1, r3
 80010ce:	4610      	mov	r0, r2
 80010d0:	f003 fa24 	bl	800451c <HAL_GPIO_ReadPin>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d102      	bne.n	80010e0 <hx711_value+0x92>
      data ++;
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	3301      	adds	r3, #1
 80010de:	617b      	str	r3, [r7, #20]
  for(int8_t i=0; i<24 ; i++)
 80010e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	3301      	adds	r3, #1
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	74fb      	strb	r3, [r7, #19]
 80010ec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80010f0:	2b17      	cmp	r3, #23
 80010f2:	ddd0      	ble.n	8001096 <hx711_value+0x48>
  }
  data = data ^ 0x800000; 
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 80010fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);   
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6818      	ldr	r0, [r3, #0]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	891b      	ldrh	r3, [r3, #8]
 8001104:	2201      	movs	r2, #1
 8001106:	4619      	mov	r1, r3
 8001108:	f003 fa20 	bl	800454c <HAL_GPIO_WritePin>
  hx711_delay_us();
 800110c:	f7ff ff08 	bl	8000f20 <hx711_delay_us>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6818      	ldr	r0, [r3, #0]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	891b      	ldrh	r3, [r3, #8]
 8001118:	2200      	movs	r2, #0
 800111a:	4619      	mov	r1, r3
 800111c:	f003 fa16 	bl	800454c <HAL_GPIO_WritePin>
  hx711_delay_us();
 8001120:	f7ff fefe 	bl	8000f20 <hx711_delay_us>
  return data;    
 8001124:	697b      	ldr	r3, [r7, #20]
}
 8001126:	4618      	mov	r0, r3
 8001128:	3718      	adds	r7, #24
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <hx711_tare>:
  hx711_unlock(hx711);
  return answer;
}
//#############################################################################################
void hx711_tare(hx711_t *hx711, uint16_t sample)
{
 800112e:	b5b0      	push	{r4, r5, r7, lr}
 8001130:	b086      	sub	sp, #24
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
 8001136:	460b      	mov	r3, r1
 8001138:	807b      	strh	r3, [r7, #2]
  hx711_lock(hx711);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff ff07 	bl	8000f4e <hx711_lock>
  int64_t  ave = 0;
 8001140:	f04f 0200 	mov.w	r2, #0
 8001144:	f04f 0300 	mov.w	r3, #0
 8001148:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for(uint16_t i=0 ; i<sample ; i++)
 800114c:	2300      	movs	r3, #0
 800114e:	81fb      	strh	r3, [r7, #14]
 8001150:	e013      	b.n	800117a <hx711_tare+0x4c>
  {
    ave += hx711_value(hx711);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff ff7b 	bl	800104e <hx711_value>
 8001158:	4603      	mov	r3, r0
 800115a:	461a      	mov	r2, r3
 800115c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001160:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001164:	1884      	adds	r4, r0, r2
 8001166:	eb41 0503 	adc.w	r5, r1, r3
 800116a:	e9c7 4504 	strd	r4, r5, [r7, #16]
    hx711_delay(5);
 800116e:	2005      	movs	r0, #5
 8001170:	f001 fcc8 	bl	8002b04 <HAL_Delay>
  for(uint16_t i=0 ; i<sample ; i++)
 8001174:	89fb      	ldrh	r3, [r7, #14]
 8001176:	3301      	adds	r3, #1
 8001178:	81fb      	strh	r3, [r7, #14]
 800117a:	89fa      	ldrh	r2, [r7, #14]
 800117c:	887b      	ldrh	r3, [r7, #2]
 800117e:	429a      	cmp	r2, r3
 8001180:	d3e7      	bcc.n	8001152 <hx711_tare+0x24>
  }
  hx711->offset = (int32_t)(ave / sample);
 8001182:	887a      	ldrh	r2, [r7, #2]
 8001184:	f04f 0300 	mov.w	r3, #0
 8001188:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800118c:	f7ff fce4 	bl	8000b58 <__aeabi_ldivmod>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	60da      	str	r2, [r3, #12]
  hx711_unlock(hx711);
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff feeb 	bl	8000f74 <hx711_unlock>
}
 800119e:	bf00      	nop
 80011a0:	3718      	adds	r7, #24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bdb0      	pop	{r4, r5, r7, pc}

080011a6 <hx711_weight>:
  hx711->coef = (load_raw - noload_raw) / scale;  
  hx711_unlock(hx711);
}
//#############################################################################################
float hx711_weight(hx711_t *hx711, uint16_t sample)
{
 80011a6:	b5b0      	push	{r4, r5, r7, lr}
 80011a8:	b088      	sub	sp, #32
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
 80011ae:	460b      	mov	r3, r1
 80011b0:	807b      	strh	r3, [r7, #2]
  hx711_lock(hx711);
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff fecb 	bl	8000f4e <hx711_lock>
  int64_t  ave = 0;
 80011b8:	f04f 0200 	mov.w	r2, #0
 80011bc:	f04f 0300 	mov.w	r3, #0
 80011c0:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for(uint16_t i=0 ; i<sample ; i++)
 80011c4:	2300      	movs	r3, #0
 80011c6:	82fb      	strh	r3, [r7, #22]
 80011c8:	e013      	b.n	80011f2 <hx711_weight+0x4c>
  {
    ave += hx711_value(hx711);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff ff3f 	bl	800104e <hx711_value>
 80011d0:	4603      	mov	r3, r0
 80011d2:	461a      	mov	r2, r3
 80011d4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80011d8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80011dc:	1884      	adds	r4, r0, r2
 80011de:	eb41 0503 	adc.w	r5, r1, r3
 80011e2:	e9c7 4506 	strd	r4, r5, [r7, #24]
    hx711_delay(5);
 80011e6:	2005      	movs	r0, #5
 80011e8:	f001 fc8c 	bl	8002b04 <HAL_Delay>
  for(uint16_t i=0 ; i<sample ; i++)
 80011ec:	8afb      	ldrh	r3, [r7, #22]
 80011ee:	3301      	adds	r3, #1
 80011f0:	82fb      	strh	r3, [r7, #22]
 80011f2:	8afa      	ldrh	r2, [r7, #22]
 80011f4:	887b      	ldrh	r3, [r7, #2]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d3e7      	bcc.n	80011ca <hx711_weight+0x24>
  }
  int32_t data = (int32_t)(ave / sample);
 80011fa:	887a      	ldrh	r2, [r7, #2]
 80011fc:	f04f 0300 	mov.w	r3, #0
 8001200:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001204:	f7ff fca8 	bl	8000b58 <__aeabi_ldivmod>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	4613      	mov	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
  float answer =  (data - hx711->offset) / hx711->coef;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	ee07 3a90 	vmov	s15, r3
 800121c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	ed93 7a04 	vldr	s14, [r3, #16]
 8001226:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800122a:	edc7 7a03 	vstr	s15, [r7, #12]
  hx711_unlock(hx711);
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f7ff fea0 	bl	8000f74 <hx711_unlock>
  return answer;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	ee07 3a90 	vmov	s15, r3
}
 800123a:	eeb0 0a67 	vmov.f32	s0, s15
 800123e:	3720      	adds	r7, #32
 8001240:	46bd      	mov	sp, r7
 8001242:	bdb0      	pop	{r4, r5, r7, pc}

08001244 <hx711_coef_set>:
//#############################################################################################
void hx711_coef_set(hx711_t *hx711, float coef)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	ed87 0a00 	vstr	s0, [r7]
  hx711->coef = coef;  
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	683a      	ldr	r2, [r7, #0]
 8001254:	611a      	str	r2, [r3, #16]
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001262:	b480      	push	{r7}
 8001264:	b083      	sub	sp, #12
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800126a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800126e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001272:	f023 0218 	bic.w	r2, r3, #24
 8001276:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4313      	orrs	r3, r2
 800127e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr

0800128e <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800128e:	b480      	push	{r7}
 8001290:	b085      	sub	sp, #20
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800129a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800129c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80012a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4013      	ands	r3, r2
 80012b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012b2:	68fb      	ldr	r3, [r7, #12]
}
 80012b4:	bf00      	nop
 80012b6:	3714      	adds	r7, #20
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80012c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80012d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4013      	ands	r3, r2
 80012e2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012e4:	68fb      	ldr	r3, [r7, #12]
}
 80012e6:	bf00      	nop
 80012e8:	3714      	adds	r7, #20
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
	...

080012f4 <UART_Rx_Receive_Handler>:
int16_t Gyro_Z_RAW = 0;

float Ax, Ay, Az, Gx, Gy, Gz;

bool UART_Rx_Receive_Handler(char cmd, UART_HandleTypeDef *huart)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	6039      	str	r1, [r7, #0]
 80012fe:	71fb      	strb	r3, [r7, #7]
	switch(cmd)
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	3b30      	subs	r3, #48	; 0x30
 8001304:	2b03      	cmp	r3, #3
 8001306:	d840      	bhi.n	800138a <UART_Rx_Receive_Handler+0x96>
 8001308:	a201      	add	r2, pc, #4	; (adr r2, 8001310 <UART_Rx_Receive_Handler+0x1c>)
 800130a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800130e:	bf00      	nop
 8001310:	08001321 	.word	0x08001321
 8001314:	08001325 	.word	0x08001325
 8001318:	08001337 	.word	0x08001337
 800131c:	08001361 	.word	0x08001361
	{
	case '0':
		return false;
 8001320:	2301      	movs	r3, #1
 8001322:	e033      	b.n	800138c <UART_Rx_Receive_Handler+0x98>

	//Connected - PING
	case '1':
		HAL_UART_Transmit(huart, (uint8_t*)"1", UART_RX_BUF_LEN, HAL_MAX_DELAY);
 8001324:	f04f 33ff 	mov.w	r3, #4294967295
 8001328:	2201      	movs	r2, #1
 800132a:	491a      	ldr	r1, [pc, #104]	; (8001394 <UART_Rx_Receive_Handler+0xa0>)
 800132c:	6838      	ldr	r0, [r7, #0]
 800132e:	f006 fa43 	bl	80077b8 <HAL_UART_Transmit>
		return true;
 8001332:	2300      	movs	r3, #0
 8001334:	e02a      	b.n	800138c <UART_Rx_Receive_Handler+0x98>

	//Start Transmission
	case '2':
		if(global_flags.can_transmit != 1)
 8001336:	4b18      	ldr	r3, [pc, #96]	; (8001398 <UART_Rx_Receive_Handler+0xa4>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	b2db      	uxtb	r3, r3
 8001340:	2b00      	cmp	r3, #0
 8001342:	d10b      	bne.n	800135c <UART_Rx_Receive_Handler+0x68>
		{
			HAL_UART_Transmit(huart, (uint8_t*)"1", UART_RX_BUF_LEN, HAL_MAX_DELAY);
 8001344:	f04f 33ff 	mov.w	r3, #4294967295
 8001348:	2201      	movs	r2, #1
 800134a:	4912      	ldr	r1, [pc, #72]	; (8001394 <UART_Rx_Receive_Handler+0xa0>)
 800134c:	6838      	ldr	r0, [r7, #0]
 800134e:	f006 fa33 	bl	80077b8 <HAL_UART_Transmit>
			global_flags.can_transmit = 1;
 8001352:	4a11      	ldr	r2, [pc, #68]	; (8001398 <UART_Rx_Receive_Handler+0xa4>)
 8001354:	7813      	ldrb	r3, [r2, #0]
 8001356:	f043 0302 	orr.w	r3, r3, #2
 800135a:	7013      	strb	r3, [r2, #0]
		}
		return true;
 800135c:	2300      	movs	r3, #0
 800135e:	e015      	b.n	800138c <UART_Rx_Receive_Handler+0x98>

	//Stop Transmission
	case '3':
		if(global_flags.can_transmit == 1)
 8001360:	4b0d      	ldr	r3, [pc, #52]	; (8001398 <UART_Rx_Receive_Handler+0xa4>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	f003 0302 	and.w	r3, r3, #2
 8001368:	b2db      	uxtb	r3, r3
 800136a:	2b00      	cmp	r3, #0
 800136c:	d00b      	beq.n	8001386 <UART_Rx_Receive_Handler+0x92>
		{
			HAL_UART_Transmit(huart, (uint8_t*)"1", UART_RX_BUF_LEN, HAL_MAX_DELAY);
 800136e:	f04f 33ff 	mov.w	r3, #4294967295
 8001372:	2201      	movs	r2, #1
 8001374:	4907      	ldr	r1, [pc, #28]	; (8001394 <UART_Rx_Receive_Handler+0xa0>)
 8001376:	6838      	ldr	r0, [r7, #0]
 8001378:	f006 fa1e 	bl	80077b8 <HAL_UART_Transmit>
			global_flags.can_transmit = 0;
 800137c:	4a06      	ldr	r2, [pc, #24]	; (8001398 <UART_Rx_Receive_Handler+0xa4>)
 800137e:	7813      	ldrb	r3, [r2, #0]
 8001380:	f36f 0341 	bfc	r3, #1, #1
 8001384:	7013      	strb	r3, [r2, #0]
		}
		return true;
 8001386:	2300      	movs	r3, #0
 8001388:	e000      	b.n	800138c <UART_Rx_Receive_Handler+0x98>


	default:
		return false;
 800138a:	2301      	movs	r3, #1
	}
}
 800138c:	4618      	mov	r0, r3
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	0800c388 	.word	0x0800c388
 8001398:	20000258 	.word	0x20000258

0800139c <MPU6050_Init>:

void MPU6050_Init (void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	// check device ID

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,CHECK_REG,1, &check, 1, 1000);
 80013a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a6:	9302      	str	r3, [sp, #8]
 80013a8:	2301      	movs	r3, #1
 80013aa:	9301      	str	r3, [sp, #4]
 80013ac:	1dfb      	adds	r3, r7, #7
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	2301      	movs	r3, #1
 80013b2:	2275      	movs	r2, #117	; 0x75
 80013b4:	21d0      	movs	r1, #208	; 0xd0
 80013b6:	4823      	ldr	r0, [pc, #140]	; (8001444 <MPU6050_Init+0xa8>)
 80013b8:	f003 fa9e 	bl	80048f8 <HAL_I2C_Mem_Read>

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	2b68      	cmp	r3, #104	; 0x68
 80013c0:	d13b      	bne.n	800143a <MPU6050_Init+0x9e>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 80013c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ca:	9302      	str	r3, [sp, #8]
 80013cc:	2301      	movs	r3, #1
 80013ce:	9301      	str	r3, [sp, #4]
 80013d0:	1dbb      	adds	r3, r7, #6
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	2301      	movs	r3, #1
 80013d6:	226b      	movs	r2, #107	; 0x6b
 80013d8:	21d0      	movs	r1, #208	; 0xd0
 80013da:	481a      	ldr	r0, [pc, #104]	; (8001444 <MPU6050_Init+0xa8>)
 80013dc:	f003 f978 	bl	80046d0 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 80013e0:	2307      	movs	r3, #7
 80013e2:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 80013e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e8:	9302      	str	r3, [sp, #8]
 80013ea:	2301      	movs	r3, #1
 80013ec:	9301      	str	r3, [sp, #4]
 80013ee:	1dbb      	adds	r3, r7, #6
 80013f0:	9300      	str	r3, [sp, #0]
 80013f2:	2301      	movs	r3, #1
 80013f4:	2219      	movs	r2, #25
 80013f6:	21d0      	movs	r1, #208	; 0xd0
 80013f8:	4812      	ldr	r0, [pc, #72]	; (8001444 <MPU6050_Init+0xa8>)
 80013fa:	f003 f969 	bl	80046d0 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
		Data = 0x00;
 80013fe:	2300      	movs	r3, #0
 8001400:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8001402:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001406:	9302      	str	r3, [sp, #8]
 8001408:	2301      	movs	r3, #1
 800140a:	9301      	str	r3, [sp, #4]
 800140c:	1dbb      	adds	r3, r7, #6
 800140e:	9300      	str	r3, [sp, #0]
 8001410:	2301      	movs	r3, #1
 8001412:	221c      	movs	r2, #28
 8001414:	21d0      	movs	r1, #208	; 0xd0
 8001416:	480b      	ldr	r0, [pc, #44]	; (8001444 <MPU6050_Init+0xa8>)
 8001418:	f003 f95a 	bl	80046d0 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
		Data = 0x00;
 800141c:	2300      	movs	r3, #0
 800141e:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8001420:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001424:	9302      	str	r3, [sp, #8]
 8001426:	2301      	movs	r3, #1
 8001428:	9301      	str	r3, [sp, #4]
 800142a:	1dbb      	adds	r3, r7, #6
 800142c:	9300      	str	r3, [sp, #0]
 800142e:	2301      	movs	r3, #1
 8001430:	221b      	movs	r2, #27
 8001432:	21d0      	movs	r1, #208	; 0xd0
 8001434:	4803      	ldr	r0, [pc, #12]	; (8001444 <MPU6050_Init+0xa8>)
 8001436:	f003 f94b 	bl	80046d0 <HAL_I2C_Mem_Write>
	}

}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20000604 	.word	0x20000604

08001448 <get_RTC_Value>:
	Gy = Gyro_Y_RAW/131.0;
	Gz = Gyro_Z_RAW/131.0;
}

void get_RTC_Value(char* buf)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b094      	sub	sp, #80	; 0x50
 800144c:	af02      	add	r7, sp, #8
 800144e:	6078      	str	r0, [r7, #4]
	char _date[20];

	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;
	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8001450:	f107 0308 	add.w	r3, r7, #8
 8001454:	2200      	movs	r2, #0
 8001456:	4619      	mov	r1, r3
 8001458:	4819      	ldr	r0, [pc, #100]	; (80014c0 <get_RTC_Value+0x78>)
 800145a:	f005 fb3c 	bl	8006ad6 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 800145e:	f107 031c 	add.w	r3, r7, #28
 8001462:	2200      	movs	r2, #0
 8001464:	4619      	mov	r1, r3
 8001466:	4816      	ldr	r0, [pc, #88]	; (80014c0 <get_RTC_Value+0x78>)
 8001468:	f005 fc3f 	bl	8006cea <HAL_RTC_GetDate>
	/* Display time Format: hh:mm:ss */
	sprintf((char*)_time,"%02d:%02d:%02d ",gTime.Hours, gTime.Minutes, gTime.Seconds);
 800146c:	7a3b      	ldrb	r3, [r7, #8]
 800146e:	461a      	mov	r2, r3
 8001470:	7a7b      	ldrb	r3, [r7, #9]
 8001472:	4619      	mov	r1, r3
 8001474:	7abb      	ldrb	r3, [r7, #10]
 8001476:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	460b      	mov	r3, r1
 800147e:	4911      	ldr	r1, [pc, #68]	; (80014c4 <get_RTC_Value+0x7c>)
 8001480:	f008 fe10 	bl	800a0a4 <siprintf>
	strcat(buf,_time);
 8001484:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001488:	4619      	mov	r1, r3
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f008 fe2a 	bl	800a0e4 <strcat>
	/* Display date Format: dd-mm-yy */
	sprintf((char*)_date,"%02d-%02d-%2d\n",gDate.Date, gDate.Month, 2000 + gDate.Year);
 8001490:	7fbb      	ldrb	r3, [r7, #30]
 8001492:	461a      	mov	r2, r3
 8001494:	7f7b      	ldrb	r3, [r7, #29]
 8001496:	4619      	mov	r1, r3
 8001498:	7ffb      	ldrb	r3, [r7, #31]
 800149a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800149e:	f107 0020 	add.w	r0, r7, #32
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	460b      	mov	r3, r1
 80014a6:	4908      	ldr	r1, [pc, #32]	; (80014c8 <get_RTC_Value+0x80>)
 80014a8:	f008 fdfc 	bl	800a0a4 <siprintf>
	strcat(buf,_date);
 80014ac:	f107 0320 	add.w	r3, r7, #32
 80014b0:	4619      	mov	r1, r3
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f008 fe16 	bl	800a0e4 <strcat>
}
 80014b8:	bf00      	nop
 80014ba:	3748      	adds	r7, #72	; 0x48
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20000b4c 	.word	0x20000b4c
 80014c4:	0800c38c 	.word	0x0800c38c
 80014c8:	0800c39c 	.word	0x0800c39c

080014cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b0e0      	sub	sp, #384	; 0x180
 80014d0:	af02      	add	r7, sp, #8
	char buf[4];
	float weight;
	int loadcellCounter;

	//*** Uncomment to print str to UART ***//
	global_flags.str_debug = 0;
 80014d2:	4a44      	ldr	r2, [pc, #272]	; (80015e4 <main+0x118>)
 80014d4:	7813      	ldrb	r3, [r2, #0]
 80014d6:	f36f 1304 	bfc	r3, #4, #1
 80014da:	7013      	strb	r3, [r2, #0]
	//*************************************//

	//The microcontroller is booting up
	if(set_state(&state, STARTUP) == false)
 80014dc:	2101      	movs	r1, #1
 80014de:	4842      	ldr	r0, [pc, #264]	; (80015e8 <main+0x11c>)
 80014e0:	f000 fe3e 	bl	8002160 <set_state>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d101      	bne.n	80014ee <main+0x22>
	{
		Error_Handler();
 80014ea:	f000 fe1d 	bl	8002128 <Error_Handler>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ee:	f001 fabd 	bl	8002a6c <HAL_Init>

  /* USER CODE BEGIN Init */

	//Begin to configure the mcu
	if(set_state(&state, CONFIGURING) == false)
 80014f2:	2102      	movs	r1, #2
 80014f4:	483c      	ldr	r0, [pc, #240]	; (80015e8 <main+0x11c>)
 80014f6:	f000 fe33 	bl	8002160 <set_state>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d101      	bne.n	8001504 <main+0x38>
	{
		Error_Handler();
 8001500:	f000 fe12 	bl	8002128 <Error_Handler>
	}
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001504:	f000 fb48 	bl	8001b98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001508:	f000 fd64 	bl	8001fd4 <MX_GPIO_Init>
  MX_ADC1_Init();
 800150c:	f000 fbbe 	bl	8001c8c <MX_ADC1_Init>
  MX_DMA_Init();
 8001510:	f000 fd4e 	bl	8001fb0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001514:	f000 fd00 	bl	8001f18 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001518:	f000 fcb0 	bl	8001e7c <MX_TIM2_Init>
  MX_I2C1_Init();
 800151c:	f000 fc14 	bl	8001d48 <MX_I2C1_Init>
  MX_RTC_Init();
 8001520:	f000 fc50 	bl	8001dc4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

	//DMA
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 8001524:	2260      	movs	r2, #96	; 0x60
 8001526:	4931      	ldr	r1, [pc, #196]	; (80015ec <main+0x120>)
 8001528:	4831      	ldr	r0, [pc, #196]	; (80015f0 <main+0x124>)
 800152a:	f001 ff21 	bl	8003370 <HAL_ADC_Start_DMA>

	//Interrupts
	//HAL_TIM_Base_Start_IT(&htim2); //Having Errors
	HAL_UART_Receive_IT (&huart1, UART_RX_buf, UART_RX_BUF_LEN);
 800152e:	2201      	movs	r2, #1
 8001530:	4930      	ldr	r1, [pc, #192]	; (80015f4 <main+0x128>)
 8001532:	4831      	ldr	r0, [pc, #196]	; (80015f8 <main+0x12c>)
 8001534:	f006 f9d6 	bl	80078e4 <HAL_UART_Receive_IT>

	//Load Cell Init
	hx711_init(&loadcell, GPIOB, GPIO_PIN_5, GPIOB, GPIO_PIN_0);
 8001538:	2301      	movs	r3, #1
 800153a:	9300      	str	r3, [sp, #0]
 800153c:	4b2f      	ldr	r3, [pc, #188]	; (80015fc <main+0x130>)
 800153e:	2220      	movs	r2, #32
 8001540:	492e      	ldr	r1, [pc, #184]	; (80015fc <main+0x130>)
 8001542:	482f      	ldr	r0, [pc, #188]	; (8001600 <main+0x134>)
 8001544:	f7ff fd23 	bl	8000f8e <hx711_init>
	hx711_coef_set(&loadcell, 1000000); // read after calibration
 8001548:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8001604 <main+0x138>
 800154c:	482c      	ldr	r0, [pc, #176]	; (8001600 <main+0x134>)
 800154e:	f7ff fe79 	bl	8001244 <hx711_coef_set>
	hx711_tare(&loadcell, 10);
 8001552:	210a      	movs	r1, #10
 8001554:	482a      	ldr	r0, [pc, #168]	; (8001600 <main+0x134>)
 8001556:	f7ff fdea 	bl	800112e <hx711_tare>

	//Gyro and Accel Init
	MPU6050_Init();
 800155a:	f7ff ff1f 	bl	800139c <MPU6050_Init>

	loadcellCounter=0;
 800155e:	2300      	movs	r3, #0
 8001560:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174

	//Wait for 1 second
	HAL_Delay (1000);
 8001564:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001568:	f001 facc 	bl	8002b04 <HAL_Delay>

	packet_queue* queue = create_queue();
 800156c:	f000 fde1 	bl	8002132 <create_queue>
 8001570:	f8c7 0170 	str.w	r0, [r7, #368]	; 0x170
	if(queue == NULL)
 8001574:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001578:	2b00      	cmp	r3, #0
 800157a:	d109      	bne.n	8001590 <main+0xc4>
	{
		if(set_state(&state, INIT_QUEUE_FAIL) == false)
 800157c:	f06f 0104 	mvn.w	r1, #4
 8001580:	4819      	ldr	r0, [pc, #100]	; (80015e8 <main+0x11c>)
 8001582:	f000 fded 	bl	8002160 <set_state>
 8001586:	4603      	mov	r3, r0
 8001588:	2b01      	cmp	r3, #1
 800158a:	d101      	bne.n	8001590 <main+0xc4>
		{
			Error_Handler();
 800158c:	f000 fdcc 	bl	8002128 <Error_Handler>
		}
	}

	if(set_state(&state, SEARCHING) == false)
 8001590:	2103      	movs	r1, #3
 8001592:	4815      	ldr	r0, [pc, #84]	; (80015e8 <main+0x11c>)
 8001594:	f000 fde4 	bl	8002160 <set_state>
 8001598:	4603      	mov	r3, r0
 800159a:	2b01      	cmp	r3, #1
 800159c:	d108      	bne.n	80015b0 <main+0xe4>
	{
		Error_Handler();
 800159e:	f000 fdc3 	bl	8002128 <Error_Handler>
	}

	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET)
 80015a2:	e005      	b.n	80015b0 <main+0xe4>
	{
		state_action(state);
 80015a4:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <main+0x11c>)
 80015a6:	f993 3000 	ldrsb.w	r3, [r3]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f000 fe8c 	bl	80022c8 <state_action>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET)
 80015b0:	2140      	movs	r1, #64	; 0x40
 80015b2:	4812      	ldr	r0, [pc, #72]	; (80015fc <main+0x130>)
 80015b4:	f002 ffb2 	bl	800451c <HAL_GPIO_ReadPin>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d1f2      	bne.n	80015a4 <main+0xd8>
	}

	if(set_state(&state, CONNECTING) == false)
 80015be:	2104      	movs	r1, #4
 80015c0:	4809      	ldr	r0, [pc, #36]	; (80015e8 <main+0x11c>)
 80015c2:	f000 fdcd 	bl	8002160 <set_state>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d101      	bne.n	80015d0 <main+0x104>
	{
		Error_Handler();
 80015cc:	f000 fdac 	bl	8002128 <Error_Handler>
	}

	if(set_state(&state, READY) == false)
 80015d0:	2105      	movs	r1, #5
 80015d2:	4805      	ldr	r0, [pc, #20]	; (80015e8 <main+0x11c>)
 80015d4:	f000 fdc4 	bl	8002160 <set_state>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d12c      	bne.n	8001638 <main+0x16c>
	{
		Error_Handler();
 80015de:	f000 fda3 	bl	8002128 <Error_Handler>
	}

	while(global_flags.can_transmit == 0x00)
 80015e2:	e029      	b.n	8001638 <main+0x16c>
 80015e4:	20000258 	.word	0x20000258
 80015e8:	20000668 	.word	0x20000668
 80015ec:	20000b88 	.word	0x20000b88
 80015f0:	20000678 	.word	0x20000678
 80015f4:	20000c4c 	.word	0x20000c4c
 80015f8:	200006d4 	.word	0x200006d4
 80015fc:	48000400 	.word	0x48000400
 8001600:	20000650 	.word	0x20000650
 8001604:	49742400 	.word	0x49742400
	{
		if(global_flags.ble_interrupt)
 8001608:	4bc2      	ldr	r3, [pc, #776]	; (8001914 <main+0x448>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b00      	cmp	r3, #0
 8001614:	d00a      	beq.n	800162c <main+0x160>
		{
			UART_Rx_Receive_Handler((char) UART_RX_buf[0], &huart1);
 8001616:	4bc0      	ldr	r3, [pc, #768]	; (8001918 <main+0x44c>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	49c0      	ldr	r1, [pc, #768]	; (800191c <main+0x450>)
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff fe69 	bl	80012f4 <UART_Rx_Receive_Handler>
			global_flags.ble_interrupt = 0x00;
 8001622:	4abc      	ldr	r2, [pc, #752]	; (8001914 <main+0x448>)
 8001624:	7813      	ldrb	r3, [r2, #0]
 8001626:	f36f 0300 	bfc	r3, #0, #1
 800162a:	7013      	strb	r3, [r2, #0]
		}
		state_action(state);
 800162c:	4bbc      	ldr	r3, [pc, #752]	; (8001920 <main+0x454>)
 800162e:	f993 3000 	ldrsb.w	r3, [r3]
 8001632:	4618      	mov	r0, r3
 8001634:	f000 fe48 	bl	80022c8 <state_action>
	while(global_flags.can_transmit == 0x00)
 8001638:	4bb6      	ldr	r3, [pc, #728]	; (8001914 <main+0x448>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	b2db      	uxtb	r3, r3
 8001642:	2b00      	cmp	r3, #0
 8001644:	d0e0      	beq.n	8001608 <main+0x13c>
  /* USER CODE BEGIN WHILE */

	while (1)
	{

		if(set_state(&state, READING) == false)
 8001646:	2106      	movs	r1, #6
 8001648:	48b5      	ldr	r0, [pc, #724]	; (8001920 <main+0x454>)
 800164a:	f000 fd89 	bl	8002160 <set_state>
 800164e:	4603      	mov	r3, r0
 8001650:	2b01      	cmp	r3, #1
 8001652:	d101      	bne.n	8001658 <main+0x18c>
		{
			Error_Handler();
 8001654:	f000 fd68 	bl	8002128 <Error_Handler>
		}

		char transmitString[340]="";
 8001658:	463b      	mov	r3, r7
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	3304      	adds	r3, #4
 8001660:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8001664:	2100      	movs	r1, #0
 8001666:	4618      	mov	r0, r3
 8001668:	f007 fff0 	bl	800964c <memset>

		if(global_flags.str_debug)
 800166c:	4ba9      	ldr	r3, [pc, #676]	; (8001914 <main+0x448>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	f003 0310 	and.w	r3, r3, #16
 8001674:	b2db      	uxtb	r3, r3
 8001676:	2b00      	cmp	r3, #0
 8001678:	d01e      	beq.n	80016b8 <main+0x1ec>
		{
			get_RTC_Value(msg);
 800167a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff fee2 	bl	8001448 <get_RTC_Value>
			strcat(transmitString,msg);
 8001684:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8001688:	463b      	mov	r3, r7
 800168a:	4611      	mov	r1, r2
 800168c:	4618      	mov	r0, r3
 800168e:	f008 fd29 	bl	800a0e4 <strcat>

			uint32_t time1 = HAL_GetTick();
 8001692:	f001 fa1f 	bl	8002ad4 <HAL_GetTick>
 8001696:	f8c7 016c 	str.w	r0, [r7, #364]	; 0x16c

			sprintf(msg, "%i, ", time1);
 800169a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800169e:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 80016a2:	49a0      	ldr	r1, [pc, #640]	; (8001924 <main+0x458>)
 80016a4:	4618      	mov	r0, r3
 80016a6:	f008 fcfd 	bl	800a0a4 <siprintf>
			strcat(transmitString,msg);
 80016aa:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80016ae:	463b      	mov	r3, r7
 80016b0:	4611      	mov	r1, r2
 80016b2:	4618      	mov	r0, r3
 80016b4:	f008 fd16 	bl	800a0e4 <strcat>
		}

		//Get ADC value
		sConfig.Channel= ADC_CHANNEL_9;
 80016b8:	4b9b      	ldr	r3, [pc, #620]	; (8001928 <main+0x45c>)
 80016ba:	4a9c      	ldr	r2, [pc, #624]	; (800192c <main+0x460>)
 80016bc:	601a      	str	r2, [r3, #0]
		HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80016be:	499a      	ldr	r1, [pc, #616]	; (8001928 <main+0x45c>)
 80016c0:	489b      	ldr	r0, [pc, #620]	; (8001930 <main+0x464>)
 80016c2:	f001 fef7 	bl	80034b4 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc1);
 80016c6:	489a      	ldr	r0, [pc, #616]	; (8001930 <main+0x464>)
 80016c8:	f001 fd4c 	bl	8003164 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80016cc:	f04f 31ff 	mov.w	r1, #4294967295
 80016d0:	4897      	ldr	r0, [pc, #604]	; (8001930 <main+0x464>)
 80016d2:	f001 fdc0 	bl	8003256 <HAL_ADC_PollForConversion>
		raw_ecg_val = HAL_ADC_GetValue(&hadc1);
 80016d6:	4896      	ldr	r0, [pc, #600]	; (8001930 <main+0x464>)
 80016d8:	f001 fec0 	bl	800345c <HAL_ADC_GetValue>
 80016dc:	4603      	mov	r3, r0
 80016de:	f8a7 316a 	strh.w	r3, [r7, #362]	; 0x16a
		HAL_ADC_Stop(&hadc1);
 80016e2:	4893      	ldr	r0, [pc, #588]	; (8001930 <main+0x464>)
 80016e4:	f001 fd84 	bl	80031f0 <HAL_ADC_Stop>

		if(global_flags.str_debug)
 80016e8:	4b8a      	ldr	r3, [pc, #552]	; (8001914 <main+0x448>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	f003 0310 	and.w	r3, r3, #16
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d00e      	beq.n	8001714 <main+0x248>
		{
			sprintf(msg, "%hu, ", raw_ecg_val);
 80016f6:	f8b7 216a 	ldrh.w	r2, [r7, #362]	; 0x16a
 80016fa:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80016fe:	498d      	ldr	r1, [pc, #564]	; (8001934 <main+0x468>)
 8001700:	4618      	mov	r0, r3
 8001702:	f008 fccf 	bl	800a0a4 <siprintf>
			strcat(transmitString,msg);
 8001706:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800170a:	463b      	mov	r3, r7
 800170c:	4611      	mov	r1, r2
 800170e:	4618      	mov	r0, r3
 8001710:	f008 fce8 	bl	800a0e4 <strcat>
		}

		global_flags.ecg_ready = 0x01;
 8001714:	4a7f      	ldr	r2, [pc, #508]	; (8001914 <main+0x448>)
 8001716:	7853      	ldrb	r3, [r2, #1]
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	7053      	strb	r3, [r2, #1]
		pl.ecg_s[sample_cnt] = raw_ecg_val;
 800171e:	4b86      	ldr	r3, [pc, #536]	; (8001938 <main+0x46c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a86      	ldr	r2, [pc, #536]	; (800193c <main+0x470>)
 8001724:	f8b7 116a 	ldrh.w	r1, [r7, #362]	; 0x16a
 8001728:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		//Get ADC value
		sConfig.Channel= ADC_CHANNEL_5;
 800172c:	4b7e      	ldr	r3, [pc, #504]	; (8001928 <main+0x45c>)
 800172e:	4a84      	ldr	r2, [pc, #528]	; (8001940 <main+0x474>)
 8001730:	601a      	str	r2, [r3, #0]
		HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001732:	497d      	ldr	r1, [pc, #500]	; (8001928 <main+0x45c>)
 8001734:	487e      	ldr	r0, [pc, #504]	; (8001930 <main+0x464>)
 8001736:	f001 febd 	bl	80034b4 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc1);
 800173a:	487d      	ldr	r0, [pc, #500]	; (8001930 <main+0x464>)
 800173c:	f001 fd12 	bl	8003164 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001740:	f04f 31ff 	mov.w	r1, #4294967295
 8001744:	487a      	ldr	r0, [pc, #488]	; (8001930 <main+0x464>)
 8001746:	f001 fd86 	bl	8003256 <HAL_ADC_PollForConversion>
		raw_emg_val = HAL_ADC_GetValue(&hadc1);
 800174a:	4879      	ldr	r0, [pc, #484]	; (8001930 <main+0x464>)
 800174c:	f001 fe86 	bl	800345c <HAL_ADC_GetValue>
 8001750:	4603      	mov	r3, r0
 8001752:	f8a7 3168 	strh.w	r3, [r7, #360]	; 0x168
		HAL_ADC_Stop(&hadc1);
 8001756:	4876      	ldr	r0, [pc, #472]	; (8001930 <main+0x464>)
 8001758:	f001 fd4a 	bl	80031f0 <HAL_ADC_Stop>

		if(global_flags.str_debug)
 800175c:	4b6d      	ldr	r3, [pc, #436]	; (8001914 <main+0x448>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	f003 0310 	and.w	r3, r3, #16
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	d00e      	beq.n	8001788 <main+0x2bc>
		{
			sprintf(msg, "%hu, ", raw_emg_val);
 800176a:	f8b7 2168 	ldrh.w	r2, [r7, #360]	; 0x168
 800176e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001772:	4970      	ldr	r1, [pc, #448]	; (8001934 <main+0x468>)
 8001774:	4618      	mov	r0, r3
 8001776:	f008 fc95 	bl	800a0a4 <siprintf>
			strcat(transmitString,msg);
 800177a:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800177e:	463b      	mov	r3, r7
 8001780:	4611      	mov	r1, r2
 8001782:	4618      	mov	r0, r3
 8001784:	f008 fcae 	bl	800a0e4 <strcat>
		}

		global_flags.emg_ready = 0x01;
 8001788:	4a62      	ldr	r2, [pc, #392]	; (8001914 <main+0x448>)
 800178a:	7853      	ldrb	r3, [r2, #1]
 800178c:	f043 0302 	orr.w	r3, r3, #2
 8001790:	7053      	strb	r3, [r2, #1]
		pl.emg_s[sample_cnt] = raw_emg_val;
 8001792:	4b69      	ldr	r3, [pc, #420]	; (8001938 <main+0x46c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a69      	ldr	r2, [pc, #420]	; (800193c <main+0x470>)
 8001798:	3320      	adds	r3, #32
 800179a:	f8b7 1168 	ldrh.w	r1, [r7, #360]	; 0x168
 800179e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		// read the Accelerometer and Gyro values
		//MPU6050_Read_Accel();
		//MPU6050_Read_Gyro();

		if(global_flags.str_debug)
 80017a2:	4b5c      	ldr	r3, [pc, #368]	; (8001914 <main+0x448>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	f003 0310 	and.w	r3, r3, #16
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d071      	beq.n	8001894 <main+0x3c8>
		{
			sprintf(buf, "%f, ", Ax);
 80017b0:	4b64      	ldr	r3, [pc, #400]	; (8001944 <main+0x478>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7fe fe9f 	bl	80004f8 <__aeabi_f2d>
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	f507 70aa 	add.w	r0, r7, #340	; 0x154
 80017c2:	4961      	ldr	r1, [pc, #388]	; (8001948 <main+0x47c>)
 80017c4:	f008 fc6e 	bl	800a0a4 <siprintf>
			strcat(transmitString,buf);
 80017c8:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 80017cc:	463b      	mov	r3, r7
 80017ce:	4611      	mov	r1, r2
 80017d0:	4618      	mov	r0, r3
 80017d2:	f008 fc87 	bl	800a0e4 <strcat>
			sprintf(buf, "%f, ", Ay);
 80017d6:	4b5d      	ldr	r3, [pc, #372]	; (800194c <main+0x480>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4618      	mov	r0, r3
 80017dc:	f7fe fe8c 	bl	80004f8 <__aeabi_f2d>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	f507 70aa 	add.w	r0, r7, #340	; 0x154
 80017e8:	4957      	ldr	r1, [pc, #348]	; (8001948 <main+0x47c>)
 80017ea:	f008 fc5b 	bl	800a0a4 <siprintf>
			strcat(transmitString,buf);
 80017ee:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 80017f2:	463b      	mov	r3, r7
 80017f4:	4611      	mov	r1, r2
 80017f6:	4618      	mov	r0, r3
 80017f8:	f008 fc74 	bl	800a0e4 <strcat>
			sprintf(buf, "%f, ", Az);
 80017fc:	4b54      	ldr	r3, [pc, #336]	; (8001950 <main+0x484>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4618      	mov	r0, r3
 8001802:	f7fe fe79 	bl	80004f8 <__aeabi_f2d>
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
 800180a:	f507 70aa 	add.w	r0, r7, #340	; 0x154
 800180e:	494e      	ldr	r1, [pc, #312]	; (8001948 <main+0x47c>)
 8001810:	f008 fc48 	bl	800a0a4 <siprintf>
			strcat(transmitString,buf);
 8001814:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8001818:	463b      	mov	r3, r7
 800181a:	4611      	mov	r1, r2
 800181c:	4618      	mov	r0, r3
 800181e:	f008 fc61 	bl	800a0e4 <strcat>
			sprintf(buf, "%f, ", Gx);
 8001822:	4b4c      	ldr	r3, [pc, #304]	; (8001954 <main+0x488>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4618      	mov	r0, r3
 8001828:	f7fe fe66 	bl	80004f8 <__aeabi_f2d>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	f507 70aa 	add.w	r0, r7, #340	; 0x154
 8001834:	4944      	ldr	r1, [pc, #272]	; (8001948 <main+0x47c>)
 8001836:	f008 fc35 	bl	800a0a4 <siprintf>
			strcat(transmitString,buf);
 800183a:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 800183e:	463b      	mov	r3, r7
 8001840:	4611      	mov	r1, r2
 8001842:	4618      	mov	r0, r3
 8001844:	f008 fc4e 	bl	800a0e4 <strcat>
			sprintf(buf, "%f, ", Gy);
 8001848:	4b43      	ldr	r3, [pc, #268]	; (8001958 <main+0x48c>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f7fe fe53 	bl	80004f8 <__aeabi_f2d>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	f507 70aa 	add.w	r0, r7, #340	; 0x154
 800185a:	493b      	ldr	r1, [pc, #236]	; (8001948 <main+0x47c>)
 800185c:	f008 fc22 	bl	800a0a4 <siprintf>
			strcat(transmitString,buf);
 8001860:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8001864:	463b      	mov	r3, r7
 8001866:	4611      	mov	r1, r2
 8001868:	4618      	mov	r0, r3
 800186a:	f008 fc3b 	bl	800a0e4 <strcat>
			sprintf(buf, "%f, ", Gz);
 800186e:	4b3b      	ldr	r3, [pc, #236]	; (800195c <main+0x490>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f7fe fe40 	bl	80004f8 <__aeabi_f2d>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	f507 70aa 	add.w	r0, r7, #340	; 0x154
 8001880:	4931      	ldr	r1, [pc, #196]	; (8001948 <main+0x47c>)
 8001882:	f008 fc0f 	bl	800a0a4 <siprintf>
			strcat(transmitString,buf);
 8001886:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 800188a:	463b      	mov	r3, r7
 800188c:	4611      	mov	r1, r2
 800188e:	4618      	mov	r0, r3
 8001890:	f008 fc28 	bl	800a0e4 <strcat>
		}

		global_flags.accel_ready = 0x01;
 8001894:	4a1f      	ldr	r2, [pc, #124]	; (8001914 <main+0x448>)
 8001896:	7853      	ldrb	r3, [r2, #1]
 8001898:	f043 0308 	orr.w	r3, r3, #8
 800189c:	7053      	strb	r3, [r2, #1]
		pl.accelx_s[sample_cnt] = Ax;
 800189e:	4b26      	ldr	r3, [pc, #152]	; (8001938 <main+0x46c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a28      	ldr	r2, [pc, #160]	; (8001944 <main+0x478>)
 80018a4:	6811      	ldr	r1, [r2, #0]
 80018a6:	4a25      	ldr	r2, [pc, #148]	; (800193c <main+0x470>)
 80018a8:	3320      	adds	r3, #32
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	4413      	add	r3, r2
 80018ae:	460a      	mov	r2, r1
 80018b0:	605a      	str	r2, [r3, #4]
		pl.accely_s[sample_cnt] = Ay;
 80018b2:	4b21      	ldr	r3, [pc, #132]	; (8001938 <main+0x46c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a25      	ldr	r2, [pc, #148]	; (800194c <main+0x480>)
 80018b8:	6811      	ldr	r1, [r2, #0]
 80018ba:	4a20      	ldr	r2, [pc, #128]	; (800193c <main+0x470>)
 80018bc:	3340      	adds	r3, #64	; 0x40
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	4413      	add	r3, r2
 80018c2:	460a      	mov	r2, r1
 80018c4:	605a      	str	r2, [r3, #4]
		pl.accelz_s[sample_cnt] = Az;
 80018c6:	4b1c      	ldr	r3, [pc, #112]	; (8001938 <main+0x46c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a21      	ldr	r2, [pc, #132]	; (8001950 <main+0x484>)
 80018cc:	6811      	ldr	r1, [r2, #0]
 80018ce:	4a1b      	ldr	r2, [pc, #108]	; (800193c <main+0x470>)
 80018d0:	3360      	adds	r3, #96	; 0x60
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	4413      	add	r3, r2
 80018d6:	460a      	mov	r2, r1
 80018d8:	605a      	str	r2, [r3, #4]

		global_flags.gyro_ready = 0x01;
 80018da:	4a0e      	ldr	r2, [pc, #56]	; (8001914 <main+0x448>)
 80018dc:	7853      	ldrb	r3, [r2, #1]
 80018de:	f043 0310 	orr.w	r3, r3, #16
 80018e2:	7053      	strb	r3, [r2, #1]
		pl.gyrox_s[sample_cnt] = Gx;
 80018e4:	4b14      	ldr	r3, [pc, #80]	; (8001938 <main+0x46c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a1a      	ldr	r2, [pc, #104]	; (8001954 <main+0x488>)
 80018ea:	6811      	ldr	r1, [r2, #0]
 80018ec:	4a13      	ldr	r2, [pc, #76]	; (800193c <main+0x470>)
 80018ee:	3380      	adds	r3, #128	; 0x80
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	4413      	add	r3, r2
 80018f4:	460a      	mov	r2, r1
 80018f6:	605a      	str	r2, [r3, #4]
		pl.gyroy_s[sample_cnt] = Gy;
 80018f8:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <main+0x46c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a16      	ldr	r2, [pc, #88]	; (8001958 <main+0x48c>)
 80018fe:	6811      	ldr	r1, [r2, #0]
 8001900:	4a0e      	ldr	r2, [pc, #56]	; (800193c <main+0x470>)
 8001902:	33a0      	adds	r3, #160	; 0xa0
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4413      	add	r3, r2
 8001908:	460a      	mov	r2, r1
 800190a:	605a      	str	r2, [r3, #4]
		pl.gyroz_s[sample_cnt] = Gz;
 800190c:	4b0a      	ldr	r3, [pc, #40]	; (8001938 <main+0x46c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	e026      	b.n	8001960 <main+0x494>
 8001912:	bf00      	nop
 8001914:	20000258 	.word	0x20000258
 8001918:	20000c4c 	.word	0x20000c4c
 800191c:	200006d4 	.word	0x200006d4
 8001920:	20000668 	.word	0x20000668
 8001924:	0800c3ac 	.word	0x0800c3ac
 8001928:	20000b78 	.word	0x20000b78
 800192c:	24000200 	.word	0x24000200
 8001930:	20000678 	.word	0x20000678
 8001934:	0800c3b4 	.word	0x0800c3b4
 8001938:	200006cc 	.word	0x200006cc
 800193c:	20000764 	.word	0x20000764
 8001940:	14000020 	.word	0x14000020
 8001944:	20000b70 	.word	0x20000b70
 8001948:	0800c3bc 	.word	0x0800c3bc
 800194c:	2000066c 	.word	0x2000066c
 8001950:	20000b74 	.word	0x20000b74
 8001954:	20000254 	.word	0x20000254
 8001958:	20000674 	.word	0x20000674
 800195c:	20000c48 	.word	0x20000c48
 8001960:	4a7e      	ldr	r2, [pc, #504]	; (8001b5c <main+0x690>)
 8001962:	6811      	ldr	r1, [r2, #0]
 8001964:	4a7e      	ldr	r2, [pc, #504]	; (8001b60 <main+0x694>)
 8001966:	33c0      	adds	r3, #192	; 0xc0
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4413      	add	r3, r2
 800196c:	460a      	mov	r2, r1
 800196e:	605a      	str	r2, [r3, #4]

		// Get value from the load cell amplifier
		//Only read the load cell value every 10000 samples
		loadcellCounter++;
 8001970:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001974:	3301      	adds	r3, #1
 8001976:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
		if(loadcellCounter > 10000){
 800197a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800197e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001982:	4293      	cmp	r3, r2
 8001984:	dd27      	ble.n	80019d6 <main+0x50a>
			weight = hx711_weight(&loadcell, 10);
 8001986:	210a      	movs	r1, #10
 8001988:	4876      	ldr	r0, [pc, #472]	; (8001b64 <main+0x698>)
 800198a:	f7ff fc0c 	bl	80011a6 <hx711_weight>
 800198e:	ed87 0a59 	vstr	s0, [r7, #356]	; 0x164

			global_flags.force_ready = 0x01;
 8001992:	4a75      	ldr	r2, [pc, #468]	; (8001b68 <main+0x69c>)
 8001994:	7853      	ldrb	r3, [r2, #1]
 8001996:	f043 0304 	orr.w	r3, r3, #4
 800199a:	7053      	strb	r3, [r2, #1]
			loadcellCounter = 0;
 800199c:	2300      	movs	r3, #0
 800199e:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174

			if(global_flags.str_debug)
 80019a2:	4b71      	ldr	r3, [pc, #452]	; (8001b68 <main+0x69c>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	f003 0310 	and.w	r3, r3, #16
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d017      	beq.n	80019e0 <main+0x514>
			{
				sprintf(msg, "  %f,", weight);
 80019b0:	f8d7 0164 	ldr.w	r0, [r7, #356]	; 0x164
 80019b4:	f7fe fda0 	bl	80004f8 <__aeabi_f2d>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 80019c0:	496a      	ldr	r1, [pc, #424]	; (8001b6c <main+0x6a0>)
 80019c2:	f008 fb6f 	bl	800a0a4 <siprintf>
				strcat(transmitString,msg);
 80019c6:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80019ca:	463b      	mov	r3, r7
 80019cc:	4611      	mov	r1, r2
 80019ce:	4618      	mov	r0, r3
 80019d0:	f008 fb88 	bl	800a0e4 <strcat>
 80019d4:	e004      	b.n	80019e0 <main+0x514>
			}
		}
		else
		{
			pl.force_s = 0;
 80019d6:	4b62      	ldr	r3, [pc, #392]	; (8001b60 <main+0x694>)
 80019d8:	f04f 0200 	mov.w	r2, #0
 80019dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		}

		if(global_flags.str_debug)
 80019e0:	4b61      	ldr	r3, [pc, #388]	; (8001b68 <main+0x69c>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	f003 0310 	and.w	r3, r3, #16
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d018      	beq.n	8001a20 <main+0x554>
		{
			sprintf(msg, "%\r\n");
 80019ee:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80019f2:	495f      	ldr	r1, [pc, #380]	; (8001b70 <main+0x6a4>)
 80019f4:	4618      	mov	r0, r3
 80019f6:	f008 fb55 	bl	800a0a4 <siprintf>
			strcat(transmitString,msg);
 80019fa:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80019fe:	463b      	mov	r3, r7
 8001a00:	4611      	mov	r1, r2
 8001a02:	4618      	mov	r0, r3
 8001a04:	f008 fb6e 	bl	800a0e4 <strcat>
			HAL_UART_Transmit(&huart1, (uint8_t*)transmitString, strlen(transmitString), HAL_MAX_DELAY);
 8001a08:	463b      	mov	r3, r7
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7fe fbb8 	bl	8000180 <strlen>
 8001a10:	4603      	mov	r3, r0
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	4639      	mov	r1, r7
 8001a16:	f04f 33ff 	mov.w	r3, #4294967295
 8001a1a:	4856      	ldr	r0, [pc, #344]	; (8001b74 <main+0x6a8>)
 8001a1c:	f005 fecc 	bl	80077b8 <HAL_UART_Transmit>
		}

		//Simple method to create and add packets to queue
		if(sample_cnt % 32 == 0 && sample_cnt != 0) //32 loops have occurred and at least 1 sensor has 1 value in it
 8001a20:	4b55      	ldr	r3, [pc, #340]	; (8001b78 <main+0x6ac>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 031f 	and.w	r3, r3, #31
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d17d      	bne.n	8001b28 <main+0x65c>
 8001a2c:	4b52      	ldr	r3, [pc, #328]	; (8001b78 <main+0x6ac>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d079      	beq.n	8001b28 <main+0x65c>
		{

			if(set_state(&state, STORING) == false)
 8001a34:	2107      	movs	r1, #7
 8001a36:	4851      	ldr	r0, [pc, #324]	; (8001b7c <main+0x6b0>)
 8001a38:	f000 fb92 	bl	8002160 <set_state>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d101      	bne.n	8001a46 <main+0x57a>
			{
				Error_Handler();
 8001a42:	f000 fb71 	bl	8002128 <Error_Handler>
			}
			pl.payload_size = global_flags.sensor_contents; //bit mask
 8001a46:	4b48      	ldr	r3, [pc, #288]	; (8001b68 <main+0x69c>)
 8001a48:	785a      	ldrb	r2, [r3, #1]
 8001a4a:	4b45      	ldr	r3, [pc, #276]	; (8001b60 <main+0x694>)
 8001a4c:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384

			pkt.start = 0xFFFFFFFF;
 8001a50:	4b4b      	ldr	r3, [pc, #300]	; (8001b80 <main+0x6b4>)
 8001a52:	781a      	ldrb	r2, [r3, #0]
 8001a54:	f04f 32ff 	mov.w	r2, #4294967295
 8001a58:	701a      	strb	r2, [r3, #0]
 8001a5a:	785a      	ldrb	r2, [r3, #1]
 8001a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a60:	705a      	strb	r2, [r3, #1]
 8001a62:	789a      	ldrb	r2, [r3, #2]
 8001a64:	f04f 32ff 	mov.w	r2, #4294967295
 8001a68:	709a      	strb	r2, [r3, #2]
 8001a6a:	78da      	ldrb	r2, [r3, #3]
 8001a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a70:	70da      	strb	r2, [r3, #3]
			pkt.payload = pl;
 8001a72:	4b43      	ldr	r3, [pc, #268]	; (8001b80 <main+0x6b4>)
 8001a74:	4a3a      	ldr	r2, [pc, #232]	; (8001b60 <main+0x694>)
 8001a76:	3309      	adds	r3, #9
 8001a78:	4611      	mov	r1, r2
 8001a7a:	f240 3285 	movw	r2, #901	; 0x385
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f007 fdd6 	bl	8009630 <memcpy>
			pkt.state = (uint8_t) state; //save the current state;
 8001a84:	4b3d      	ldr	r3, [pc, #244]	; (8001b7c <main+0x6b0>)
 8001a86:	f993 3000 	ldrsb.w	r3, [r3]
 8001a8a:	f003 030f 	and.w	r3, r3, #15
 8001a8e:	b2d9      	uxtb	r1, r3
 8001a90:	4a3b      	ldr	r2, [pc, #236]	; (8001b80 <main+0x6b4>)
 8001a92:	7a13      	ldrb	r3, [r2, #8]
 8001a94:	f361 0303 	bfi	r3, r1, #0, #4
 8001a98:	7213      	strb	r3, [r2, #8]
			pkt.packet_size = sizeof(packet_t);
 8001a9a:	4b39      	ldr	r3, [pc, #228]	; (8001b80 <main+0x6b4>)
 8001a9c:	791a      	ldrb	r2, [r3, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f062 0259 	orn	r2, r2, #89	; 0x59
 8001aa4:	711a      	strb	r2, [r3, #4]
 8001aa6:	795a      	ldrb	r2, [r3, #5]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f042 0203 	orr.w	r2, r2, #3
 8001aae:	715a      	strb	r2, [r3, #5]
			pkt.packet_num = pkt_cnt;
 8001ab0:	4b34      	ldr	r3, [pc, #208]	; (8001b84 <main+0x6b8>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	b29a      	uxth	r2, r3
 8001ab6:	4b32      	ldr	r3, [pc, #200]	; (8001b80 <main+0x6b4>)
 8001ab8:	80da      	strh	r2, [r3, #6]
			get_RTC_Value((char*)pkt.timestamp);
 8001aba:	4833      	ldr	r0, [pc, #204]	; (8001b88 <main+0x6bc>)
 8001abc:	f7ff fcc4 	bl	8001448 <get_RTC_Value>

			if(!global_flags.str_debug && global_flags.can_transmit)
 8001ac0:	4b29      	ldr	r3, [pc, #164]	; (8001b68 <main+0x69c>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	f003 0310 	and.w	r3, r3, #16
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d10f      	bne.n	8001aee <main+0x622>
 8001ace:	4b26      	ldr	r3, [pc, #152]	; (8001b68 <main+0x69c>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d008      	beq.n	8001aee <main+0x622>
			{
				HAL_UART_Transmit(&huart1, (uint8_t*)&pkt, pkt.packet_size, HAL_MAX_DELAY);
 8001adc:	4b28      	ldr	r3, [pc, #160]	; (8001b80 <main+0x6b4>)
 8001ade:	889b      	ldrh	r3, [r3, #4]
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae6:	4926      	ldr	r1, [pc, #152]	; (8001b80 <main+0x6b4>)
 8001ae8:	4822      	ldr	r0, [pc, #136]	; (8001b74 <main+0x6a8>)
 8001aea:	f005 fe65 	bl	80077b8 <HAL_UART_Transmit>
			//				if(HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY) != HAL_OK)
			//				{
			//					Error_Handler();
			//				}
			//			}
			pl = null_pl;
 8001aee:	4a1c      	ldr	r2, [pc, #112]	; (8001b60 <main+0x694>)
 8001af0:	4b26      	ldr	r3, [pc, #152]	; (8001b8c <main+0x6c0>)
 8001af2:	4610      	mov	r0, r2
 8001af4:	4619      	mov	r1, r3
 8001af6:	f240 3385 	movw	r3, #901	; 0x385
 8001afa:	461a      	mov	r2, r3
 8001afc:	f007 fd98 	bl	8009630 <memcpy>
			pkt = null_pkt;
 8001b00:	4a1f      	ldr	r2, [pc, #124]	; (8001b80 <main+0x6b4>)
 8001b02:	4b23      	ldr	r3, [pc, #140]	; (8001b90 <main+0x6c4>)
 8001b04:	4610      	mov	r0, r2
 8001b06:	4619      	mov	r1, r3
 8001b08:	f240 33a6 	movw	r3, #934	; 0x3a6
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	f007 fd8f 	bl	8009630 <memcpy>

			global_flags.sensor_contents = 0x00; //reset all packet ready values
 8001b12:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <main+0x69c>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	705a      	strb	r2, [r3, #1]
			pkt_cnt ++;
 8001b18:	4b1a      	ldr	r3, [pc, #104]	; (8001b84 <main+0x6b8>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	4a19      	ldr	r2, [pc, #100]	; (8001b84 <main+0x6b8>)
 8001b20:	6013      	str	r3, [r2, #0]
			sample_cnt = 0;
 8001b22:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <main+0x6ac>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
		}

		sample_cnt ++;
 8001b28:	4b13      	ldr	r3, [pc, #76]	; (8001b78 <main+0x6ac>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	4a12      	ldr	r2, [pc, #72]	; (8001b78 <main+0x6ac>)
 8001b30:	6013      	str	r3, [r2, #0]

		if(global_flags.ble_interrupt)
 8001b32:	4b0d      	ldr	r3, [pc, #52]	; (8001b68 <main+0x69c>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f43f ad82 	beq.w	8001646 <main+0x17a>
		{
			UART_Rx_Receive_Handler(UART_RX_buf[0], &huart1);
 8001b42:	4b14      	ldr	r3, [pc, #80]	; (8001b94 <main+0x6c8>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	490b      	ldr	r1, [pc, #44]	; (8001b74 <main+0x6a8>)
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff fbd3 	bl	80012f4 <UART_Rx_Receive_Handler>
			global_flags.ble_interrupt = 0;
 8001b4e:	4a06      	ldr	r2, [pc, #24]	; (8001b68 <main+0x69c>)
 8001b50:	7813      	ldrb	r3, [r2, #0]
 8001b52:	f36f 0300 	bfc	r3, #0, #1
 8001b56:	7013      	strb	r3, [r2, #0]
	{
 8001b58:	e575      	b.n	8001646 <main+0x17a>
 8001b5a:	bf00      	nop
 8001b5c:	20000c48 	.word	0x20000c48
 8001b60:	20000764 	.word	0x20000764
 8001b64:	20000650 	.word	0x20000650
 8001b68:	20000258 	.word	0x20000258
 8001b6c:	0800c3c4 	.word	0x0800c3c4
 8001b70:	0800c3cc 	.word	0x0800c3cc
 8001b74:	200006d4 	.word	0x200006d4
 8001b78:	200006cc 	.word	0x200006cc
 8001b7c:	20000668 	.word	0x20000668
 8001b80:	2000025c 	.word	0x2000025c
 8001b84:	200006d0 	.word	0x200006d0
 8001b88:	200005ea 	.word	0x200005ea
 8001b8c:	0800c7a8 	.word	0x0800c7a8
 8001b90:	0800c400 	.word	0x0800c400
 8001b94:	20000c4c 	.word	0x20000c4c

08001b98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b0a4      	sub	sp, #144	; 0x90
 8001b9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b9e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ba2:	2244      	movs	r2, #68	; 0x44
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f007 fd50 	bl	800964c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
 8001bba:	611a      	str	r2, [r3, #16]
 8001bbc:	615a      	str	r2, [r3, #20]
 8001bbe:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bc0:	463b      	mov	r3, r7
 8001bc2:	2230      	movs	r2, #48	; 0x30
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f007 fd40 	bl	800964c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001bcc:	f003 fa72 	bl	80050b4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001bd0:	2000      	movs	r0, #0
 8001bd2:	f7ff fb46 	bl	8001262 <LL_RCC_LSE_SetDriveCapability>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8001bd6:	232f      	movs	r3, #47	; 0x2f
 8001bd8:	64fb      	str	r3, [r7, #76]	; 0x4c
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bde:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001be0:	2301      	movs	r3, #1
 8001be2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001be4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001be8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001bea:	2301      	movs	r3, #1
 8001bec:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bee:	2340      	movs	r3, #64	; 0x40
 8001bf0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001bf6:	2360      	movs	r3, #96	; 0x60
 8001bf8:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001bfa:	2305      	movs	r3, #5
 8001bfc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c02:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c06:	4618      	mov	r0, r3
 8001c08:	f003 fdb2 	bl	8005770 <HAL_RCC_OscConfig>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001c12:	f000 fa89 	bl	8002128 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001c16:	236f      	movs	r3, #111	; 0x6f
 8001c18:	633b      	str	r3, [r7, #48]	; 0x30
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c22:	2300      	movs	r3, #0
 8001c24:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c26:	2300      	movs	r3, #0
 8001c28:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001c32:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c36:	2100      	movs	r1, #0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f004 f8e7 	bl	8005e0c <HAL_RCC_ClockConfig>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001c44:	f000 fa70 	bl	8002128 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RTC
 8001c48:	f642 4305 	movw	r3, #11269	; 0x2c05
 8001c4c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001c52:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001c56:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_HSI;
 8001c58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001c5c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001c5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c62:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001c64:	2300      	movs	r3, #0
 8001c66:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001c68:	2310      	movs	r3, #16
 8001c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c6c:	463b      	mov	r3, r7
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f004 fcd3 	bl	800661a <HAL_RCCEx_PeriphCLKConfig>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001c7a:	f000 fa55 	bl	8002128 <Error_Handler>
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001c7e:	f004 fdc2 	bl	8006806 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001c82:	bf00      	nop
 8001c84:	3790      	adds	r7, #144	; 0x90
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
	...

08001c8c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c92:	1d3b      	adds	r3, r7, #4
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	605a      	str	r2, [r3, #4]
 8001c9a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001c9c:	4b27      	ldr	r3, [pc, #156]	; (8001d3c <MX_ADC1_Init+0xb0>)
 8001c9e:	4a28      	ldr	r2, [pc, #160]	; (8001d40 <MX_ADC1_Init+0xb4>)
 8001ca0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001ca2:	4b26      	ldr	r3, [pc, #152]	; (8001d3c <MX_ADC1_Init+0xb0>)
 8001ca4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001ca8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8001caa:	4b24      	ldr	r3, [pc, #144]	; (8001d3c <MX_ADC1_Init+0xb0>)
 8001cac:	2210      	movs	r2, #16
 8001cae:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001cb0:	4b22      	ldr	r3, [pc, #136]	; (8001d3c <MX_ADC1_Init+0xb0>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001cb6:	4b21      	ldr	r3, [pc, #132]	; (8001d3c <MX_ADC1_Init+0xb0>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001cbc:	4b1f      	ldr	r3, [pc, #124]	; (8001d3c <MX_ADC1_Init+0xb0>)
 8001cbe:	2204      	movs	r2, #4
 8001cc0:	615a      	str	r2, [r3, #20]
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8001cc2:	4b1e      	ldr	r3, [pc, #120]	; (8001d3c <MX_ADC1_Init+0xb0>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8001cc8:	4b1c      	ldr	r3, [pc, #112]	; (8001d3c <MX_ADC1_Init+0xb0>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001cce:	4b1b      	ldr	r3, [pc, #108]	; (8001d3c <MX_ADC1_Init+0xb0>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001cd4:	4b19      	ldr	r3, [pc, #100]	; (8001d3c <MX_ADC1_Init+0xb0>)
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8001cda:	4b18      	ldr	r3, [pc, #96]	; (8001d3c <MX_ADC1_Init+0xb0>)
 8001cdc:	2201      	movs	r2, #1
 8001cde:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ce0:	4b16      	ldr	r3, [pc, #88]	; (8001d3c <MX_ADC1_Init+0xb0>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ce8:	4b14      	ldr	r3, [pc, #80]	; (8001d3c <MX_ADC1_Init+0xb0>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001cee:	4b13      	ldr	r3, [pc, #76]	; (8001d3c <MX_ADC1_Init+0xb0>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001cf4:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <MX_ADC1_Init+0xb0>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001cfc:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <MX_ADC1_Init+0xb0>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d02:	480e      	ldr	r0, [pc, #56]	; (8001d3c <MX_ADC1_Init+0xb0>)
 8001d04:	f001 f88c 	bl	8002e20 <HAL_ADC_Init>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001d0e:	f000 fa0b 	bl	8002128 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001d12:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <MX_ADC1_Init+0xb8>)
 8001d14:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d16:	2300      	movs	r3, #0
 8001d18:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d1e:	1d3b      	adds	r3, r7, #4
 8001d20:	4619      	mov	r1, r3
 8001d22:	4806      	ldr	r0, [pc, #24]	; (8001d3c <MX_ADC1_Init+0xb0>)
 8001d24:	f001 fbc6 	bl	80034b4 <HAL_ADC_ConfigChannel>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001d2e:	f000 f9fb 	bl	8002128 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d32:	bf00      	nop
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20000678 	.word	0x20000678
 8001d40:	40012400 	.word	0x40012400
 8001d44:	24000200 	.word	0x24000200

08001d48 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d4c:	4b1b      	ldr	r3, [pc, #108]	; (8001dbc <MX_I2C1_Init+0x74>)
 8001d4e:	4a1c      	ldr	r2, [pc, #112]	; (8001dc0 <MX_I2C1_Init+0x78>)
 8001d50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8001d52:	4b1a      	ldr	r3, [pc, #104]	; (8001dbc <MX_I2C1_Init+0x74>)
 8001d54:	f640 6214 	movw	r2, #3604	; 0xe14
 8001d58:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001d5a:	4b18      	ldr	r3, [pc, #96]	; (8001dbc <MX_I2C1_Init+0x74>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d60:	4b16      	ldr	r3, [pc, #88]	; (8001dbc <MX_I2C1_Init+0x74>)
 8001d62:	2201      	movs	r2, #1
 8001d64:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d66:	4b15      	ldr	r3, [pc, #84]	; (8001dbc <MX_I2C1_Init+0x74>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001d6c:	4b13      	ldr	r3, [pc, #76]	; (8001dbc <MX_I2C1_Init+0x74>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d72:	4b12      	ldr	r3, [pc, #72]	; (8001dbc <MX_I2C1_Init+0x74>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d78:	4b10      	ldr	r3, [pc, #64]	; (8001dbc <MX_I2C1_Init+0x74>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d7e:	4b0f      	ldr	r3, [pc, #60]	; (8001dbc <MX_I2C1_Init+0x74>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d84:	480d      	ldr	r0, [pc, #52]	; (8001dbc <MX_I2C1_Init+0x74>)
 8001d86:	f002 fc13 	bl	80045b0 <HAL_I2C_Init>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d90:	f000 f9ca 	bl	8002128 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d94:	2100      	movs	r1, #0
 8001d96:	4809      	ldr	r0, [pc, #36]	; (8001dbc <MX_I2C1_Init+0x74>)
 8001d98:	f003 f8f4 	bl	8004f84 <HAL_I2CEx_ConfigAnalogFilter>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001da2:	f000 f9c1 	bl	8002128 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001da6:	2100      	movs	r1, #0
 8001da8:	4804      	ldr	r0, [pc, #16]	; (8001dbc <MX_I2C1_Init+0x74>)
 8001daa:	f003 f936 	bl	800501a <HAL_I2CEx_ConfigDigitalFilter>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001db4:	f000 f9b8 	bl	8002128 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001db8:	bf00      	nop
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20000604 	.word	0x20000604
 8001dc0:	40005400 	.word	0x40005400

08001dc4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001dca:	1d3b      	adds	r3, r7, #4
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	60da      	str	r2, [r3, #12]
 8001dd6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001dd8:	2300      	movs	r3, #0
 8001dda:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001ddc:	4b25      	ldr	r3, [pc, #148]	; (8001e74 <MX_RTC_Init+0xb0>)
 8001dde:	4a26      	ldr	r2, [pc, #152]	; (8001e78 <MX_RTC_Init+0xb4>)
 8001de0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001de2:	4b24      	ldr	r3, [pc, #144]	; (8001e74 <MX_RTC_Init+0xb0>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001de8:	4b22      	ldr	r3, [pc, #136]	; (8001e74 <MX_RTC_Init+0xb0>)
 8001dea:	227f      	movs	r2, #127	; 0x7f
 8001dec:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001dee:	4b21      	ldr	r3, [pc, #132]	; (8001e74 <MX_RTC_Init+0xb0>)
 8001df0:	22ff      	movs	r2, #255	; 0xff
 8001df2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001df4:	4b1f      	ldr	r3, [pc, #124]	; (8001e74 <MX_RTC_Init+0xb0>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001dfa:	4b1e      	ldr	r3, [pc, #120]	; (8001e74 <MX_RTC_Init+0xb0>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001e00:	4b1c      	ldr	r3, [pc, #112]	; (8001e74 <MX_RTC_Init+0xb0>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001e06:	481b      	ldr	r0, [pc, #108]	; (8001e74 <MX_RTC_Init+0xb0>)
 8001e08:	f004 fd03 	bl	8006812 <HAL_RTC_Init>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001e12:	f000 f989 	bl	8002128 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x20;
 8001e16:	2320      	movs	r3, #32
 8001e18:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x30;
 8001e1a:	2330      	movs	r3, #48	; 0x30
 8001e1c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0x0;
 8001e22:	2300      	movs	r3, #0
 8001e24:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001e26:	2300      	movs	r3, #0
 8001e28:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001e2e:	1d3b      	adds	r3, r7, #4
 8001e30:	2201      	movs	r2, #1
 8001e32:	4619      	mov	r1, r3
 8001e34:	480f      	ldr	r0, [pc, #60]	; (8001e74 <MX_RTC_Init+0xb0>)
 8001e36:	f004 fd8a 	bl	800694e <HAL_RTC_SetTime>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <MX_RTC_Init+0x80>
  {
    Error_Handler();
 8001e40:	f000 f972 	bl	8002128 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8001e44:	2302      	movs	r3, #2
 8001e46:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x25;
 8001e4c:	2325      	movs	r3, #37	; 0x25
 8001e4e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 8001e50:	2322      	movs	r3, #34	; 0x22
 8001e52:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001e54:	463b      	mov	r3, r7
 8001e56:	2201      	movs	r2, #1
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4806      	ldr	r0, [pc, #24]	; (8001e74 <MX_RTC_Init+0xb0>)
 8001e5c:	f004 fe97 	bl	8006b8e <HAL_RTC_SetDate>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 8001e66:	f000 f95f 	bl	8002128 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001e6a:	bf00      	nop
 8001e6c:	3718      	adds	r7, #24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20000b4c 	.word	0x20000b4c
 8001e78:	40002800 	.word	0x40002800

08001e7c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b088      	sub	sp, #32
 8001e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e82:	f107 0310 	add.w	r3, r7, #16
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	605a      	str	r2, [r3, #4]
 8001e8c:	609a      	str	r2, [r3, #8]
 8001e8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e90:	1d3b      	adds	r3, r7, #4
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	605a      	str	r2, [r3, #4]
 8001e98:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e9a:	4b1e      	ldr	r3, [pc, #120]	; (8001f14 <MX_TIM2_Init+0x98>)
 8001e9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ea0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 8001ea2:	4b1c      	ldr	r3, [pc, #112]	; (8001f14 <MX_TIM2_Init+0x98>)
 8001ea4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ea8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eaa:	4b1a      	ldr	r3, [pc, #104]	; (8001f14 <MX_TIM2_Init+0x98>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000;
 8001eb0:	4b18      	ldr	r3, [pc, #96]	; (8001f14 <MX_TIM2_Init+0x98>)
 8001eb2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001eb6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eb8:	4b16      	ldr	r3, [pc, #88]	; (8001f14 <MX_TIM2_Init+0x98>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ebe:	4b15      	ldr	r3, [pc, #84]	; (8001f14 <MX_TIM2_Init+0x98>)
 8001ec0:	2280      	movs	r2, #128	; 0x80
 8001ec2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ec4:	4813      	ldr	r0, [pc, #76]	; (8001f14 <MX_TIM2_Init+0x98>)
 8001ec6:	f004 ffe9 	bl	8006e9c <HAL_TIM_Base_Init>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001ed0:	f000 f92a 	bl	8002128 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ed4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ed8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001eda:	f107 0310 	add.w	r3, r7, #16
 8001ede:	4619      	mov	r1, r3
 8001ee0:	480c      	ldr	r0, [pc, #48]	; (8001f14 <MX_TIM2_Init+0x98>)
 8001ee2:	f005 f9a0 	bl	8007226 <HAL_TIM_ConfigClockSource>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001eec:	f000 f91c 	bl	8002128 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ef8:	1d3b      	adds	r3, r7, #4
 8001efa:	4619      	mov	r1, r3
 8001efc:	4805      	ldr	r0, [pc, #20]	; (8001f14 <MX_TIM2_Init+0x98>)
 8001efe:	f005 fb6d 	bl	80075dc <HAL_TIMEx_MasterConfigSynchronization>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001f08:	f000 f90e 	bl	8002128 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f0c:	bf00      	nop
 8001f0e:	3720      	adds	r7, #32
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	20000208 	.word	0x20000208

08001f18 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f1c:	4b22      	ldr	r3, [pc, #136]	; (8001fa8 <MX_USART1_UART_Init+0x90>)
 8001f1e:	4a23      	ldr	r2, [pc, #140]	; (8001fac <MX_USART1_UART_Init+0x94>)
 8001f20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001f22:	4b21      	ldr	r3, [pc, #132]	; (8001fa8 <MX_USART1_UART_Init+0x90>)
 8001f24:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f2a:	4b1f      	ldr	r3, [pc, #124]	; (8001fa8 <MX_USART1_UART_Init+0x90>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f30:	4b1d      	ldr	r3, [pc, #116]	; (8001fa8 <MX_USART1_UART_Init+0x90>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f36:	4b1c      	ldr	r3, [pc, #112]	; (8001fa8 <MX_USART1_UART_Init+0x90>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f3c:	4b1a      	ldr	r3, [pc, #104]	; (8001fa8 <MX_USART1_UART_Init+0x90>)
 8001f3e:	220c      	movs	r2, #12
 8001f40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f42:	4b19      	ldr	r3, [pc, #100]	; (8001fa8 <MX_USART1_UART_Init+0x90>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f48:	4b17      	ldr	r3, [pc, #92]	; (8001fa8 <MX_USART1_UART_Init+0x90>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f4e:	4b16      	ldr	r3, [pc, #88]	; (8001fa8 <MX_USART1_UART_Init+0x90>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f54:	4b14      	ldr	r3, [pc, #80]	; (8001fa8 <MX_USART1_UART_Init+0x90>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f5a:	4b13      	ldr	r3, [pc, #76]	; (8001fa8 <MX_USART1_UART_Init+0x90>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f60:	4811      	ldr	r0, [pc, #68]	; (8001fa8 <MX_USART1_UART_Init+0x90>)
 8001f62:	f005 fbd9 	bl	8007718 <HAL_UART_Init>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001f6c:	f000 f8dc 	bl	8002128 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f70:	2100      	movs	r1, #0
 8001f72:	480d      	ldr	r0, [pc, #52]	; (8001fa8 <MX_USART1_UART_Init+0x90>)
 8001f74:	f007 fa5f 	bl	8009436 <HAL_UARTEx_SetTxFifoThreshold>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001f7e:	f000 f8d3 	bl	8002128 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f82:	2100      	movs	r1, #0
 8001f84:	4808      	ldr	r0, [pc, #32]	; (8001fa8 <MX_USART1_UART_Init+0x90>)
 8001f86:	f007 fa94 	bl	80094b2 <HAL_UARTEx_SetRxFifoThreshold>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001f90:	f000 f8ca 	bl	8002128 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001f94:	4804      	ldr	r0, [pc, #16]	; (8001fa8 <MX_USART1_UART_Init+0x90>)
 8001f96:	f007 fa15 	bl	80093c4 <HAL_UARTEx_DisableFifoMode>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001fa0:	f000 f8c2 	bl	8002128 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001fa4:	bf00      	nop
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	200006d4 	.word	0x200006d4
 8001fac:	40013800 	.word	0x40013800

08001fb0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001fb4:	2004      	movs	r0, #4
 8001fb6:	f7ff f96a 	bl	800128e <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001fba:	2001      	movs	r0, #1
 8001fbc:	f7ff f967 	bl	800128e <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	200b      	movs	r0, #11
 8001fc6:	f001 fe15 	bl	8003bf4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001fca:	200b      	movs	r0, #11
 8001fcc:	f001 fe2c 	bl	8003c28 <HAL_NVIC_EnableIRQ>

}
 8001fd0:	bf00      	nop
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fda:	1d3b      	adds	r3, r7, #4
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	605a      	str	r2, [r3, #4]
 8001fe2:	609a      	str	r2, [r3, #8]
 8001fe4:	60da      	str	r2, [r3, #12]
 8001fe6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fe8:	2004      	movs	r0, #4
 8001fea:	f7ff f969 	bl	80012c0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fee:	2002      	movs	r0, #2
 8001ff0:	f7ff f966 	bl	80012c0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff4:	2001      	movs	r0, #1
 8001ff6:	f7ff f963 	bl	80012c0 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8002000:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002004:	f002 faa2 	bl	800454c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8002008:	2201      	movs	r2, #1
 800200a:	2120      	movs	r1, #32
 800200c:	481d      	ldr	r0, [pc, #116]	; (8002084 <MX_GPIO_Init+0xb0>)
 800200e:	f002 fa9d 	bl	800454c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6;
 8002012:	2341      	movs	r3, #65	; 0x41
 8002014:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002016:	2300      	movs	r3, #0
 8002018:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201a:	2300      	movs	r3, #0
 800201c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800201e:	1d3b      	adds	r3, r7, #4
 8002020:	4619      	mov	r1, r3
 8002022:	4818      	ldr	r0, [pc, #96]	; (8002084 <MX_GPIO_Init+0xb0>)
 8002024:	f002 f912 	bl	800424c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002028:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800202c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800202e:	2301      	movs	r3, #1
 8002030:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002032:	2300      	movs	r3, #0
 8002034:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002036:	2300      	movs	r3, #0
 8002038:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800203a:	1d3b      	adds	r3, r7, #4
 800203c:	4619      	mov	r1, r3
 800203e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002042:	f002 f903 	bl	800424c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002046:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800204a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800204c:	2300      	movs	r3, #0
 800204e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002050:	2300      	movs	r3, #0
 8002052:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002054:	1d3b      	adds	r3, r7, #4
 8002056:	4619      	mov	r1, r3
 8002058:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800205c:	f002 f8f6 	bl	800424c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002060:	2320      	movs	r3, #32
 8002062:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002064:	2301      	movs	r3, #1
 8002066:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002068:	2300      	movs	r3, #0
 800206a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206c:	2300      	movs	r3, #0
 800206e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002070:	1d3b      	adds	r3, r7, #4
 8002072:	4619      	mov	r1, r3
 8002074:	4803      	ldr	r0, [pc, #12]	; (8002084 <MX_GPIO_Init+0xb0>)
 8002076:	f002 f8e9 	bl	800424c <HAL_GPIO_Init>

}
 800207a:	bf00      	nop
 800207c:	3718      	adds	r7, #24
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	48000400 	.word	0x48000400

08002088 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(&huart1, (uint8_t*)UART_RX_buf, UART_RX_BUF_LEN, HAL_MAX_DELAY);
	global_flags.ble_interrupt = 1;
 8002090:	4a08      	ldr	r2, [pc, #32]	; (80020b4 <HAL_UART_RxCpltCallback+0x2c>)
 8002092:	7813      	ldrb	r3, [r2, #0]
 8002094:	f043 0301 	orr.w	r3, r3, #1
 8002098:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 800209a:	2120      	movs	r1, #32
 800209c:	4806      	ldr	r0, [pc, #24]	; (80020b8 <HAL_UART_RxCpltCallback+0x30>)
 800209e:	f002 fa6d 	bl	800457c <HAL_GPIO_TogglePin>
	HAL_UART_Receive_IT(&huart1, UART_RX_buf, UART_RX_BUF_LEN);
 80020a2:	2201      	movs	r2, #1
 80020a4:	4905      	ldr	r1, [pc, #20]	; (80020bc <HAL_UART_RxCpltCallback+0x34>)
 80020a6:	4806      	ldr	r0, [pc, #24]	; (80020c0 <HAL_UART_RxCpltCallback+0x38>)
 80020a8:	f005 fc1c 	bl	80078e4 <HAL_UART_Receive_IT>
}
 80020ac:	bf00      	nop
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	20000258 	.word	0x20000258
 80020b8:	48000400 	.word	0x48000400
 80020bc:	20000c4c 	.word	0x20000c4c
 80020c0:	200006d4 	.word	0x200006d4

080020c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if(htim->Instance == TIM2)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020d4:	d114      	bne.n	8002100 <HAL_TIM_PeriodElapsedCallback+0x3c>
	{
		HAL_UART_Transmit(&huart1, (uint8_t*)"Interrupt!\r\n", 15, HAL_MAX_DELAY);
 80020d6:	f04f 33ff 	mov.w	r3, #4294967295
 80020da:	220f      	movs	r2, #15
 80020dc:	490e      	ldr	r1, [pc, #56]	; (8002118 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80020de:	480f      	ldr	r0, [pc, #60]	; (800211c <HAL_TIM_PeriodElapsedCallback+0x58>)
 80020e0:	f005 fb6a 	bl	80077b8 <HAL_UART_Transmit>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80020e4:	2201      	movs	r2, #1
 80020e6:	2120      	movs	r1, #32
 80020e8:	480d      	ldr	r0, [pc, #52]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80020ea:	f002 fa2f 	bl	800454c <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 80020ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020f2:	f000 fd07 	bl	8002b04 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80020f6:	2200      	movs	r2, #0
 80020f8:	2120      	movs	r1, #32
 80020fa:	4809      	ldr	r0, [pc, #36]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80020fc:	f002 fa26 	bl	800454c <HAL_GPIO_WritePin>

	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a07      	ldr	r2, [pc, #28]	; (8002124 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d101      	bne.n	800210e <HAL_TIM_PeriodElapsedCallback+0x4a>
    HAL_IncTick();
 800210a:	f000 fccf 	bl	8002aac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	0800c3d0 	.word	0x0800c3d0
 800211c:	200006d4 	.word	0x200006d4
 8002120:	48000400 	.word	0x48000400
 8002124:	40012c00 	.word	0x40012c00

08002128 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800212c:	b672      	cpsid	i
}
 800212e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002130:	e7fe      	b.n	8002130 <Error_Handler+0x8>

08002132 <create_queue>:
 * Parameters:
 *
 * Return Value: packet_queue*
 -------------------------------------------*/
packet_queue* create_queue()
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b082      	sub	sp, #8
 8002136:	af00      	add	r7, sp, #0
	packet_queue* new_queue = (packet_queue*)malloc(sizeof(packet_queue));
 8002138:	200c      	movs	r0, #12
 800213a:	f007 fa71 	bl	8009620 <malloc>
 800213e:	4603      	mov	r3, r0
 8002140:	607b      	str	r3, [r7, #4]
	new_queue->back = NULL;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	605a      	str	r2, [r3, #4]
	new_queue->front = NULL;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	601a      	str	r2, [r3, #0]
	new_queue->size = 0;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	811a      	strh	r2, [r3, #8]

	return new_queue;
 8002154:	687b      	ldr	r3, [r7, #4]
}
 8002156:	4618      	mov	r0, r3
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
	...

08002160 <set_state>:
 * Parameters: state_machine*, state_machine
 *
 * Return Value: bool
 *-------------------------------------------*/
bool set_state(state_machine* curr_state, state_machine new_state)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	460b      	mov	r3, r1
 800216a:	70fb      	strb	r3, [r7, #3]
	switch(*curr_state)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f993 3000 	ldrsb.w	r3, [r3]
 8002172:	2b08      	cmp	r3, #8
 8002174:	f200 809e 	bhi.w	80022b4 <set_state+0x154>
 8002178:	a201      	add	r2, pc, #4	; (adr r2, 8002180 <set_state+0x20>)
 800217a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800217e:	bf00      	nop
 8002180:	080021a5 	.word	0x080021a5
 8002184:	080021c3 	.word	0x080021c3
 8002188:	080021e1 	.word	0x080021e1
 800218c:	080021ff 	.word	0x080021ff
 8002190:	0800221d 	.word	0x0800221d
 8002194:	0800223b 	.word	0x0800223b
 8002198:	08002259 	.word	0x08002259
 800219c:	08002281 	.word	0x08002281
 80021a0:	0800229b 	.word	0x0800229b
	{
	case NONE:
		if(new_state == STARTUP || new_state < 0)
 80021a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d003      	beq.n	80021b4 <set_state+0x54>
 80021ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	da04      	bge.n	80021be <set_state+0x5e>
		{
			*curr_state = new_state;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	78fa      	ldrb	r2, [r7, #3]
 80021b8:	701a      	strb	r2, [r3, #0]
			return true;
 80021ba:	2300      	movs	r3, #0
 80021bc:	e07b      	b.n	80022b6 <set_state+0x156>
		}
		else
		{
			return false;
 80021be:	2301      	movs	r3, #1
 80021c0:	e079      	b.n	80022b6 <set_state+0x156>
		}
	case STARTUP:
		if(new_state == CONFIGURING || new_state < 0)
 80021c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d003      	beq.n	80021d2 <set_state+0x72>
 80021ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	da04      	bge.n	80021dc <set_state+0x7c>
		{
			*curr_state = new_state;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	78fa      	ldrb	r2, [r7, #3]
 80021d6:	701a      	strb	r2, [r3, #0]
			return true;
 80021d8:	2300      	movs	r3, #0
 80021da:	e06c      	b.n	80022b6 <set_state+0x156>
		}
		return false;
 80021dc:	2301      	movs	r3, #1
 80021de:	e06a      	b.n	80022b6 <set_state+0x156>

	case CONFIGURING:
		if(new_state == SEARCHING || new_state < 0)
 80021e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021e4:	2b03      	cmp	r3, #3
 80021e6:	d003      	beq.n	80021f0 <set_state+0x90>
 80021e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	da04      	bge.n	80021fa <set_state+0x9a>
		{
			*curr_state = new_state;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	78fa      	ldrb	r2, [r7, #3]
 80021f4:	701a      	strb	r2, [r3, #0]
			return true;
 80021f6:	2300      	movs	r3, #0
 80021f8:	e05d      	b.n	80022b6 <set_state+0x156>
		}
		return false;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e05b      	b.n	80022b6 <set_state+0x156>

	case SEARCHING:
		if(new_state == CONNECTING || new_state < 0)
 80021fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002202:	2b04      	cmp	r3, #4
 8002204:	d003      	beq.n	800220e <set_state+0xae>
 8002206:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800220a:	2b00      	cmp	r3, #0
 800220c:	da04      	bge.n	8002218 <set_state+0xb8>
		{
			*curr_state = new_state;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	78fa      	ldrb	r2, [r7, #3]
 8002212:	701a      	strb	r2, [r3, #0]
			return true;
 8002214:	2300      	movs	r3, #0
 8002216:	e04e      	b.n	80022b6 <set_state+0x156>
		}
		return false;
 8002218:	2301      	movs	r3, #1
 800221a:	e04c      	b.n	80022b6 <set_state+0x156>

	case CONNECTING:
		if(new_state == READY || new_state < 0)
 800221c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002220:	2b05      	cmp	r3, #5
 8002222:	d003      	beq.n	800222c <set_state+0xcc>
 8002224:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002228:	2b00      	cmp	r3, #0
 800222a:	da04      	bge.n	8002236 <set_state+0xd6>
		{
			*curr_state = new_state;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	78fa      	ldrb	r2, [r7, #3]
 8002230:	701a      	strb	r2, [r3, #0]
			return true;
 8002232:	2300      	movs	r3, #0
 8002234:	e03f      	b.n	80022b6 <set_state+0x156>
		}
		return false;
 8002236:	2301      	movs	r3, #1
 8002238:	e03d      	b.n	80022b6 <set_state+0x156>

	case READY:
		if(new_state == READING || new_state < 0)
 800223a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800223e:	2b06      	cmp	r3, #6
 8002240:	d003      	beq.n	800224a <set_state+0xea>
 8002242:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002246:	2b00      	cmp	r3, #0
 8002248:	da04      	bge.n	8002254 <set_state+0xf4>
		{
			*curr_state = new_state;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	78fa      	ldrb	r2, [r7, #3]
 800224e:	701a      	strb	r2, [r3, #0]
			return true;
 8002250:	2300      	movs	r3, #0
 8002252:	e030      	b.n	80022b6 <set_state+0x156>
		}
		return false;
 8002254:	2301      	movs	r3, #1
 8002256:	e02e      	b.n	80022b6 <set_state+0x156>

	case READING:
		if(new_state == STORING && global_flags.pkt_ready == true || new_state < 0)
 8002258:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800225c:	2b07      	cmp	r3, #7
 800225e:	d106      	bne.n	800226e <set_state+0x10e>
 8002260:	4b18      	ldr	r3, [pc, #96]	; (80022c4 <set_state+0x164>)
 8002262:	785b      	ldrb	r3, [r3, #1]
 8002264:	f003 0320 	and.w	r3, r3, #32
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d003      	beq.n	8002276 <set_state+0x116>
 800226e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002272:	2b00      	cmp	r3, #0
 8002274:	da04      	bge.n	8002280 <set_state+0x120>
		{
			*curr_state = new_state;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	78fa      	ldrb	r2, [r7, #3]
 800227a:	701a      	strb	r2, [r3, #0]
			return true;
 800227c:	2300      	movs	r3, #0
 800227e:	e01a      	b.n	80022b6 <set_state+0x156>
		}

	case STORING:
		if(new_state == READING || new_state < 0)
 8002280:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002284:	2b06      	cmp	r3, #6
 8002286:	d003      	beq.n	8002290 <set_state+0x130>
 8002288:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800228c:	2b00      	cmp	r3, #0
 800228e:	da04      	bge.n	800229a <set_state+0x13a>
		{
			*curr_state = new_state;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	78fa      	ldrb	r2, [r7, #3]
 8002294:	701a      	strb	r2, [r3, #0]
			return true;
 8002296:	2300      	movs	r3, #0
 8002298:	e00d      	b.n	80022b6 <set_state+0x156>
		}

	case SENDING:
		if(new_state == READING || new_state < 0)
 800229a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800229e:	2b06      	cmp	r3, #6
 80022a0:	d003      	beq.n	80022aa <set_state+0x14a>
 80022a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	da04      	bge.n	80022b4 <set_state+0x154>
		{
			*curr_state = new_state;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	78fa      	ldrb	r2, [r7, #3]
 80022ae:	701a      	strb	r2, [r3, #0]
			return true;
 80022b0:	2300      	movs	r3, #0
 80022b2:	e000      	b.n	80022b6 <set_state+0x156>
		}
	default:
		return false;
 80022b4:	2301      	movs	r3, #1
	}

	return false;
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	20000258 	.word	0x20000258

080022c8 <state_action>:

void state_action(state_machine state)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	71fb      	strb	r3, [r7, #7]
	switch(state)
 80022d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d6:	2b08      	cmp	r3, #8
 80022d8:	d849      	bhi.n	800236e <state_action+0xa6>
 80022da:	a201      	add	r2, pc, #4	; (adr r2, 80022e0 <state_action+0x18>)
 80022dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022e0:	0800237b 	.word	0x0800237b
 80022e4:	0800237b 	.word	0x0800237b
 80022e8:	0800237b 	.word	0x0800237b
 80022ec:	08002305 	.word	0x08002305
 80022f0:	0800237b 	.word	0x0800237b
 80022f4:	08002349 	.word	0x08002349
 80022f8:	0800237b 	.word	0x0800237b
 80022fc:	0800237b 	.word	0x0800237b
 8002300:	0800237b 	.word	0x0800237b

	case CONFIGURING:
		return;

	case SEARCHING:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8002304:	2201      	movs	r2, #1
 8002306:	2120      	movs	r1, #32
 8002308:	481e      	ldr	r0, [pc, #120]	; (8002384 <state_action+0xbc>)
 800230a:	f002 f91f 	bl	800454c <HAL_GPIO_WritePin>
		HAL_Delay(250);
 800230e:	20fa      	movs	r0, #250	; 0xfa
 8002310:	f000 fbf8 	bl	8002b04 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8002314:	2200      	movs	r2, #0
 8002316:	2120      	movs	r1, #32
 8002318:	481a      	ldr	r0, [pc, #104]	; (8002384 <state_action+0xbc>)
 800231a:	f002 f917 	bl	800454c <HAL_GPIO_WritePin>
		HAL_Delay(250);
 800231e:	20fa      	movs	r0, #250	; 0xfa
 8002320:	f000 fbf0 	bl	8002b04 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8002324:	2201      	movs	r2, #1
 8002326:	2120      	movs	r1, #32
 8002328:	4816      	ldr	r0, [pc, #88]	; (8002384 <state_action+0xbc>)
 800232a:	f002 f90f 	bl	800454c <HAL_GPIO_WritePin>
		HAL_Delay(250);
 800232e:	20fa      	movs	r0, #250	; 0xfa
 8002330:	f000 fbe8 	bl	8002b04 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8002334:	2200      	movs	r2, #0
 8002336:	2120      	movs	r1, #32
 8002338:	4812      	ldr	r0, [pc, #72]	; (8002384 <state_action+0xbc>)
 800233a:	f002 f907 	bl	800454c <HAL_GPIO_WritePin>
		HAL_Delay(2000);
 800233e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002342:	f000 fbdf 	bl	8002b04 <HAL_Delay>
		return;
 8002346:	e019      	b.n	800237c <state_action+0xb4>

	case CONNECTING:
		return;

	case READY:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8002348:	2201      	movs	r2, #1
 800234a:	2120      	movs	r1, #32
 800234c:	480d      	ldr	r0, [pc, #52]	; (8002384 <state_action+0xbc>)
 800234e:	f002 f8fd 	bl	800454c <HAL_GPIO_WritePin>
		HAL_Delay(750);
 8002352:	f240 20ee 	movw	r0, #750	; 0x2ee
 8002356:	f000 fbd5 	bl	8002b04 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800235a:	2200      	movs	r2, #0
 800235c:	2120      	movs	r1, #32
 800235e:	4809      	ldr	r0, [pc, #36]	; (8002384 <state_action+0xbc>)
 8002360:	f002 f8f4 	bl	800454c <HAL_GPIO_WritePin>
		HAL_Delay(2000);
 8002364:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002368:	f000 fbcc 	bl	8002b04 <HAL_Delay>
		return;
 800236c:	e006      	b.n	800237c <state_action+0xb4>

	case SENDING:
		return;

	default:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 800236e:	2200      	movs	r2, #0
 8002370:	2120      	movs	r1, #32
 8002372:	4804      	ldr	r0, [pc, #16]	; (8002384 <state_action+0xbc>)
 8002374:	f002 f8ea 	bl	800454c <HAL_GPIO_WritePin>
		return;
 8002378:	e000      	b.n	800237c <state_action+0xb4>
		return;
 800237a:	bf00      	nop

	}
}
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	48000400 	.word	0x48000400

08002388 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800238c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002394:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002398:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800239c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80023a0:	bf00      	nop
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr

080023aa <LL_AHB2_GRP1_EnableClock>:
{
 80023aa:	b480      	push	{r7}
 80023ac:	b085      	sub	sp, #20
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80023b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80023b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4313      	orrs	r3, r2
 80023c0:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80023c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4013      	ands	r3, r2
 80023cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023ce:	68fb      	ldr	r3, [r7, #12]
}
 80023d0:	bf00      	nop
 80023d2:	3714      	adds	r7, #20
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80023e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80023ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80023f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4013      	ands	r3, r2
 80023fe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002400:	68fb      	ldr	r3, [r7, #12]
}
 8002402:	bf00      	nop
 8002404:	3714      	adds	r7, #20
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr

0800240e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800240e:	b480      	push	{r7}
 8002410:	b085      	sub	sp, #20
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002416:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800241a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800241c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4313      	orrs	r3, r2
 8002424:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002426:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800242a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4013      	ands	r3, r2
 8002430:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002432:	68fb      	ldr	r3, [r7, #12]
}
 8002434:	bf00      	nop
 8002436:	3714      	adds	r7, #20
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002444:	bf00      	nop
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
	...

08002450 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b088      	sub	sp, #32
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002458:	f107 030c 	add.w	r3, r7, #12
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	605a      	str	r2, [r3, #4]
 8002462:	609a      	str	r2, [r3, #8]
 8002464:	60da      	str	r2, [r3, #12]
 8002466:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a22      	ldr	r2, [pc, #136]	; (80024f8 <HAL_ADC_MspInit+0xa8>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d13e      	bne.n	80024f0 <HAL_ADC_MspInit+0xa0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002472:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002476:	f7ff ffca 	bl	800240e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800247a:	2001      	movs	r0, #1
 800247c:	f7ff ff95 	bl	80023aa <LL_AHB2_GRP1_EnableClock>
    PA0     ------> ADC1_IN5
    PA2     ------> ADC1_IN7
    PA3     ------> ADC1_IN8
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8002480:	231d      	movs	r3, #29
 8002482:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002484:	2303      	movs	r3, #3
 8002486:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002488:	2300      	movs	r3, #0
 800248a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800248c:	f107 030c 	add.w	r3, r7, #12
 8002490:	4619      	mov	r1, r3
 8002492:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002496:	f001 fed9 	bl	800424c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800249a:	4b18      	ldr	r3, [pc, #96]	; (80024fc <HAL_ADC_MspInit+0xac>)
 800249c:	4a18      	ldr	r2, [pc, #96]	; (8002500 <HAL_ADC_MspInit+0xb0>)
 800249e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80024a0:	4b16      	ldr	r3, [pc, #88]	; (80024fc <HAL_ADC_MspInit+0xac>)
 80024a2:	2205      	movs	r2, #5
 80024a4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024a6:	4b15      	ldr	r3, [pc, #84]	; (80024fc <HAL_ADC_MspInit+0xac>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80024ac:	4b13      	ldr	r3, [pc, #76]	; (80024fc <HAL_ADC_MspInit+0xac>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80024b2:	4b12      	ldr	r3, [pc, #72]	; (80024fc <HAL_ADC_MspInit+0xac>)
 80024b4:	2280      	movs	r2, #128	; 0x80
 80024b6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80024b8:	4b10      	ldr	r3, [pc, #64]	; (80024fc <HAL_ADC_MspInit+0xac>)
 80024ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024be:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80024c0:	4b0e      	ldr	r3, [pc, #56]	; (80024fc <HAL_ADC_MspInit+0xac>)
 80024c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024c6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80024c8:	4b0c      	ldr	r3, [pc, #48]	; (80024fc <HAL_ADC_MspInit+0xac>)
 80024ca:	2220      	movs	r2, #32
 80024cc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80024ce:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <HAL_ADC_MspInit+0xac>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80024d4:	4809      	ldr	r0, [pc, #36]	; (80024fc <HAL_ADC_MspInit+0xac>)
 80024d6:	f001 fbb5 	bl	8003c44 <HAL_DMA_Init>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <HAL_ADC_MspInit+0x94>
    {
      Error_Handler();
 80024e0:	f7ff fe22 	bl	8002128 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a05      	ldr	r2, [pc, #20]	; (80024fc <HAL_ADC_MspInit+0xac>)
 80024e8:	641a      	str	r2, [r3, #64]	; 0x40
 80024ea:	4a04      	ldr	r2, [pc, #16]	; (80024fc <HAL_ADC_MspInit+0xac>)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80024f0:	bf00      	nop
 80024f2:	3720      	adds	r7, #32
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40012400 	.word	0x40012400
 80024fc:	20000aec 	.word	0x20000aec
 8002500:	40020008 	.word	0x40020008

08002504 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b088      	sub	sp, #32
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800250c:	f107 030c 	add.w	r3, r7, #12
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	605a      	str	r2, [r3, #4]
 8002516:	609a      	str	r2, [r3, #8]
 8002518:	60da      	str	r2, [r3, #12]
 800251a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a0f      	ldr	r2, [pc, #60]	; (8002560 <HAL_I2C_MspInit+0x5c>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d117      	bne.n	8002556 <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002526:	2002      	movs	r0, #2
 8002528:	f7ff ff3f 	bl	80023aa <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800252c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002530:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002532:	2312      	movs	r3, #18
 8002534:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002536:	2300      	movs	r3, #0
 8002538:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800253a:	2300      	movs	r3, #0
 800253c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800253e:	2304      	movs	r3, #4
 8002540:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002542:	f107 030c 	add.w	r3, r7, #12
 8002546:	4619      	mov	r1, r3
 8002548:	4806      	ldr	r0, [pc, #24]	; (8002564 <HAL_I2C_MspInit+0x60>)
 800254a:	f001 fe7f 	bl	800424c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800254e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002552:	f7ff ff43 	bl	80023dc <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002556:	bf00      	nop
 8002558:	3720      	adds	r7, #32
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40005400 	.word	0x40005400
 8002564:	48000400 	.word	0x48000400

08002568 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a06      	ldr	r2, [pc, #24]	; (8002590 <HAL_RTC_MspInit+0x28>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d105      	bne.n	8002586 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800257a:	f7ff ff05 	bl	8002388 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800257e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002582:	f7ff ff2b 	bl	80023dc <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002586:	bf00      	nop
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	40002800 	.word	0x40002800

08002594 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025a4:	d10a      	bne.n	80025bc <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025a6:	2001      	movs	r0, #1
 80025a8:	f7ff ff18 	bl	80023dc <LL_APB1_GRP1_EnableClock>
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80025ac:	2200      	movs	r2, #0
 80025ae:	2100      	movs	r1, #0
 80025b0:	201c      	movs	r0, #28
 80025b2:	f001 fb1f 	bl	8003bf4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80025b6:	201c      	movs	r0, #28
 80025b8:	f001 fb36 	bl	8003c28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80025bc:	bf00      	nop
 80025be:	3708      	adds	r7, #8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b088      	sub	sp, #32
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025cc:	f107 030c 	add.w	r3, r7, #12
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	605a      	str	r2, [r3, #4]
 80025d6:	609a      	str	r2, [r3, #8]
 80025d8:	60da      	str	r2, [r3, #12]
 80025da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a1d      	ldr	r2, [pc, #116]	; (8002658 <HAL_UART_MspInit+0x94>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d133      	bne.n	800264e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025e6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80025ea:	f7ff ff10 	bl	800240e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ee:	2001      	movs	r0, #1
 80025f0:	f7ff fedb 	bl	80023aa <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025f4:	2002      	movs	r0, #2
 80025f6:	f7ff fed8 	bl	80023aa <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80025fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025fe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002600:	2302      	movs	r3, #2
 8002602:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002604:	2300      	movs	r3, #0
 8002606:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002608:	2300      	movs	r3, #0
 800260a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800260c:	2307      	movs	r3, #7
 800260e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002610:	f107 030c 	add.w	r3, r7, #12
 8002614:	4619      	mov	r1, r3
 8002616:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800261a:	f001 fe17 	bl	800424c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800261e:	2380      	movs	r3, #128	; 0x80
 8002620:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002622:	2302      	movs	r3, #2
 8002624:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002626:	2300      	movs	r3, #0
 8002628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800262a:	2300      	movs	r3, #0
 800262c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800262e:	2307      	movs	r3, #7
 8002630:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002632:	f107 030c 	add.w	r3, r7, #12
 8002636:	4619      	mov	r1, r3
 8002638:	4808      	ldr	r0, [pc, #32]	; (800265c <HAL_UART_MspInit+0x98>)
 800263a:	f001 fe07 	bl	800424c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800263e:	2200      	movs	r2, #0
 8002640:	2100      	movs	r1, #0
 8002642:	2024      	movs	r0, #36	; 0x24
 8002644:	f001 fad6 	bl	8003bf4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002648:	2024      	movs	r0, #36	; 0x24
 800264a:	f001 faed 	bl	8003c28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800264e:	bf00      	nop
 8002650:	3720      	adds	r7, #32
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	40013800 	.word	0x40013800
 800265c:	48000400 	.word	0x48000400

08002660 <LL_APB2_GRP1_EnableClock>:
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002668:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800266c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800266e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4313      	orrs	r3, r2
 8002676:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002678:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800267c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4013      	ands	r3, r2
 8002682:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002684:	68fb      	ldr	r3, [r7, #12]
}
 8002686:	bf00      	nop
 8002688:	3714      	adds	r7, #20
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
	...

08002694 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b08c      	sub	sp, #48	; 0x30
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800269c:	2300      	movs	r3, #0
 800269e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80026a0:	2300      	movs	r3, #0
 80026a2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 80026a4:	2200      	movs	r2, #0
 80026a6:	6879      	ldr	r1, [r7, #4]
 80026a8:	2019      	movs	r0, #25
 80026aa:	f001 faa3 	bl	8003bf4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80026ae:	2019      	movs	r0, #25
 80026b0:	f001 faba 	bl	8003c28 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80026b4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80026b8:	f7ff ffd2 	bl	8002660 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80026bc:	f107 0208 	add.w	r2, r7, #8
 80026c0:	f107 030c 	add.w	r3, r7, #12
 80026c4:	4611      	mov	r1, r2
 80026c6:	4618      	mov	r0, r3
 80026c8:	f003 fd8e 	bl	80061e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80026cc:	f003 fd76 	bl	80061bc <HAL_RCC_GetPCLK2Freq>
 80026d0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80026d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d4:	4a12      	ldr	r2, [pc, #72]	; (8002720 <HAL_InitTick+0x8c>)
 80026d6:	fba2 2303 	umull	r2, r3, r2, r3
 80026da:	0c9b      	lsrs	r3, r3, #18
 80026dc:	3b01      	subs	r3, #1
 80026de:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80026e0:	4b10      	ldr	r3, [pc, #64]	; (8002724 <HAL_InitTick+0x90>)
 80026e2:	4a11      	ldr	r2, [pc, #68]	; (8002728 <HAL_InitTick+0x94>)
 80026e4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80026e6:	4b0f      	ldr	r3, [pc, #60]	; (8002724 <HAL_InitTick+0x90>)
 80026e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80026ec:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80026ee:	4a0d      	ldr	r2, [pc, #52]	; (8002724 <HAL_InitTick+0x90>)
 80026f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80026f4:	4b0b      	ldr	r3, [pc, #44]	; (8002724 <HAL_InitTick+0x90>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026fa:	4b0a      	ldr	r3, [pc, #40]	; (8002724 <HAL_InitTick+0x90>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002700:	4808      	ldr	r0, [pc, #32]	; (8002724 <HAL_InitTick+0x90>)
 8002702:	f004 fbcb 	bl	8006e9c <HAL_TIM_Base_Init>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d104      	bne.n	8002716 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800270c:	4805      	ldr	r0, [pc, #20]	; (8002724 <HAL_InitTick+0x90>)
 800270e:	f004 fc1d 	bl	8006f4c <HAL_TIM_Base_Start_IT>
 8002712:	4603      	mov	r3, r0
 8002714:	e000      	b.n	8002718 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
}
 8002718:	4618      	mov	r0, r3
 800271a:	3730      	adds	r7, #48	; 0x30
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	431bde83 	.word	0x431bde83
 8002724:	20000c54 	.word	0x20000c54
 8002728:	40012c00 	.word	0x40012c00

0800272c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002730:	e7fe      	b.n	8002730 <NMI_Handler+0x4>

08002732 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002732:	b480      	push	{r7}
 8002734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002736:	e7fe      	b.n	8002736 <HardFault_Handler+0x4>

08002738 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800273c:	e7fe      	b.n	800273c <MemManage_Handler+0x4>

0800273e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800273e:	b480      	push	{r7}
 8002740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002742:	e7fe      	b.n	8002742 <BusFault_Handler+0x4>

08002744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002748:	e7fe      	b.n	8002748 <UsageFault_Handler+0x4>

0800274a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800274a:	b480      	push	{r7}
 800274c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800274e:	bf00      	nop
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800275c:	bf00      	nop
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr

08002766 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002766:	b480      	push	{r7}
 8002768:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800276a:	bf00      	nop
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002778:	bf00      	nop
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
	...

08002784 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002788:	4802      	ldr	r0, [pc, #8]	; (8002794 <DMA1_Channel1_IRQHandler+0x10>)
 800278a:	f001 fc20 	bl	8003fce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800278e:	bf00      	nop
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	20000aec 	.word	0x20000aec

08002798 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update Interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800279c:	4802      	ldr	r0, [pc, #8]	; (80027a8 <TIM1_UP_IRQHandler+0x10>)
 800279e:	f004 fc23 	bl	8006fe8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80027a2:	bf00      	nop
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	20000c54 	.word	0x20000c54

080027ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80027b0:	4802      	ldr	r0, [pc, #8]	; (80027bc <TIM2_IRQHandler+0x10>)
 80027b2:	f004 fc19 	bl	8006fe8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80027b6:	bf00      	nop
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	20000208 	.word	0x20000208

080027c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80027c4:	4802      	ldr	r0, [pc, #8]	; (80027d0 <USART1_IRQHandler+0x10>)
 80027c6:	f005 f8e3 	bl	8007990 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80027ca:	bf00      	nop
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	200006d4 	.word	0x200006d4

080027d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
	return 1;
 80027d8:	2301      	movs	r3, #1
}
 80027da:	4618      	mov	r0, r3
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <_kill>:

int _kill(int pid, int sig)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80027ee:	f006 feed 	bl	80095cc <__errno>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2216      	movs	r2, #22
 80027f6:	601a      	str	r2, [r3, #0]
	return -1;
 80027f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3708      	adds	r7, #8
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <_exit>:

void _exit (int status)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800280c:	f04f 31ff 	mov.w	r1, #4294967295
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f7ff ffe7 	bl	80027e4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002816:	e7fe      	b.n	8002816 <_exit+0x12>

08002818 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002824:	2300      	movs	r3, #0
 8002826:	617b      	str	r3, [r7, #20]
 8002828:	e00a      	b.n	8002840 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800282a:	f3af 8000 	nop.w
 800282e:	4601      	mov	r1, r0
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	1c5a      	adds	r2, r3, #1
 8002834:	60ba      	str	r2, [r7, #8]
 8002836:	b2ca      	uxtb	r2, r1
 8002838:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	3301      	adds	r3, #1
 800283e:	617b      	str	r3, [r7, #20]
 8002840:	697a      	ldr	r2, [r7, #20]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	429a      	cmp	r2, r3
 8002846:	dbf0      	blt.n	800282a <_read+0x12>
	}

return len;
 8002848:	687b      	ldr	r3, [r7, #4]
}
 800284a:	4618      	mov	r0, r3
 800284c:	3718      	adds	r7, #24
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b086      	sub	sp, #24
 8002856:	af00      	add	r7, sp, #0
 8002858:	60f8      	str	r0, [r7, #12]
 800285a:	60b9      	str	r1, [r7, #8]
 800285c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800285e:	2300      	movs	r3, #0
 8002860:	617b      	str	r3, [r7, #20]
 8002862:	e009      	b.n	8002878 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	1c5a      	adds	r2, r3, #1
 8002868:	60ba      	str	r2, [r7, #8]
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	4618      	mov	r0, r3
 800286e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	3301      	adds	r3, #1
 8002876:	617b      	str	r3, [r7, #20]
 8002878:	697a      	ldr	r2, [r7, #20]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	429a      	cmp	r2, r3
 800287e:	dbf1      	blt.n	8002864 <_write+0x12>
	}
	return len;
 8002880:	687b      	ldr	r3, [r7, #4]
}
 8002882:	4618      	mov	r0, r3
 8002884:	3718      	adds	r7, #24
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <_close>:

int _close(int file)
{
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
	return -1;
 8002892:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002896:	4618      	mov	r0, r3
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr

080028a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028a2:	b480      	push	{r7}
 80028a4:	b083      	sub	sp, #12
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
 80028aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028b2:	605a      	str	r2, [r3, #4]
	return 0;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr

080028c2 <_isatty>:

int _isatty(int file)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b083      	sub	sp, #12
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
	return 1;
 80028ca:	2301      	movs	r3, #1
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
	return 0;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3714      	adds	r7, #20
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
	...

080028f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028fc:	4a14      	ldr	r2, [pc, #80]	; (8002950 <_sbrk+0x5c>)
 80028fe:	4b15      	ldr	r3, [pc, #84]	; (8002954 <_sbrk+0x60>)
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002908:	4b13      	ldr	r3, [pc, #76]	; (8002958 <_sbrk+0x64>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d102      	bne.n	8002916 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002910:	4b11      	ldr	r3, [pc, #68]	; (8002958 <_sbrk+0x64>)
 8002912:	4a12      	ldr	r2, [pc, #72]	; (800295c <_sbrk+0x68>)
 8002914:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002916:	4b10      	ldr	r3, [pc, #64]	; (8002958 <_sbrk+0x64>)
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4413      	add	r3, r2
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	429a      	cmp	r2, r3
 8002922:	d207      	bcs.n	8002934 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002924:	f006 fe52 	bl	80095cc <__errno>
 8002928:	4603      	mov	r3, r0
 800292a:	220c      	movs	r2, #12
 800292c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800292e:	f04f 33ff 	mov.w	r3, #4294967295
 8002932:	e009      	b.n	8002948 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002934:	4b08      	ldr	r3, [pc, #32]	; (8002958 <_sbrk+0x64>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800293a:	4b07      	ldr	r3, [pc, #28]	; (8002958 <_sbrk+0x64>)
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4413      	add	r3, r2
 8002942:	4a05      	ldr	r2, [pc, #20]	; (8002958 <_sbrk+0x64>)
 8002944:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002946:	68fb      	ldr	r3, [r7, #12]
}
 8002948:	4618      	mov	r0, r3
 800294a:	3718      	adds	r7, #24
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	20003000 	.word	0x20003000
 8002954:	00000400 	.word	0x00000400
 8002958:	200001fc 	.word	0x200001fc
 800295c:	20000cb8 	.word	0x20000cb8

08002960 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8002964:	4b22      	ldr	r3, [pc, #136]	; (80029f0 <SystemInit+0x90>)
 8002966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296a:	4a21      	ldr	r2, [pc, #132]	; (80029f0 <SystemInit+0x90>)
 800296c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002970:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800297e:	f043 0301 	orr.w	r3, r3, #1
 8002982:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002984:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002988:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800298c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800298e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002998:	4b16      	ldr	r3, [pc, #88]	; (80029f4 <SystemInit+0x94>)
 800299a:	4013      	ands	r3, r2
 800299c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800299e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029aa:	f023 0305 	bic.w	r3, r3, #5
 80029ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80029b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029be:	f023 0301 	bic.w	r3, r3, #1
 80029c2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80029c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ca:	4a0b      	ldr	r2, [pc, #44]	; (80029f8 <SystemInit+0x98>)
 80029cc:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80029ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029dc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80029de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029e2:	2200      	movs	r2, #0
 80029e4:	619a      	str	r2, [r3, #24]
}
 80029e6:	bf00      	nop
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	e000ed00 	.word	0xe000ed00
 80029f4:	faf6fefb 	.word	0xfaf6fefb
 80029f8:	22041000 	.word	0x22041000

080029fc <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80029fc:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029fe:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a00:	3304      	adds	r3, #4

08002a02 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a02:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a04:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002a06:	d3f9      	bcc.n	80029fc <CopyDataInit>
  bx lr
 8002a08:	4770      	bx	lr

08002a0a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002a0a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002a0c:	3004      	adds	r0, #4

08002a0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002a0e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002a10:	d3fb      	bcc.n	8002a0a <FillZerobss>
  bx lr
 8002a12:	4770      	bx	lr

08002a14 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a14:	480c      	ldr	r0, [pc, #48]	; (8002a48 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8002a16:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002a18:	f7ff ffa2 	bl	8002960 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002a1c:	480b      	ldr	r0, [pc, #44]	; (8002a4c <LoopForever+0x8>)
 8002a1e:	490c      	ldr	r1, [pc, #48]	; (8002a50 <LoopForever+0xc>)
 8002a20:	4a0c      	ldr	r2, [pc, #48]	; (8002a54 <LoopForever+0x10>)
 8002a22:	2300      	movs	r3, #0
 8002a24:	f7ff ffed 	bl	8002a02 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002a28:	480b      	ldr	r0, [pc, #44]	; (8002a58 <LoopForever+0x14>)
 8002a2a:	490c      	ldr	r1, [pc, #48]	; (8002a5c <LoopForever+0x18>)
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	f7ff ffee 	bl	8002a0e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002a32:	480b      	ldr	r0, [pc, #44]	; (8002a60 <LoopForever+0x1c>)
 8002a34:	490b      	ldr	r1, [pc, #44]	; (8002a64 <LoopForever+0x20>)
 8002a36:	2300      	movs	r3, #0
 8002a38:	f7ff ffe9 	bl	8002a0e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002a3c:	f006 fdcc 	bl	80095d8 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8002a40:	f7fe fd44 	bl	80014cc <main>

08002a44 <LoopForever>:

LoopForever:
  b LoopForever
 8002a44:	e7fe      	b.n	8002a44 <LoopForever>
 8002a46:	0000      	.short	0x0000
  ldr   r0, =_estack
 8002a48:	20003000 	.word	0x20003000
  INIT_DATA _sdata, _edata, _sidata
 8002a4c:	20000004 	.word	0x20000004
 8002a50:	200001e0 	.word	0x200001e0
 8002a54:	0800cfec 	.word	0x0800cfec
  INIT_BSS _sbss, _ebss
 8002a58:	200001e0 	.word	0x200001e0
 8002a5c:	20000cb4 	.word	0x20000cb4
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002a60:	20030000 	.word	0x20030000
 8002a64:	20030000 	.word	0x20030000

08002a68 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a68:	e7fe      	b.n	8002a68 <ADC1_IRQHandler>
	...

08002a6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a72:	2300      	movs	r3, #0
 8002a74:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a76:	4b0c      	ldr	r3, [pc, #48]	; (8002aa8 <HAL_Init+0x3c>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a0b      	ldr	r2, [pc, #44]	; (8002aa8 <HAL_Init+0x3c>)
 8002a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a80:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a82:	2003      	movs	r0, #3
 8002a84:	f001 f8ab 	bl	8003bde <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a88:	200f      	movs	r0, #15
 8002a8a:	f7ff fe03 	bl	8002694 <HAL_InitTick>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d002      	beq.n	8002a9a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	71fb      	strb	r3, [r7, #7]
 8002a98:	e001      	b.n	8002a9e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a9a:	f7ff fcd1 	bl	8002440 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a9e:	79fb      	ldrb	r3, [r7, #7]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	58004000 	.word	0x58004000

08002aac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ab0:	4b06      	ldr	r3, [pc, #24]	; (8002acc <HAL_IncTick+0x20>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	4b06      	ldr	r3, [pc, #24]	; (8002ad0 <HAL_IncTick+0x24>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4413      	add	r3, r2
 8002abc:	4a04      	ldr	r2, [pc, #16]	; (8002ad0 <HAL_IncTick+0x24>)
 8002abe:	6013      	str	r3, [r2, #0]
}
 8002ac0:	bf00      	nop
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	2000000c 	.word	0x2000000c
 8002ad0:	20000ca0 	.word	0x20000ca0

08002ad4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ad8:	4b03      	ldr	r3, [pc, #12]	; (8002ae8 <HAL_GetTick+0x14>)
 8002ada:	681b      	ldr	r3, [r3, #0]
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	20000ca0 	.word	0x20000ca0

08002aec <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002af0:	4b03      	ldr	r3, [pc, #12]	; (8002b00 <HAL_GetTickPrio+0x14>)
 8002af2:	681b      	ldr	r3, [r3, #0]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	20000008 	.word	0x20000008

08002b04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8002b0c:	f7ff ffe2 	bl	8002ad4 <HAL_GetTick>
 8002b10:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b1c:	d005      	beq.n	8002b2a <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 8002b1e:	4b0a      	ldr	r3, [pc, #40]	; (8002b48 <HAL_Delay+0x44>)
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	461a      	mov	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	4413      	add	r3, r2
 8002b28:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8002b2a:	bf00      	nop
 8002b2c:	f7ff ffd2 	bl	8002ad4 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d8f7      	bhi.n	8002b2c <HAL_Delay+0x28>
    {
    }
  }
 8002b3c:	bf00      	nop
 8002b3e:	bf00      	nop
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	2000000c 	.word	0x2000000c

08002b4c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	431a      	orrs	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	609a      	str	r2, [r3, #8]
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b72:	b480      	push	{r7}
 8002b74:	b083      	sub	sp, #12
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY, uint32_t SamplingTime)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b085      	sub	sp, #20
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	60f8      	str	r0, [r7, #12]
 8002b96:	60b9      	str	r1, [r7, #8]
 8002b98:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	695a      	ldr	r2, [r3, #20]
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	f003 0304 	and.w	r3, r3, #4
 8002ba4:	2107      	movs	r1, #7
 8002ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8002baa:	43db      	mvns	r3, r3
 8002bac:	401a      	ands	r2, r3
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	f003 0304 	and.w	r3, r3, #4
 8002bb4:	6879      	ldr	r1, [r7, #4]
 8002bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002bc0:	bf00      	nop
 8002bc2:	3714      	adds	r7, #20
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
#if defined (ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d101      	bne.n	8002be4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002be0:	2301      	movs	r3, #1
 8002be2:	e000      	b.n	8002be6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002be4:	2300      	movs	r3, #0
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
#endif
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b085      	sub	sp, #20
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	60f8      	str	r0, [r7, #12]
 8002bfa:	60b9      	str	r1, [r7, #8]
 8002bfc:	607a      	str	r2, [r7, #4]
#if defined (ADC_SUPPORT_2_5_MSPS)
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	f003 031f 	and.w	r3, r3, #31
 8002c08:	210f      	movs	r1, #15
 8002c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c0e:	43db      	mvns	r3, r3
 8002c10:	401a      	ands	r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	0e9b      	lsrs	r3, r3, #26
 8002c16:	f003 010f 	and.w	r1, r3, #15
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	f003 031f 	and.w	r3, r3, #31
 8002c20:	fa01 f303 	lsl.w	r3, r1, r3
 8002c24:	431a      	orrs	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	629a      	str	r2, [r3, #40]	; 0x28

  MODIFY_REG(*preg,
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif
}
 8002c2a:	bf00      	nop
 8002c2c:	3714      	adds	r7, #20
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr

08002c36 <LL_ADC_REG_SetSequencerChAdd>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002c36:	b480      	push	{r7}
 8002c38:	b083      	sub	sp, #12
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
 8002c3e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <LL_ADC_REG_SetSequencerChRem>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c70:	43db      	mvns	r3, r3
 8002c72:	401a      	ands	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	695a      	ldr	r2, [r3, #20]
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	021b      	lsls	r3, r3, #8
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	401a      	ands	r2, r3
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	0219      	lsls	r1, r3, #8
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	400b      	ands	r3, r1
 8002ca4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002ca8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002cac:	431a      	orrs	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002cb2:	bf00      	nop
 8002cb4:	3714      	adds	r7, #20
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002cce:	f023 0317 	bic.w	r3, r3, #23
 8002cd2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr

08002ce6 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cfa:	d101      	bne.n	8002d00 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e000      	b.n	8002d02 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr

08002d0e <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	b083      	sub	sp, #12
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d1e:	f023 0317 	bic.w	r3, r3, #23
 8002d22:	f043 0201 	orr.w	r2, r3, #1
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002d2a:	bf00      	nop
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr

08002d36 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b083      	sub	sp, #12
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d46:	f023 0317 	bic.w	r3, r3, #23
 8002d4a:	f043 0202 	orr.w	r2, r3, #2
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002d52:	bf00      	nop
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b083      	sub	sp, #12
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d101      	bne.n	8002d76 <LL_ADC_IsEnabled+0x18>
 8002d72:	2301      	movs	r3, #1
 8002d74:	e000      	b.n	8002d78 <LL_ADC_IsEnabled+0x1a>
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d101      	bne.n	8002d9c <LL_ADC_IsDisableOngoing+0x18>
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e000      	b.n	8002d9e <LL_ADC_IsDisableOngoing+0x1a>
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002dba:	f023 0317 	bic.w	r3, r3, #23
 8002dbe:	f043 0204 	orr.w	r2, r3, #4
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002dc6:	bf00      	nop
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr

08002dd2 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b083      	sub	sp, #12
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002de2:	f023 0317 	bic.w	r3, r3, #23
 8002de6:	f043 0210 	orr.w	r2, r3, #16
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002dee:	bf00      	nop
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr

08002dfa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	b083      	sub	sp, #12
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f003 0304 	and.w	r3, r3, #4
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	d101      	bne.n	8002e12 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e000      	b.n	8002e14 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b088      	sub	sp, #32
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002e30:	2300      	movs	r3, #0
 8002e32:	60bb      	str	r3, [r7, #8]
#if defined (ADC_SUPPORT_2_5_MSPS)
  uint32_t tmpCFGR2 = 0UL;
 8002e34:	2300      	movs	r3, #0
 8002e36:	613b      	str	r3, [r7, #16]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif

  /* Check ADC handle */
  if (hadc == NULL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e189      	b.n	8003156 <HAL_ADC_Init+0x336>
  assert_param(IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon1));
  assert_param(IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon2));
  
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d109      	bne.n	8002e64 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f7ff fafd 	bl	8002450 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7ff ff3c 	bl	8002ce6 <LL_ADC_IsInternalRegulatorEnabled>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d115      	bne.n	8002ea0 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff ff20 	bl	8002cbe <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e7e:	4b91      	ldr	r3, [pc, #580]	; (80030c4 <HAL_ADC_Init+0x2a4>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	099b      	lsrs	r3, r3, #6
 8002e84:	4a90      	ldr	r2, [pc, #576]	; (80030c8 <HAL_ADC_Init+0x2a8>)
 8002e86:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8a:	099b      	lsrs	r3, r3, #6
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e92:	e002      	b.n	8002e9a <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	3b01      	subs	r3, #1
 8002e98:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1f9      	bne.n	8002e94 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7ff ff1e 	bl	8002ce6 <LL_ADC_IsInternalRegulatorEnabled>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d10d      	bne.n	8002ecc <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eb4:	f043 0210 	orr.w	r2, r3, #16
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	649a      	str	r2, [r3, #72]	; 0x48

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ec0:	f043 0201 	orr.w	r2, r3, #1
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	64da      	str	r2, [r3, #76]	; 0x4c

    tmp_hal_status = HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff ff92 	bl	8002dfa <LL_ADC_REG_IsConversionOngoing>
 8002ed6:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002edc:	f003 0310 	and.w	r3, r3, #16
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f040 812f 	bne.w	8003144 <HAL_ADC_Init+0x324>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f040 812b 	bne.w	8003144 <HAL_ADC_Init+0x324>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ef2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002ef6:	f043 0202 	orr.w	r2, r3, #2
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	649a      	str	r2, [r3, #72]	; 0x48
    /*  - Clock configuration                                                 */
    /*  - ADC resolution                                                      */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7ff ff2b 	bl	8002d5e <LL_ADC_IsEnabled>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d138      	bne.n	8002f80 <HAL_ADC_Init+0x160>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
      
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	f023 0118 	bic.w	r1, r3, #24
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689a      	ldr	r2, [r3, #8]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	430a      	orrs	r2, r1
 8002f22:	60da      	str	r2, [r3, #12]
      /*  - oversampling enable                                               */
      /*  - oversampling ratio                                                */
      /*  - oversampling shift                                                */
      /*  - oversampling discontinuous mode (triggered mode)                  */
      /*  - trigger frequency mode                                            */
      tmpCFGR2 |= ( (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                    hadc->Init.TriggerFrequencyMode
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR2 |= ( (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002f30:	4313      	orrs	r3, r2
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	613b      	str	r3, [r7, #16]
                    );
      
      MODIFY_REG(hadc->Instance->CFGR2,
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_LFTRIG     ,
                 tmpCFGR2              );
      
      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002f54:	d014      	beq.n	8002f80 <HAL_ADC_Init+0x160>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f5e:	d00f      	beq.n	8002f80 <HAL_ADC_Init+0x160>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002f64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f68:	d00a      	beq.n	8002f80 <HAL_ADC_Init+0x160>
      {
        MODIFY_REG(ADC1_COMMON->CCR                         ,
 8002f6a:	4b58      	ldr	r3, [pc, #352]	; (80030cc <HAL_ADC_Init+0x2ac>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002f7a:	4954      	ldr	r1, [pc, #336]	; (80030cc <HAL_ADC_Init+0x2ac>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	608b      	str	r3, [r1, #8]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	7e1b      	ldrb	r3, [r3, #24]
 8002f84:	039a      	lsls	r2, r3, #14
                ADC_CFGR_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	7e5b      	ldrb	r3, [r3, #25]
 8002f8a:	03db      	lsls	r3, r3, #15
    tmpCFGR |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f8c:	431a      	orrs	r2, r3
                ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	7e9b      	ldrb	r3, [r3, #26]
 8002f92:	035b      	lsls	r3, r3, #13
                ADC_CFGR_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002f94:	4313      	orrs	r3, r2
                ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002f9a:	2a00      	cmp	r2, #0
 8002f9c:	d002      	beq.n	8002fa4 <HAL_ADC_Init+0x184>
 8002f9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002fa2:	e000      	b.n	8002fa6 <HAL_ADC_Init+0x186>
 8002fa4:	2200      	movs	r2, #0
                ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002fa6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                            |
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68db      	ldr	r3, [r3, #12]
                ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8002fac:	431a      	orrs	r2, r3
                ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	da04      	bge.n	8002fc0 <HAL_ADC_Init+0x1a0>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002fbe:	e001      	b.n	8002fc4 <HAL_ADC_Init+0x1a4>
 8002fc0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                hadc->Init.DataAlign                                            |
 8002fc4:	431a      	orrs	r2, r3
                ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002fcc:	005b      	lsls	r3, r3, #1
                ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8002fce:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	61bb      	str	r3, [r7, #24]
    
    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d114      	bne.n	800300a <HAL_ADC_Init+0x1ea>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	7e9b      	ldrb	r3, [r3, #26]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d104      	bne.n	8002ff2 <HAL_ADC_Init+0x1d2>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR |= ADC_CFGR1_DISCEN;
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fee:	61bb      	str	r3, [r7, #24]
 8002ff0:	e00b      	b.n	800300a <HAL_ADC_Init+0x1ea>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ff6:	f043 0220 	orr.w	r2, r3, #32
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	649a      	str	r2, [r3, #72]	; 0x48
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003002:	f043 0201 	orr.w	r2, r3, #1
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300e:	2b00      	cmp	r3, #0
 8003010:	d009      	beq.n	8003026 <HAL_ADC_Init+0x206>
    {
      tmpCFGR |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003016:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge );
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800301e:	4313      	orrs	r3, r2
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	4313      	orrs	r3, r2
 8003024:	61bb      	str	r3, [r7, #24]
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8003030:	f423 73f3 	bic.w	r3, r3, #486	; 0x1e6
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	6812      	ldr	r2, [r2, #0]
 8003038:	69b9      	ldr	r1, [r7, #24]
 800303a:	430b      	orrs	r3, r1
 800303c:	60d3      	str	r3, [r2, #12]
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG     ,
               tmpCFGR              );
    
    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6818      	ldr	r0, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003046:	461a      	mov	r2, r3
 8003048:	2100      	movs	r1, #0
 800304a:	f7ff fda0 	bl	8002b8e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6818      	ldr	r0, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003056:	461a      	mov	r2, r3
 8003058:	491d      	ldr	r1, [pc, #116]	; (80030d0 <HAL_ADC_Init+0x2b0>)
 800305a:	f7ff fd98 	bl	8002b8e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if(hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d108      	bne.n	8003078 <HAL_ADC_Init+0x258>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f062 020f 	orn	r2, r2, #15
 8003074:	629a      	str	r2, [r3, #40]	; 0x28
 8003076:	e040      	b.n	80030fa <HAL_ADC_Init+0x2da>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if(hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003080:	d13b      	bne.n	80030fa <HAL_ADC_Init+0x2da>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;
      
      /* Parse all ranks from 1 to 8 */
      for(ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003082:	2300      	movs	r3, #0
 8003084:	617b      	str	r3, [r7, #20]
 8003086:	e00c      	b.n	80030a2 <HAL_ADC_Init+0x282>
      {
        /* Check each sequencer rank until value of end of sequence */
        if(((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) == ADC_CHSELR_SQ1)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	fa22 f303 	lsr.w	r3, r2, r3
 8003094:	f003 030f 	and.w	r3, r3, #15
 8003098:	2b0f      	cmp	r3, #15
 800309a:	d006      	beq.n	80030aa <HAL_ADC_Init+0x28a>
      for(ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	3301      	adds	r3, #1
 80030a0:	617b      	str	r3, [r7, #20]
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	2b07      	cmp	r3, #7
 80030a6:	d9ef      	bls.n	8003088 <HAL_ADC_Init+0x268>
 80030a8:	e000      	b.n	80030ac <HAL_ADC_Init+0x28c>
        {
          break;
 80030aa:	bf00      	nop
        }
      }
      
      if(ADCGroupRegularSequencerRanksCount == 1UL)
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d110      	bne.n	80030d4 <HAL_ADC_Init+0x2b4>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f062 020f 	orn	r2, r2, #15
 80030c0:	629a      	str	r2, [r3, #40]	; 0x28
 80030c2:	e01a      	b.n	80030fa <HAL_ADC_Init+0x2da>
 80030c4:	20000004 	.word	0x20000004
 80030c8:	053e2d63 	.word	0x053e2d63
 80030cc:	40012700 	.word	0x40012700
 80030d0:	07ffff04 	.word	0x07ffff04
        /*          therefore afer the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	3b01      	subs	r3, #1
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	f003 031c 	and.w	r3, r3, #28
 80030e6:	f06f 020f 	mvn.w	r2, #15
 80030ea:	fa02 f103 	lsl.w	r1, r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR').                                  */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68da      	ldr	r2, [r3, #12]
 8003100:	4b17      	ldr	r3, [pc, #92]	; (8003160 <HAL_ADC_Init+0x340>)
 8003102:	4013      	ands	r3, r2
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	429a      	cmp	r2, r3
 8003108:	d10b      	bne.n	8003122 <HAL_ADC_Init+0x302>
         == tmpCFGR)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003114:	f023 0303 	bic.w	r3, r3, #3
 8003118:	f043 0201 	orr.w	r2, r3, #1
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	649a      	str	r2, [r3, #72]	; 0x48
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003120:	e018      	b.n	8003154 <HAL_ADC_Init+0x334>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003126:	f023 0312 	bic.w	r3, r3, #18
 800312a:	f043 0210 	orr.w	r2, r3, #16
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	649a      	str	r2, [r3, #72]	; 0x48
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003136:	f043 0201 	orr.w	r2, r3, #1
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	64da      	str	r2, [r3, #76]	; 0x4c
      
      tmp_hal_status = HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	77fb      	strb	r3, [r7, #31]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003142:	e007      	b.n	8003154 <HAL_ADC_Init+0x334>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003148:	f043 0210 	orr.w	r2, r3, #16
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	649a      	str	r2, [r3, #72]	; 0x48

    tmp_hal_status = HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003154:	7ffb      	ldrb	r3, [r7, #31]
}
 8003156:	4618      	mov	r0, r3
 8003158:	3720      	adds	r7, #32
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	833fffe7 	.word	0x833fffe7

08003164 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4618      	mov	r0, r3
 8003172:	f7ff fe42 	bl	8002dfa <LL_ADC_REG_IsConversionOngoing>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d132      	bne.n	80031e2 <HAL_ADC_Start+0x7e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003182:	2b01      	cmp	r3, #1
 8003184:	d101      	bne.n	800318a <HAL_ADC_Start+0x26>
 8003186:	2302      	movs	r3, #2
 8003188:	e02e      	b.n	80031e8 <HAL_ADC_Start+0x84>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 fb0c 	bl	80037b0 <ADC_Enable>
 8003198:	4603      	mov	r3, r0
 800319a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800319c:	7bfb      	ldrb	r3, [r7, #15]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d11a      	bne.n	80031d8 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031a6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80031aa:	f023 0301 	bic.w	r3, r3, #1
 80031ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	649a      	str	r2, [r3, #72]	; 0x48
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
#if defined (ADC_SUPPORT_2_5_MSPS)
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	64da      	str	r2, [r3, #76]	; 0x4c
      }
#endif /* ADC_SUPPORT_2_5_MSPS */

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	221c      	movs	r2, #28
 80031c2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7ff fdea 	bl	8002daa <LL_ADC_REG_StartConversion>
 80031d6:	e006      	b.n	80031e6 <HAL_ADC_Start+0x82>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031e0:	e001      	b.n	80031e6 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80031e2:	2302      	movs	r3, #2
 80031e4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80031e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3710      	adds	r7, #16
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d101      	bne.n	8003206 <HAL_ADC_Stop+0x16>
 8003202:	2302      	movs	r3, #2
 8003204:	e023      	b.n	800324e <HAL_ADC_Stop+0x5e>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

#if defined (ADC_SUPPORT_2_5_MSPS)
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
 800320e:	2101      	movs	r1, #1
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f000 fa8d 	bl	8003730 <ADC_ConversionStop>
 8003216:	4603      	mov	r3, r0
 8003218:	73fb      	strb	r3, [r7, #15]
  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800321a:	7bfb      	ldrb	r3, [r7, #15]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d111      	bne.n	8003244 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 fb43 	bl	80038ac <ADC_Disable>
 8003226:	4603      	mov	r3, r0
 8003228:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800322a:	7bfb      	ldrb	r3, [r7, #15]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d109      	bne.n	8003244 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
#if defined (ADC_SUPPORT_2_5_MSPS)
      ADC_STATE_CLR_SET(hadc->State,
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003234:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003238:	f023 0301 	bic.w	r3, r3, #1
 800323c:	f043 0201 	orr.w	r2, r3, #1
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* ADC_SUPPORT_2_5_MSPS */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return tmp_hal_status;
 800324c:	7bfb      	ldrb	r3, [r7, #15]
}
 800324e:	4618      	mov	r0, r3
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b084      	sub	sp, #16
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
 800325e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	695b      	ldr	r3, [r3, #20]
 8003264:	2b08      	cmp	r3, #8
 8003266:	d102      	bne.n	800326e <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003268:	2308      	movs	r3, #8
 800326a:	60fb      	str	r3, [r7, #12]
 800326c:	e010      	b.n	8003290 <HAL_ADC_PollForConversion+0x3a>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined (ADC_SUPPORT_2_5_MSPS)
    if(READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN) != 0UL)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	2b00      	cmp	r3, #0
 800327a:	d007      	beq.n	800328c <HAL_ADC_PollForConversion+0x36>
#else
    if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
#endif
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003280:	f043 0220 	orr.w	r2, r3, #32
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	649a      	str	r2, [r3, #72]	; 0x48

      return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e06d      	b.n	8003368 <HAL_ADC_PollForConversion+0x112>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 800328c:	2304      	movs	r3, #4
 800328e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003290:	f7ff fc20 	bl	8002ad4 <HAL_GetTick>
 8003294:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003296:	e021      	b.n	80032dc <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800329e:	d01d      	beq.n	80032dc <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80032a0:	f7ff fc18 	bl	8002ad4 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d302      	bcc.n	80032b6 <HAL_ADC_PollForConversion+0x60>
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d112      	bne.n	80032dc <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	4013      	ands	r3, r2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d10b      	bne.n	80032dc <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032c8:	f043 0204 	orr.w	r2, r3, #4
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	649a      	str	r2, [r3, #72]	; 0x48

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

          return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e045      	b.n	8003368 <HAL_ADC_PollForConversion+0x112>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	4013      	ands	r3, r2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d0d6      	beq.n	8003298 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032ee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff fc66 	bl	8002bcc <LL_ADC_REG_IsTriggerSourceSWStart>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d01c      	beq.n	8003340 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	7e9b      	ldrb	r3, [r3, #26]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d118      	bne.n	8003340 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0308 	and.w	r3, r3, #8
 8003318:	2b08      	cmp	r3, #8
 800331a:	d111      	bne.n	8003340 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003320:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	649a      	str	r2, [r3, #72]	; 0x48

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800332c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d105      	bne.n	8003340 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003338:	f043 0201 	orr.w	r2, r3, #1
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	649a      	str	r2, [r3, #72]	; 0x48
      }
    }
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2b08      	cmp	r3, #8
 8003344:	d104      	bne.n	8003350 <HAL_ADC_PollForConversion+0xfa>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2208      	movs	r2, #8
 800334c:	601a      	str	r2, [r3, #0]
 800334e:	e00a      	b.n	8003366 <HAL_ADC_PollForConversion+0x110>
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
#if defined (ADC_SUPPORT_2_5_MSPS)
    if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_WAIT) == 0UL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d103      	bne.n	8003366 <HAL_ADC_PollForConversion+0x110>
#else
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY) == 0UL)
#endif
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	220c      	movs	r2, #12
 8003364:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3710      	adds	r7, #16
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4618      	mov	r0, r3
 8003382:	f7ff fd3a 	bl	8002dfa <LL_ADC_REG_IsConversionOngoing>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d15a      	bne.n	8003442 <HAL_ADC_Start_DMA+0xd2>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003392:	2b01      	cmp	r3, #1
 8003394:	d101      	bne.n	800339a <HAL_ADC_Start_DMA+0x2a>
 8003396:	2302      	movs	r3, #2
 8003398:	e056      	b.n	8003448 <HAL_ADC_Start_DMA+0xd8>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2201      	movs	r2, #1
 800339e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80033a2:	68f8      	ldr	r0, [r7, #12]
 80033a4:	f000 fa04 	bl	80037b0 <ADC_Enable>
 80033a8:	4603      	mov	r3, r0
 80033aa:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80033ac:	7dfb      	ldrb	r3, [r7, #23]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d142      	bne.n	8003438 <HAL_ADC_Start_DMA+0xc8>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033b6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80033ba:	f023 0301 	bic.w	r3, r3, #1
 80033be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	649a      	str	r2, [r3, #72]	; 0x48
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

#if defined (ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	64da      	str	r2, [r3, #76]	; 0x4c
          ADC_CLEAR_ERRORCODE(hadc);
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d0:	4a1f      	ldr	r2, [pc, #124]	; (8003450 <HAL_ADC_Start_DMA+0xe0>)
 80033d2:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d8:	4a1e      	ldr	r2, [pc, #120]	; (8003454 <HAL_ADC_Start_DMA+0xe4>)
 80033da:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e0:	4a1d      	ldr	r2, [pc, #116]	; (8003458 <HAL_ADC_Start_DMA+0xe8>)
 80033e2:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	221c      	movs	r2, #28
 80033ea:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	685a      	ldr	r2, [r3, #4]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f042 0210 	orr.w	r2, r2, #16
 8003402:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if defined (ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68da      	ldr	r2, [r3, #12]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f042 0201 	orr.w	r2, r2, #1
 8003412:	60da      	str	r2, [r3, #12]
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
#endif

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	3340      	adds	r3, #64	; 0x40
 800341e:	4619      	mov	r1, r3
 8003420:	68ba      	ldr	r2, [r7, #8]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f000 fc9a 	bl	8003d5c <HAL_DMA_Start_IT>
 8003428:	4603      	mov	r3, r0
 800342a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4618      	mov	r0, r3
 8003432:	f7ff fcba 	bl	8002daa <LL_ADC_REG_StartConversion>
 8003436:	e006      	b.n	8003446 <HAL_ADC_Start_DMA+0xd6>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003440:	e001      	b.n	8003446 <HAL_ADC_Start_DMA+0xd6>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003442:	2302      	movs	r3, #2
 8003444:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003446:	7dfb      	ldrb	r3, [r7, #23]
}
 8003448:	4618      	mov	r0, r3
 800344a:	3718      	adds	r7, #24
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	0800396b 	.word	0x0800396b
 8003454:	08003a33 	.word	0x08003a33
 8003458:	08003a4f 	.word	0x08003a4f

0800345c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800346a:	4618      	mov	r0, r3
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr

08003476 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003476:	b480      	push	{r7}
 8003478:	b083      	sub	sp, #12
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800347e:	bf00      	nop
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr

0800348a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800348a:	b480      	push	{r7}
 800348c:	b083      	sub	sp, #12
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003492:	bf00      	nop
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr

0800349e <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800349e:	b480      	push	{r7}
 80034a0:	b083      	sub	sp, #12
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80034a6:	bf00      	nop
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
	...

080034b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b088      	sub	sp, #32
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
#if defined (ADC_SUPPORT_2_5_MSPS)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034be:	2300      	movs	r3, #0
 80034c0:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80034c2:	2300      	movs	r3, #0
 80034c4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(hadc, sConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(sConfig->SamplingTime));
  
  if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    
    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d101      	bne.n	80034dc <HAL_ADC_ConfigChannel+0x28>
 80034d8:	2302      	movs	r3, #2
 80034da:	e114      	b.n	8003706 <HAL_ADC_ConfigChannel+0x252>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff fc86 	bl	8002dfa <LL_ADC_REG_IsConversionOngoing>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f040 80fb 	bne.w	80036ec <HAL_ADC_ConfigChannel+0x238>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if(sConfig->Rank != ADC_RANK_NONE)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	f000 80b3 	beq.w	8003666 <HAL_ADC_ConfigChannel+0x1b2>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003508:	d004      	beq.n	8003514 <HAL_ADC_ConfigChannel+0x60>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	691b      	ldr	r3, [r3, #16]
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800350e:	4a80      	ldr	r2, [pc, #512]	; (8003710 <HAL_ADC_ConfigChannel+0x25c>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d108      	bne.n	8003526 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4619      	mov	r1, r3
 800351e:	4610      	mov	r0, r2
 8003520:	f7ff fb89 	bl	8002c36 <LL_ADC_REG_SetSequencerChAdd>
 8003524:	e041      	b.n	80035aa <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */
        
        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f003 031f 	and.w	r3, r3, #31
 8003532:	210f      	movs	r1, #15
 8003534:	fa01 f303 	lsl.w	r3, r1, r3
 8003538:	43db      	mvns	r3, r3
 800353a:	401a      	ands	r2, r3
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003544:	2b00      	cmp	r3, #0
 8003546:	d105      	bne.n	8003554 <HAL_ADC_ConfigChannel+0xa0>
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	0e9b      	lsrs	r3, r3, #26
 800354e:	f003 031f 	and.w	r3, r3, #31
 8003552:	e011      	b.n	8003578 <HAL_ADC_ConfigChannel+0xc4>
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	fa93 f3a3 	rbit	r3, r3
 8003560:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 800356c:	2320      	movs	r3, #32
 800356e:	e003      	b.n	8003578 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	fab3 f383 	clz	r3, r3
 8003576:	b2db      	uxtb	r3, r3
 8003578:	6839      	ldr	r1, [r7, #0]
 800357a:	6849      	ldr	r1, [r1, #4]
 800357c:	f001 011f 	and.w	r1, r1, #31
 8003580:	408b      	lsls	r3, r1
 8003582:	431a      	orrs	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	651a      	str	r2, [r3, #80]	; 0x50
        
        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */        
        if(((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	089b      	lsrs	r3, r3, #2
 800358e:	1c5a      	adds	r2, r3, #1
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	429a      	cmp	r2, r3
 8003596:	d808      	bhi.n	80035aa <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6818      	ldr	r0, [r3, #0]
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	6859      	ldr	r1, [r3, #4]
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	461a      	mov	r2, r3
 80035a6:	f7ff fb24 	bl	8002bf2 <LL_ADC_REG_SetSequencerRanks>
        }
      }
      
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6818      	ldr	r0, [r3, #0]
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	6819      	ldr	r1, [r3, #0]
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	461a      	mov	r2, r3
 80035b8:	f7ff fb64 	bl	8002c84 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	4b54      	ldr	r3, [pc, #336]	; (8003714 <HAL_ADC_ConfigChannel+0x260>)
 80035c2:	4013      	ands	r3, r2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f000 8099 	beq.w	80036fc <HAL_ADC_ConfigChannel+0x248>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035ca:	4853      	ldr	r0, [pc, #332]	; (8003718 <HAL_ADC_ConfigChannel+0x264>)
 80035cc:	f7ff fad1 	bl	8002b72 <LL_ADC_GetCommonPathInternalCh>
 80035d0:	61b8      	str	r0, [r7, #24]
        
        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a51      	ldr	r2, [pc, #324]	; (800371c <HAL_ADC_ConfigChannel+0x268>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d120      	bne.n	800361e <HAL_ADC_ConfigChannel+0x16a>
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d11b      	bne.n	800361e <HAL_ADC_ConfigChannel+0x16a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80035ec:	4619      	mov	r1, r3
 80035ee:	484a      	ldr	r0, [pc, #296]	; (8003718 <HAL_ADC_ConfigChannel+0x264>)
 80035f0:	f7ff faac 	bl	8002b4c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035f4:	4b4a      	ldr	r3, [pc, #296]	; (8003720 <HAL_ADC_ConfigChannel+0x26c>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	099b      	lsrs	r3, r3, #6
 80035fa:	4a4a      	ldr	r2, [pc, #296]	; (8003724 <HAL_ADC_ConfigChannel+0x270>)
 80035fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003600:	099b      	lsrs	r3, r3, #6
 8003602:	1c5a      	adds	r2, r3, #1
 8003604:	4613      	mov	r3, r2
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	4413      	add	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0UL)
 800360e:	e002      	b.n	8003616 <HAL_ADC_ConfigChannel+0x162>
          {
            wait_loop_index--;
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	3b01      	subs	r3, #1
 8003614:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0UL)
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1f9      	bne.n	8003610 <HAL_ADC_ConfigChannel+0x15c>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800361c:	e06e      	b.n	80036fc <HAL_ADC_ConfigChannel+0x248>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a41      	ldr	r2, [pc, #260]	; (8003728 <HAL_ADC_ConfigChannel+0x274>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d10c      	bne.n	8003642 <HAL_ADC_ConfigChannel+0x18e>
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d107      	bne.n	8003642 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003638:	4619      	mov	r1, r3
 800363a:	4837      	ldr	r0, [pc, #220]	; (8003718 <HAL_ADC_ConfigChannel+0x264>)
 800363c:	f7ff fa86 	bl	8002b4c <LL_ADC_SetCommonPathInternalCh>
 8003640:	e05c      	b.n	80036fc <HAL_ADC_ConfigChannel+0x248>
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a39      	ldr	r2, [pc, #228]	; (800372c <HAL_ADC_ConfigChannel+0x278>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d157      	bne.n	80036fc <HAL_ADC_ConfigChannel+0x248>
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d152      	bne.n	80036fc <HAL_ADC_ConfigChannel+0x248>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800365c:	4619      	mov	r1, r3
 800365e:	482e      	ldr	r0, [pc, #184]	; (8003718 <HAL_ADC_ConfigChannel+0x264>)
 8003660:	f7ff fa74 	bl	8002b4c <LL_ADC_SetCommonPathInternalCh>
 8003664:	e04a      	b.n	80036fc <HAL_ADC_ConfigChannel+0x248>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800366e:	d004      	beq.n	800367a <HAL_ADC_ConfigChannel+0x1c6>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	691b      	ldr	r3, [r3, #16]
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8003674:	4a26      	ldr	r2, [pc, #152]	; (8003710 <HAL_ADC_ConfigChannel+0x25c>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d107      	bne.n	800368a <HAL_ADC_ConfigChannel+0x1d6>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4619      	mov	r1, r3
 8003684:	4610      	mov	r0, r2
 8003686:	f7ff fae9 	bl	8002c5c <LL_ADC_REG_SetSequencerChRem>
      }
      
      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	4b21      	ldr	r3, [pc, #132]	; (8003714 <HAL_ADC_ConfigChannel+0x260>)
 8003690:	4013      	ands	r3, r2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d032      	beq.n	80036fc <HAL_ADC_ConfigChannel+0x248>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003696:	4820      	ldr	r0, [pc, #128]	; (8003718 <HAL_ADC_ConfigChannel+0x264>)
 8003698:	f7ff fa6b 	bl	8002b72 <LL_ADC_GetCommonPathInternalCh>
 800369c:	61b8      	str	r0, [r7, #24]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a1e      	ldr	r2, [pc, #120]	; (800371c <HAL_ADC_ConfigChannel+0x268>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d107      	bne.n	80036b8 <HAL_ADC_ConfigChannel+0x204>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80036ae:	4619      	mov	r1, r3
 80036b0:	4819      	ldr	r0, [pc, #100]	; (8003718 <HAL_ADC_ConfigChannel+0x264>)
 80036b2:	f7ff fa4b 	bl	8002b4c <LL_ADC_SetCommonPathInternalCh>
 80036b6:	e021      	b.n	80036fc <HAL_ADC_ConfigChannel+0x248>
        }
        else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a1a      	ldr	r2, [pc, #104]	; (8003728 <HAL_ADC_ConfigChannel+0x274>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d107      	bne.n	80036d2 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036c8:	4619      	mov	r1, r3
 80036ca:	4813      	ldr	r0, [pc, #76]	; (8003718 <HAL_ADC_ConfigChannel+0x264>)
 80036cc:	f7ff fa3e 	bl	8002b4c <LL_ADC_SetCommonPathInternalCh>
 80036d0:	e014      	b.n	80036fc <HAL_ADC_ConfigChannel+0x248>
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a15      	ldr	r2, [pc, #84]	; (800372c <HAL_ADC_ConfigChannel+0x278>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d10f      	bne.n	80036fc <HAL_ADC_ConfigChannel+0x248>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80036e2:	4619      	mov	r1, r3
 80036e4:	480c      	ldr	r0, [pc, #48]	; (8003718 <HAL_ADC_ConfigChannel+0x264>)
 80036e6:	f7ff fa31 	bl	8002b4c <LL_ADC_SetCommonPathInternalCh>
 80036ea:	e007      	b.n	80036fc <HAL_ADC_ConfigChannel+0x248>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036f0:	f043 0220 	orr.w	r2, r3, #32
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	649a      	str	r2, [r3, #72]	; 0x48
    
    tmp_hal_status = HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	77fb      	strb	r3, [r7, #31]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8003704:	7ffb      	ldrb	r3, [r7, #31]
}
 8003706:	4618      	mov	r0, r3
 8003708:	3720      	adds	r7, #32
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	80000004 	.word	0x80000004
 8003714:	80080000 	.word	0x80080000
 8003718:	40012700 	.word	0x40012700
 800371c:	b0001000 	.word	0xb0001000
 8003720:	20000004 	.word	0x20000004
 8003724:	053e2d63 	.word	0x053e2d63
 8003728:	b8004000 	.word	0xb8004000
 800372c:	b4002000 	.word	0xb4002000

08003730 <ADC_ConversionStop>:
  *
  *         (1) On STM32WB serie, parameter not available on devices: STM32WB10xx, STM32WB15xx.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4618      	mov	r0, r3
 8003740:	f7ff fb5b 	bl	8002dfa <LL_ADC_REG_IsConversionOngoing>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d02c      	beq.n	80037a4 <ADC_ConversionStop+0x74>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4618      	mov	r0, r3
 8003750:	f7ff fb18 	bl	8002d84 <LL_ADC_IsDisableOngoing>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d104      	bne.n	8003764 <ADC_ConversionStop+0x34>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4618      	mov	r0, r3
 8003760:	f7ff fb37 	bl	8002dd2 <LL_ADC_REG_StopConversion>
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003764:	f7ff f9b6 	bl	8002ad4 <HAL_GetTick>
 8003768:	60f8      	str	r0, [r7, #12]
    
    while((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800376a:	e014      	b.n	8003796 <ADC_ConversionStop+0x66>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800376c:	f7ff f9b2 	bl	8002ad4 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b05      	cmp	r3, #5
 8003778:	d90d      	bls.n	8003796 <ADC_ConversionStop+0x66>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800377e:	f043 0210 	orr.w	r2, r3, #16
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	649a      	str	r2, [r3, #72]	; 0x48
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800378a:	f043 0201 	orr.w	r2, r3, #1
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	64da      	str	r2, [r3, #76]	; 0x4c
        
        return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e007      	b.n	80037a6 <ADC_ConversionStop+0x76>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f003 0304 	and.w	r3, r3, #4
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1e3      	bne.n	800376c <ADC_ConversionStop+0x3c>

  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return HAL status */
  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
	...

080037b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80037b8:	2300      	movs	r3, #0
 80037ba:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7ff facc 	bl	8002d5e <LL_ADC_IsEnabled>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d162      	bne.n	8003892 <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if defined (ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	689a      	ldr	r2, [r3, #8]
 80037d2:	4b32      	ldr	r3, [pc, #200]	; (800389c <ADC_Enable+0xec>)
 80037d4:	4013      	ands	r3, r2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00d      	beq.n	80037f6 <ADC_Enable+0x46>
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#endif
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037de:	f043 0210 	orr.w	r2, r3, #16
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	649a      	str	r2, [r3, #72]	; 0x48

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ea:	f043 0201 	orr.w	r2, r3, #1
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	64da      	str	r2, [r3, #76]	; 0x4c

      return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e04e      	b.n	8003894 <ADC_Enable+0xe4>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7ff fa87 	bl	8002d0e <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003800:	4827      	ldr	r0, [pc, #156]	; (80038a0 <ADC_Enable+0xf0>)
 8003802:	f7ff f9b6 	bl	8002b72 <LL_ADC_GetCommonPathInternalCh>
 8003806:	4603      	mov	r3, r0
 8003808:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00f      	beq.n	8003830 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003810:	4b24      	ldr	r3, [pc, #144]	; (80038a4 <ADC_Enable+0xf4>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	099b      	lsrs	r3, r3, #6
 8003816:	4a24      	ldr	r2, [pc, #144]	; (80038a8 <ADC_Enable+0xf8>)
 8003818:	fba2 2303 	umull	r2, r3, r2, r3
 800381c:	099b      	lsrs	r3, r3, #6
 800381e:	3301      	adds	r3, #1
 8003820:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003822:	e002      	b.n	800382a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	3b01      	subs	r3, #1
 8003828:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1f9      	bne.n	8003824 <ADC_Enable+0x74>
    }

#if defined (ADC_SUPPORT_2_5_MSPS)
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	7e5b      	ldrb	r3, [r3, #25]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d02c      	beq.n	8003892 <ADC_Enable+0xe2>
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003838:	f7ff f94c 	bl	8002ad4 <HAL_GetTick>
 800383c:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800383e:	e021      	b.n	8003884 <ADC_Enable+0xd4>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4618      	mov	r0, r3
 8003846:	f7ff fa8a 	bl	8002d5e <LL_ADC_IsEnabled>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d104      	bne.n	800385a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4618      	mov	r0, r3
 8003856:	f7ff fa5a 	bl	8002d0e <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800385a:	f7ff f93b 	bl	8002ad4 <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d90d      	bls.n	8003884 <ADC_Enable+0xd4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800386c:	f043 0210 	orr.w	r2, r3, #16
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	649a      	str	r2, [r3, #72]	; 0x48
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003878:	f043 0201 	orr.w	r2, r3, #1
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	64da      	str	r2, [r3, #76]	; 0x4c
          
          return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e007      	b.n	8003894 <ADC_Enable+0xe4>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b01      	cmp	r3, #1
 8003890:	d1d6      	bne.n	8003840 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3710      	adds	r7, #16
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	80000017 	.word	0x80000017
 80038a0:	40012700 	.word	0x40012700
 80038a4:	20000004 	.word	0x20000004
 80038a8:	053e2d63 	.word	0x053e2d63

080038ac <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7ff fa63 	bl	8002d84 <LL_ADC_IsDisableOngoing>
 80038be:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7ff fa4a 	bl	8002d5e <LL_ADC_IsEnabled>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d047      	beq.n	8003960 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d144      	bne.n	8003960 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if defined (ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f003 0305 	and.w	r3, r3, #5
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d10c      	bne.n	80038fe <ADC_Disable+0x52>
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#endif
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7ff fa24 	bl	8002d36 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2203      	movs	r2, #3
 80038f4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80038f6:	f7ff f8ed 	bl	8002ad4 <HAL_GetTick>
 80038fa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80038fc:	e029      	b.n	8003952 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003902:	f043 0210 	orr.w	r2, r3, #16
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	649a      	str	r2, [r3, #72]	; 0x48
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800390e:	f043 0201 	orr.w	r2, r3, #1
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	64da      	str	r2, [r3, #76]	; 0x4c
      return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e023      	b.n	8003962 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800391a:	f7ff f8db 	bl	8002ad4 <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d914      	bls.n	8003952 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00d      	beq.n	8003952 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800393a:	f043 0210 	orr.w	r2, r3, #16
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	649a      	str	r2, [r3, #72]	; 0x48

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003946:	f043 0201 	orr.w	r2, r3, #1
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	64da      	str	r2, [r3, #76]	; 0x4c

          return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e007      	b.n	8003962 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1dc      	bne.n	800391a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b084      	sub	sp, #16
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003976:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800397c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003980:	2b00      	cmp	r3, #0
 8003982:	d143      	bne.n	8003a0c <ADC_DMAConvCplt+0xa2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003988:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	649a      	str	r2, [r3, #72]	; 0x48
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
#if defined (ADC_SUPPORT_2_5_MSPS)
    if(   (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4618      	mov	r0, r3
 8003996:	f7ff f919 	bl	8002bcc <LL_ADC_REG_IsTriggerSourceSWStart>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d031      	beq.n	8003a04 <ADC_DMAConvCplt+0x9a>
       && (hadc->Init.ContinuousConvMode == DISABLE)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	7e9b      	ldrb	r3, [r3, #26]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d12d      	bne.n	8003a04 <ADC_DMAConvCplt+0x9a>
      )
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0308 	and.w	r3, r3, #8
 80039b2:	2b08      	cmp	r3, #8
 80039b4:	d126      	bne.n	8003a04 <ADC_DMAConvCplt+0x9a>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7ff fa1d 	bl	8002dfa <LL_ADC_REG_IsConversionOngoing>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d112      	bne.n	80039ec <ADC_DMAConvCplt+0x82>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	685a      	ldr	r2, [r3, #4]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 020c 	bic.w	r2, r2, #12
 80039d4:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039de:	f023 0301 	bic.w	r3, r3, #1
 80039e2:	f043 0201 	orr.w	r2, r3, #1
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	649a      	str	r2, [r3, #72]	; 0x48
 80039ea:	e00b      	b.n	8003a04 <ADC_DMAConvCplt+0x9a>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039f0:	f043 0220 	orr.w	r2, r3, #32
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	649a      	str	r2, [r3, #72]	; 0x48
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039fc:	f043 0201 	orr.w	r2, r3, #1
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f7ff fd36 	bl	8003476 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003a0a:	e00e      	b.n	8003a2a <ADC_DMAConvCplt+0xc0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a10:	f003 0310 	and.w	r3, r3, #16
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d003      	beq.n	8003a20 <ADC_DMAConvCplt+0xb6>
      HAL_ADC_ErrorCallback(hadc);
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f7ff fd40 	bl	800349e <HAL_ADC_ErrorCallback>
}
 8003a1e:	e004      	b.n	8003a2a <ADC_DMAConvCplt+0xc0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	4798      	blx	r3
}
 8003a2a:	bf00      	nop
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b084      	sub	sp, #16
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003a40:	68f8      	ldr	r0, [r7, #12]
 8003a42:	f7ff fd22 	bl	800348a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a46:	bf00      	nop
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b084      	sub	sp, #16
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a60:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a6c:	f043 0204 	orr.w	r2, r3, #4
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	f7ff fd12 	bl	800349e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a7a:	bf00      	nop
 8003a7c:	3710      	adds	r7, #16
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
	...

08003a84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b085      	sub	sp, #20
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f003 0307 	and.w	r3, r3, #7
 8003a92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a94:	4b0c      	ldr	r3, [pc, #48]	; (8003ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a9a:	68ba      	ldr	r2, [r7, #8]
 8003a9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003aac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ab6:	4a04      	ldr	r2, [pc, #16]	; (8003ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	60d3      	str	r3, [r2, #12]
}
 8003abc:	bf00      	nop
 8003abe:	3714      	adds	r7, #20
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr
 8003ac8:	e000ed00 	.word	0xe000ed00

08003acc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003acc:	b480      	push	{r7}
 8003ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ad0:	4b04      	ldr	r3, [pc, #16]	; (8003ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	0a1b      	lsrs	r3, r3, #8
 8003ad6:	f003 0307 	and.w	r3, r3, #7
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr
 8003ae4:	e000ed00 	.word	0xe000ed00

08003ae8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	4603      	mov	r3, r0
 8003af0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	db0b      	blt.n	8003b12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003afa:	79fb      	ldrb	r3, [r7, #7]
 8003afc:	f003 021f 	and.w	r2, r3, #31
 8003b00:	4907      	ldr	r1, [pc, #28]	; (8003b20 <__NVIC_EnableIRQ+0x38>)
 8003b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b06:	095b      	lsrs	r3, r3, #5
 8003b08:	2001      	movs	r0, #1
 8003b0a:	fa00 f202 	lsl.w	r2, r0, r2
 8003b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b12:	bf00      	nop
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	e000e100 	.word	0xe000e100

08003b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	6039      	str	r1, [r7, #0]
 8003b2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	db0a      	blt.n	8003b4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	b2da      	uxtb	r2, r3
 8003b3c:	490c      	ldr	r1, [pc, #48]	; (8003b70 <__NVIC_SetPriority+0x4c>)
 8003b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b42:	0112      	lsls	r2, r2, #4
 8003b44:	b2d2      	uxtb	r2, r2
 8003b46:	440b      	add	r3, r1
 8003b48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b4c:	e00a      	b.n	8003b64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	b2da      	uxtb	r2, r3
 8003b52:	4908      	ldr	r1, [pc, #32]	; (8003b74 <__NVIC_SetPriority+0x50>)
 8003b54:	79fb      	ldrb	r3, [r7, #7]
 8003b56:	f003 030f 	and.w	r3, r3, #15
 8003b5a:	3b04      	subs	r3, #4
 8003b5c:	0112      	lsls	r2, r2, #4
 8003b5e:	b2d2      	uxtb	r2, r2
 8003b60:	440b      	add	r3, r1
 8003b62:	761a      	strb	r2, [r3, #24]
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr
 8003b70:	e000e100 	.word	0xe000e100
 8003b74:	e000ed00 	.word	0xe000ed00

08003b78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b089      	sub	sp, #36	; 0x24
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f003 0307 	and.w	r3, r3, #7
 8003b8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	f1c3 0307 	rsb	r3, r3, #7
 8003b92:	2b04      	cmp	r3, #4
 8003b94:	bf28      	it	cs
 8003b96:	2304      	movcs	r3, #4
 8003b98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	3304      	adds	r3, #4
 8003b9e:	2b06      	cmp	r3, #6
 8003ba0:	d902      	bls.n	8003ba8 <NVIC_EncodePriority+0x30>
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	3b03      	subs	r3, #3
 8003ba6:	e000      	b.n	8003baa <NVIC_EncodePriority+0x32>
 8003ba8:	2300      	movs	r3, #0
 8003baa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bac:	f04f 32ff 	mov.w	r2, #4294967295
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb6:	43da      	mvns	r2, r3
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	401a      	ands	r2, r3
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bca:	43d9      	mvns	r1, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bd0:	4313      	orrs	r3, r2
         );
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3724      	adds	r7, #36	; 0x24
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr

08003bde <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b082      	sub	sp, #8
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f7ff ff4c 	bl	8003a84 <__NVIC_SetPriorityGrouping>
}
 8003bec:	bf00      	nop
 8003bee:	3708      	adds	r7, #8
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
 8003c00:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003c02:	f7ff ff63 	bl	8003acc <__NVIC_GetPriorityGrouping>
 8003c06:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	68b9      	ldr	r1, [r7, #8]
 8003c0c:	6978      	ldr	r0, [r7, #20]
 8003c0e:	f7ff ffb3 	bl	8003b78 <NVIC_EncodePriority>
 8003c12:	4602      	mov	r2, r0
 8003c14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c18:	4611      	mov	r1, r2
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7ff ff82 	bl	8003b24 <__NVIC_SetPriority>
}
 8003c20:	bf00      	nop
 8003c22:	3718      	adds	r7, #24
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	4603      	mov	r3, r0
 8003c30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7ff ff56 	bl	8003ae8 <__NVIC_EnableIRQ>
}
 8003c3c:	bf00      	nop
 8003c3e:	3708      	adds	r7, #8
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e078      	b.n	8003d48 <HAL_DMA_Init+0x104>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	4b3c      	ldr	r3, [pc, #240]	; (8003d50 <HAL_DMA_Init+0x10c>)
 8003c5e:	4413      	add	r3, r2
 8003c60:	4a3c      	ldr	r2, [pc, #240]	; (8003d54 <HAL_DMA_Init+0x110>)
 8003c62:	fba2 2303 	umull	r2, r3, r2, r3
 8003c66:	091b      	lsrs	r3, r3, #4
 8003c68:	009a      	lsls	r2, r3, #2
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a39      	ldr	r2, [pc, #228]	; (8003d58 <HAL_DMA_Init+0x114>)
 8003c72:	641a      	str	r2, [r3, #64]	; 0x40
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2202      	movs	r2, #2
 8003c78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c8e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003c98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ca4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cb0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 fa6e 	bl	80041a8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cd4:	d102      	bne.n	8003cdc <HAL_DMA_Init+0x98>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685a      	ldr	r2, [r3, #4]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ce4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003ce8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003cf2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d010      	beq.n	8003d1e <HAL_DMA_Init+0xda>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	2b04      	cmp	r3, #4
 8003d02:	d80c      	bhi.n	8003d1e <HAL_DMA_Init+0xda>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 fa7b 	bl	8004200 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d0e:	2200      	movs	r2, #0
 8003d10:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003d1a:	605a      	str	r2, [r3, #4]
 8003d1c:	e008      	b.n	8003d30 <HAL_DMA_Init+0xec>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3710      	adds	r7, #16
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	bffdfff8 	.word	0xbffdfff8
 8003d54:	cccccccd 	.word	0xcccccccd
 8003d58:	40020000 	.word	0x40020000

08003d5c <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b086      	sub	sp, #24
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
 8003d68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d101      	bne.n	8003d7c <HAL_DMA_Start_IT+0x20>
 8003d78:	2302      	movs	r3, #2
 8003d7a:	e066      	b.n	8003e4a <HAL_DMA_Start_IT+0xee>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d155      	bne.n	8003e3c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2202      	movs	r2, #2
 8003d94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f022 0201 	bic.w	r2, r2, #1
 8003dac:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	68b9      	ldr	r1, [r7, #8]
 8003db4:	68f8      	ldr	r0, [r7, #12]
 8003db6:	f000 f9b9 	bl	800412c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d008      	beq.n	8003dd4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f042 020e 	orr.w	r2, r2, #14
 8003dd0:	601a      	str	r2, [r3, #0]
 8003dd2:	e00f      	b.n	8003df4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f022 0204 	bic.w	r2, r2, #4
 8003de2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f042 020a 	orr.w	r2, r2, #10
 8003df2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d007      	beq.n	8003e12 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e10:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d007      	beq.n	8003e2a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e28:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f042 0201 	orr.w	r2, r2, #1
 8003e38:	601a      	str	r2, [r3, #0]
 8003e3a:	e005      	b.n	8003e48 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003e44:	2302      	movs	r3, #2
 8003e46:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003e48:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3718      	adds	r7, #24
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e52:	b480      	push	{r7}
 8003e54:	b083      	sub	sp, #12
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d101      	bne.n	8003e64 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e04f      	b.n	8003f04 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d008      	beq.n	8003e82 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2204      	movs	r2, #4
 8003e74:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e040      	b.n	8003f04 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f022 020e 	bic.w	r2, r2, #14
 8003e90:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ea0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f022 0201 	bic.w	r2, r2, #1
 8003eb0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb6:	f003 021c 	and.w	r2, r3, #28
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	2101      	movs	r1, #1
 8003ec0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ec4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ece:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00c      	beq.n	8003ef2 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ee6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003ef0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d005      	beq.n	8003f34 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2204      	movs	r2, #4
 8003f2c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	73fb      	strb	r3, [r7, #15]
 8003f32:	e047      	b.n	8003fc4 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f022 020e 	bic.w	r2, r2, #14
 8003f42:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f022 0201 	bic.w	r2, r2, #1
 8003f52:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f68:	f003 021c 	and.w	r2, r3, #28
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f70:	2101      	movs	r1, #1
 8003f72:	fa01 f202 	lsl.w	r2, r1, r2
 8003f76:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003f80:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00c      	beq.n	8003fa4 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f98:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003fa2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d003      	beq.n	8003fc4 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	4798      	blx	r3
    }
  }
  return status;
 8003fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3710      	adds	r7, #16
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b084      	sub	sp, #16
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fea:	f003 031c 	and.w	r3, r3, #28
 8003fee:	2204      	movs	r2, #4
 8003ff0:	409a      	lsls	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d026      	beq.n	8004048 <HAL_DMA_IRQHandler+0x7a>
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	f003 0304 	and.w	r3, r3, #4
 8004000:	2b00      	cmp	r3, #0
 8004002:	d021      	beq.n	8004048 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0320 	and.w	r3, r3, #32
 800400e:	2b00      	cmp	r3, #0
 8004010:	d107      	bne.n	8004022 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 0204 	bic.w	r2, r2, #4
 8004020:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004026:	f003 021c 	and.w	r2, r3, #28
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402e:	2104      	movs	r1, #4
 8004030:	fa01 f202 	lsl.w	r2, r1, r2
 8004034:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403a:	2b00      	cmp	r3, #0
 800403c:	d071      	beq.n	8004122 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004046:	e06c      	b.n	8004122 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800404c:	f003 031c 	and.w	r3, r3, #28
 8004050:	2202      	movs	r2, #2
 8004052:	409a      	lsls	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	4013      	ands	r3, r2
 8004058:	2b00      	cmp	r3, #0
 800405a:	d02e      	beq.n	80040ba <HAL_DMA_IRQHandler+0xec>
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	2b00      	cmp	r3, #0
 8004064:	d029      	beq.n	80040ba <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0320 	and.w	r3, r3, #32
 8004070:	2b00      	cmp	r3, #0
 8004072:	d10b      	bne.n	800408c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f022 020a 	bic.w	r2, r2, #10
 8004082:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004090:	f003 021c 	and.w	r2, r3, #28
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004098:	2102      	movs	r1, #2
 800409a:	fa01 f202 	lsl.w	r2, r1, r2
 800409e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d038      	beq.n	8004122 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80040b8:	e033      	b.n	8004122 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040be:	f003 031c 	and.w	r3, r3, #28
 80040c2:	2208      	movs	r2, #8
 80040c4:	409a      	lsls	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	4013      	ands	r3, r2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d02a      	beq.n	8004124 <HAL_DMA_IRQHandler+0x156>
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	f003 0308 	and.w	r3, r3, #8
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d025      	beq.n	8004124 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 020e 	bic.w	r2, r2, #14
 80040e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ec:	f003 021c 	and.w	r2, r3, #28
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f4:	2101      	movs	r1, #1
 80040f6:	fa01 f202 	lsl.w	r2, r1, r2
 80040fa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2201      	movs	r2, #1
 8004106:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004116:	2b00      	cmp	r3, #0
 8004118:	d004      	beq.n	8004124 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004122:	bf00      	nop
 8004124:	bf00      	nop
}
 8004126:	3710      	adds	r7, #16
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
 8004138:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004142:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004148:	2b00      	cmp	r3, #0
 800414a:	d004      	beq.n	8004156 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004154:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415a:	f003 021c 	and.w	r2, r3, #28
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004162:	2101      	movs	r1, #1
 8004164:	fa01 f202 	lsl.w	r2, r1, r2
 8004168:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	683a      	ldr	r2, [r7, #0]
 8004170:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	2b10      	cmp	r3, #16
 8004178:	d108      	bne.n	800418c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68ba      	ldr	r2, [r7, #8]
 8004188:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800418a:	e007      	b.n	800419c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68ba      	ldr	r2, [r7, #8]
 8004192:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	60da      	str	r2, [r3, #12]
}
 800419c:	bf00      	nop
 800419e:	3714      	adds	r7, #20
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b4:	089b      	lsrs	r3, r3, #2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80041bc:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	6493      	str	r3, [r2, #72]	; 0x48
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	3b08      	subs	r3, #8
 80041cc:	4a0a      	ldr	r2, [pc, #40]	; (80041f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80041ce:	fba2 2303 	umull	r2, r3, r2, r3
 80041d2:	091b      	lsrs	r3, r3, #4
 80041d4:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a08      	ldr	r2, [pc, #32]	; (80041fc <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80041da:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f003 031f 	and.w	r3, r3, #31
 80041e2:	2201      	movs	r2, #1
 80041e4:	409a      	lsls	r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80041ea:	bf00      	nop
 80041ec:	3714      	adds	r7, #20
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	cccccccd 	.word	0xcccccccd
 80041fc:	40020880 	.word	0x40020880

08004200 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004210:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	4b0b      	ldr	r3, [pc, #44]	; (8004244 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004216:	4413      	add	r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	461a      	mov	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a09      	ldr	r2, [pc, #36]	; (8004248 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8004224:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	3b01      	subs	r3, #1
 800422a:	f003 0303 	and.w	r3, r3, #3
 800422e:	2201      	movs	r2, #1
 8004230:	409a      	lsls	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004236:	bf00      	nop
 8004238:	3714      	adds	r7, #20
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	1000823f 	.word	0x1000823f
 8004248:	40020940 	.word	0x40020940

0800424c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800424c:	b480      	push	{r7}
 800424e:	b087      	sub	sp, #28
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004256:	2300      	movs	r3, #0
 8004258:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800425a:	e146      	b.n	80044ea <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	2101      	movs	r1, #1
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	fa01 f303 	lsl.w	r3, r1, r3
 8004268:	4013      	ands	r3, r2
 800426a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2b00      	cmp	r3, #0
 8004270:	f000 8138 	beq.w	80044e4 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f003 0303 	and.w	r3, r3, #3
 800427c:	2b01      	cmp	r3, #1
 800427e:	d005      	beq.n	800428c <HAL_GPIO_Init+0x40>
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f003 0303 	and.w	r3, r3, #3
 8004288:	2b02      	cmp	r3, #2
 800428a:	d130      	bne.n	80042ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	005b      	lsls	r3, r3, #1
 8004296:	2203      	movs	r2, #3
 8004298:	fa02 f303 	lsl.w	r3, r2, r3
 800429c:	43db      	mvns	r3, r3
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	4013      	ands	r3, r2
 80042a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	68da      	ldr	r2, [r3, #12]
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	005b      	lsls	r3, r3, #1
 80042ac:	fa02 f303 	lsl.w	r3, r2, r3
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80042c2:	2201      	movs	r2, #1
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ca:	43db      	mvns	r3, r3
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	4013      	ands	r3, r2
 80042d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	091b      	lsrs	r3, r3, #4
 80042d8:	f003 0201 	and.w	r2, r3, #1
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	fa02 f303 	lsl.w	r3, r2, r3
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f003 0303 	and.w	r3, r3, #3
 80042f6:	2b03      	cmp	r3, #3
 80042f8:	d017      	beq.n	800432a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	005b      	lsls	r3, r3, #1
 8004304:	2203      	movs	r2, #3
 8004306:	fa02 f303 	lsl.w	r3, r2, r3
 800430a:	43db      	mvns	r3, r3
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	4013      	ands	r3, r2
 8004310:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	689a      	ldr	r2, [r3, #8]
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	005b      	lsls	r3, r3, #1
 800431a:	fa02 f303 	lsl.w	r3, r2, r3
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	4313      	orrs	r3, r2
 8004322:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	693a      	ldr	r2, [r7, #16]
 8004328:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f003 0303 	and.w	r3, r3, #3
 8004332:	2b02      	cmp	r3, #2
 8004334:	d123      	bne.n	800437e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	08da      	lsrs	r2, r3, #3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	3208      	adds	r2, #8
 800433e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004342:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	f003 0307 	and.w	r3, r3, #7
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	220f      	movs	r2, #15
 800434e:	fa02 f303 	lsl.w	r3, r2, r3
 8004352:	43db      	mvns	r3, r3
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	4013      	ands	r3, r2
 8004358:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	691a      	ldr	r2, [r3, #16]
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	f003 0307 	and.w	r3, r3, #7
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	fa02 f303 	lsl.w	r3, r2, r3
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	4313      	orrs	r3, r2
 800436e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	08da      	lsrs	r2, r3, #3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	3208      	adds	r2, #8
 8004378:	6939      	ldr	r1, [r7, #16]
 800437a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	005b      	lsls	r3, r3, #1
 8004388:	2203      	movs	r2, #3
 800438a:	fa02 f303 	lsl.w	r3, r2, r3
 800438e:	43db      	mvns	r3, r3
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	4013      	ands	r3, r2
 8004394:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f003 0203 	and.w	r2, r3, #3
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	005b      	lsls	r3, r3, #1
 80043a2:	fa02 f303 	lsl.w	r3, r2, r3
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	f000 8092 	beq.w	80044e4 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80043c0:	4a51      	ldr	r2, [pc, #324]	; (8004508 <HAL_GPIO_Init+0x2bc>)
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	089b      	lsrs	r3, r3, #2
 80043c6:	3302      	adds	r3, #2
 80043c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	f003 0303 	and.w	r3, r3, #3
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	220f      	movs	r2, #15
 80043d8:	fa02 f303 	lsl.w	r3, r2, r3
 80043dc:	43db      	mvns	r3, r3
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	4013      	ands	r3, r2
 80043e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80043ea:	d013      	beq.n	8004414 <HAL_GPIO_Init+0x1c8>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a47      	ldr	r2, [pc, #284]	; (800450c <HAL_GPIO_Init+0x2c0>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d00d      	beq.n	8004410 <HAL_GPIO_Init+0x1c4>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a46      	ldr	r2, [pc, #280]	; (8004510 <HAL_GPIO_Init+0x2c4>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d007      	beq.n	800440c <HAL_GPIO_Init+0x1c0>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a45      	ldr	r2, [pc, #276]	; (8004514 <HAL_GPIO_Init+0x2c8>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d101      	bne.n	8004408 <HAL_GPIO_Init+0x1bc>
 8004404:	2304      	movs	r3, #4
 8004406:	e006      	b.n	8004416 <HAL_GPIO_Init+0x1ca>
 8004408:	2307      	movs	r3, #7
 800440a:	e004      	b.n	8004416 <HAL_GPIO_Init+0x1ca>
 800440c:	2302      	movs	r3, #2
 800440e:	e002      	b.n	8004416 <HAL_GPIO_Init+0x1ca>
 8004410:	2301      	movs	r3, #1
 8004412:	e000      	b.n	8004416 <HAL_GPIO_Init+0x1ca>
 8004414:	2300      	movs	r3, #0
 8004416:	697a      	ldr	r2, [r7, #20]
 8004418:	f002 0203 	and.w	r2, r2, #3
 800441c:	0092      	lsls	r2, r2, #2
 800441e:	4093      	lsls	r3, r2
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	4313      	orrs	r3, r2
 8004424:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004426:	4938      	ldr	r1, [pc, #224]	; (8004508 <HAL_GPIO_Init+0x2bc>)
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	089b      	lsrs	r3, r3, #2
 800442c:	3302      	adds	r3, #2
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004434:	4b38      	ldr	r3, [pc, #224]	; (8004518 <HAL_GPIO_Init+0x2cc>)
 8004436:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800443a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	43db      	mvns	r3, r3
 8004440:	693a      	ldr	r2, [r7, #16]
 8004442:	4013      	ands	r3, r2
 8004444:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d003      	beq.n	800445a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	4313      	orrs	r3, r2
 8004458:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800445a:	4a2f      	ldr	r2, [pc, #188]	; (8004518 <HAL_GPIO_Init+0x2cc>)
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8004462:	4b2d      	ldr	r3, [pc, #180]	; (8004518 <HAL_GPIO_Init+0x2cc>)
 8004464:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004468:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	43db      	mvns	r3, r3
 800446e:	693a      	ldr	r2, [r7, #16]
 8004470:	4013      	ands	r3, r2
 8004472:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d003      	beq.n	8004488 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	4313      	orrs	r3, r2
 8004486:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004488:	4a23      	ldr	r2, [pc, #140]	; (8004518 <HAL_GPIO_Init+0x2cc>)
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004490:	4b21      	ldr	r3, [pc, #132]	; (8004518 <HAL_GPIO_Init+0x2cc>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	43db      	mvns	r3, r3
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	4013      	ands	r3, r2
 800449e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d003      	beq.n	80044b4 <HAL_GPIO_Init+0x268>
        {
          temp |= iocurrent;
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80044b4:	4a18      	ldr	r2, [pc, #96]	; (8004518 <HAL_GPIO_Init+0x2cc>)
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80044ba:	4b17      	ldr	r3, [pc, #92]	; (8004518 <HAL_GPIO_Init+0x2cc>)
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	43db      	mvns	r3, r3
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	4013      	ands	r3, r2
 80044c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d003      	beq.n	80044de <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80044d6:	693a      	ldr	r2, [r7, #16]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	4313      	orrs	r3, r2
 80044dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80044de:	4a0e      	ldr	r2, [pc, #56]	; (8004518 <HAL_GPIO_Init+0x2cc>)
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	3301      	adds	r3, #1
 80044e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	fa22 f303 	lsr.w	r3, r2, r3
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f47f aeb1 	bne.w	800425c <HAL_GPIO_Init+0x10>
  }
}
 80044fa:	bf00      	nop
 80044fc:	bf00      	nop
 80044fe:	371c      	adds	r7, #28
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr
 8004508:	40010000 	.word	0x40010000
 800450c:	48000400 	.word	0x48000400
 8004510:	48000800 	.word	0x48000800
 8004514:	48001000 	.word	0x48001000
 8004518:	58000800 	.word	0x58000800

0800451c <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	460b      	mov	r3, r1
 8004526:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	691a      	ldr	r2, [r3, #16]
 800452c:	887b      	ldrh	r3, [r7, #2]
 800452e:	4013      	ands	r3, r2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d002      	beq.n	800453a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004534:	2301      	movs	r3, #1
 8004536:	73fb      	strb	r3, [r7, #15]
 8004538:	e001      	b.n	800453e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800453a:	2300      	movs	r3, #0
 800453c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800453e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004540:	4618      	mov	r0, r3
 8004542:	3714      	adds	r7, #20
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	460b      	mov	r3, r1
 8004556:	807b      	strh	r3, [r7, #2]
 8004558:	4613      	mov	r3, r2
 800455a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800455c:	787b      	ldrb	r3, [r7, #1]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004562:	887a      	ldrh	r2, [r7, #2]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004568:	e002      	b.n	8004570 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800456a:	887a      	ldrh	r2, [r7, #2]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004570:	bf00      	nop
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800457c:	b480      	push	{r7}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	460b      	mov	r3, r1
 8004586:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	695b      	ldr	r3, [r3, #20]
 800458c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800458e:	887a      	ldrh	r2, [r7, #2]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	4013      	ands	r3, r2
 8004594:	041a      	lsls	r2, r3, #16
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	43d9      	mvns	r1, r3
 800459a:	887b      	ldrh	r3, [r7, #2]
 800459c:	400b      	ands	r3, r1
 800459e:	431a      	orrs	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	619a      	str	r2, [r3, #24]
}
 80045a4:	bf00      	nop
 80045a6:	3714      	adds	r7, #20
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d101      	bne.n	80045c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e081      	b.n	80046c6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d106      	bne.n	80045dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f7fd ff94 	bl	8002504 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2224      	movs	r2, #36	; 0x24
 80045e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f022 0201 	bic.w	r2, r2, #1
 80045f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685a      	ldr	r2, [r3, #4]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004600:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	689a      	ldr	r2, [r3, #8]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004610:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d107      	bne.n	800462a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	689a      	ldr	r2, [r3, #8]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004626:	609a      	str	r2, [r3, #8]
 8004628:	e006      	b.n	8004638 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	689a      	ldr	r2, [r3, #8]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004636:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	2b02      	cmp	r3, #2
 800463e:	d104      	bne.n	800464a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004648:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	6812      	ldr	r2, [r2, #0]
 8004654:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004658:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800465c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68da      	ldr	r2, [r3, #12]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800466c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	691a      	ldr	r2, [r3, #16]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	430a      	orrs	r2, r1
 8004686:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	69d9      	ldr	r1, [r3, #28]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a1a      	ldr	r2, [r3, #32]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	430a      	orrs	r2, r1
 8004696:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f042 0201 	orr.w	r2, r2, #1
 80046a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2220      	movs	r2, #32
 80046b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3708      	adds	r7, #8
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
	...

080046d0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b088      	sub	sp, #32
 80046d4:	af02      	add	r7, sp, #8
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	4608      	mov	r0, r1
 80046da:	4611      	mov	r1, r2
 80046dc:	461a      	mov	r2, r3
 80046de:	4603      	mov	r3, r0
 80046e0:	817b      	strh	r3, [r7, #10]
 80046e2:	460b      	mov	r3, r1
 80046e4:	813b      	strh	r3, [r7, #8]
 80046e6:	4613      	mov	r3, r2
 80046e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	2b20      	cmp	r3, #32
 80046f4:	f040 80f9 	bne.w	80048ea <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80046f8:	6a3b      	ldr	r3, [r7, #32]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d002      	beq.n	8004704 <HAL_I2C_Mem_Write+0x34>
 80046fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004700:	2b00      	cmp	r3, #0
 8004702:	d105      	bne.n	8004710 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f44f 7200 	mov.w	r2, #512	; 0x200
 800470a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e0ed      	b.n	80048ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004716:	2b01      	cmp	r3, #1
 8004718:	d101      	bne.n	800471e <HAL_I2C_Mem_Write+0x4e>
 800471a:	2302      	movs	r3, #2
 800471c:	e0e6      	b.n	80048ec <HAL_I2C_Mem_Write+0x21c>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004726:	f7fe f9d5 	bl	8002ad4 <HAL_GetTick>
 800472a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	9300      	str	r3, [sp, #0]
 8004730:	2319      	movs	r3, #25
 8004732:	2201      	movs	r2, #1
 8004734:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004738:	68f8      	ldr	r0, [r7, #12]
 800473a:	f000 fac3 	bl	8004cc4 <I2C_WaitOnFlagUntilTimeout>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d001      	beq.n	8004748 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e0d1      	b.n	80048ec <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2221      	movs	r2, #33	; 0x21
 800474c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2240      	movs	r2, #64	; 0x40
 8004754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6a3a      	ldr	r2, [r7, #32]
 8004762:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004768:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004770:	88f8      	ldrh	r0, [r7, #6]
 8004772:	893a      	ldrh	r2, [r7, #8]
 8004774:	8979      	ldrh	r1, [r7, #10]
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	9301      	str	r3, [sp, #4]
 800477a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477c:	9300      	str	r3, [sp, #0]
 800477e:	4603      	mov	r3, r0
 8004780:	68f8      	ldr	r0, [r7, #12]
 8004782:	f000 f9d3 	bl	8004b2c <I2C_RequestMemoryWrite>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d005      	beq.n	8004798 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e0a9      	b.n	80048ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800479c:	b29b      	uxth	r3, r3
 800479e:	2bff      	cmp	r3, #255	; 0xff
 80047a0:	d90e      	bls.n	80047c0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	22ff      	movs	r2, #255	; 0xff
 80047a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ac:	b2da      	uxtb	r2, r3
 80047ae:	8979      	ldrh	r1, [r7, #10]
 80047b0:	2300      	movs	r3, #0
 80047b2:	9300      	str	r3, [sp, #0]
 80047b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f000 fbb5 	bl	8004f28 <I2C_TransferConfig>
 80047be:	e00f      	b.n	80047e0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ce:	b2da      	uxtb	r2, r3
 80047d0:	8979      	ldrh	r1, [r7, #10]
 80047d2:	2300      	movs	r3, #0
 80047d4:	9300      	str	r3, [sp, #0]
 80047d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80047da:	68f8      	ldr	r0, [r7, #12]
 80047dc:	f000 fba4 	bl	8004f28 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f000 faad 	bl	8004d44 <I2C_WaitOnTXISFlagUntilTimeout>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d001      	beq.n	80047f4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e07b      	b.n	80048ec <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f8:	781a      	ldrb	r2, [r3, #0]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004804:	1c5a      	adds	r2, r3, #1
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800480e:	b29b      	uxth	r3, r3
 8004810:	3b01      	subs	r3, #1
 8004812:	b29a      	uxth	r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800481c:	3b01      	subs	r3, #1
 800481e:	b29a      	uxth	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004828:	b29b      	uxth	r3, r3
 800482a:	2b00      	cmp	r3, #0
 800482c:	d034      	beq.n	8004898 <HAL_I2C_Mem_Write+0x1c8>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004832:	2b00      	cmp	r3, #0
 8004834:	d130      	bne.n	8004898 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	9300      	str	r3, [sp, #0]
 800483a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483c:	2200      	movs	r2, #0
 800483e:	2180      	movs	r1, #128	; 0x80
 8004840:	68f8      	ldr	r0, [r7, #12]
 8004842:	f000 fa3f 	bl	8004cc4 <I2C_WaitOnFlagUntilTimeout>
 8004846:	4603      	mov	r3, r0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d001      	beq.n	8004850 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e04d      	b.n	80048ec <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004854:	b29b      	uxth	r3, r3
 8004856:	2bff      	cmp	r3, #255	; 0xff
 8004858:	d90e      	bls.n	8004878 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	22ff      	movs	r2, #255	; 0xff
 800485e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004864:	b2da      	uxtb	r2, r3
 8004866:	8979      	ldrh	r1, [r7, #10]
 8004868:	2300      	movs	r3, #0
 800486a:	9300      	str	r3, [sp, #0]
 800486c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004870:	68f8      	ldr	r0, [r7, #12]
 8004872:	f000 fb59 	bl	8004f28 <I2C_TransferConfig>
 8004876:	e00f      	b.n	8004898 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800487c:	b29a      	uxth	r2, r3
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004886:	b2da      	uxtb	r2, r3
 8004888:	8979      	ldrh	r1, [r7, #10]
 800488a:	2300      	movs	r3, #0
 800488c:	9300      	str	r3, [sp, #0]
 800488e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004892:	68f8      	ldr	r0, [r7, #12]
 8004894:	f000 fb48 	bl	8004f28 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800489c:	b29b      	uxth	r3, r3
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d19e      	bne.n	80047e0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048a6:	68f8      	ldr	r0, [r7, #12]
 80048a8:	f000 fa8c 	bl	8004dc4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d001      	beq.n	80048b6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e01a      	b.n	80048ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2220      	movs	r2, #32
 80048bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	6859      	ldr	r1, [r3, #4]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	4b0a      	ldr	r3, [pc, #40]	; (80048f4 <HAL_I2C_Mem_Write+0x224>)
 80048ca:	400b      	ands	r3, r1
 80048cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2220      	movs	r2, #32
 80048d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80048e6:	2300      	movs	r3, #0
 80048e8:	e000      	b.n	80048ec <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80048ea:	2302      	movs	r3, #2
  }
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3718      	adds	r7, #24
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	fe00e800 	.word	0xfe00e800

080048f8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b088      	sub	sp, #32
 80048fc:	af02      	add	r7, sp, #8
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	4608      	mov	r0, r1
 8004902:	4611      	mov	r1, r2
 8004904:	461a      	mov	r2, r3
 8004906:	4603      	mov	r3, r0
 8004908:	817b      	strh	r3, [r7, #10]
 800490a:	460b      	mov	r3, r1
 800490c:	813b      	strh	r3, [r7, #8]
 800490e:	4613      	mov	r3, r2
 8004910:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b20      	cmp	r3, #32
 800491c:	f040 80fd 	bne.w	8004b1a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004920:	6a3b      	ldr	r3, [r7, #32]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d002      	beq.n	800492c <HAL_I2C_Mem_Read+0x34>
 8004926:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004928:	2b00      	cmp	r3, #0
 800492a:	d105      	bne.n	8004938 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004932:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e0f1      	b.n	8004b1c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800493e:	2b01      	cmp	r3, #1
 8004940:	d101      	bne.n	8004946 <HAL_I2C_Mem_Read+0x4e>
 8004942:	2302      	movs	r3, #2
 8004944:	e0ea      	b.n	8004b1c <HAL_I2C_Mem_Read+0x224>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800494e:	f7fe f8c1 	bl	8002ad4 <HAL_GetTick>
 8004952:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	9300      	str	r3, [sp, #0]
 8004958:	2319      	movs	r3, #25
 800495a:	2201      	movs	r2, #1
 800495c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f000 f9af 	bl	8004cc4 <I2C_WaitOnFlagUntilTimeout>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d001      	beq.n	8004970 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e0d5      	b.n	8004b1c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2222      	movs	r2, #34	; 0x22
 8004974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2240      	movs	r2, #64	; 0x40
 800497c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6a3a      	ldr	r2, [r7, #32]
 800498a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004990:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004998:	88f8      	ldrh	r0, [r7, #6]
 800499a:	893a      	ldrh	r2, [r7, #8]
 800499c:	8979      	ldrh	r1, [r7, #10]
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	9301      	str	r3, [sp, #4]
 80049a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a4:	9300      	str	r3, [sp, #0]
 80049a6:	4603      	mov	r3, r0
 80049a8:	68f8      	ldr	r0, [r7, #12]
 80049aa:	f000 f913 	bl	8004bd4 <I2C_RequestMemoryRead>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d005      	beq.n	80049c0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e0ad      	b.n	8004b1c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	2bff      	cmp	r3, #255	; 0xff
 80049c8:	d90e      	bls.n	80049e8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	22ff      	movs	r2, #255	; 0xff
 80049ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049d4:	b2da      	uxtb	r2, r3
 80049d6:	8979      	ldrh	r1, [r7, #10]
 80049d8:	4b52      	ldr	r3, [pc, #328]	; (8004b24 <HAL_I2C_Mem_Read+0x22c>)
 80049da:	9300      	str	r3, [sp, #0]
 80049dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049e0:	68f8      	ldr	r0, [r7, #12]
 80049e2:	f000 faa1 	bl	8004f28 <I2C_TransferConfig>
 80049e6:	e00f      	b.n	8004a08 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049f6:	b2da      	uxtb	r2, r3
 80049f8:	8979      	ldrh	r1, [r7, #10]
 80049fa:	4b4a      	ldr	r3, [pc, #296]	; (8004b24 <HAL_I2C_Mem_Read+0x22c>)
 80049fc:	9300      	str	r3, [sp, #0]
 80049fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f000 fa90 	bl	8004f28 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	9300      	str	r3, [sp, #0]
 8004a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0e:	2200      	movs	r2, #0
 8004a10:	2104      	movs	r1, #4
 8004a12:	68f8      	ldr	r0, [r7, #12]
 8004a14:	f000 f956 	bl	8004cc4 <I2C_WaitOnFlagUntilTimeout>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d001      	beq.n	8004a22 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e07c      	b.n	8004b1c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2c:	b2d2      	uxtb	r2, r2
 8004a2e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a34:	1c5a      	adds	r2, r3, #1
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	b29a      	uxth	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d034      	beq.n	8004ac8 <HAL_I2C_Mem_Read+0x1d0>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d130      	bne.n	8004ac8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	9300      	str	r3, [sp, #0]
 8004a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	2180      	movs	r1, #128	; 0x80
 8004a70:	68f8      	ldr	r0, [r7, #12]
 8004a72:	f000 f927 	bl	8004cc4 <I2C_WaitOnFlagUntilTimeout>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d001      	beq.n	8004a80 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e04d      	b.n	8004b1c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	2bff      	cmp	r3, #255	; 0xff
 8004a88:	d90e      	bls.n	8004aa8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	22ff      	movs	r2, #255	; 0xff
 8004a8e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a94:	b2da      	uxtb	r2, r3
 8004a96:	8979      	ldrh	r1, [r7, #10]
 8004a98:	2300      	movs	r3, #0
 8004a9a:	9300      	str	r3, [sp, #0]
 8004a9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004aa0:	68f8      	ldr	r0, [r7, #12]
 8004aa2:	f000 fa41 	bl	8004f28 <I2C_TransferConfig>
 8004aa6:	e00f      	b.n	8004ac8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aac:	b29a      	uxth	r2, r3
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ab6:	b2da      	uxtb	r2, r3
 8004ab8:	8979      	ldrh	r1, [r7, #10]
 8004aba:	2300      	movs	r3, #0
 8004abc:	9300      	str	r3, [sp, #0]
 8004abe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f000 fa30 	bl	8004f28 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d19a      	bne.n	8004a08 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	f000 f974 	bl	8004dc4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d001      	beq.n	8004ae6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e01a      	b.n	8004b1c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2220      	movs	r2, #32
 8004aec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	6859      	ldr	r1, [r3, #4]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	4b0b      	ldr	r3, [pc, #44]	; (8004b28 <HAL_I2C_Mem_Read+0x230>)
 8004afa:	400b      	ands	r3, r1
 8004afc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2220      	movs	r2, #32
 8004b02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b16:	2300      	movs	r3, #0
 8004b18:	e000      	b.n	8004b1c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004b1a:	2302      	movs	r3, #2
  }
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3718      	adds	r7, #24
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	80002400 	.word	0x80002400
 8004b28:	fe00e800 	.word	0xfe00e800

08004b2c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b086      	sub	sp, #24
 8004b30:	af02      	add	r7, sp, #8
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	4608      	mov	r0, r1
 8004b36:	4611      	mov	r1, r2
 8004b38:	461a      	mov	r2, r3
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	817b      	strh	r3, [r7, #10]
 8004b3e:	460b      	mov	r3, r1
 8004b40:	813b      	strh	r3, [r7, #8]
 8004b42:	4613      	mov	r3, r2
 8004b44:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004b46:	88fb      	ldrh	r3, [r7, #6]
 8004b48:	b2da      	uxtb	r2, r3
 8004b4a:	8979      	ldrh	r1, [r7, #10]
 8004b4c:	4b20      	ldr	r3, [pc, #128]	; (8004bd0 <I2C_RequestMemoryWrite+0xa4>)
 8004b4e:	9300      	str	r3, [sp, #0]
 8004b50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b54:	68f8      	ldr	r0, [r7, #12]
 8004b56:	f000 f9e7 	bl	8004f28 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b5a:	69fa      	ldr	r2, [r7, #28]
 8004b5c:	69b9      	ldr	r1, [r7, #24]
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f000 f8f0 	bl	8004d44 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e02c      	b.n	8004bc8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b6e:	88fb      	ldrh	r3, [r7, #6]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d105      	bne.n	8004b80 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b74:	893b      	ldrh	r3, [r7, #8]
 8004b76:	b2da      	uxtb	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	629a      	str	r2, [r3, #40]	; 0x28
 8004b7e:	e015      	b.n	8004bac <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004b80:	893b      	ldrh	r3, [r7, #8]
 8004b82:	0a1b      	lsrs	r3, r3, #8
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	b2da      	uxtb	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b8e:	69fa      	ldr	r2, [r7, #28]
 8004b90:	69b9      	ldr	r1, [r7, #24]
 8004b92:	68f8      	ldr	r0, [r7, #12]
 8004b94:	f000 f8d6 	bl	8004d44 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d001      	beq.n	8004ba2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e012      	b.n	8004bc8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ba2:	893b      	ldrh	r3, [r7, #8]
 8004ba4:	b2da      	uxtb	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	9300      	str	r3, [sp, #0]
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	2180      	movs	r1, #128	; 0x80
 8004bb6:	68f8      	ldr	r0, [r7, #12]
 8004bb8:	f000 f884 	bl	8004cc4 <I2C_WaitOnFlagUntilTimeout>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d001      	beq.n	8004bc6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e000      	b.n	8004bc8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3710      	adds	r7, #16
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	80002000 	.word	0x80002000

08004bd4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b086      	sub	sp, #24
 8004bd8:	af02      	add	r7, sp, #8
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	4608      	mov	r0, r1
 8004bde:	4611      	mov	r1, r2
 8004be0:	461a      	mov	r2, r3
 8004be2:	4603      	mov	r3, r0
 8004be4:	817b      	strh	r3, [r7, #10]
 8004be6:	460b      	mov	r3, r1
 8004be8:	813b      	strh	r3, [r7, #8]
 8004bea:	4613      	mov	r3, r2
 8004bec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004bee:	88fb      	ldrh	r3, [r7, #6]
 8004bf0:	b2da      	uxtb	r2, r3
 8004bf2:	8979      	ldrh	r1, [r7, #10]
 8004bf4:	4b20      	ldr	r3, [pc, #128]	; (8004c78 <I2C_RequestMemoryRead+0xa4>)
 8004bf6:	9300      	str	r3, [sp, #0]
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	f000 f994 	bl	8004f28 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c00:	69fa      	ldr	r2, [r7, #28]
 8004c02:	69b9      	ldr	r1, [r7, #24]
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f000 f89d 	bl	8004d44 <I2C_WaitOnTXISFlagUntilTimeout>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d001      	beq.n	8004c14 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e02c      	b.n	8004c6e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c14:	88fb      	ldrh	r3, [r7, #6]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d105      	bne.n	8004c26 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004c1a:	893b      	ldrh	r3, [r7, #8]
 8004c1c:	b2da      	uxtb	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	629a      	str	r2, [r3, #40]	; 0x28
 8004c24:	e015      	b.n	8004c52 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004c26:	893b      	ldrh	r3, [r7, #8]
 8004c28:	0a1b      	lsrs	r3, r3, #8
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	b2da      	uxtb	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c34:	69fa      	ldr	r2, [r7, #28]
 8004c36:	69b9      	ldr	r1, [r7, #24]
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f000 f883 	bl	8004d44 <I2C_WaitOnTXISFlagUntilTimeout>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d001      	beq.n	8004c48 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e012      	b.n	8004c6e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004c48:	893b      	ldrh	r3, [r7, #8]
 8004c4a:	b2da      	uxtb	r2, r3
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	9300      	str	r3, [sp, #0]
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	2140      	movs	r1, #64	; 0x40
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	f000 f831 	bl	8004cc4 <I2C_WaitOnFlagUntilTimeout>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d001      	beq.n	8004c6c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e000      	b.n	8004c6e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3710      	adds	r7, #16
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	80002000 	.word	0x80002000

08004c7c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	f003 0302 	and.w	r3, r3, #2
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d103      	bne.n	8004c9a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2200      	movs	r2, #0
 8004c98:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d007      	beq.n	8004cb8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	699a      	ldr	r2, [r3, #24]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f042 0201 	orr.w	r2, r2, #1
 8004cb6:	619a      	str	r2, [r3, #24]
  }
}
 8004cb8:	bf00      	nop
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	603b      	str	r3, [r7, #0]
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cd4:	e022      	b.n	8004d1c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cdc:	d01e      	beq.n	8004d1c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cde:	f7fd fef9 	bl	8002ad4 <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	683a      	ldr	r2, [r7, #0]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d302      	bcc.n	8004cf4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d113      	bne.n	8004d1c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cf8:	f043 0220 	orr.w	r2, r3, #32
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2220      	movs	r2, #32
 8004d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e00f      	b.n	8004d3c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	699a      	ldr	r2, [r3, #24]
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	4013      	ands	r3, r2
 8004d26:	68ba      	ldr	r2, [r7, #8]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	bf0c      	ite	eq
 8004d2c:	2301      	moveq	r3, #1
 8004d2e:	2300      	movne	r3, #0
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	461a      	mov	r2, r3
 8004d34:	79fb      	ldrb	r3, [r7, #7]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d0cd      	beq.n	8004cd6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3710      	adds	r7, #16
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d50:	e02c      	b.n	8004dac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	68b9      	ldr	r1, [r7, #8]
 8004d56:	68f8      	ldr	r0, [r7, #12]
 8004d58:	f000 f870 	bl	8004e3c <I2C_IsAcknowledgeFailed>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d001      	beq.n	8004d66 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e02a      	b.n	8004dbc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d6c:	d01e      	beq.n	8004dac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d6e:	f7fd feb1 	bl	8002ad4 <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	68ba      	ldr	r2, [r7, #8]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d302      	bcc.n	8004d84 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d113      	bne.n	8004dac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d88:	f043 0220 	orr.w	r2, r3, #32
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2220      	movs	r2, #32
 8004d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e007      	b.n	8004dbc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	f003 0302 	and.w	r3, r3, #2
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d1cb      	bne.n	8004d52 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3710      	adds	r7, #16
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004dd0:	e028      	b.n	8004e24 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	68b9      	ldr	r1, [r7, #8]
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f000 f830 	bl	8004e3c <I2C_IsAcknowledgeFailed>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d001      	beq.n	8004de6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e026      	b.n	8004e34 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004de6:	f7fd fe75 	bl	8002ad4 <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	68ba      	ldr	r2, [r7, #8]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d302      	bcc.n	8004dfc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d113      	bne.n	8004e24 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e00:	f043 0220 	orr.w	r2, r3, #32
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2220      	movs	r2, #32
 8004e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e007      	b.n	8004e34 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	f003 0320 	and.w	r3, r3, #32
 8004e2e:	2b20      	cmp	r3, #32
 8004e30:	d1cf      	bne.n	8004dd2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3710      	adds	r7, #16
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	f003 0310 	and.w	r3, r3, #16
 8004e52:	2b10      	cmp	r3, #16
 8004e54:	d161      	bne.n	8004f1a <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e64:	d02b      	beq.n	8004ebe <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	685a      	ldr	r2, [r3, #4]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e74:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e76:	e022      	b.n	8004ebe <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e7e:	d01e      	beq.n	8004ebe <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e80:	f7fd fe28 	bl	8002ad4 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	68ba      	ldr	r2, [r7, #8]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d302      	bcc.n	8004e96 <I2C_IsAcknowledgeFailed+0x5a>
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d113      	bne.n	8004ebe <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e9a:	f043 0220 	orr.w	r2, r3, #32
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2220      	movs	r2, #32
 8004ea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e02e      	b.n	8004f1c <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	699b      	ldr	r3, [r3, #24]
 8004ec4:	f003 0320 	and.w	r3, r3, #32
 8004ec8:	2b20      	cmp	r3, #32
 8004eca:	d1d5      	bne.n	8004e78 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2210      	movs	r2, #16
 8004ed2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2220      	movs	r2, #32
 8004eda:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004edc:	68f8      	ldr	r0, [r7, #12]
 8004ede:	f7ff fecd 	bl	8004c7c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	6859      	ldr	r1, [r3, #4]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	4b0d      	ldr	r3, [pc, #52]	; (8004f24 <I2C_IsAcknowledgeFailed+0xe8>)
 8004eee:	400b      	ands	r3, r1
 8004ef0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ef6:	f043 0204 	orr.w	r2, r3, #4
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2220      	movs	r2, #32
 8004f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e000      	b.n	8004f1c <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	fe00e800 	.word	0xfe00e800

08004f28 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	607b      	str	r3, [r7, #4]
 8004f32:	460b      	mov	r3, r1
 8004f34:	817b      	strh	r3, [r7, #10]
 8004f36:	4613      	mov	r3, r2
 8004f38:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	685a      	ldr	r2, [r3, #4]
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	0d5b      	lsrs	r3, r3, #21
 8004f44:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004f48:	4b0d      	ldr	r3, [pc, #52]	; (8004f80 <I2C_TransferConfig+0x58>)
 8004f4a:	430b      	orrs	r3, r1
 8004f4c:	43db      	mvns	r3, r3
 8004f4e:	ea02 0103 	and.w	r1, r2, r3
 8004f52:	897b      	ldrh	r3, [r7, #10]
 8004f54:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004f58:	7a7b      	ldrb	r3, [r7, #9]
 8004f5a:	041b      	lsls	r3, r3, #16
 8004f5c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004f60:	431a      	orrs	r2, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	431a      	orrs	r2, r3
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	431a      	orrs	r2, r3
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8004f72:	bf00      	nop
 8004f74:	3714      	adds	r7, #20
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	03ff63ff 	.word	0x03ff63ff

08004f84 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b20      	cmp	r3, #32
 8004f98:	d138      	bne.n	800500c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d101      	bne.n	8004fa8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004fa4:	2302      	movs	r3, #2
 8004fa6:	e032      	b.n	800500e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2224      	movs	r2, #36	; 0x24
 8004fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f022 0201 	bic.w	r2, r2, #1
 8004fc6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004fd6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6819      	ldr	r1, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	683a      	ldr	r2, [r7, #0]
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f042 0201 	orr.w	r2, r2, #1
 8004ff6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2220      	movs	r2, #32
 8004ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005008:	2300      	movs	r3, #0
 800500a:	e000      	b.n	800500e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800500c:	2302      	movs	r3, #2
  }
}
 800500e:	4618      	mov	r0, r3
 8005010:	370c      	adds	r7, #12
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr

0800501a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800501a:	b480      	push	{r7}
 800501c:	b085      	sub	sp, #20
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
 8005022:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800502a:	b2db      	uxtb	r3, r3
 800502c:	2b20      	cmp	r3, #32
 800502e:	d139      	bne.n	80050a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005036:	2b01      	cmp	r3, #1
 8005038:	d101      	bne.n	800503e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800503a:	2302      	movs	r3, #2
 800503c:	e033      	b.n	80050a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2224      	movs	r2, #36	; 0x24
 800504a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f022 0201 	bic.w	r2, r2, #1
 800505c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800506c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	021b      	lsls	r3, r3, #8
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	4313      	orrs	r3, r2
 8005076:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f042 0201 	orr.w	r2, r2, #1
 800508e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2220      	movs	r2, #32
 8005094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80050a0:	2300      	movs	r3, #0
 80050a2:	e000      	b.n	80050a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80050a4:	2302      	movs	r3, #2
  }
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3714      	adds	r7, #20
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
	...

080050b4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80050b4:	b480      	push	{r7}
 80050b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050b8:	4b05      	ldr	r3, [pc, #20]	; (80050d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a04      	ldr	r2, [pc, #16]	; (80050d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80050be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050c2:	6013      	str	r3, [r2, #0]
}
 80050c4:	bf00      	nop
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	58000400 	.word	0x58000400

080050d4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80050d4:	b480      	push	{r7}
 80050d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80050d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050e6:	d101      	bne.n	80050ec <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80050e8:	2301      	movs	r3, #1
 80050ea:	e000      	b.n	80050ee <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <LL_RCC_HSE_Enable>:
{
 80050f8:	b480      	push	{r7}
 80050fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80050fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005106:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800510a:	6013      	str	r3, [r2, #0]
}
 800510c:	bf00      	nop
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr

08005116 <LL_RCC_HSE_Disable>:
{
 8005116:	b480      	push	{r7}
 8005118:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800511a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005124:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005128:	6013      	str	r3, [r2, #0]
}
 800512a:	bf00      	nop
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <LL_RCC_HSE_IsReady>:
{
 8005134:	b480      	push	{r7}
 8005136:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005142:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005146:	d101      	bne.n	800514c <LL_RCC_HSE_IsReady+0x18>
 8005148:	2301      	movs	r3, #1
 800514a:	e000      	b.n	800514e <LL_RCC_HSE_IsReady+0x1a>
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <LL_RCC_HSI_Enable>:
{
 8005158:	b480      	push	{r7}
 800515a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800515c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800516a:	6013      	str	r3, [r2, #0]
}
 800516c:	bf00      	nop
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr

08005176 <LL_RCC_HSI_Disable>:
{
 8005176:	b480      	push	{r7}
 8005178:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800517a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005184:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005188:	6013      	str	r3, [r2, #0]
}
 800518a:	bf00      	nop
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <LL_RCC_HSI_IsReady>:
{
 8005194:	b480      	push	{r7}
 8005196:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005198:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051a6:	d101      	bne.n	80051ac <LL_RCC_HSI_IsReady+0x18>
 80051a8:	2301      	movs	r3, #1
 80051aa:	e000      	b.n	80051ae <LL_RCC_HSI_IsReady+0x1a>
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <LL_RCC_HSI_SetCalibTrimming>:
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80051c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	061b      	lsls	r3, r3, #24
 80051ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051d2:	4313      	orrs	r3, r2
 80051d4:	604b      	str	r3, [r1, #4]
}
 80051d6:	bf00      	nop
 80051d8:	370c      	adds	r7, #12
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr

080051e2 <LL_RCC_LSE_Enable>:
{
 80051e2:	b480      	push	{r7}
 80051e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80051e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051f2:	f043 0301 	orr.w	r3, r3, #1
 80051f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80051fa:	bf00      	nop
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <LL_RCC_LSE_Disable>:
{
 8005204:	b480      	push	{r7}
 8005206:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800520c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005210:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005214:	f023 0301 	bic.w	r3, r3, #1
 8005218:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800521c:	bf00      	nop
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr

08005226 <LL_RCC_LSE_EnableBypass>:
{
 8005226:	b480      	push	{r7}
 8005228:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800522a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800522e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005232:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005236:	f043 0304 	orr.w	r3, r3, #4
 800523a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800523e:	bf00      	nop
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <LL_RCC_LSE_DisableBypass>:
{
 8005248:	b480      	push	{r7}
 800524a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800524c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005254:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005258:	f023 0304 	bic.w	r3, r3, #4
 800525c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005260:	bf00      	nop
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr

0800526a <LL_RCC_LSE_IsReady>:
{
 800526a:	b480      	push	{r7}
 800526c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800526e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005276:	f003 0302 	and.w	r3, r3, #2
 800527a:	2b02      	cmp	r3, #2
 800527c:	d101      	bne.n	8005282 <LL_RCC_LSE_IsReady+0x18>
 800527e:	2301      	movs	r3, #1
 8005280:	e000      	b.n	8005284 <LL_RCC_LSE_IsReady+0x1a>
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr

0800528e <LL_RCC_LSI1_Enable>:
{
 800528e:	b480      	push	{r7}
 8005290:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005292:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005296:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800529a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800529e:	f043 0301 	orr.w	r3, r3, #1
 80052a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80052a6:	bf00      	nop
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <LL_RCC_LSI1_Disable>:
{
 80052b0:	b480      	push	{r7}
 80052b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80052b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052c0:	f023 0301 	bic.w	r3, r3, #1
 80052c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80052c8:	bf00      	nop
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr

080052d2 <LL_RCC_LSI1_IsReady>:
{
 80052d2:	b480      	push	{r7}
 80052d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80052d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052de:	f003 0302 	and.w	r3, r3, #2
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d101      	bne.n	80052ea <LL_RCC_LSI1_IsReady+0x18>
 80052e6:	2301      	movs	r3, #1
 80052e8:	e000      	b.n	80052ec <LL_RCC_LSI1_IsReady+0x1a>
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr

080052f6 <LL_RCC_LSI2_Enable>:
{
 80052f6:	b480      	push	{r7}
 80052f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80052fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005302:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005306:	f043 0304 	orr.w	r3, r3, #4
 800530a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800530e:	bf00      	nop
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <LL_RCC_LSI2_Disable>:
{
 8005318:	b480      	push	{r7}
 800531a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800531c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005320:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005324:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005328:	f023 0304 	bic.w	r3, r3, #4
 800532c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005330:	bf00      	nop
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr

0800533a <LL_RCC_LSI2_IsReady>:
{
 800533a:	b480      	push	{r7}
 800533c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800533e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005342:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005346:	f003 0308 	and.w	r3, r3, #8
 800534a:	2b08      	cmp	r3, #8
 800534c:	d101      	bne.n	8005352 <LL_RCC_LSI2_IsReady+0x18>
 800534e:	2301      	movs	r3, #1
 8005350:	e000      	b.n	8005354 <LL_RCC_LSI2_IsReady+0x1a>
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr

0800535e <LL_RCC_LSI2_SetTrimming>:
{
 800535e:	b480      	push	{r7}
 8005360:	b083      	sub	sp, #12
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8005366:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800536a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800536e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	021b      	lsls	r3, r3, #8
 8005376:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800537a:	4313      	orrs	r3, r2
 800537c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005380:	bf00      	nop
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <LL_RCC_MSI_Enable>:
{
 800538c:	b480      	push	{r7}
 800538e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005390:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800539a:	f043 0301 	orr.w	r3, r3, #1
 800539e:	6013      	str	r3, [r2, #0]
}
 80053a0:	bf00      	nop
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr

080053aa <LL_RCC_MSI_Disable>:
{
 80053aa:	b480      	push	{r7}
 80053ac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80053ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053b8:	f023 0301 	bic.w	r3, r3, #1
 80053bc:	6013      	str	r3, [r2, #0]
}
 80053be:	bf00      	nop
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <LL_RCC_MSI_IsReady>:
{
 80053c8:	b480      	push	{r7}
 80053ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80053cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0302 	and.w	r3, r3, #2
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d101      	bne.n	80053de <LL_RCC_MSI_IsReady+0x16>
 80053da:	2301      	movs	r3, #1
 80053dc:	e000      	b.n	80053e0 <LL_RCC_MSI_IsReady+0x18>
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr

080053ea <LL_RCC_MSI_SetRange>:
{
 80053ea:	b480      	push	{r7}
 80053ec:	b083      	sub	sp, #12
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80053f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4313      	orrs	r3, r2
 8005404:	600b      	str	r3, [r1, #0]
}
 8005406:	bf00      	nop
 8005408:	370c      	adds	r7, #12
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr

08005412 <LL_RCC_MSI_GetRange>:
{
 8005412:	b480      	push	{r7}
 8005414:	b083      	sub	sp, #12
 8005416:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005418:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005422:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2bb0      	cmp	r3, #176	; 0xb0
 8005428:	d901      	bls.n	800542e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800542a:	23b0      	movs	r3, #176	; 0xb0
 800542c:	607b      	str	r3, [r7, #4]
  return msiRange;
 800542e:	687b      	ldr	r3, [r7, #4]
}
 8005430:	4618      	mov	r0, r3
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <LL_RCC_MSI_SetCalibTrimming>:
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005444:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	021b      	lsls	r3, r3, #8
 8005452:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005456:	4313      	orrs	r3, r2
 8005458:	604b      	str	r3, [r1, #4]
}
 800545a:	bf00      	nop
 800545c:	370c      	adds	r7, #12
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr

08005466 <LL_RCC_SetSysClkSource>:
{
 8005466:	b480      	push	{r7}
 8005468:	b083      	sub	sp, #12
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800546e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	f023 0203 	bic.w	r2, r3, #3
 8005478:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4313      	orrs	r3, r2
 8005480:	608b      	str	r3, [r1, #8]
}
 8005482:	bf00      	nop
 8005484:	370c      	adds	r7, #12
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr

0800548e <LL_RCC_GetSysClkSource>:
{
 800548e:	b480      	push	{r7}
 8005490:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005492:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	f003 030c 	and.w	r3, r3, #12
}
 800549c:	4618      	mov	r0, r3
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr

080054a6 <LL_RCC_SetAHBPrescaler>:
{
 80054a6:	b480      	push	{r7}
 80054a8:	b083      	sub	sp, #12
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80054ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4313      	orrs	r3, r2
 80054c0:	608b      	str	r3, [r1, #8]
}
 80054c2:	bf00      	nop
 80054c4:	370c      	adds	r7, #12
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr

080054ce <LL_C2_RCC_SetAHBPrescaler>:
{
 80054ce:	b480      	push	{r7}
 80054d0:	b083      	sub	sp, #12
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80054d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054da:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80054de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80054ee:	bf00      	nop
 80054f0:	370c      	adds	r7, #12
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr

080054fa <LL_RCC_SetAHB4Prescaler>:
{
 80054fa:	b480      	push	{r7}
 80054fc:	b083      	sub	sp, #12
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005506:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800550a:	f023 020f 	bic.w	r2, r3, #15
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	091b      	lsrs	r3, r3, #4
 8005512:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005516:	4313      	orrs	r3, r2
 8005518:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <LL_RCC_SetAPB1Prescaler>:
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005530:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800553a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4313      	orrs	r3, r2
 8005542:	608b      	str	r3, [r1, #8]
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <LL_RCC_SetAPB2Prescaler>:
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005562:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4313      	orrs	r3, r2
 800556a:	608b      	str	r3, [r1, #8]
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <LL_RCC_GetAHBPrescaler>:
{
 8005578:	b480      	push	{r7}
 800557a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800557c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005586:	4618      	mov	r0, r3
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <LL_C2_RCC_GetAHBPrescaler>:
{
 8005590:	b480      	push	{r7}
 8005592:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8005594:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005598:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800559c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <LL_RCC_GetAHB4Prescaler>:
{
 80055aa:	b480      	push	{r7}
 80055ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80055ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055b2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80055b6:	011b      	lsls	r3, r3, #4
 80055b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr

080055c6 <LL_RCC_GetAPB1Prescaler>:
{
 80055c6:	b480      	push	{r7}
 80055c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80055ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr

080055de <LL_RCC_GetAPB2Prescaler>:
{
 80055de:	b480      	push	{r7}
 80055e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80055e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr

080055f6 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80055f6:	b480      	push	{r7}
 80055f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80055fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005604:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005608:	6013      	str	r3, [r2, #0]
}
 800560a:	bf00      	nop
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005614:	b480      	push	{r7}
 8005616:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005618:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005622:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005626:	6013      	str	r3, [r2, #0]
}
 8005628:	bf00      	nop
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr

08005632 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005632:	b480      	push	{r7}
 8005634:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005636:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005640:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005644:	d101      	bne.n	800564a <LL_RCC_PLL_IsReady+0x18>
 8005646:	2301      	movs	r3, #1
 8005648:	e000      	b.n	800564c <LL_RCC_PLL_IsReady+0x1a>
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr

08005656 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005656:	b480      	push	{r7}
 8005658:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800565a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	0a1b      	lsrs	r3, r3, #8
 8005662:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005666:	4618      	mov	r0, r3
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005670:	b480      	push	{r7}
 8005672:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005674:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800567e:	4618      	mov	r0, r3
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005688:	b480      	push	{r7}
 800568a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800568c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005696:	4618      	mov	r0, r3
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80056a0:	b480      	push	{r7}
 80056a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80056a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	f003 0303 	and.w	r3, r3, #3
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80056b8:	b480      	push	{r7}
 80056ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80056bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056ca:	d101      	bne.n	80056d0 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80056cc:	2301      	movs	r3, #1
 80056ce:	e000      	b.n	80056d2 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80056dc:	b480      	push	{r7}
 80056de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80056e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056e4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80056e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056f0:	d101      	bne.n	80056f6 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80056f2:	2301      	movs	r3, #1
 80056f4:	e000      	b.n	80056f8 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr

08005702 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005702:	b480      	push	{r7}
 8005704:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005706:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800570a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800570e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005712:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005716:	d101      	bne.n	800571c <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005718:	2301      	movs	r3, #1
 800571a:	e000      	b.n	800571e <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005728:	b480      	push	{r7}
 800572a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800572c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005736:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800573a:	d101      	bne.n	8005740 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800573c:	2301      	movs	r3, #1
 800573e:	e000      	b.n	8005742 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800574c:	b480      	push	{r7}
 800574e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005750:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800575a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800575e:	d101      	bne.n	8005764 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005760:	2301      	movs	r3, #1
 8005762:	e000      	b.n	8005766 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005770:	b590      	push	{r4, r7, lr}
 8005772:	b08d      	sub	sp, #52	; 0x34
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d101      	bne.n	8005782 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e33b      	b.n	8005dfa <HAL_RCC_OscConfig+0x68a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0320 	and.w	r3, r3, #32
 800578a:	2b00      	cmp	r3, #0
 800578c:	f000 8092 	beq.w	80058b4 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005790:	f7ff fe7d 	bl	800548e <LL_RCC_GetSysClkSource>
 8005794:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005796:	f7ff ff83 	bl	80056a0 <LL_RCC_PLL_GetMainSource>
 800579a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800579c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d005      	beq.n	80057ae <HAL_RCC_OscConfig+0x3e>
 80057a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a4:	2b0c      	cmp	r3, #12
 80057a6:	d14c      	bne.n	8005842 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80057a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d149      	bne.n	8005842 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80057ae:	f7ff fe0b 	bl	80053c8 <LL_RCC_MSI_IsReady>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d005      	beq.n	80057c4 <HAL_RCC_OscConfig+0x54>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	69db      	ldr	r3, [r3, #28]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d101      	bne.n	80057c4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e31a      	b.n	8005dfa <HAL_RCC_OscConfig+0x68a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80057c8:	f7ff fe23 	bl	8005412 <LL_RCC_MSI_GetRange>
 80057cc:	4603      	mov	r3, r0
 80057ce:	429c      	cmp	r4, r3
 80057d0:	d914      	bls.n	80057fc <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d6:	4618      	mov	r0, r3
 80057d8:	f000 fd38 	bl	800624c <RCC_SetFlashLatencyFromMSIRange>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d001      	beq.n	80057e6 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e309      	b.n	8005dfa <HAL_RCC_OscConfig+0x68a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7ff fdfd 	bl	80053ea <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a1b      	ldr	r3, [r3, #32]
 80057f4:	4618      	mov	r0, r3
 80057f6:	f7ff fe21 	bl	800543c <LL_RCC_MSI_SetCalibTrimming>
 80057fa:	e013      	b.n	8005824 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005800:	4618      	mov	r0, r3
 8005802:	f7ff fdf2 	bl	80053ea <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a1b      	ldr	r3, [r3, #32]
 800580a:	4618      	mov	r0, r3
 800580c:	f7ff fe16 	bl	800543c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005814:	4618      	mov	r0, r3
 8005816:	f000 fd19 	bl	800624c <RCC_SetFlashLatencyFromMSIRange>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d001      	beq.n	8005824 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e2ea      	b.n	8005dfa <HAL_RCC_OscConfig+0x68a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005824:	f000 fca0 	bl	8006168 <HAL_RCC_GetHCLKFreq>
 8005828:	4603      	mov	r3, r0
 800582a:	4ab3      	ldr	r2, [pc, #716]	; (8005af8 <HAL_RCC_OscConfig+0x388>)
 800582c:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800582e:	4bb3      	ldr	r3, [pc, #716]	; (8005afc <HAL_RCC_OscConfig+0x38c>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4618      	mov	r0, r3
 8005834:	f7fc ff2e 	bl	8002694 <HAL_InitTick>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d039      	beq.n	80058b2 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e2db      	b.n	8005dfa <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	69db      	ldr	r3, [r3, #28]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d01e      	beq.n	8005888 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800584a:	f7ff fd9f 	bl	800538c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800584e:	f7fd f941 	bl	8002ad4 <HAL_GetTick>
 8005852:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005854:	e008      	b.n	8005868 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005856:	f7fd f93d 	bl	8002ad4 <HAL_GetTick>
 800585a:	4602      	mov	r2, r0
 800585c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585e:	1ad3      	subs	r3, r2, r3
 8005860:	2b02      	cmp	r3, #2
 8005862:	d901      	bls.n	8005868 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8005864:	2303      	movs	r3, #3
 8005866:	e2c8      	b.n	8005dfa <HAL_RCC_OscConfig+0x68a>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005868:	f7ff fdae 	bl	80053c8 <LL_RCC_MSI_IsReady>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d0f1      	beq.n	8005856 <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005876:	4618      	mov	r0, r3
 8005878:	f7ff fdb7 	bl	80053ea <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a1b      	ldr	r3, [r3, #32]
 8005880:	4618      	mov	r0, r3
 8005882:	f7ff fddb 	bl	800543c <LL_RCC_MSI_SetCalibTrimming>
 8005886:	e015      	b.n	80058b4 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005888:	f7ff fd8f 	bl	80053aa <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800588c:	f7fd f922 	bl	8002ad4 <HAL_GetTick>
 8005890:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005892:	e008      	b.n	80058a6 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005894:	f7fd f91e 	bl	8002ad4 <HAL_GetTick>
 8005898:	4602      	mov	r2, r0
 800589a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d901      	bls.n	80058a6 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e2a9      	b.n	8005dfa <HAL_RCC_OscConfig+0x68a>
        while (LL_RCC_MSI_IsReady() != 0U)
 80058a6:	f7ff fd8f 	bl	80053c8 <LL_RCC_MSI_IsReady>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d1f1      	bne.n	8005894 <HAL_RCC_OscConfig+0x124>
 80058b0:	e000      	b.n	80058b4 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80058b2:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 0301 	and.w	r3, r3, #1
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d04e      	beq.n	800595e <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058c0:	f7ff fde5 	bl	800548e <LL_RCC_GetSysClkSource>
 80058c4:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80058c6:	f7ff feeb 	bl	80056a0 <LL_RCC_PLL_GetMainSource>
 80058ca:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80058cc:	6a3b      	ldr	r3, [r7, #32]
 80058ce:	2b08      	cmp	r3, #8
 80058d0:	d005      	beq.n	80058de <HAL_RCC_OscConfig+0x16e>
 80058d2:	6a3b      	ldr	r3, [r7, #32]
 80058d4:	2b0c      	cmp	r3, #12
 80058d6:	d10d      	bne.n	80058f4 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	2b03      	cmp	r3, #3
 80058dc:	d10a      	bne.n	80058f4 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058de:	f7ff fc29 	bl	8005134 <LL_RCC_HSE_IsReady>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d039      	beq.n	800595c <HAL_RCC_OscConfig+0x1ec>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d135      	bne.n	800595c <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e282      	b.n	8005dfa <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058fc:	d102      	bne.n	8005904 <HAL_RCC_OscConfig+0x194>
 80058fe:	f7ff fbfb 	bl	80050f8 <LL_RCC_HSE_Enable>
 8005902:	e001      	b.n	8005908 <HAL_RCC_OscConfig+0x198>
 8005904:	f7ff fc07 	bl	8005116 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d012      	beq.n	8005936 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005910:	f7fd f8e0 	bl	8002ad4 <HAL_GetTick>
 8005914:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005916:	e008      	b.n	800592a <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005918:	f7fd f8dc 	bl	8002ad4 <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	2b64      	cmp	r3, #100	; 0x64
 8005924:	d901      	bls.n	800592a <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e267      	b.n	8005dfa <HAL_RCC_OscConfig+0x68a>
        while (LL_RCC_HSE_IsReady() == 0U)
 800592a:	f7ff fc03 	bl	8005134 <LL_RCC_HSE_IsReady>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d0f1      	beq.n	8005918 <HAL_RCC_OscConfig+0x1a8>
 8005934:	e013      	b.n	800595e <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005936:	f7fd f8cd 	bl	8002ad4 <HAL_GetTick>
 800593a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800593c:	e008      	b.n	8005950 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800593e:	f7fd f8c9 	bl	8002ad4 <HAL_GetTick>
 8005942:	4602      	mov	r2, r0
 8005944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	2b64      	cmp	r3, #100	; 0x64
 800594a:	d901      	bls.n	8005950 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800594c:	2303      	movs	r3, #3
 800594e:	e254      	b.n	8005dfa <HAL_RCC_OscConfig+0x68a>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005950:	f7ff fbf0 	bl	8005134 <LL_RCC_HSE_IsReady>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1f1      	bne.n	800593e <HAL_RCC_OscConfig+0x1ce>
 800595a:	e000      	b.n	800595e <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800595c:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 0302 	and.w	r3, r3, #2
 8005966:	2b00      	cmp	r3, #0
 8005968:	d051      	beq.n	8005a0e <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800596a:	f7ff fd90 	bl	800548e <LL_RCC_GetSysClkSource>
 800596e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005970:	f7ff fe96 	bl	80056a0 <LL_RCC_PLL_GetMainSource>
 8005974:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	2b04      	cmp	r3, #4
 800597a:	d005      	beq.n	8005988 <HAL_RCC_OscConfig+0x218>
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	2b0c      	cmp	r3, #12
 8005980:	d113      	bne.n	80059aa <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	2b02      	cmp	r3, #2
 8005986:	d110      	bne.n	80059aa <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005988:	f7ff fc04 	bl	8005194 <LL_RCC_HSI_IsReady>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d005      	beq.n	800599e <HAL_RCC_OscConfig+0x22e>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d101      	bne.n	800599e <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e22d      	b.n	8005dfa <HAL_RCC_OscConfig+0x68a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	4618      	mov	r0, r3
 80059a4:	f7ff fc08 	bl	80051b8 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059a8:	e031      	b.n	8005a0e <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d019      	beq.n	80059e6 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059b2:	f7ff fbd1 	bl	8005158 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059b6:	f7fd f88d 	bl	8002ad4 <HAL_GetTick>
 80059ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80059bc:	e008      	b.n	80059d0 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059be:	f7fd f889 	bl	8002ad4 <HAL_GetTick>
 80059c2:	4602      	mov	r2, r0
 80059c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d901      	bls.n	80059d0 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e214      	b.n	8005dfa <HAL_RCC_OscConfig+0x68a>
        while (LL_RCC_HSI_IsReady() == 0U)
 80059d0:	f7ff fbe0 	bl	8005194 <LL_RCC_HSI_IsReady>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d0f1      	beq.n	80059be <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	4618      	mov	r0, r3
 80059e0:	f7ff fbea 	bl	80051b8 <LL_RCC_HSI_SetCalibTrimming>
 80059e4:	e013      	b.n	8005a0e <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059e6:	f7ff fbc6 	bl	8005176 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ea:	f7fd f873 	bl	8002ad4 <HAL_GetTick>
 80059ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80059f0:	e008      	b.n	8005a04 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059f2:	f7fd f86f 	bl	8002ad4 <HAL_GetTick>
 80059f6:	4602      	mov	r2, r0
 80059f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d901      	bls.n	8005a04 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8005a00:	2303      	movs	r3, #3
 8005a02:	e1fa      	b.n	8005dfa <HAL_RCC_OscConfig+0x68a>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005a04:	f7ff fbc6 	bl	8005194 <LL_RCC_HSI_IsReady>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1f1      	bne.n	80059f2 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0308 	and.w	r3, r3, #8
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d106      	bne.n	8005a28 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	f000 80a3 	beq.w	8005b6e <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	695b      	ldr	r3, [r3, #20]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d076      	beq.n	8005b1e <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 0310 	and.w	r3, r3, #16
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d046      	beq.n	8005aca <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8005a3c:	f7ff fc49 	bl	80052d2 <LL_RCC_LSI1_IsReady>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d113      	bne.n	8005a6e <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8005a46:	f7ff fc22 	bl	800528e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005a4a:	f7fd f843 	bl	8002ad4 <HAL_GetTick>
 8005a4e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005a50:	e008      	b.n	8005a64 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005a52:	f7fd f83f 	bl	8002ad4 <HAL_GetTick>
 8005a56:	4602      	mov	r2, r0
 8005a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5a:	1ad3      	subs	r3, r2, r3
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d901      	bls.n	8005a64 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8005a60:	2303      	movs	r3, #3
 8005a62:	e1ca      	b.n	8005dfa <HAL_RCC_OscConfig+0x68a>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005a64:	f7ff fc35 	bl	80052d2 <LL_RCC_LSI1_IsReady>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d0f1      	beq.n	8005a52 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8005a6e:	f7ff fc42 	bl	80052f6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a72:	f7fd f82f 	bl	8002ad4 <HAL_GetTick>
 8005a76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005a78:	e008      	b.n	8005a8c <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005a7a:	f7fd f82b 	bl	8002ad4 <HAL_GetTick>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	2b03      	cmp	r3, #3
 8005a86:	d901      	bls.n	8005a8c <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e1b6      	b.n	8005dfa <HAL_RCC_OscConfig+0x68a>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005a8c:	f7ff fc55 	bl	800533a <LL_RCC_LSI2_IsReady>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d0f1      	beq.n	8005a7a <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7ff fc5f 	bl	800535e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8005aa0:	f7ff fc06 	bl	80052b0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aa4:	f7fd f816 	bl	8002ad4 <HAL_GetTick>
 8005aa8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005aaa:	e008      	b.n	8005abe <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005aac:	f7fd f812 	bl	8002ad4 <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d901      	bls.n	8005abe <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e19d      	b.n	8005dfa <HAL_RCC_OscConfig+0x68a>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005abe:	f7ff fc08 	bl	80052d2 <LL_RCC_LSI1_IsReady>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d1f1      	bne.n	8005aac <HAL_RCC_OscConfig+0x33c>
 8005ac8:	e051      	b.n	8005b6e <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8005aca:	f7ff fbe0 	bl	800528e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ace:	f7fd f801 	bl	8002ad4 <HAL_GetTick>
 8005ad2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005ad4:	e008      	b.n	8005ae8 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005ad6:	f7fc fffd 	bl	8002ad4 <HAL_GetTick>
 8005ada:	4602      	mov	r2, r0
 8005adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	d901      	bls.n	8005ae8 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	e188      	b.n	8005dfa <HAL_RCC_OscConfig+0x68a>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005ae8:	f7ff fbf3 	bl	80052d2 <LL_RCC_LSI1_IsReady>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d0f1      	beq.n	8005ad6 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8005af2:	f7ff fc11 	bl	8005318 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005af6:	e00c      	b.n	8005b12 <HAL_RCC_OscConfig+0x3a2>
 8005af8:	20000004 	.word	0x20000004
 8005afc:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005b00:	f7fc ffe8 	bl	8002ad4 <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	2b03      	cmp	r3, #3
 8005b0c:	d901      	bls.n	8005b12 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e173      	b.n	8005dfa <HAL_RCC_OscConfig+0x68a>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005b12:	f7ff fc12 	bl	800533a <LL_RCC_LSI2_IsReady>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d1f1      	bne.n	8005b00 <HAL_RCC_OscConfig+0x390>
 8005b1c:	e027      	b.n	8005b6e <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8005b1e:	f7ff fbfb 	bl	8005318 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b22:	f7fc ffd7 	bl	8002ad4 <HAL_GetTick>
 8005b26:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005b28:	e008      	b.n	8005b3c <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005b2a:	f7fc ffd3 	bl	8002ad4 <HAL_GetTick>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	2b03      	cmp	r3, #3
 8005b36:	d901      	bls.n	8005b3c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e15e      	b.n	8005dfa <HAL_RCC_OscConfig+0x68a>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005b3c:	f7ff fbfd 	bl	800533a <LL_RCC_LSI2_IsReady>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d1f1      	bne.n	8005b2a <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8005b46:	f7ff fbb3 	bl	80052b0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b4a:	f7fc ffc3 	bl	8002ad4 <HAL_GetTick>
 8005b4e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005b50:	e008      	b.n	8005b64 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005b52:	f7fc ffbf 	bl	8002ad4 <HAL_GetTick>
 8005b56:	4602      	mov	r2, r0
 8005b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	2b02      	cmp	r3, #2
 8005b5e:	d901      	bls.n	8005b64 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8005b60:	2303      	movs	r3, #3
 8005b62:	e14a      	b.n	8005dfa <HAL_RCC_OscConfig+0x68a>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005b64:	f7ff fbb5 	bl	80052d2 <LL_RCC_LSI1_IsReady>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1f1      	bne.n	8005b52 <HAL_RCC_OscConfig+0x3e2>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 0304 	and.w	r3, r3, #4
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d05b      	beq.n	8005c32 <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b7a:	4ba2      	ldr	r3, [pc, #648]	; (8005e04 <HAL_RCC_OscConfig+0x694>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d114      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005b86:	f7ff fa95 	bl	80050b4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b8a:	f7fc ffa3 	bl	8002ad4 <HAL_GetTick>
 8005b8e:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b90:	e008      	b.n	8005ba4 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b92:	f7fc ff9f 	bl	8002ad4 <HAL_GetTick>
 8005b96:	4602      	mov	r2, r0
 8005b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9a:	1ad3      	subs	r3, r2, r3
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d901      	bls.n	8005ba4 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	e12a      	b.n	8005dfa <HAL_RCC_OscConfig+0x68a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ba4:	4b97      	ldr	r3, [pc, #604]	; (8005e04 <HAL_RCC_OscConfig+0x694>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d0f0      	beq.n	8005b92 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d102      	bne.n	8005bbe <HAL_RCC_OscConfig+0x44e>
 8005bb8:	f7ff fb13 	bl	80051e2 <LL_RCC_LSE_Enable>
 8005bbc:	e00c      	b.n	8005bd8 <HAL_RCC_OscConfig+0x468>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	2b05      	cmp	r3, #5
 8005bc4:	d104      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x460>
 8005bc6:	f7ff fb2e 	bl	8005226 <LL_RCC_LSE_EnableBypass>
 8005bca:	f7ff fb0a 	bl	80051e2 <LL_RCC_LSE_Enable>
 8005bce:	e003      	b.n	8005bd8 <HAL_RCC_OscConfig+0x468>
 8005bd0:	f7ff fb18 	bl	8005204 <LL_RCC_LSE_Disable>
 8005bd4:	f7ff fb38 	bl	8005248 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d014      	beq.n	8005c0a <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005be0:	f7fc ff78 	bl	8002ad4 <HAL_GetTick>
 8005be4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005be6:	e00a      	b.n	8005bfe <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005be8:	f7fc ff74 	bl	8002ad4 <HAL_GetTick>
 8005bec:	4602      	mov	r2, r0
 8005bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d901      	bls.n	8005bfe <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e0fd      	b.n	8005dfa <HAL_RCC_OscConfig+0x68a>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005bfe:	f7ff fb34 	bl	800526a <LL_RCC_LSE_IsReady>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d0ef      	beq.n	8005be8 <HAL_RCC_OscConfig+0x478>
 8005c08:	e013      	b.n	8005c32 <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c0a:	f7fc ff63 	bl	8002ad4 <HAL_GetTick>
 8005c0e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005c10:	e00a      	b.n	8005c28 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c12:	f7fc ff5f 	bl	8002ad4 <HAL_GetTick>
 8005c16:	4602      	mov	r2, r0
 8005c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d901      	bls.n	8005c28 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e0e8      	b.n	8005dfa <HAL_RCC_OscConfig+0x68a>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005c28:	f7ff fb1f 	bl	800526a <LL_RCC_LSE_IsReady>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1ef      	bne.n	8005c12 <HAL_RCC_OscConfig+0x4a2>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	f000 80de 	beq.w	8005df8 <HAL_RCC_OscConfig+0x688>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c3c:	f7ff fc27 	bl	800548e <LL_RCC_GetSysClkSource>
 8005c40:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8005c42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	f040 80a6 	bne.w	8005da0 <HAL_RCC_OscConfig+0x630>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f003 0203 	and.w	r2, r3, #3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d123      	bne.n	8005caa <HAL_RCC_OscConfig+0x53a>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d11c      	bne.n	8005caa <HAL_RCC_OscConfig+0x53a>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	0a1b      	lsrs	r3, r3, #8
 8005c74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d114      	bne.n	8005caa <HAL_RCC_OscConfig+0x53a>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d10d      	bne.n	8005caa <HAL_RCC_OscConfig+0x53a>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d106      	bne.n	8005caa <HAL_RCC_OscConfig+0x53a>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d054      	beq.n	8005d54 <HAL_RCC_OscConfig+0x5e4>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	2b0c      	cmp	r3, #12
 8005cae:	d04f      	beq.n	8005d50 <HAL_RCC_OscConfig+0x5e0>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005cb0:	f7ff fcb0 	bl	8005614 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005cb4:	f7fc ff0e 	bl	8002ad4 <HAL_GetTick>
 8005cb8:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cba:	e008      	b.n	8005cce <HAL_RCC_OscConfig+0x55e>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cbc:	f7fc ff0a 	bl	8002ad4 <HAL_GetTick>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d901      	bls.n	8005cce <HAL_RCC_OscConfig+0x55e>
              {
                return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e095      	b.n	8005dfa <HAL_RCC_OscConfig+0x68a>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d1ef      	bne.n	8005cbc <HAL_RCC_OscConfig+0x54c>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005cdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ce0:	68da      	ldr	r2, [r3, #12]
 8005ce2:	4b49      	ldr	r3, [pc, #292]	; (8005e08 <HAL_RCC_OscConfig+0x698>)
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005cee:	4311      	orrs	r1, r2
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005cf4:	0212      	lsls	r2, r2, #8
 8005cf6:	4311      	orrs	r1, r2
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005cfc:	4311      	orrs	r1, r2
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005d02:	4311      	orrs	r1, r2
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005d08:	430a      	orrs	r2, r1
 8005d0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005d12:	f7ff fc70 	bl	80055f6 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005d16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d24:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005d26:	f7fc fed5 	bl	8002ad4 <HAL_GetTick>
 8005d2a:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d2c:	e008      	b.n	8005d40 <HAL_RCC_OscConfig+0x5d0>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d2e:	f7fc fed1 	bl	8002ad4 <HAL_GetTick>
 8005d32:	4602      	mov	r2, r0
 8005d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d36:	1ad3      	subs	r3, r2, r3
 8005d38:	2b02      	cmp	r3, #2
 8005d3a:	d901      	bls.n	8005d40 <HAL_RCC_OscConfig+0x5d0>
              {
                return HAL_TIMEOUT;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	e05c      	b.n	8005dfa <HAL_RCC_OscConfig+0x68a>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d0ef      	beq.n	8005d2e <HAL_RCC_OscConfig+0x5be>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d4e:	e053      	b.n	8005df8 <HAL_RCC_OscConfig+0x688>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e052      	b.n	8005dfa <HAL_RCC_OscConfig+0x68a>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d14a      	bne.n	8005df8 <HAL_RCC_OscConfig+0x688>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005d62:	f7ff fc48 	bl	80055f6 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005d66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d74:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005d76:	f7fc fead 	bl	8002ad4 <HAL_GetTick>
 8005d7a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d7c:	e008      	b.n	8005d90 <HAL_RCC_OscConfig+0x620>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d7e:	f7fc fea9 	bl	8002ad4 <HAL_GetTick>
 8005d82:	4602      	mov	r2, r0
 8005d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	2b02      	cmp	r3, #2
 8005d8a:	d901      	bls.n	8005d90 <HAL_RCC_OscConfig+0x620>
            {
              return HAL_TIMEOUT;
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	e034      	b.n	8005dfa <HAL_RCC_OscConfig+0x68a>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d0ef      	beq.n	8005d7e <HAL_RCC_OscConfig+0x60e>
 8005d9e:	e02b      	b.n	8005df8 <HAL_RCC_OscConfig+0x688>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	2b0c      	cmp	r3, #12
 8005da4:	d026      	beq.n	8005df4 <HAL_RCC_OscConfig+0x684>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005da6:	f7ff fc35 	bl	8005614 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8005daa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005db4:	f023 0303 	bic.w	r3, r3, #3
 8005db8:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
 8005dba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dc8:	60d3      	str	r3, [r2, #12]
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dca:	f7fc fe83 	bl	8002ad4 <HAL_GetTick>
 8005dce:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005dd0:	e008      	b.n	8005de4 <HAL_RCC_OscConfig+0x674>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dd2:	f7fc fe7f 	bl	8002ad4 <HAL_GetTick>
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dda:	1ad3      	subs	r3, r2, r3
 8005ddc:	2b02      	cmp	r3, #2
 8005dde:	d901      	bls.n	8005de4 <HAL_RCC_OscConfig+0x674>
          {
            return HAL_TIMEOUT;
 8005de0:	2303      	movs	r3, #3
 8005de2:	e00a      	b.n	8005dfa <HAL_RCC_OscConfig+0x68a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005de4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d1ef      	bne.n	8005dd2 <HAL_RCC_OscConfig+0x662>
 8005df2:	e001      	b.n	8005df8 <HAL_RCC_OscConfig+0x688>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e000      	b.n	8005dfa <HAL_RCC_OscConfig+0x68a>
      }
    }
  }
  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3734      	adds	r7, #52	; 0x34
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd90      	pop	{r4, r7, pc}
 8005e02:	bf00      	nop
 8005e04:	58000400 	.word	0x58000400
 8005e08:	11c1808c 	.word	0x11c1808c

08005e0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d101      	bne.n	8005e20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e12d      	b.n	800607c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e20:	4b98      	ldr	r3, [pc, #608]	; (8006084 <HAL_RCC_ClockConfig+0x278>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 0307 	and.w	r3, r3, #7
 8005e28:	683a      	ldr	r2, [r7, #0]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d91b      	bls.n	8005e66 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e2e:	4b95      	ldr	r3, [pc, #596]	; (8006084 <HAL_RCC_ClockConfig+0x278>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f023 0207 	bic.w	r2, r3, #7
 8005e36:	4993      	ldr	r1, [pc, #588]	; (8006084 <HAL_RCC_ClockConfig+0x278>)
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e3e:	f7fc fe49 	bl	8002ad4 <HAL_GetTick>
 8005e42:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e44:	e008      	b.n	8005e58 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005e46:	f7fc fe45 	bl	8002ad4 <HAL_GetTick>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	d901      	bls.n	8005e58 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005e54:	2303      	movs	r3, #3
 8005e56:	e111      	b.n	800607c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e58:	4b8a      	ldr	r3, [pc, #552]	; (8006084 <HAL_RCC_ClockConfig+0x278>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0307 	and.w	r3, r3, #7
 8005e60:	683a      	ldr	r2, [r7, #0]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d1ef      	bne.n	8005e46 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 0302 	and.w	r3, r3, #2
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d016      	beq.n	8005ea0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	4618      	mov	r0, r3
 8005e78:	f7ff fb15 	bl	80054a6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005e7c:	f7fc fe2a 	bl	8002ad4 <HAL_GetTick>
 8005e80:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005e82:	e008      	b.n	8005e96 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005e84:	f7fc fe26 	bl	8002ad4 <HAL_GetTick>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d901      	bls.n	8005e96 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e0f2      	b.n	800607c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005e96:	f7ff fc0f 	bl	80056b8 <LL_RCC_IsActiveFlag_HPRE>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d0f1      	beq.n	8005e84 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0320 	and.w	r3, r3, #32
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d016      	beq.n	8005eda <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	695b      	ldr	r3, [r3, #20]
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f7ff fb0c 	bl	80054ce <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005eb6:	f7fc fe0d 	bl	8002ad4 <HAL_GetTick>
 8005eba:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005ebc:	e008      	b.n	8005ed0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005ebe:	f7fc fe09 	bl	8002ad4 <HAL_GetTick>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d901      	bls.n	8005ed0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	e0d5      	b.n	800607c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005ed0:	f7ff fc04 	bl	80056dc <LL_RCC_IsActiveFlag_C2HPRE>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d0f1      	beq.n	8005ebe <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d016      	beq.n	8005f14 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	4618      	mov	r0, r3
 8005eec:	f7ff fb05 	bl	80054fa <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005ef0:	f7fc fdf0 	bl	8002ad4 <HAL_GetTick>
 8005ef4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005ef6:	e008      	b.n	8005f0a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005ef8:	f7fc fdec 	bl	8002ad4 <HAL_GetTick>
 8005efc:	4602      	mov	r2, r0
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	2b02      	cmp	r3, #2
 8005f04:	d901      	bls.n	8005f0a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005f06:	2303      	movs	r3, #3
 8005f08:	e0b8      	b.n	800607c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005f0a:	f7ff fbfa 	bl	8005702 <LL_RCC_IsActiveFlag_SHDHPRE>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d0f1      	beq.n	8005ef8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 0304 	and.w	r3, r3, #4
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d016      	beq.n	8005f4e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	4618      	mov	r0, r3
 8005f26:	f7ff faff 	bl	8005528 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005f2a:	f7fc fdd3 	bl	8002ad4 <HAL_GetTick>
 8005f2e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005f30:	e008      	b.n	8005f44 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005f32:	f7fc fdcf 	bl	8002ad4 <HAL_GetTick>
 8005f36:	4602      	mov	r2, r0
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	1ad3      	subs	r3, r2, r3
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	d901      	bls.n	8005f44 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005f40:	2303      	movs	r3, #3
 8005f42:	e09b      	b.n	800607c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005f44:	f7ff fbf0 	bl	8005728 <LL_RCC_IsActiveFlag_PPRE1>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d0f1      	beq.n	8005f32 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 0308 	and.w	r3, r3, #8
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d017      	beq.n	8005f8a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	00db      	lsls	r3, r3, #3
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7ff faf5 	bl	8005550 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005f66:	f7fc fdb5 	bl	8002ad4 <HAL_GetTick>
 8005f6a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005f6c:	e008      	b.n	8005f80 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005f6e:	f7fc fdb1 	bl	8002ad4 <HAL_GetTick>
 8005f72:	4602      	mov	r2, r0
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d901      	bls.n	8005f80 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	e07d      	b.n	800607c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005f80:	f7ff fbe4 	bl	800574c <LL_RCC_IsActiveFlag_PPRE2>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d0f1      	beq.n	8005f6e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 0301 	and.w	r3, r3, #1
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d043      	beq.n	800601e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d106      	bne.n	8005fac <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005f9e:	f7ff f8c9 	bl	8005134 <LL_RCC_HSE_IsReady>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d11e      	bne.n	8005fe6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e067      	b.n	800607c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	2b03      	cmp	r3, #3
 8005fb2:	d106      	bne.n	8005fc2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005fb4:	f7ff fb3d 	bl	8005632 <LL_RCC_PLL_IsReady>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d113      	bne.n	8005fe6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e05c      	b.n	800607c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d106      	bne.n	8005fd8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005fca:	f7ff f9fd 	bl	80053c8 <LL_RCC_MSI_IsReady>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d108      	bne.n	8005fe6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e051      	b.n	800607c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005fd8:	f7ff f8dc 	bl	8005194 <LL_RCC_HSI_IsReady>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d101      	bne.n	8005fe6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e04a      	b.n	800607c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	4618      	mov	r0, r3
 8005fec:	f7ff fa3b 	bl	8005466 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ff0:	f7fc fd70 	bl	8002ad4 <HAL_GetTick>
 8005ff4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ff6:	e00a      	b.n	800600e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ff8:	f7fc fd6c 	bl	8002ad4 <HAL_GetTick>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	1ad3      	subs	r3, r2, r3
 8006002:	f241 3288 	movw	r2, #5000	; 0x1388
 8006006:	4293      	cmp	r3, r2
 8006008:	d901      	bls.n	800600e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e036      	b.n	800607c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800600e:	f7ff fa3e 	bl	800548e <LL_RCC_GetSysClkSource>
 8006012:	4602      	mov	r2, r0
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	429a      	cmp	r2, r3
 800601c:	d1ec      	bne.n	8005ff8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800601e:	4b19      	ldr	r3, [pc, #100]	; (8006084 <HAL_RCC_ClockConfig+0x278>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f003 0307 	and.w	r3, r3, #7
 8006026:	683a      	ldr	r2, [r7, #0]
 8006028:	429a      	cmp	r2, r3
 800602a:	d21b      	bcs.n	8006064 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800602c:	4b15      	ldr	r3, [pc, #84]	; (8006084 <HAL_RCC_ClockConfig+0x278>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f023 0207 	bic.w	r2, r3, #7
 8006034:	4913      	ldr	r1, [pc, #76]	; (8006084 <HAL_RCC_ClockConfig+0x278>)
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	4313      	orrs	r3, r2
 800603a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800603c:	f7fc fd4a 	bl	8002ad4 <HAL_GetTick>
 8006040:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006042:	e008      	b.n	8006056 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006044:	f7fc fd46 	bl	8002ad4 <HAL_GetTick>
 8006048:	4602      	mov	r2, r0
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	2b02      	cmp	r3, #2
 8006050:	d901      	bls.n	8006056 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8006052:	2303      	movs	r3, #3
 8006054:	e012      	b.n	800607c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006056:	4b0b      	ldr	r3, [pc, #44]	; (8006084 <HAL_RCC_ClockConfig+0x278>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 0307 	and.w	r3, r3, #7
 800605e:	683a      	ldr	r2, [r7, #0]
 8006060:	429a      	cmp	r2, r3
 8006062:	d1ef      	bne.n	8006044 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006064:	f000 f880 	bl	8006168 <HAL_RCC_GetHCLKFreq>
 8006068:	4603      	mov	r3, r0
 800606a:	4a07      	ldr	r2, [pc, #28]	; (8006088 <HAL_RCC_ClockConfig+0x27c>)
 800606c:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800606e:	f7fc fd3d 	bl	8002aec <HAL_GetTickPrio>
 8006072:	4603      	mov	r3, r0
 8006074:	4618      	mov	r0, r3
 8006076:	f7fc fb0d 	bl	8002694 <HAL_InitTick>
 800607a:	4603      	mov	r3, r0
}
 800607c:	4618      	mov	r0, r3
 800607e:	3710      	adds	r7, #16
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}
 8006084:	58004000 	.word	0x58004000
 8006088:	20000004 	.word	0x20000004

0800608c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800608c:	b590      	push	{r4, r7, lr}
 800608e:	b085      	sub	sp, #20
 8006090:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006092:	f7ff f9fc 	bl	800548e <LL_RCC_GetSysClkSource>
 8006096:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d10a      	bne.n	80060b4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800609e:	f7ff f9b8 	bl	8005412 <LL_RCC_MSI_GetRange>
 80060a2:	4603      	mov	r3, r0
 80060a4:	091b      	lsrs	r3, r3, #4
 80060a6:	f003 030f 	and.w	r3, r3, #15
 80060aa:	4a2b      	ldr	r2, [pc, #172]	; (8006158 <HAL_RCC_GetSysClockFreq+0xcc>)
 80060ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060b0:	60fb      	str	r3, [r7, #12]
 80060b2:	e04b      	b.n	800614c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2b04      	cmp	r3, #4
 80060b8:	d102      	bne.n	80060c0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80060ba:	4b28      	ldr	r3, [pc, #160]	; (800615c <HAL_RCC_GetSysClockFreq+0xd0>)
 80060bc:	60fb      	str	r3, [r7, #12]
 80060be:	e045      	b.n	800614c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2b08      	cmp	r3, #8
 80060c4:	d10a      	bne.n	80060dc <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80060c6:	f7ff f805 	bl	80050d4 <LL_RCC_HSE_IsEnabledDiv2>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d102      	bne.n	80060d6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80060d0:	4b23      	ldr	r3, [pc, #140]	; (8006160 <HAL_RCC_GetSysClockFreq+0xd4>)
 80060d2:	60fb      	str	r3, [r7, #12]
 80060d4:	e03a      	b.n	800614c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80060d6:	4b23      	ldr	r3, [pc, #140]	; (8006164 <HAL_RCC_GetSysClockFreq+0xd8>)
 80060d8:	60fb      	str	r3, [r7, #12]
 80060da:	e037      	b.n	800614c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80060dc:	f7ff fae0 	bl	80056a0 <LL_RCC_PLL_GetMainSource>
 80060e0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	d003      	beq.n	80060f0 <HAL_RCC_GetSysClockFreq+0x64>
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	2b03      	cmp	r3, #3
 80060ec:	d003      	beq.n	80060f6 <HAL_RCC_GetSysClockFreq+0x6a>
 80060ee:	e00d      	b.n	800610c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80060f0:	4b1a      	ldr	r3, [pc, #104]	; (800615c <HAL_RCC_GetSysClockFreq+0xd0>)
 80060f2:	60bb      	str	r3, [r7, #8]
        break;
 80060f4:	e015      	b.n	8006122 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80060f6:	f7fe ffed 	bl	80050d4 <LL_RCC_HSE_IsEnabledDiv2>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d102      	bne.n	8006106 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006100:	4b17      	ldr	r3, [pc, #92]	; (8006160 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006102:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006104:	e00d      	b.n	8006122 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8006106:	4b17      	ldr	r3, [pc, #92]	; (8006164 <HAL_RCC_GetSysClockFreq+0xd8>)
 8006108:	60bb      	str	r3, [r7, #8]
        break;
 800610a:	e00a      	b.n	8006122 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800610c:	f7ff f981 	bl	8005412 <LL_RCC_MSI_GetRange>
 8006110:	4603      	mov	r3, r0
 8006112:	091b      	lsrs	r3, r3, #4
 8006114:	f003 030f 	and.w	r3, r3, #15
 8006118:	4a0f      	ldr	r2, [pc, #60]	; (8006158 <HAL_RCC_GetSysClockFreq+0xcc>)
 800611a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800611e:	60bb      	str	r3, [r7, #8]
        break;
 8006120:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8006122:	f7ff fa98 	bl	8005656 <LL_RCC_PLL_GetN>
 8006126:	4602      	mov	r2, r0
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	fb03 f402 	mul.w	r4, r3, r2
 800612e:	f7ff faab 	bl	8005688 <LL_RCC_PLL_GetDivider>
 8006132:	4603      	mov	r3, r0
 8006134:	091b      	lsrs	r3, r3, #4
 8006136:	3301      	adds	r3, #1
 8006138:	fbb4 f4f3 	udiv	r4, r4, r3
 800613c:	f7ff fa98 	bl	8005670 <LL_RCC_PLL_GetR>
 8006140:	4603      	mov	r3, r0
 8006142:	0f5b      	lsrs	r3, r3, #29
 8006144:	3301      	adds	r3, #1
 8006146:	fbb4 f3f3 	udiv	r3, r4, r3
 800614a:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 800614c:	68fb      	ldr	r3, [r7, #12]
}
 800614e:	4618      	mov	r0, r3
 8006150:	3714      	adds	r7, #20
 8006152:	46bd      	mov	sp, r7
 8006154:	bd90      	pop	{r4, r7, pc}
 8006156:	bf00      	nop
 8006158:	0800cb90 	.word	0x0800cb90
 800615c:	00f42400 	.word	0x00f42400
 8006160:	003d0900 	.word	0x003d0900
 8006164:	007a1200 	.word	0x007a1200

08006168 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006168:	b598      	push	{r3, r4, r7, lr}
 800616a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800616c:	f7ff ff8e 	bl	800608c <HAL_RCC_GetSysClockFreq>
 8006170:	4604      	mov	r4, r0
 8006172:	f7ff fa01 	bl	8005578 <LL_RCC_GetAHBPrescaler>
 8006176:	4603      	mov	r3, r0
 8006178:	091b      	lsrs	r3, r3, #4
 800617a:	f003 030f 	and.w	r3, r3, #15
 800617e:	4a03      	ldr	r2, [pc, #12]	; (800618c <HAL_RCC_GetHCLKFreq+0x24>)
 8006180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006184:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006188:	4618      	mov	r0, r3
 800618a:	bd98      	pop	{r3, r4, r7, pc}
 800618c:	0800cb30 	.word	0x0800cb30

08006190 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006190:	b598      	push	{r3, r4, r7, lr}
 8006192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006194:	f7ff ffe8 	bl	8006168 <HAL_RCC_GetHCLKFreq>
 8006198:	4604      	mov	r4, r0
 800619a:	f7ff fa14 	bl	80055c6 <LL_RCC_GetAPB1Prescaler>
 800619e:	4603      	mov	r3, r0
 80061a0:	0a1b      	lsrs	r3, r3, #8
 80061a2:	f003 0307 	and.w	r3, r3, #7
 80061a6:	4a04      	ldr	r2, [pc, #16]	; (80061b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80061a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061ac:	f003 031f 	and.w	r3, r3, #31
 80061b0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	bd98      	pop	{r3, r4, r7, pc}
 80061b8:	0800cb70 	.word	0x0800cb70

080061bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061bc:	b598      	push	{r3, r4, r7, lr}
 80061be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80061c0:	f7ff ffd2 	bl	8006168 <HAL_RCC_GetHCLKFreq>
 80061c4:	4604      	mov	r4, r0
 80061c6:	f7ff fa0a 	bl	80055de <LL_RCC_GetAPB2Prescaler>
 80061ca:	4603      	mov	r3, r0
 80061cc:	0adb      	lsrs	r3, r3, #11
 80061ce:	f003 0307 	and.w	r3, r3, #7
 80061d2:	4a04      	ldr	r2, [pc, #16]	; (80061e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80061d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061d8:	f003 031f 	and.w	r3, r3, #31
 80061dc:	fa24 f303 	lsr.w	r3, r4, r3
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	bd98      	pop	{r3, r4, r7, pc}
 80061e4:	0800cb70 	.word	0x0800cb70

080061e8 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	226f      	movs	r2, #111	; 0x6f
 80061f6:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 80061f8:	f7ff f949 	bl	800548e <LL_RCC_GetSysClkSource>
 80061fc:	4602      	mov	r2, r0
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8006202:	f7ff f9b9 	bl	8005578 <LL_RCC_GetAHBPrescaler>
 8006206:	4602      	mov	r2, r0
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 800620c:	f7ff f9db 	bl	80055c6 <LL_RCC_GetAPB1Prescaler>
 8006210:	4602      	mov	r2, r0
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8006216:	f7ff f9e2 	bl	80055de <LL_RCC_GetAPB2Prescaler>
 800621a:	4602      	mov	r2, r0
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8006220:	f7ff f9b6 	bl	8005590 <LL_C2_RCC_GetAHBPrescaler>
 8006224:	4602      	mov	r2, r0
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 800622a:	f7ff f9be 	bl	80055aa <LL_RCC_GetAHB4Prescaler>
 800622e:	4602      	mov	r2, r0
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006234:	4b04      	ldr	r3, [pc, #16]	; (8006248 <HAL_RCC_GetClockConfig+0x60>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 0207 	and.w	r2, r3, #7
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	601a      	str	r2, [r3, #0]
}
 8006240:	bf00      	nop
 8006242:	3708      	adds	r7, #8
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	58004000 	.word	0x58004000

0800624c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2bb0      	cmp	r3, #176	; 0xb0
 8006258:	d903      	bls.n	8006262 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800625a:	4b14      	ldr	r3, [pc, #80]	; (80062ac <RCC_SetFlashLatencyFromMSIRange+0x60>)
 800625c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800625e:	60fb      	str	r3, [r7, #12]
 8006260:	e007      	b.n	8006272 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	091b      	lsrs	r3, r3, #4
 8006266:	f003 030f 	and.w	r3, r3, #15
 800626a:	4a10      	ldr	r2, [pc, #64]	; (80062ac <RCC_SetFlashLatencyFromMSIRange+0x60>)
 800626c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006270:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8006272:	f7ff f99a 	bl	80055aa <LL_RCC_GetAHB4Prescaler>
 8006276:	4603      	mov	r3, r0
 8006278:	091b      	lsrs	r3, r3, #4
 800627a:	f003 030f 	and.w	r3, r3, #15
 800627e:	4a0c      	ldr	r2, [pc, #48]	; (80062b0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	fbb2 f3f3 	udiv	r3, r2, r3
 800628a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	4a09      	ldr	r2, [pc, #36]	; (80062b4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8006290:	fba2 2303 	umull	r2, r3, r2, r3
 8006294:	0c9b      	lsrs	r3, r3, #18
 8006296:	f44f 7100 	mov.w	r1, #512	; 0x200
 800629a:	4618      	mov	r0, r3
 800629c:	f000 f80c 	bl	80062b8 <RCC_SetFlashLatency>
 80062a0:	4603      	mov	r3, r0
#endif
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3710      	adds	r7, #16
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	0800cb90 	.word	0x0800cb90
 80062b0:	0800cb30 	.word	0x0800cb30
 80062b4:	431bde83 	.word	0x431bde83

080062b8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80062b8:	b590      	push	{r4, r7, lr}
 80062ba:	b08f      	sub	sp, #60	; 0x3c
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80062c2:	4b25      	ldr	r3, [pc, #148]	; (8006358 <RCC_SetFlashLatency+0xa0>)
 80062c4:	f107 041c 	add.w	r4, r7, #28
 80062c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80062ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80062ce:	4b23      	ldr	r3, [pc, #140]	; (800635c <RCC_SetFlashLatency+0xa4>)
 80062d0:	f107 040c 	add.w	r4, r7, #12
 80062d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80062d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80062da:	2300      	movs	r3, #0
 80062dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80062de:	2300      	movs	r3, #0
 80062e0:	633b      	str	r3, [r7, #48]	; 0x30
 80062e2:	e015      	b.n	8006310 <RCC_SetFlashLatency+0x58>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80062e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80062ec:	4413      	add	r3, r2
 80062ee:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d808      	bhi.n	800630a <RCC_SetFlashLatency+0x52>
    {
      latency = FLASH_LATENCY_RANGE[index];
 80062f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006300:	4413      	add	r3, r2
 8006302:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006306:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8006308:	e005      	b.n	8006316 <RCC_SetFlashLatency+0x5e>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800630a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630c:	3301      	adds	r3, #1
 800630e:	633b      	str	r3, [r7, #48]	; 0x30
 8006310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006312:	2b03      	cmp	r3, #3
 8006314:	d9e6      	bls.n	80062e4 <RCC_SetFlashLatency+0x2c>
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8006316:	4b12      	ldr	r3, [pc, #72]	; (8006360 <RCC_SetFlashLatency+0xa8>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f023 0207 	bic.w	r2, r3, #7
 800631e:	4910      	ldr	r1, [pc, #64]	; (8006360 <RCC_SetFlashLatency+0xa8>)
 8006320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006322:	4313      	orrs	r3, r2
 8006324:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006326:	f7fc fbd5 	bl	8002ad4 <HAL_GetTick>
 800632a:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800632c:	e008      	b.n	8006340 <RCC_SetFlashLatency+0x88>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800632e:	f7fc fbd1 	bl	8002ad4 <HAL_GetTick>
 8006332:	4602      	mov	r2, r0
 8006334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006336:	1ad3      	subs	r3, r2, r3
 8006338:	2b02      	cmp	r3, #2
 800633a:	d901      	bls.n	8006340 <RCC_SetFlashLatency+0x88>
    {
      return HAL_TIMEOUT;
 800633c:	2303      	movs	r3, #3
 800633e:	e007      	b.n	8006350 <RCC_SetFlashLatency+0x98>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006340:	4b07      	ldr	r3, [pc, #28]	; (8006360 <RCC_SetFlashLatency+0xa8>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 0307 	and.w	r3, r3, #7
 8006348:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800634a:	429a      	cmp	r2, r3
 800634c:	d1ef      	bne.n	800632e <RCC_SetFlashLatency+0x76>
    }
  }
  return HAL_OK;
 800634e:	2300      	movs	r3, #0
}
 8006350:	4618      	mov	r0, r3
 8006352:	373c      	adds	r7, #60	; 0x3c
 8006354:	46bd      	mov	sp, r7
 8006356:	bd90      	pop	{r4, r7, pc}
 8006358:	0800c3e0 	.word	0x0800c3e0
 800635c:	0800c3f0 	.word	0x0800c3f0
 8006360:	58004000 	.word	0x58004000

08006364 <LL_RCC_LSE_IsEnabled>:
{
 8006364:	b480      	push	{r7}
 8006366:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8006368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800636c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006370:	f003 0301 	and.w	r3, r3, #1
 8006374:	2b01      	cmp	r3, #1
 8006376:	d101      	bne.n	800637c <LL_RCC_LSE_IsEnabled+0x18>
 8006378:	2301      	movs	r3, #1
 800637a:	e000      	b.n	800637e <LL_RCC_LSE_IsEnabled+0x1a>
 800637c:	2300      	movs	r3, #0
}
 800637e:	4618      	mov	r0, r3
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <LL_RCC_LSE_IsReady>:
{
 8006388:	b480      	push	{r7}
 800638a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800638c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006394:	f003 0302 	and.w	r3, r3, #2
 8006398:	2b02      	cmp	r3, #2
 800639a:	d101      	bne.n	80063a0 <LL_RCC_LSE_IsReady+0x18>
 800639c:	2301      	movs	r3, #1
 800639e:	e000      	b.n	80063a2 <LL_RCC_LSE_IsReady+0x1a>
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <LL_RCC_MSI_EnablePLLMode>:
{
 80063ac:	b480      	push	{r7}
 80063ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80063b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063ba:	f043 0304 	orr.w	r3, r3, #4
 80063be:	6013      	str	r3, [r2, #0]
}
 80063c0:	bf00      	nop
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr

080063ca <LL_RCC_SetRFWKPClockSource>:
{
 80063ca:	b480      	push	{r7}
 80063cc:	b083      	sub	sp, #12
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80063d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063da:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80063de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80063ea:	bf00      	nop
 80063ec:	370c      	adds	r7, #12
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr

080063f6 <LL_RCC_SetSMPSClockSource>:
{
 80063f6:	b480      	push	{r7}
 80063f8:	b083      	sub	sp, #12
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80063fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006404:	f023 0203 	bic.w	r2, r3, #3
 8006408:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4313      	orrs	r3, r2
 8006410:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006412:	bf00      	nop
 8006414:	370c      	adds	r7, #12
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr

0800641e <LL_RCC_SetSMPSPrescaler>:
{
 800641e:	b480      	push	{r7}
 8006420:	b083      	sub	sp, #12
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8006426:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800642a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006430:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4313      	orrs	r3, r2
 8006438:	624b      	str	r3, [r1, #36]	; 0x24
}
 800643a:	bf00      	nop
 800643c:	370c      	adds	r7, #12
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr

08006446 <LL_RCC_SetUSARTClockSource>:
{
 8006446:	b480      	push	{r7}
 8006448:	b083      	sub	sp, #12
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800644e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006456:	f023 0203 	bic.w	r2, r3, #3
 800645a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4313      	orrs	r3, r2
 8006462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006466:	bf00      	nop
 8006468:	370c      	adds	r7, #12
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr

08006472 <LL_RCC_SetLPUARTClockSource>:
{
 8006472:	b480      	push	{r7}
 8006474:	b083      	sub	sp, #12
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800647a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800647e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006482:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006486:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4313      	orrs	r3, r2
 800648e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006492:	bf00      	nop
 8006494:	370c      	adds	r7, #12
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr

0800649e <LL_RCC_SetI2CClockSource>:
{
 800649e:	b480      	push	{r7}
 80064a0:	b083      	sub	sp, #12
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80064a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064aa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	091b      	lsrs	r3, r3, #4
 80064b2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80064b6:	43db      	mvns	r3, r3
 80064b8:	401a      	ands	r2, r3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	011b      	lsls	r3, r3, #4
 80064be:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80064c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064c6:	4313      	orrs	r3, r2
 80064c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80064cc:	bf00      	nop
 80064ce:	370c      	adds	r7, #12
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <LL_RCC_SetLPTIMClockSource>:
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80064e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064e4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	0c1b      	lsrs	r3, r3, #16
 80064ec:	041b      	lsls	r3, r3, #16
 80064ee:	43db      	mvns	r3, r3
 80064f0:	401a      	ands	r2, r3
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	041b      	lsls	r3, r3, #16
 80064f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064fa:	4313      	orrs	r3, r2
 80064fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006500:	bf00      	nop
 8006502:	370c      	adds	r7, #12
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <LL_RCC_SetRNGClockSource>:
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006514:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800651c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006520:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4313      	orrs	r3, r2
 8006528:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800652c:	bf00      	nop
 800652e:	370c      	adds	r7, #12
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <LL_RCC_SetCLK48ClockSource>:
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8006540:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006548:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800654c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4313      	orrs	r3, r2
 8006554:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006558:	bf00      	nop
 800655a:	370c      	adds	r7, #12
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <LL_RCC_SetADCClockSource>:
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800656c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006574:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006578:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4313      	orrs	r3, r2
 8006580:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006584:	bf00      	nop
 8006586:	370c      	adds	r7, #12
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <LL_RCC_SetRTCClockSource>:
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006598:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800659c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80065a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80065b0:	bf00      	nop
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <LL_RCC_GetRTCClockSource>:
{
 80065bc:	b480      	push	{r7}
 80065be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80065c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr

080065d6 <LL_RCC_ForceBackupDomainReset>:
{
 80065d6:	b480      	push	{r7}
 80065d8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80065da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80065ee:	bf00      	nop
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <LL_RCC_ReleaseBackupDomainReset>:
{
 80065f8:	b480      	push	{r7}
 80065fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80065fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006604:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006608:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800660c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006610:	bf00      	nop
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr

0800661a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800661a:	b580      	push	{r7, lr}
 800661c:	b088      	sub	sp, #32
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8006622:	2300      	movs	r3, #0
 8006624:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006626:	2300      	movs	r3, #0
 8006628:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006632:	2b00      	cmp	r3, #0
 8006634:	d046      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8006636:	f7ff ffc1 	bl	80065bc <LL_RCC_GetRTCClockSource>
 800663a:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6a1b      	ldr	r3, [r3, #32]
 8006640:	69ba      	ldr	r2, [r7, #24]
 8006642:	429a      	cmp	r2, r3
 8006644:	d03c      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006646:	f7fe fd35 	bl	80050b4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800664a:	69bb      	ldr	r3, [r7, #24]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d105      	bne.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6a1b      	ldr	r3, [r3, #32]
 8006654:	4618      	mov	r0, r3
 8006656:	f7ff ff9b 	bl	8006590 <LL_RCC_SetRTCClockSource>
 800665a:	e02e      	b.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800665c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006664:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8006666:	f7ff ffb6 	bl	80065d6 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800666a:	f7ff ffc5 	bl	80065f8 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6a1b      	ldr	r3, [r3, #32]
 8006678:	4313      	orrs	r3, r2
 800667a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800667c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8006686:	f7ff fe6d 	bl	8006364 <LL_RCC_LSE_IsEnabled>
 800668a:	4603      	mov	r3, r0
 800668c:	2b01      	cmp	r3, #1
 800668e:	d114      	bne.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006690:	f7fc fa20 	bl	8002ad4 <HAL_GetTick>
 8006694:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8006696:	e00b      	b.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006698:	f7fc fa1c 	bl	8002ad4 <HAL_GetTick>
 800669c:	4602      	mov	r2, r0
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d902      	bls.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	77fb      	strb	r3, [r7, #31]
              break;
 80066ae:	e004      	b.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 80066b0:	f7ff fe6a 	bl	8006388 <LL_RCC_LSE_IsReady>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d1ee      	bne.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80066ba:	7ffb      	ldrb	r3, [r7, #31]
 80066bc:	77bb      	strb	r3, [r7, #30]
 80066be:	e001      	b.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066c0:	7ffb      	ldrb	r3, [r7, #31]
 80066c2:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f003 0301 	and.w	r3, r3, #1
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d004      	beq.n	80066da <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	4618      	mov	r0, r3
 80066d6:	f7ff feb6 	bl	8006446 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 0302 	and.w	r3, r3, #2
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d004      	beq.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	4618      	mov	r0, r3
 80066ec:	f7ff fec1 	bl	8006472 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 0310 	and.w	r3, r3, #16
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d004      	beq.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	4618      	mov	r0, r3
 8006702:	f7ff fee9 	bl	80064d8 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 0320 	and.w	r3, r3, #32
 800670e:	2b00      	cmp	r3, #0
 8006710:	d004      	beq.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	695b      	ldr	r3, [r3, #20]
 8006716:	4618      	mov	r0, r3
 8006718:	f7ff fede 	bl	80064d8 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 0304 	and.w	r3, r3, #4
 8006724:	2b00      	cmp	r3, #0
 8006726:	d004      	beq.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	4618      	mov	r0, r3
 800672e:	f7ff feb6 	bl	800649e <LL_RCC_SetI2CClockSource>
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800673a:	2b00      	cmp	r3, #0
 800673c:	d02b      	beq.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006746:	d008      	beq.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x140>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	699b      	ldr	r3, [r3, #24]
 800674c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006750:	d003      	beq.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x140>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	699b      	ldr	r3, [r3, #24]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d105      	bne.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	699b      	ldr	r3, [r3, #24]
 800675e:	4618      	mov	r0, r3
 8006760:	f7ff fed4 	bl	800650c <LL_RCC_SetRNGClockSource>
 8006764:	e00a      	b.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x162>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	699b      	ldr	r3, [r3, #24]
 800676a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800676e:	60fb      	str	r3, [r7, #12]
 8006770:	2000      	movs	r0, #0
 8006772:	f7ff fecb 	bl	800650c <LL_RCC_SetRNGClockSource>
 8006776:	68f8      	ldr	r0, [r7, #12]
 8006778:	f7ff fede 	bl	8006538 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	699b      	ldr	r3, [r3, #24]
 8006780:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8006784:	d107      	bne.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006786:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800678a:	68db      	ldr	r3, [r3, #12]
 800678c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006790:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006794:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d011      	beq.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	69db      	ldr	r3, [r3, #28]
 80067a6:	4618      	mov	r0, r3
 80067a8:	f7ff fedc 	bl	8006564 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	69db      	ldr	r3, [r3, #28]
 80067b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067b4:	d107      	bne.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80067b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80067c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067c4:	60d3      	str	r3, [r2, #12]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d004      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7ff fdf7 	bl	80063ca <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d009      	beq.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ec:	4618      	mov	r0, r3
 80067ee:	f7ff fe16 	bl	800641e <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f6:	4618      	mov	r0, r3
 80067f8:	f7ff fdfd 	bl	80063f6 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 80067fc:	7fbb      	ldrb	r3, [r7, #30]
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3720      	adds	r7, #32
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}

08006806 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006806:	b580      	push	{r7, lr}
 8006808:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 800680a:	f7ff fdcf 	bl	80063ac <LL_RCC_MSI_EnablePLLMode>
}
 800680e:	bf00      	nop
 8006810:	bd80      	pop	{r7, pc}

08006812 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006812:	b580      	push	{r7, lr}
 8006814:	b082      	sub	sp, #8
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d101      	bne.n	8006824 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	e090      	b.n	8006946 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800682a:	b2db      	uxtb	r3, r3
 800682c:	2b00      	cmp	r3, #0
 800682e:	d106      	bne.n	800683e <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f7fb fe95 	bl	8002568 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2202      	movs	r2, #2
 8006842:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	22ca      	movs	r2, #202	; 0xca
 800684c:	625a      	str	r2, [r3, #36]	; 0x24
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2253      	movs	r2, #83	; 0x53
 8006854:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 faba 	bl	8006dd0 <RTC_EnterInitMode>
 800685c:	4603      	mov	r3, r0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d009      	beq.n	8006876 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	22ff      	movs	r2, #255	; 0xff
 8006868:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2204      	movs	r2, #4
 800686e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e067      	b.n	8006946 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	6812      	ldr	r2, [r2, #0]
 8006880:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006884:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006888:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	6899      	ldr	r1, [r3, #8]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	685a      	ldr	r2, [r3, #4]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	691b      	ldr	r3, [r3, #16]
 8006898:	431a      	orrs	r2, r3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	699b      	ldr	r3, [r3, #24]
 800689e:	431a      	orrs	r2, r3
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	430a      	orrs	r2, r1
 80068a6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	68d2      	ldr	r2, [r2, #12]
 80068b0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	6919      	ldr	r1, [r3, #16]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	041a      	lsls	r2, r3, #16
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	430a      	orrs	r2, r1
 80068c4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	68da      	ldr	r2, [r3, #12]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068d4:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f022 0202 	bic.w	r2, r2, #2
 80068e4:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	69da      	ldr	r2, [r3, #28]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	695b      	ldr	r3, [r3, #20]
 80068f4:	431a      	orrs	r2, r3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	430a      	orrs	r2, r1
 80068fc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	f003 0320 	and.w	r3, r3, #32
 8006908:	2b00      	cmp	r3, #0
 800690a:	d113      	bne.n	8006934 <HAL_RTC_Init+0x122>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 fa39 	bl	8006d84 <HAL_RTC_WaitForSynchro>
 8006912:	4603      	mov	r3, r0
 8006914:	2b00      	cmp	r3, #0
 8006916:	d00d      	beq.n	8006934 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	22ff      	movs	r2, #255	; 0xff
 800691e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2204      	movs	r2, #4
 8006924:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	e008      	b.n	8006946 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	22ff      	movs	r2, #255	; 0xff
 800693a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8006944:	2300      	movs	r3, #0
  }
}
 8006946:	4618      	mov	r0, r3
 8006948:	3708      	adds	r7, #8
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}

0800694e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800694e:	b590      	push	{r4, r7, lr}
 8006950:	b087      	sub	sp, #28
 8006952:	af00      	add	r7, sp, #0
 8006954:	60f8      	str	r0, [r7, #12]
 8006956:	60b9      	str	r1, [r7, #8]
 8006958:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006960:	2b01      	cmp	r3, #1
 8006962:	d101      	bne.n	8006968 <HAL_RTC_SetTime+0x1a>
 8006964:	2302      	movs	r3, #2
 8006966:	e0b2      	b.n	8006ace <HAL_RTC_SetTime+0x180>
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2201      	movs	r2, #1
 800696c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2202      	movs	r2, #2
 8006974:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d126      	bne.n	80069cc <HAL_RTC_SetTime+0x7e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006988:	2b00      	cmp	r3, #0
 800698a:	d102      	bne.n	8006992 <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	2200      	movs	r2, #0
 8006990:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	4618      	mov	r0, r3
 8006998:	f000 fa44 	bl	8006e24 <RTC_ByteToBcd2>
 800699c:	4603      	mov	r3, r0
 800699e:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	785b      	ldrb	r3, [r3, #1]
 80069a4:	4618      	mov	r0, r3
 80069a6:	f000 fa3d 	bl	8006e24 <RTC_ByteToBcd2>
 80069aa:	4603      	mov	r3, r0
 80069ac:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80069ae:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	789b      	ldrb	r3, [r3, #2]
 80069b4:	4618      	mov	r0, r3
 80069b6:	f000 fa35 	bl	8006e24 <RTC_ByteToBcd2>
 80069ba:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80069bc:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	78db      	ldrb	r3, [r3, #3]
 80069c4:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80069c6:	4313      	orrs	r3, r2
 80069c8:	617b      	str	r3, [r7, #20]
 80069ca:	e018      	b.n	80069fe <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d102      	bne.n	80069e0 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	2200      	movs	r2, #0
 80069de:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	785b      	ldrb	r3, [r3, #1]
 80069ea:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80069ec:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80069ee:	68ba      	ldr	r2, [r7, #8]
 80069f0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80069f2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	78db      	ldrb	r3, [r3, #3]
 80069f8:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80069fa:	4313      	orrs	r3, r2
 80069fc:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	22ca      	movs	r2, #202	; 0xca
 8006a04:	625a      	str	r2, [r3, #36]	; 0x24
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	2253      	movs	r2, #83	; 0x53
 8006a0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006a0e:	68f8      	ldr	r0, [r7, #12]
 8006a10:	f000 f9de 	bl	8006dd0 <RTC_EnterInitMode>
 8006a14:	4603      	mov	r3, r0
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00d      	beq.n	8006a36 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	22ff      	movs	r2, #255	; 0xff
 8006a20:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2204      	movs	r2, #4
 8006a26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	e04b      	b.n	8006ace <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006a40:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006a44:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	689a      	ldr	r2, [r3, #8]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006a54:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	6899      	ldr	r1, [r3, #8]
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	68da      	ldr	r2, [r3, #12]
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	691b      	ldr	r3, [r3, #16]
 8006a64:	431a      	orrs	r2, r3
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	430a      	orrs	r2, r1
 8006a6c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	68da      	ldr	r2, [r3, #12]
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a7c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	f003 0320 	and.w	r3, r3, #32
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d113      	bne.n	8006ab4 <HAL_RTC_SetTime+0x166>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006a8c:	68f8      	ldr	r0, [r7, #12]
 8006a8e:	f000 f979 	bl	8006d84 <HAL_RTC_WaitForSynchro>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d00d      	beq.n	8006ab4 <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	22ff      	movs	r2, #255	; 0xff
 8006a9e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2204      	movs	r2, #4
 8006aa4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e00c      	b.n	8006ace <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	22ff      	movs	r2, #255	; 0xff
 8006aba:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    __HAL_UNLOCK(hrtc);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8006acc:	2300      	movs	r3, #0
  }
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	371c      	adds	r7, #28
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd90      	pop	{r4, r7, pc}

08006ad6 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b086      	sub	sp, #24
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	60f8      	str	r0, [r7, #12]
 8006ade:	60b9      	str	r1, [r7, #8]
 8006ae0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006b04:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006b08:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	0c1b      	lsrs	r3, r3, #16
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b14:	b2da      	uxtb	r2, r3
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	0a1b      	lsrs	r3, r3, #8
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b24:	b2da      	uxtb	r2, r3
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b32:	b2da      	uxtb	r2, r3
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	0c1b      	lsrs	r3, r3, #16
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b42:	b2da      	uxtb	r2, r3
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d11a      	bne.n	8006b84 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	4618      	mov	r0, r3
 8006b54:	f000 f986 	bl	8006e64 <RTC_Bcd2ToByte>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	785b      	ldrb	r3, [r3, #1]
 8006b64:	4618      	mov	r0, r3
 8006b66:	f000 f97d 	bl	8006e64 <RTC_Bcd2ToByte>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	789b      	ldrb	r3, [r3, #2]
 8006b76:	4618      	mov	r0, r3
 8006b78:	f000 f974 	bl	8006e64 <RTC_Bcd2ToByte>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	461a      	mov	r2, r3
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006b84:	2300      	movs	r3, #0
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3718      	adds	r7, #24
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}

08006b8e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006b8e:	b590      	push	{r4, r7, lr}
 8006b90:	b087      	sub	sp, #28
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	60f8      	str	r0, [r7, #12]
 8006b96:	60b9      	str	r1, [r7, #8]
 8006b98:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d101      	bne.n	8006ba8 <HAL_RTC_SetDate+0x1a>
 8006ba4:	2302      	movs	r3, #2
 8006ba6:	e09c      	b.n	8006ce2 <HAL_RTC_SetDate+0x154>
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2201      	movs	r2, #1
 8006bac:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2202      	movs	r2, #2
 8006bb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d10e      	bne.n	8006bdc <HAL_RTC_SetDate+0x4e>
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	785b      	ldrb	r3, [r3, #1]
 8006bc2:	f003 0310 	and.w	r3, r3, #16
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d008      	beq.n	8006bdc <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	785b      	ldrb	r3, [r3, #1]
 8006bce:	f023 0310 	bic.w	r3, r3, #16
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	330a      	adds	r3, #10
 8006bd6:	b2da      	uxtb	r2, r3
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d11c      	bne.n	8006c1c <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	78db      	ldrb	r3, [r3, #3]
 8006be6:	4618      	mov	r0, r3
 8006be8:	f000 f91c 	bl	8006e24 <RTC_ByteToBcd2>
 8006bec:	4603      	mov	r3, r0
 8006bee:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	785b      	ldrb	r3, [r3, #1]
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f000 f915 	bl	8006e24 <RTC_ByteToBcd2>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006bfe:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	789b      	ldrb	r3, [r3, #2]
 8006c04:	4618      	mov	r0, r3
 8006c06:	f000 f90d 	bl	8006e24 <RTC_ByteToBcd2>
 8006c0a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006c0c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006c16:	4313      	orrs	r3, r2
 8006c18:	617b      	str	r3, [r7, #20]
 8006c1a:	e00e      	b.n	8006c3a <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	78db      	ldrb	r3, [r3, #3]
 8006c20:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	785b      	ldrb	r3, [r3, #1]
 8006c26:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006c28:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8006c2a:	68ba      	ldr	r2, [r7, #8]
 8006c2c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8006c2e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006c36:	4313      	orrs	r3, r2
 8006c38:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	22ca      	movs	r2, #202	; 0xca
 8006c40:	625a      	str	r2, [r3, #36]	; 0x24
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	2253      	movs	r2, #83	; 0x53
 8006c48:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006c4a:	68f8      	ldr	r0, [r7, #12]
 8006c4c:	f000 f8c0 	bl	8006dd0 <RTC_EnterInitMode>
 8006c50:	4603      	mov	r3, r0
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d00d      	beq.n	8006c72 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	22ff      	movs	r2, #255	; 0xff
 8006c5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2204      	movs	r2, #4
 8006c62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e037      	b.n	8006ce2 <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006c7c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006c80:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	68da      	ldr	r2, [r3, #12]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c90:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	f003 0320 	and.w	r3, r3, #32
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d113      	bne.n	8006cc8 <HAL_RTC_SetDate+0x13a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006ca0:	68f8      	ldr	r0, [r7, #12]
 8006ca2:	f000 f86f 	bl	8006d84 <HAL_RTC_WaitForSynchro>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d00d      	beq.n	8006cc8 <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	22ff      	movs	r2, #255	; 0xff
 8006cb2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2204      	movs	r2, #4
 8006cb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e00c      	b.n	8006ce2 <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	22ff      	movs	r2, #255	; 0xff
 8006cce:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8006ce0:	2300      	movs	r3, #0
  }
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	371c      	adds	r7, #28
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd90      	pop	{r4, r7, pc}

08006cea <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006cea:	b580      	push	{r7, lr}
 8006cec:	b086      	sub	sp, #24
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	60f8      	str	r0, [r7, #12]
 8006cf2:	60b9      	str	r1, [r7, #8]
 8006cf4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006d00:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006d04:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	0c1b      	lsrs	r3, r3, #16
 8006d0a:	b2da      	uxtb	r2, r3
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	0a1b      	lsrs	r3, r3, #8
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	f003 031f 	and.w	r3, r3, #31
 8006d1a:	b2da      	uxtb	r2, r3
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d28:	b2da      	uxtb	r2, r3
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	0b5b      	lsrs	r3, r3, #13
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	f003 0307 	and.w	r3, r3, #7
 8006d38:	b2da      	uxtb	r2, r3
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d11a      	bne.n	8006d7a <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	78db      	ldrb	r3, [r3, #3]
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f000 f88b 	bl	8006e64 <RTC_Bcd2ToByte>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	461a      	mov	r2, r3
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	785b      	ldrb	r3, [r3, #1]
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f000 f882 	bl	8006e64 <RTC_Bcd2ToByte>
 8006d60:	4603      	mov	r3, r0
 8006d62:	461a      	mov	r2, r3
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	789b      	ldrb	r3, [r3, #2]
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f000 f879 	bl	8006e64 <RTC_Bcd2ToByte>
 8006d72:	4603      	mov	r3, r0
 8006d74:	461a      	mov	r2, r3
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006d7a:	2300      	movs	r3, #0
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3718      	adds	r7, #24
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	68da      	ldr	r2, [r3, #12]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006d9a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006d9c:	f7fb fe9a 	bl	8002ad4 <HAL_GetTick>
 8006da0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006da2:	e009      	b.n	8006db8 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006da4:	f7fb fe96 	bl	8002ad4 <HAL_GetTick>
 8006da8:	4602      	mov	r2, r0
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	1ad3      	subs	r3, r2, r3
 8006dae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006db2:	d901      	bls.n	8006db8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006db4:	2303      	movs	r3, #3
 8006db6:	e007      	b.n	8006dc8 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	68db      	ldr	r3, [r3, #12]
 8006dbe:	f003 0320 	and.w	r3, r3, #32
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d0ee      	beq.n	8006da4 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006dc6:	2300      	movs	r3, #0
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3710      	adds	r7, #16
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	68db      	ldr	r3, [r3, #12]
 8006dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d119      	bne.n	8006e1a <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f04f 32ff 	mov.w	r2, #4294967295
 8006dee:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006df0:	f7fb fe70 	bl	8002ad4 <HAL_GetTick>
 8006df4:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006df6:	e009      	b.n	8006e0c <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006df8:	f7fb fe6c 	bl	8002ad4 <HAL_GetTick>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	1ad3      	subs	r3, r2, r3
 8006e02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e06:	d901      	bls.n	8006e0c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8006e08:	2303      	movs	r3, #3
 8006e0a:	e007      	b.n	8006e1c <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d0ee      	beq.n	8006df8 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8006e1a:	2300      	movs	r3, #0
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3710      	adds	r7, #16
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}

08006e24 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b085      	sub	sp, #20
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8006e32:	79fb      	ldrb	r3, [r7, #7]
 8006e34:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 8006e36:	e005      	b.n	8006e44 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8006e3e:	7afb      	ldrb	r3, [r7, #11]
 8006e40:	3b0a      	subs	r3, #10
 8006e42:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 8006e44:	7afb      	ldrb	r3, [r7, #11]
 8006e46:	2b09      	cmp	r3, #9
 8006e48:	d8f6      	bhi.n	8006e38 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	011b      	lsls	r3, r3, #4
 8006e50:	b2da      	uxtb	r2, r3
 8006e52:	7afb      	ldrb	r3, [r7, #11]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	b2db      	uxtb	r3, r3
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3714      	adds	r7, #20
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b085      	sub	sp, #20
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8006e6e:	79fb      	ldrb	r3, [r7, #7]
 8006e70:	091b      	lsrs	r3, r3, #4
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	461a      	mov	r2, r3
 8006e76:	4613      	mov	r3, r2
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	4413      	add	r3, r2
 8006e7c:	005b      	lsls	r3, r3, #1
 8006e7e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	b2da      	uxtb	r2, r3
 8006e84:	79fb      	ldrb	r3, [r7, #7]
 8006e86:	f003 030f 	and.w	r3, r3, #15
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	4413      	add	r3, r2
 8006e8e:	b2db      	uxtb	r3, r3
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3714      	adds	r7, #20
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b082      	sub	sp, #8
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d101      	bne.n	8006eae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e049      	b.n	8006f42 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d106      	bne.n	8006ec8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f7fb fb66 	bl	8002594 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2202      	movs	r2, #2
 8006ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	3304      	adds	r3, #4
 8006ed8:	4619      	mov	r1, r3
 8006eda:	4610      	mov	r0, r2
 8006edc:	f000 fa92 	bl	8007404 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2201      	movs	r2, #1
 8006f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2201      	movs	r2, #1
 8006f14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3708      	adds	r7, #8
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
	...

08006f4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b085      	sub	sp, #20
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d001      	beq.n	8006f64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006f60:	2301      	movs	r3, #1
 8006f62:	e036      	b.n	8006fd2 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2202      	movs	r2, #2
 8006f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	68da      	ldr	r2, [r3, #12]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f042 0201 	orr.w	r2, r2, #1
 8006f7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a17      	ldr	r2, [pc, #92]	; (8006fe0 <HAL_TIM_Base_Start_IT+0x94>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d004      	beq.n	8006f90 <HAL_TIM_Base_Start_IT+0x44>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f8e:	d115      	bne.n	8006fbc <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	689a      	ldr	r2, [r3, #8]
 8006f96:	4b13      	ldr	r3, [pc, #76]	; (8006fe4 <HAL_TIM_Base_Start_IT+0x98>)
 8006f98:	4013      	ands	r3, r2
 8006f9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2b06      	cmp	r3, #6
 8006fa0:	d015      	beq.n	8006fce <HAL_TIM_Base_Start_IT+0x82>
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fa8:	d011      	beq.n	8006fce <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f042 0201 	orr.w	r2, r2, #1
 8006fb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fba:	e008      	b.n	8006fce <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f042 0201 	orr.w	r2, r2, #1
 8006fca:	601a      	str	r2, [r3, #0]
 8006fcc:	e000      	b.n	8006fd0 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006fd0:	2300      	movs	r3, #0
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3714      	adds	r7, #20
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr
 8006fde:	bf00      	nop
 8006fe0:	40012c00 	.word	0x40012c00
 8006fe4:	00010007 	.word	0x00010007

08006fe8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b082      	sub	sp, #8
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	f003 0302 	and.w	r3, r3, #2
 8006ffa:	2b02      	cmp	r3, #2
 8006ffc:	d122      	bne.n	8007044 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	68db      	ldr	r3, [r3, #12]
 8007004:	f003 0302 	and.w	r3, r3, #2
 8007008:	2b02      	cmp	r3, #2
 800700a:	d11b      	bne.n	8007044 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f06f 0202 	mvn.w	r2, #2
 8007014:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2201      	movs	r2, #1
 800701a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	699b      	ldr	r3, [r3, #24]
 8007022:	f003 0303 	and.w	r3, r3, #3
 8007026:	2b00      	cmp	r3, #0
 8007028:	d003      	beq.n	8007032 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 f9cb 	bl	80073c6 <HAL_TIM_IC_CaptureCallback>
 8007030:	e005      	b.n	800703e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 f9bd 	bl	80073b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 f9ce 	bl	80073da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	691b      	ldr	r3, [r3, #16]
 800704a:	f003 0304 	and.w	r3, r3, #4
 800704e:	2b04      	cmp	r3, #4
 8007050:	d122      	bne.n	8007098 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	f003 0304 	and.w	r3, r3, #4
 800705c:	2b04      	cmp	r3, #4
 800705e:	d11b      	bne.n	8007098 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f06f 0204 	mvn.w	r2, #4
 8007068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2202      	movs	r2, #2
 800706e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	699b      	ldr	r3, [r3, #24]
 8007076:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800707a:	2b00      	cmp	r3, #0
 800707c:	d003      	beq.n	8007086 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 f9a1 	bl	80073c6 <HAL_TIM_IC_CaptureCallback>
 8007084:	e005      	b.n	8007092 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 f993 	bl	80073b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 f9a4 	bl	80073da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	f003 0308 	and.w	r3, r3, #8
 80070a2:	2b08      	cmp	r3, #8
 80070a4:	d122      	bne.n	80070ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	68db      	ldr	r3, [r3, #12]
 80070ac:	f003 0308 	and.w	r3, r3, #8
 80070b0:	2b08      	cmp	r3, #8
 80070b2:	d11b      	bne.n	80070ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f06f 0208 	mvn.w	r2, #8
 80070bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2204      	movs	r2, #4
 80070c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	69db      	ldr	r3, [r3, #28]
 80070ca:	f003 0303 	and.w	r3, r3, #3
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d003      	beq.n	80070da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 f977 	bl	80073c6 <HAL_TIM_IC_CaptureCallback>
 80070d8:	e005      	b.n	80070e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 f969 	bl	80073b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 f97a 	bl	80073da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2200      	movs	r2, #0
 80070ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	691b      	ldr	r3, [r3, #16]
 80070f2:	f003 0310 	and.w	r3, r3, #16
 80070f6:	2b10      	cmp	r3, #16
 80070f8:	d122      	bne.n	8007140 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	f003 0310 	and.w	r3, r3, #16
 8007104:	2b10      	cmp	r3, #16
 8007106:	d11b      	bne.n	8007140 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f06f 0210 	mvn.w	r2, #16
 8007110:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2208      	movs	r2, #8
 8007116:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	69db      	ldr	r3, [r3, #28]
 800711e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007122:	2b00      	cmp	r3, #0
 8007124:	d003      	beq.n	800712e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 f94d 	bl	80073c6 <HAL_TIM_IC_CaptureCallback>
 800712c:	e005      	b.n	800713a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 f93f 	bl	80073b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 f950 	bl	80073da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2200      	movs	r2, #0
 800713e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	691b      	ldr	r3, [r3, #16]
 8007146:	f003 0301 	and.w	r3, r3, #1
 800714a:	2b01      	cmp	r3, #1
 800714c:	d10e      	bne.n	800716c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	68db      	ldr	r3, [r3, #12]
 8007154:	f003 0301 	and.w	r3, r3, #1
 8007158:	2b01      	cmp	r3, #1
 800715a:	d107      	bne.n	800716c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f06f 0201 	mvn.w	r2, #1
 8007164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f7fa ffac 	bl	80020c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	691b      	ldr	r3, [r3, #16]
 8007172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007176:	2b80      	cmp	r3, #128	; 0x80
 8007178:	d10e      	bne.n	8007198 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007184:	2b80      	cmp	r3, #128	; 0x80
 8007186:	d107      	bne.n	8007198 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 fa8c 	bl	80076b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	691b      	ldr	r3, [r3, #16]
 800719e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071a6:	d10e      	bne.n	80071c6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071b2:	2b80      	cmp	r3, #128	; 0x80
 80071b4:	d107      	bne.n	80071c6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80071be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 fa7f 	bl	80076c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	691b      	ldr	r3, [r3, #16]
 80071cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071d0:	2b40      	cmp	r3, #64	; 0x40
 80071d2:	d10e      	bne.n	80071f2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	68db      	ldr	r3, [r3, #12]
 80071da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071de:	2b40      	cmp	r3, #64	; 0x40
 80071e0:	d107      	bne.n	80071f2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80071ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 f8fe 	bl	80073ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	691b      	ldr	r3, [r3, #16]
 80071f8:	f003 0320 	and.w	r3, r3, #32
 80071fc:	2b20      	cmp	r3, #32
 80071fe:	d10e      	bne.n	800721e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	68db      	ldr	r3, [r3, #12]
 8007206:	f003 0320 	and.w	r3, r3, #32
 800720a:	2b20      	cmp	r3, #32
 800720c:	d107      	bne.n	800721e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f06f 0220 	mvn.w	r2, #32
 8007216:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f000 fa3f 	bl	800769c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800721e:	bf00      	nop
 8007220:	3708      	adds	r7, #8
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}

08007226 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007226:	b580      	push	{r7, lr}
 8007228:	b084      	sub	sp, #16
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
 800722e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007236:	2b01      	cmp	r3, #1
 8007238:	d101      	bne.n	800723e <HAL_TIM_ConfigClockSource+0x18>
 800723a:	2302      	movs	r3, #2
 800723c:	e0b5      	b.n	80073aa <HAL_TIM_ConfigClockSource+0x184>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2201      	movs	r2, #1
 8007242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2202      	movs	r2, #2
 800724a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800725c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007260:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007268:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800727a:	d03e      	beq.n	80072fa <HAL_TIM_ConfigClockSource+0xd4>
 800727c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007280:	f200 8087 	bhi.w	8007392 <HAL_TIM_ConfigClockSource+0x16c>
 8007284:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007288:	f000 8085 	beq.w	8007396 <HAL_TIM_ConfigClockSource+0x170>
 800728c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007290:	d87f      	bhi.n	8007392 <HAL_TIM_ConfigClockSource+0x16c>
 8007292:	2b70      	cmp	r3, #112	; 0x70
 8007294:	d01a      	beq.n	80072cc <HAL_TIM_ConfigClockSource+0xa6>
 8007296:	2b70      	cmp	r3, #112	; 0x70
 8007298:	d87b      	bhi.n	8007392 <HAL_TIM_ConfigClockSource+0x16c>
 800729a:	2b60      	cmp	r3, #96	; 0x60
 800729c:	d050      	beq.n	8007340 <HAL_TIM_ConfigClockSource+0x11a>
 800729e:	2b60      	cmp	r3, #96	; 0x60
 80072a0:	d877      	bhi.n	8007392 <HAL_TIM_ConfigClockSource+0x16c>
 80072a2:	2b50      	cmp	r3, #80	; 0x50
 80072a4:	d03c      	beq.n	8007320 <HAL_TIM_ConfigClockSource+0xfa>
 80072a6:	2b50      	cmp	r3, #80	; 0x50
 80072a8:	d873      	bhi.n	8007392 <HAL_TIM_ConfigClockSource+0x16c>
 80072aa:	2b40      	cmp	r3, #64	; 0x40
 80072ac:	d058      	beq.n	8007360 <HAL_TIM_ConfigClockSource+0x13a>
 80072ae:	2b40      	cmp	r3, #64	; 0x40
 80072b0:	d86f      	bhi.n	8007392 <HAL_TIM_ConfigClockSource+0x16c>
 80072b2:	2b30      	cmp	r3, #48	; 0x30
 80072b4:	d064      	beq.n	8007380 <HAL_TIM_ConfigClockSource+0x15a>
 80072b6:	2b30      	cmp	r3, #48	; 0x30
 80072b8:	d86b      	bhi.n	8007392 <HAL_TIM_ConfigClockSource+0x16c>
 80072ba:	2b20      	cmp	r3, #32
 80072bc:	d060      	beq.n	8007380 <HAL_TIM_ConfigClockSource+0x15a>
 80072be:	2b20      	cmp	r3, #32
 80072c0:	d867      	bhi.n	8007392 <HAL_TIM_ConfigClockSource+0x16c>
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d05c      	beq.n	8007380 <HAL_TIM_ConfigClockSource+0x15a>
 80072c6:	2b10      	cmp	r3, #16
 80072c8:	d05a      	beq.n	8007380 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80072ca:	e062      	b.n	8007392 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6818      	ldr	r0, [r3, #0]
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	6899      	ldr	r1, [r3, #8]
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	685a      	ldr	r2, [r3, #4]
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	68db      	ldr	r3, [r3, #12]
 80072dc:	f000 f95e 	bl	800759c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80072ee:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	68fa      	ldr	r2, [r7, #12]
 80072f6:	609a      	str	r2, [r3, #8]
      break;
 80072f8:	e04e      	b.n	8007398 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6818      	ldr	r0, [r3, #0]
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	6899      	ldr	r1, [r3, #8]
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	685a      	ldr	r2, [r3, #4]
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	68db      	ldr	r3, [r3, #12]
 800730a:	f000 f947 	bl	800759c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	689a      	ldr	r2, [r3, #8]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800731c:	609a      	str	r2, [r3, #8]
      break;
 800731e:	e03b      	b.n	8007398 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6818      	ldr	r0, [r3, #0]
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	6859      	ldr	r1, [r3, #4]
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	68db      	ldr	r3, [r3, #12]
 800732c:	461a      	mov	r2, r3
 800732e:	f000 f8b9 	bl	80074a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	2150      	movs	r1, #80	; 0x50
 8007338:	4618      	mov	r0, r3
 800733a:	f000 f912 	bl	8007562 <TIM_ITRx_SetConfig>
      break;
 800733e:	e02b      	b.n	8007398 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6818      	ldr	r0, [r3, #0]
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	6859      	ldr	r1, [r3, #4]
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	461a      	mov	r2, r3
 800734e:	f000 f8d8 	bl	8007502 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	2160      	movs	r1, #96	; 0x60
 8007358:	4618      	mov	r0, r3
 800735a:	f000 f902 	bl	8007562 <TIM_ITRx_SetConfig>
      break;
 800735e:	e01b      	b.n	8007398 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6818      	ldr	r0, [r3, #0]
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	6859      	ldr	r1, [r3, #4]
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	68db      	ldr	r3, [r3, #12]
 800736c:	461a      	mov	r2, r3
 800736e:	f000 f899 	bl	80074a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	2140      	movs	r1, #64	; 0x40
 8007378:	4618      	mov	r0, r3
 800737a:	f000 f8f2 	bl	8007562 <TIM_ITRx_SetConfig>
      break;
 800737e:	e00b      	b.n	8007398 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4619      	mov	r1, r3
 800738a:	4610      	mov	r0, r2
 800738c:	f000 f8e9 	bl	8007562 <TIM_ITRx_SetConfig>
        break;
 8007390:	e002      	b.n	8007398 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8007392:	bf00      	nop
 8007394:	e000      	b.n	8007398 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8007396:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2201      	movs	r2, #1
 800739c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073a8:	2300      	movs	r3, #0
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3710      	adds	r7, #16
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}

080073b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80073b2:	b480      	push	{r7}
 80073b4:	b083      	sub	sp, #12
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80073ba:	bf00      	nop
 80073bc:	370c      	adds	r7, #12
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr

080073c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80073c6:	b480      	push	{r7}
 80073c8:	b083      	sub	sp, #12
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80073ce:	bf00      	nop
 80073d0:	370c      	adds	r7, #12
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr

080073da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80073da:	b480      	push	{r7}
 80073dc:	b083      	sub	sp, #12
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80073e2:	bf00      	nop
 80073e4:	370c      	adds	r7, #12
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr

080073ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80073ee:	b480      	push	{r7}
 80073f0:	b083      	sub	sp, #12
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80073f6:	bf00      	nop
 80073f8:	370c      	adds	r7, #12
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr
	...

08007404 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007404:	b480      	push	{r7}
 8007406:	b085      	sub	sp, #20
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	4a22      	ldr	r2, [pc, #136]	; (80074a0 <TIM_Base_SetConfig+0x9c>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d003      	beq.n	8007424 <TIM_Base_SetConfig+0x20>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007422:	d108      	bne.n	8007436 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800742a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	68fa      	ldr	r2, [r7, #12]
 8007432:	4313      	orrs	r3, r2
 8007434:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	4a19      	ldr	r2, [pc, #100]	; (80074a0 <TIM_Base_SetConfig+0x9c>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d003      	beq.n	8007446 <TIM_Base_SetConfig+0x42>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007444:	d108      	bne.n	8007458 <TIM_Base_SetConfig+0x54>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800744c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	68db      	ldr	r3, [r3, #12]
 8007452:	68fa      	ldr	r2, [r7, #12]
 8007454:	4313      	orrs	r3, r2
 8007456:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	695b      	ldr	r3, [r3, #20]
 8007462:	4313      	orrs	r3, r2
 8007464:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	68fa      	ldr	r2, [r7, #12]
 800746a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	689a      	ldr	r2, [r3, #8]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	681a      	ldr	r2, [r3, #0]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	4a08      	ldr	r2, [pc, #32]	; (80074a0 <TIM_Base_SetConfig+0x9c>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d103      	bne.n	800748c <TIM_Base_SetConfig+0x88>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	691a      	ldr	r2, [r3, #16]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2201      	movs	r2, #1
 8007490:	615a      	str	r2, [r3, #20]
}
 8007492:	bf00      	nop
 8007494:	3714      	adds	r7, #20
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr
 800749e:	bf00      	nop
 80074a0:	40012c00 	.word	0x40012c00

080074a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b087      	sub	sp, #28
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	60b9      	str	r1, [r7, #8]
 80074ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6a1b      	ldr	r3, [r3, #32]
 80074b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	6a1b      	ldr	r3, [r3, #32]
 80074ba:	f023 0201 	bic.w	r2, r3, #1
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	699b      	ldr	r3, [r3, #24]
 80074c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80074ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	011b      	lsls	r3, r3, #4
 80074d4:	693a      	ldr	r2, [r7, #16]
 80074d6:	4313      	orrs	r3, r2
 80074d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	f023 030a 	bic.w	r3, r3, #10
 80074e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80074e2:	697a      	ldr	r2, [r7, #20]
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	4313      	orrs	r3, r2
 80074e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	693a      	ldr	r2, [r7, #16]
 80074ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	697a      	ldr	r2, [r7, #20]
 80074f4:	621a      	str	r2, [r3, #32]
}
 80074f6:	bf00      	nop
 80074f8:	371c      	adds	r7, #28
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr

08007502 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007502:	b480      	push	{r7}
 8007504:	b087      	sub	sp, #28
 8007506:	af00      	add	r7, sp, #0
 8007508:	60f8      	str	r0, [r7, #12]
 800750a:	60b9      	str	r1, [r7, #8]
 800750c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	6a1b      	ldr	r3, [r3, #32]
 8007512:	f023 0210 	bic.w	r2, r3, #16
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	699b      	ldr	r3, [r3, #24]
 800751e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6a1b      	ldr	r3, [r3, #32]
 8007524:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800752c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	031b      	lsls	r3, r3, #12
 8007532:	697a      	ldr	r2, [r7, #20]
 8007534:	4313      	orrs	r3, r2
 8007536:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800753e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	011b      	lsls	r3, r3, #4
 8007544:	693a      	ldr	r2, [r7, #16]
 8007546:	4313      	orrs	r3, r2
 8007548:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	697a      	ldr	r2, [r7, #20]
 800754e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	693a      	ldr	r2, [r7, #16]
 8007554:	621a      	str	r2, [r3, #32]
}
 8007556:	bf00      	nop
 8007558:	371c      	adds	r7, #28
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr

08007562 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007562:	b480      	push	{r7}
 8007564:	b085      	sub	sp, #20
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
 800756a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800757c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800757e:	683a      	ldr	r2, [r7, #0]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	4313      	orrs	r3, r2
 8007584:	f043 0307 	orr.w	r3, r3, #7
 8007588:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	68fa      	ldr	r2, [r7, #12]
 800758e:	609a      	str	r2, [r3, #8]
}
 8007590:	bf00      	nop
 8007592:	3714      	adds	r7, #20
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800759c:	b480      	push	{r7}
 800759e:	b087      	sub	sp, #28
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	60b9      	str	r1, [r7, #8]
 80075a6:	607a      	str	r2, [r7, #4]
 80075a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80075b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	021a      	lsls	r2, r3, #8
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	431a      	orrs	r2, r3
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	4313      	orrs	r3, r2
 80075c4:	697a      	ldr	r2, [r7, #20]
 80075c6:	4313      	orrs	r3, r2
 80075c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	697a      	ldr	r2, [r7, #20]
 80075ce:	609a      	str	r2, [r3, #8]
}
 80075d0:	bf00      	nop
 80075d2:	371c      	adds	r7, #28
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80075dc:	b480      	push	{r7}
 80075de:	b085      	sub	sp, #20
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d101      	bne.n	80075f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80075f0:	2302      	movs	r3, #2
 80075f2:	e04a      	b.n	800768a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2202      	movs	r2, #2
 8007600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a1f      	ldr	r2, [pc, #124]	; (8007698 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d108      	bne.n	8007630 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007624:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	68fa      	ldr	r2, [r7, #12]
 800762c:	4313      	orrs	r3, r2
 800762e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007636:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	68fa      	ldr	r2, [r7, #12]
 800763e:	4313      	orrs	r3, r2
 8007640:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	68fa      	ldr	r2, [r7, #12]
 8007648:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a12      	ldr	r2, [pc, #72]	; (8007698 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d004      	beq.n	800765e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800765c:	d10c      	bne.n	8007678 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007664:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	68ba      	ldr	r2, [r7, #8]
 800766c:	4313      	orrs	r3, r2
 800766e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	68ba      	ldr	r2, [r7, #8]
 8007676:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2201      	movs	r2, #1
 800767c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007688:	2300      	movs	r3, #0
}
 800768a:	4618      	mov	r0, r3
 800768c:	3714      	adds	r7, #20
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr
 8007696:	bf00      	nop
 8007698:	40012c00 	.word	0x40012c00

0800769c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80076a4:	bf00      	nop
 80076a6:	370c      	adds	r7, #12
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b083      	sub	sp, #12
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80076b8:	bf00      	nop
 80076ba:	370c      	adds	r7, #12
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80076cc:	bf00      	nop
 80076ce:	370c      	adds	r7, #12
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr

080076d8 <LL_RCC_GetUSARTClockSource>:
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80076e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076e4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4013      	ands	r3, r2
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	370c      	adds	r7, #12
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr

080076f8 <LL_RCC_GetLPUARTClockSource>:
{
 80076f8:	b480      	push	{r7}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007700:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007704:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	4013      	ands	r3, r2
}
 800770c:	4618      	mov	r0, r3
 800770e:	370c      	adds	r7, #12
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr

08007718 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d101      	bne.n	800772a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	e042      	b.n	80077b0 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007730:	2b00      	cmp	r3, #0
 8007732:	d106      	bne.n	8007742 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f7fa ff41 	bl	80025c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2224      	movs	r2, #36	; 0x24
 8007746:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f022 0201 	bic.w	r2, r2, #1
 8007758:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 fc50 	bl	8008000 <UART_SetConfig>
 8007760:	4603      	mov	r3, r0
 8007762:	2b01      	cmp	r3, #1
 8007764:	d101      	bne.n	800776a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	e022      	b.n	80077b0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800776e:	2b00      	cmp	r3, #0
 8007770:	d002      	beq.n	8007778 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 fe4a 	bl	800840c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	685a      	ldr	r2, [r3, #4]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007786:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	689a      	ldr	r2, [r3, #8]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007796:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f042 0201 	orr.w	r2, r2, #1
 80077a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 fed1 	bl	8008550 <UART_CheckIdleState>
 80077ae:	4603      	mov	r3, r0
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3708      	adds	r7, #8
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b08a      	sub	sp, #40	; 0x28
 80077bc:	af02      	add	r7, sp, #8
 80077be:	60f8      	str	r0, [r7, #12]
 80077c0:	60b9      	str	r1, [r7, #8]
 80077c2:	603b      	str	r3, [r7, #0]
 80077c4:	4613      	mov	r3, r2
 80077c6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077ce:	2b20      	cmp	r3, #32
 80077d0:	f040 8083 	bne.w	80078da <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d002      	beq.n	80077e0 <HAL_UART_Transmit+0x28>
 80077da:	88fb      	ldrh	r3, [r7, #6]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d101      	bne.n	80077e4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80077e0:	2301      	movs	r3, #1
 80077e2:	e07b      	b.n	80078dc <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80077ea:	2b01      	cmp	r3, #1
 80077ec:	d101      	bne.n	80077f2 <HAL_UART_Transmit+0x3a>
 80077ee:	2302      	movs	r3, #2
 80077f0:	e074      	b.n	80078dc <HAL_UART_Transmit+0x124>
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2201      	movs	r2, #1
 80077f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2221      	movs	r2, #33	; 0x21
 8007806:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800780a:	f7fb f963 	bl	8002ad4 <HAL_GetTick>
 800780e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	88fa      	ldrh	r2, [r7, #6]
 8007814:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	88fa      	ldrh	r2, [r7, #6]
 800781c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007828:	d108      	bne.n	800783c <HAL_UART_Transmit+0x84>
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	691b      	ldr	r3, [r3, #16]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d104      	bne.n	800783c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007832:	2300      	movs	r3, #0
 8007834:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	61bb      	str	r3, [r7, #24]
 800783a:	e003      	b.n	8007844 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007840:	2300      	movs	r3, #0
 8007842:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2200      	movs	r2, #0
 8007848:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800784c:	e02c      	b.n	80078a8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	9300      	str	r3, [sp, #0]
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	2200      	movs	r2, #0
 8007856:	2180      	movs	r1, #128	; 0x80
 8007858:	68f8      	ldr	r0, [r7, #12]
 800785a:	f000 fec4 	bl	80085e6 <UART_WaitOnFlagUntilTimeout>
 800785e:	4603      	mov	r3, r0
 8007860:	2b00      	cmp	r3, #0
 8007862:	d001      	beq.n	8007868 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007864:	2303      	movs	r3, #3
 8007866:	e039      	b.n	80078dc <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d10b      	bne.n	8007886 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800786e:	69bb      	ldr	r3, [r7, #24]
 8007870:	881b      	ldrh	r3, [r3, #0]
 8007872:	461a      	mov	r2, r3
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800787c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800787e:	69bb      	ldr	r3, [r7, #24]
 8007880:	3302      	adds	r3, #2
 8007882:	61bb      	str	r3, [r7, #24]
 8007884:	e007      	b.n	8007896 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	781a      	ldrb	r2, [r3, #0]
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007890:	69fb      	ldr	r3, [r7, #28]
 8007892:	3301      	adds	r3, #1
 8007894:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800789c:	b29b      	uxth	r3, r3
 800789e:	3b01      	subs	r3, #1
 80078a0:	b29a      	uxth	r2, r3
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d1cc      	bne.n	800784e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	9300      	str	r3, [sp, #0]
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	2200      	movs	r2, #0
 80078bc:	2140      	movs	r1, #64	; 0x40
 80078be:	68f8      	ldr	r0, [r7, #12]
 80078c0:	f000 fe91 	bl	80085e6 <UART_WaitOnFlagUntilTimeout>
 80078c4:	4603      	mov	r3, r0
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d001      	beq.n	80078ce <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80078ca:	2303      	movs	r3, #3
 80078cc:	e006      	b.n	80078dc <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2220      	movs	r2, #32
 80078d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80078d6:	2300      	movs	r3, #0
 80078d8:	e000      	b.n	80078dc <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80078da:	2302      	movs	r3, #2
  }
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3720      	adds	r7, #32
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b08a      	sub	sp, #40	; 0x28
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	60f8      	str	r0, [r7, #12]
 80078ec:	60b9      	str	r1, [r7, #8]
 80078ee:	4613      	mov	r3, r2
 80078f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078f8:	2b20      	cmp	r3, #32
 80078fa:	d142      	bne.n	8007982 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d002      	beq.n	8007908 <HAL_UART_Receive_IT+0x24>
 8007902:	88fb      	ldrh	r3, [r7, #6]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d101      	bne.n	800790c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007908:	2301      	movs	r3, #1
 800790a:	e03b      	b.n	8007984 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007912:	2b01      	cmp	r3, #1
 8007914:	d101      	bne.n	800791a <HAL_UART_Receive_IT+0x36>
 8007916:	2302      	movs	r3, #2
 8007918:	e034      	b.n	8007984 <HAL_UART_Receive_IT+0xa0>
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2201      	movs	r2, #1
 800791e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2200      	movs	r2, #0
 8007926:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a17      	ldr	r2, [pc, #92]	; (800798c <HAL_UART_Receive_IT+0xa8>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d01f      	beq.n	8007972 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800793c:	2b00      	cmp	r3, #0
 800793e:	d018      	beq.n	8007972 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	e853 3f00 	ldrex	r3, [r3]
 800794c:	613b      	str	r3, [r7, #16]
   return(result);
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007954:	627b      	str	r3, [r7, #36]	; 0x24
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	461a      	mov	r2, r3
 800795c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795e:	623b      	str	r3, [r7, #32]
 8007960:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007962:	69f9      	ldr	r1, [r7, #28]
 8007964:	6a3a      	ldr	r2, [r7, #32]
 8007966:	e841 2300 	strex	r3, r2, [r1]
 800796a:	61bb      	str	r3, [r7, #24]
   return(result);
 800796c:	69bb      	ldr	r3, [r7, #24]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d1e6      	bne.n	8007940 <HAL_UART_Receive_IT+0x5c>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007972:	88fb      	ldrh	r3, [r7, #6]
 8007974:	461a      	mov	r2, r3
 8007976:	68b9      	ldr	r1, [r7, #8]
 8007978:	68f8      	ldr	r0, [r7, #12]
 800797a:	f000 fefd 	bl	8008778 <UART_Start_Receive_IT>
 800797e:	4603      	mov	r3, r0
 8007980:	e000      	b.n	8007984 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007982:	2302      	movs	r3, #2
  }
}
 8007984:	4618      	mov	r0, r3
 8007986:	3728      	adds	r7, #40	; 0x28
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}
 800798c:	40008000 	.word	0x40008000

08007990 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b0ba      	sub	sp, #232	; 0xe8
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	69db      	ldr	r3, [r3, #28]
 800799e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80079b6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80079ba:	f640 030f 	movw	r3, #2063	; 0x80f
 80079be:	4013      	ands	r3, r2
 80079c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80079c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d11b      	bne.n	8007a04 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80079cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079d0:	f003 0320 	and.w	r3, r3, #32
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d015      	beq.n	8007a04 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80079d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079dc:	f003 0320 	and.w	r3, r3, #32
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d105      	bne.n	80079f0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80079e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d009      	beq.n	8007a04 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	f000 82d6 	beq.w	8007fa6 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	4798      	blx	r3
      }
      return;
 8007a02:	e2d0      	b.n	8007fa6 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007a04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	f000 811f 	beq.w	8007c4c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007a0e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007a12:	4b8b      	ldr	r3, [pc, #556]	; (8007c40 <HAL_UART_IRQHandler+0x2b0>)
 8007a14:	4013      	ands	r3, r2
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d106      	bne.n	8007a28 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007a1a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007a1e:	4b89      	ldr	r3, [pc, #548]	; (8007c44 <HAL_UART_IRQHandler+0x2b4>)
 8007a20:	4013      	ands	r3, r2
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	f000 8112 	beq.w	8007c4c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a2c:	f003 0301 	and.w	r3, r3, #1
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d011      	beq.n	8007a58 <HAL_UART_IRQHandler+0xc8>
 8007a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d00b      	beq.n	8007a58 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2201      	movs	r2, #1
 8007a46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a4e:	f043 0201 	orr.w	r2, r3, #1
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a5c:	f003 0302 	and.w	r3, r3, #2
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d011      	beq.n	8007a88 <HAL_UART_IRQHandler+0xf8>
 8007a64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a68:	f003 0301 	and.w	r3, r3, #1
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d00b      	beq.n	8007a88 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	2202      	movs	r2, #2
 8007a76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a7e:	f043 0204 	orr.w	r2, r3, #4
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a8c:	f003 0304 	and.w	r3, r3, #4
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d011      	beq.n	8007ab8 <HAL_UART_IRQHandler+0x128>
 8007a94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a98:	f003 0301 	and.w	r3, r3, #1
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d00b      	beq.n	8007ab8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	2204      	movs	r2, #4
 8007aa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007aae:	f043 0202 	orr.w	r2, r3, #2
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007abc:	f003 0308 	and.w	r3, r3, #8
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d017      	beq.n	8007af4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ac8:	f003 0320 	and.w	r3, r3, #32
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d105      	bne.n	8007adc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007ad0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007ad4:	4b5a      	ldr	r3, [pc, #360]	; (8007c40 <HAL_UART_IRQHandler+0x2b0>)
 8007ad6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d00b      	beq.n	8007af4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	2208      	movs	r2, #8
 8007ae2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007aea:	f043 0208 	orr.w	r2, r3, #8
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007af4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007af8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d012      	beq.n	8007b26 <HAL_UART_IRQHandler+0x196>
 8007b00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d00c      	beq.n	8007b26 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b1c:	f043 0220 	orr.w	r2, r3, #32
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	f000 823c 	beq.w	8007faa <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b36:	f003 0320 	and.w	r3, r3, #32
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d013      	beq.n	8007b66 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007b3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b42:	f003 0320 	and.w	r3, r3, #32
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d105      	bne.n	8007b56 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007b4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d007      	beq.n	8007b66 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d003      	beq.n	8007b66 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b6c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b7a:	2b40      	cmp	r3, #64	; 0x40
 8007b7c:	d005      	beq.n	8007b8a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007b7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b82:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d04f      	beq.n	8007c2a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 fef8 	bl	8008980 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b9a:	2b40      	cmp	r3, #64	; 0x40
 8007b9c:	d141      	bne.n	8007c22 <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	3308      	adds	r3, #8
 8007ba4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007bac:	e853 3f00 	ldrex	r3, [r3]
 8007bb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007bb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007bb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	3308      	adds	r3, #8
 8007bc6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007bca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007bce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007bd6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007bda:	e841 2300 	strex	r3, r2, [r1]
 8007bde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007be2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d1d9      	bne.n	8007b9e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d013      	beq.n	8007c1a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bf6:	4a14      	ldr	r2, [pc, #80]	; (8007c48 <HAL_UART_IRQHandler+0x2b8>)
 8007bf8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f7fc f986 	bl	8003f10 <HAL_DMA_Abort_IT>
 8007c04:	4603      	mov	r3, r0
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d017      	beq.n	8007c3a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007c14:	4610      	mov	r0, r2
 8007c16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c18:	e00f      	b.n	8007c3a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 f9da 	bl	8007fd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c20:	e00b      	b.n	8007c3a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 f9d6 	bl	8007fd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c28:	e007      	b.n	8007c3a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 f9d2 	bl	8007fd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007c38:	e1b7      	b.n	8007faa <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c3a:	bf00      	nop
    return;
 8007c3c:	e1b5      	b.n	8007faa <HAL_UART_IRQHandler+0x61a>
 8007c3e:	bf00      	nop
 8007c40:	10000001 	.word	0x10000001
 8007c44:	04000120 	.word	0x04000120
 8007c48:	08008a4d 	.word	0x08008a4d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	f040 814a 	bne.w	8007eea <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8007c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c5a:	f003 0310 	and.w	r3, r3, #16
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	f000 8143 	beq.w	8007eea <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8007c64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c68:	f003 0310 	and.w	r3, r3, #16
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	f000 813c 	beq.w	8007eea <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	2210      	movs	r2, #16
 8007c78:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c84:	2b40      	cmp	r3, #64	; 0x40
 8007c86:	f040 80b5 	bne.w	8007df4 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 8007c96:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	f000 8187 	beq.w	8007fae <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007ca6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007caa:	429a      	cmp	r2, r3
 8007cac:	f080 817f 	bcs.w	8007fae <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007cb6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f003 0320 	and.w	r3, r3, #32
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	f040 8086 	bne.w	8007dd8 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007cd8:	e853 3f00 	ldrex	r3, [r3]
 8007cdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007ce0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ce4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ce8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	461a      	mov	r2, r3
 8007cf2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007cf6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007cfa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cfe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007d02:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007d06:	e841 2300 	strex	r3, r2, [r1]
 8007d0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007d0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d1da      	bne.n	8007ccc <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	3308      	adds	r3, #8
 8007d1c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d20:	e853 3f00 	ldrex	r3, [r3]
 8007d24:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007d26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d28:	f023 0301 	bic.w	r3, r3, #1
 8007d2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	3308      	adds	r3, #8
 8007d36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007d3a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007d3e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d40:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007d42:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007d46:	e841 2300 	strex	r3, r2, [r1]
 8007d4a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007d4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d1e1      	bne.n	8007d16 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	3308      	adds	r3, #8
 8007d58:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d5c:	e853 3f00 	ldrex	r3, [r3]
 8007d60:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007d62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	3308      	adds	r3, #8
 8007d72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007d76:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007d78:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d7a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007d7c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007d7e:	e841 2300 	strex	r3, r2, [r1]
 8007d82:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007d84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d1e3      	bne.n	8007d52 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2220      	movs	r2, #32
 8007d8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2200      	movs	r2, #0
 8007d96:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007da0:	e853 3f00 	ldrex	r3, [r3]
 8007da4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007da6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007da8:	f023 0310 	bic.w	r3, r3, #16
 8007dac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	461a      	mov	r2, r3
 8007db6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007dba:	65bb      	str	r3, [r7, #88]	; 0x58
 8007dbc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dbe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007dc0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007dc2:	e841 2300 	strex	r3, r2, [r1]
 8007dc6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007dc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d1e4      	bne.n	8007d98 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f7fc f83d 	bl	8003e52 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	1ad3      	subs	r3, r2, r3
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	4619      	mov	r1, r3
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 f8fb 	bl	8007fe8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007df2:	e0dc      	b.n	8007fae <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	1ad3      	subs	r3, r2, r3
 8007e04:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	f000 80ce 	beq.w	8007fb2 <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8007e16:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	f000 80c9 	beq.w	8007fb2 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e28:	e853 3f00 	ldrex	r3, [r3]
 8007e2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e42:	647b      	str	r3, [r7, #68]	; 0x44
 8007e44:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e4a:	e841 2300 	strex	r3, r2, [r1]
 8007e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d1e4      	bne.n	8007e20 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	3308      	adds	r3, #8
 8007e5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e60:	e853 3f00 	ldrex	r3, [r3]
 8007e64:	623b      	str	r3, [r7, #32]
   return(result);
 8007e66:	6a3b      	ldr	r3, [r7, #32]
 8007e68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e6c:	f023 0301 	bic.w	r3, r3, #1
 8007e70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	3308      	adds	r3, #8
 8007e7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007e7e:	633a      	str	r2, [r7, #48]	; 0x30
 8007e80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e86:	e841 2300 	strex	r3, r2, [r1]
 8007e8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d1e1      	bne.n	8007e56 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2220      	movs	r2, #32
 8007e96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	e853 3f00 	ldrex	r3, [r3]
 8007eb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f023 0310 	bic.w	r3, r3, #16
 8007eba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007ec8:	61fb      	str	r3, [r7, #28]
 8007eca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ecc:	69b9      	ldr	r1, [r7, #24]
 8007ece:	69fa      	ldr	r2, [r7, #28]
 8007ed0:	e841 2300 	strex	r3, r2, [r1]
 8007ed4:	617b      	str	r3, [r7, #20]
   return(result);
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d1e4      	bne.n	8007ea6 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007edc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ee0:	4619      	mov	r1, r3
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 f880 	bl	8007fe8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007ee8:	e063      	b.n	8007fb2 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d00e      	beq.n	8007f14 <HAL_UART_IRQHandler+0x584>
 8007ef6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007efa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d008      	beq.n	8007f14 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007f0a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f001 fa3b 	bl	8009388 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007f12:	e051      	b.n	8007fb8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007f14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d014      	beq.n	8007f4a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007f20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d105      	bne.n	8007f38 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007f2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d008      	beq.n	8007f4a <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d03a      	beq.n	8007fb6 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	4798      	blx	r3
    }
    return;
 8007f48:	e035      	b.n	8007fb6 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d009      	beq.n	8007f6a <HAL_UART_IRQHandler+0x5da>
 8007f56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d003      	beq.n	8007f6a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 fd88 	bl	8008a78 <UART_EndTransmit_IT>
    return;
 8007f68:	e026      	b.n	8007fb8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d009      	beq.n	8007f8a <HAL_UART_IRQHandler+0x5fa>
 8007f76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f7a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d003      	beq.n	8007f8a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f001 fa14 	bl	80093b0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007f88:	e016      	b.n	8007fb8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d010      	beq.n	8007fb8 <HAL_UART_IRQHandler+0x628>
 8007f96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	da0c      	bge.n	8007fb8 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f001 f9fc 	bl	800939c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007fa4:	e008      	b.n	8007fb8 <HAL_UART_IRQHandler+0x628>
      return;
 8007fa6:	bf00      	nop
 8007fa8:	e006      	b.n	8007fb8 <HAL_UART_IRQHandler+0x628>
    return;
 8007faa:	bf00      	nop
 8007fac:	e004      	b.n	8007fb8 <HAL_UART_IRQHandler+0x628>
      return;
 8007fae:	bf00      	nop
 8007fb0:	e002      	b.n	8007fb8 <HAL_UART_IRQHandler+0x628>
      return;
 8007fb2:	bf00      	nop
 8007fb4:	e000      	b.n	8007fb8 <HAL_UART_IRQHandler+0x628>
    return;
 8007fb6:	bf00      	nop
  }
}
 8007fb8:	37e8      	adds	r7, #232	; 0xe8
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
 8007fbe:	bf00      	nop

08007fc0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b083      	sub	sp, #12
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007fc8:	bf00      	nop
 8007fca:	370c      	adds	r7, #12
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr

08007fd4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b083      	sub	sp, #12
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007fdc:	bf00      	nop
 8007fde:	370c      	adds	r7, #12
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr

08007fe8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	460b      	mov	r3, r1
 8007ff2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007ff4:	bf00      	nop
 8007ff6:	370c      	adds	r7, #12
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr

08008000 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008000:	b5b0      	push	{r4, r5, r7, lr}
 8008002:	b088      	sub	sp, #32
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008008:	2300      	movs	r3, #0
 800800a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	689a      	ldr	r2, [r3, #8]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	691b      	ldr	r3, [r3, #16]
 8008014:	431a      	orrs	r2, r3
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	695b      	ldr	r3, [r3, #20]
 800801a:	431a      	orrs	r2, r3
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	69db      	ldr	r3, [r3, #28]
 8008020:	4313      	orrs	r3, r2
 8008022:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	4ba3      	ldr	r3, [pc, #652]	; (80082b8 <UART_SetConfig+0x2b8>)
 800802c:	4013      	ands	r3, r2
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	6812      	ldr	r2, [r2, #0]
 8008032:	69f9      	ldr	r1, [r7, #28]
 8008034:	430b      	orrs	r3, r1
 8008036:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	68da      	ldr	r2, [r3, #12]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	430a      	orrs	r2, r1
 800804c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	699b      	ldr	r3, [r3, #24]
 8008052:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a98      	ldr	r2, [pc, #608]	; (80082bc <UART_SetConfig+0x2bc>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d004      	beq.n	8008068 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6a1b      	ldr	r3, [r3, #32]
 8008062:	69fa      	ldr	r2, [r7, #28]
 8008064:	4313      	orrs	r3, r2
 8008066:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008072:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008076:	687a      	ldr	r2, [r7, #4]
 8008078:	6812      	ldr	r2, [r2, #0]
 800807a:	69f9      	ldr	r1, [r7, #28]
 800807c:	430b      	orrs	r3, r1
 800807e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008086:	f023 010f 	bic.w	r1, r3, #15
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	430a      	orrs	r2, r1
 8008094:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a89      	ldr	r2, [pc, #548]	; (80082c0 <UART_SetConfig+0x2c0>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d120      	bne.n	80080e2 <UART_SetConfig+0xe2>
 80080a0:	2003      	movs	r0, #3
 80080a2:	f7ff fb19 	bl	80076d8 <LL_RCC_GetUSARTClockSource>
 80080a6:	4603      	mov	r3, r0
 80080a8:	2b03      	cmp	r3, #3
 80080aa:	d817      	bhi.n	80080dc <UART_SetConfig+0xdc>
 80080ac:	a201      	add	r2, pc, #4	; (adr r2, 80080b4 <UART_SetConfig+0xb4>)
 80080ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080b2:	bf00      	nop
 80080b4:	080080c5 	.word	0x080080c5
 80080b8:	080080d1 	.word	0x080080d1
 80080bc:	080080cb 	.word	0x080080cb
 80080c0:	080080d7 	.word	0x080080d7
 80080c4:	2301      	movs	r3, #1
 80080c6:	76fb      	strb	r3, [r7, #27]
 80080c8:	e038      	b.n	800813c <UART_SetConfig+0x13c>
 80080ca:	2302      	movs	r3, #2
 80080cc:	76fb      	strb	r3, [r7, #27]
 80080ce:	e035      	b.n	800813c <UART_SetConfig+0x13c>
 80080d0:	2304      	movs	r3, #4
 80080d2:	76fb      	strb	r3, [r7, #27]
 80080d4:	e032      	b.n	800813c <UART_SetConfig+0x13c>
 80080d6:	2308      	movs	r3, #8
 80080d8:	76fb      	strb	r3, [r7, #27]
 80080da:	e02f      	b.n	800813c <UART_SetConfig+0x13c>
 80080dc:	2310      	movs	r3, #16
 80080de:	76fb      	strb	r3, [r7, #27]
 80080e0:	e02c      	b.n	800813c <UART_SetConfig+0x13c>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a75      	ldr	r2, [pc, #468]	; (80082bc <UART_SetConfig+0x2bc>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d125      	bne.n	8008138 <UART_SetConfig+0x138>
 80080ec:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80080f0:	f7ff fb02 	bl	80076f8 <LL_RCC_GetLPUARTClockSource>
 80080f4:	4603      	mov	r3, r0
 80080f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80080fa:	d017      	beq.n	800812c <UART_SetConfig+0x12c>
 80080fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008100:	d817      	bhi.n	8008132 <UART_SetConfig+0x132>
 8008102:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008106:	d00b      	beq.n	8008120 <UART_SetConfig+0x120>
 8008108:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800810c:	d811      	bhi.n	8008132 <UART_SetConfig+0x132>
 800810e:	2b00      	cmp	r3, #0
 8008110:	d003      	beq.n	800811a <UART_SetConfig+0x11a>
 8008112:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008116:	d006      	beq.n	8008126 <UART_SetConfig+0x126>
 8008118:	e00b      	b.n	8008132 <UART_SetConfig+0x132>
 800811a:	2300      	movs	r3, #0
 800811c:	76fb      	strb	r3, [r7, #27]
 800811e:	e00d      	b.n	800813c <UART_SetConfig+0x13c>
 8008120:	2302      	movs	r3, #2
 8008122:	76fb      	strb	r3, [r7, #27]
 8008124:	e00a      	b.n	800813c <UART_SetConfig+0x13c>
 8008126:	2304      	movs	r3, #4
 8008128:	76fb      	strb	r3, [r7, #27]
 800812a:	e007      	b.n	800813c <UART_SetConfig+0x13c>
 800812c:	2308      	movs	r3, #8
 800812e:	76fb      	strb	r3, [r7, #27]
 8008130:	e004      	b.n	800813c <UART_SetConfig+0x13c>
 8008132:	2310      	movs	r3, #16
 8008134:	76fb      	strb	r3, [r7, #27]
 8008136:	e001      	b.n	800813c <UART_SetConfig+0x13c>
 8008138:	2310      	movs	r3, #16
 800813a:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a5e      	ldr	r2, [pc, #376]	; (80082bc <UART_SetConfig+0x2bc>)
 8008142:	4293      	cmp	r3, r2
 8008144:	f040 808b 	bne.w	800825e <UART_SetConfig+0x25e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008148:	7efb      	ldrb	r3, [r7, #27]
 800814a:	2b08      	cmp	r3, #8
 800814c:	d823      	bhi.n	8008196 <UART_SetConfig+0x196>
 800814e:	a201      	add	r2, pc, #4	; (adr r2, 8008154 <UART_SetConfig+0x154>)
 8008150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008154:	08008179 	.word	0x08008179
 8008158:	08008197 	.word	0x08008197
 800815c:	08008181 	.word	0x08008181
 8008160:	08008197 	.word	0x08008197
 8008164:	08008187 	.word	0x08008187
 8008168:	08008197 	.word	0x08008197
 800816c:	08008197 	.word	0x08008197
 8008170:	08008197 	.word	0x08008197
 8008174:	0800818f 	.word	0x0800818f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008178:	f7fe f80a 	bl	8006190 <HAL_RCC_GetPCLK1Freq>
 800817c:	6178      	str	r0, [r7, #20]
        break;
 800817e:	e00f      	b.n	80081a0 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008180:	4b50      	ldr	r3, [pc, #320]	; (80082c4 <UART_SetConfig+0x2c4>)
 8008182:	617b      	str	r3, [r7, #20]
        break;
 8008184:	e00c      	b.n	80081a0 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008186:	f7fd ff81 	bl	800608c <HAL_RCC_GetSysClockFreq>
 800818a:	6178      	str	r0, [r7, #20]
        break;
 800818c:	e008      	b.n	80081a0 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800818e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008192:	617b      	str	r3, [r7, #20]
        break;
 8008194:	e004      	b.n	80081a0 <UART_SetConfig+0x1a0>
      default:
        pclk = 0U;
 8008196:	2300      	movs	r3, #0
 8008198:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800819a:	2301      	movs	r3, #1
 800819c:	76bb      	strb	r3, [r7, #26]
        break;
 800819e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	f000 811a 	beq.w	80083dc <UART_SetConfig+0x3dc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ac:	4a46      	ldr	r2, [pc, #280]	; (80082c8 <UART_SetConfig+0x2c8>)
 80081ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081b2:	461a      	mov	r2, r3
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80081ba:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	685a      	ldr	r2, [r3, #4]
 80081c0:	4613      	mov	r3, r2
 80081c2:	005b      	lsls	r3, r3, #1
 80081c4:	4413      	add	r3, r2
 80081c6:	68ba      	ldr	r2, [r7, #8]
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d305      	bcc.n	80081d8 <UART_SetConfig+0x1d8>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80081d2:	68ba      	ldr	r2, [r7, #8]
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d902      	bls.n	80081de <UART_SetConfig+0x1de>
      {
        ret = HAL_ERROR;
 80081d8:	2301      	movs	r3, #1
 80081da:	76bb      	strb	r3, [r7, #26]
 80081dc:	e0fe      	b.n	80083dc <UART_SetConfig+0x3dc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	4618      	mov	r0, r3
 80081e2:	f04f 0100 	mov.w	r1, #0
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ea:	4a37      	ldr	r2, [pc, #220]	; (80082c8 <UART_SetConfig+0x2c8>)
 80081ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081f0:	b29a      	uxth	r2, r3
 80081f2:	f04f 0300 	mov.w	r3, #0
 80081f6:	f7f8 fcff 	bl	8000bf8 <__aeabi_uldivmod>
 80081fa:	4602      	mov	r2, r0
 80081fc:	460b      	mov	r3, r1
 80081fe:	4610      	mov	r0, r2
 8008200:	4619      	mov	r1, r3
 8008202:	f04f 0200 	mov.w	r2, #0
 8008206:	f04f 0300 	mov.w	r3, #0
 800820a:	020b      	lsls	r3, r1, #8
 800820c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008210:	0202      	lsls	r2, r0, #8
 8008212:	6879      	ldr	r1, [r7, #4]
 8008214:	6849      	ldr	r1, [r1, #4]
 8008216:	0849      	lsrs	r1, r1, #1
 8008218:	4608      	mov	r0, r1
 800821a:	f04f 0100 	mov.w	r1, #0
 800821e:	1814      	adds	r4, r2, r0
 8008220:	eb43 0501 	adc.w	r5, r3, r1
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	461a      	mov	r2, r3
 800822a:	f04f 0300 	mov.w	r3, #0
 800822e:	4620      	mov	r0, r4
 8008230:	4629      	mov	r1, r5
 8008232:	f7f8 fce1 	bl	8000bf8 <__aeabi_uldivmod>
 8008236:	4602      	mov	r2, r0
 8008238:	460b      	mov	r3, r1
 800823a:	4613      	mov	r3, r2
 800823c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008244:	d308      	bcc.n	8008258 <UART_SetConfig+0x258>
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800824c:	d204      	bcs.n	8008258 <UART_SetConfig+0x258>
        {
          huart->Instance->BRR = usartdiv;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	693a      	ldr	r2, [r7, #16]
 8008254:	60da      	str	r2, [r3, #12]
 8008256:	e0c1      	b.n	80083dc <UART_SetConfig+0x3dc>
        }
        else
        {
          ret = HAL_ERROR;
 8008258:	2301      	movs	r3, #1
 800825a:	76bb      	strb	r3, [r7, #26]
 800825c:	e0be      	b.n	80083dc <UART_SetConfig+0x3dc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	69db      	ldr	r3, [r3, #28]
 8008262:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008266:	d16a      	bne.n	800833e <UART_SetConfig+0x33e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8008268:	7efb      	ldrb	r3, [r7, #27]
 800826a:	3b01      	subs	r3, #1
 800826c:	2b07      	cmp	r3, #7
 800826e:	d82d      	bhi.n	80082cc <UART_SetConfig+0x2cc>
 8008270:	a201      	add	r2, pc, #4	; (adr r2, 8008278 <UART_SetConfig+0x278>)
 8008272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008276:	bf00      	nop
 8008278:	08008299 	.word	0x08008299
 800827c:	080082a1 	.word	0x080082a1
 8008280:	080082cd 	.word	0x080082cd
 8008284:	080082a7 	.word	0x080082a7
 8008288:	080082cd 	.word	0x080082cd
 800828c:	080082cd 	.word	0x080082cd
 8008290:	080082cd 	.word	0x080082cd
 8008294:	080082af 	.word	0x080082af
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008298:	f7fd ff90 	bl	80061bc <HAL_RCC_GetPCLK2Freq>
 800829c:	6178      	str	r0, [r7, #20]
        break;
 800829e:	e01a      	b.n	80082d6 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082a0:	4b08      	ldr	r3, [pc, #32]	; (80082c4 <UART_SetConfig+0x2c4>)
 80082a2:	617b      	str	r3, [r7, #20]
        break;
 80082a4:	e017      	b.n	80082d6 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082a6:	f7fd fef1 	bl	800608c <HAL_RCC_GetSysClockFreq>
 80082aa:	6178      	str	r0, [r7, #20]
        break;
 80082ac:	e013      	b.n	80082d6 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082b2:	617b      	str	r3, [r7, #20]
        break;
 80082b4:	e00f      	b.n	80082d6 <UART_SetConfig+0x2d6>
 80082b6:	bf00      	nop
 80082b8:	cfff69f3 	.word	0xcfff69f3
 80082bc:	40008000 	.word	0x40008000
 80082c0:	40013800 	.word	0x40013800
 80082c4:	00f42400 	.word	0x00f42400
 80082c8:	0800cbd0 	.word	0x0800cbd0
      default:
        pclk = 0U;
 80082cc:	2300      	movs	r3, #0
 80082ce:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80082d0:	2301      	movs	r3, #1
 80082d2:	76bb      	strb	r3, [r7, #26]
        break;
 80082d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d07f      	beq.n	80083dc <UART_SetConfig+0x3dc>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e0:	4a48      	ldr	r2, [pc, #288]	; (8008404 <UART_SetConfig+0x404>)
 80082e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082e6:	461a      	mov	r2, r3
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80082ee:	005a      	lsls	r2, r3, #1
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	085b      	lsrs	r3, r3, #1
 80082f6:	441a      	add	r2, r3
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008300:	b29b      	uxth	r3, r3
 8008302:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	2b0f      	cmp	r3, #15
 8008308:	d916      	bls.n	8008338 <UART_SetConfig+0x338>
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008310:	d212      	bcs.n	8008338 <UART_SetConfig+0x338>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	b29b      	uxth	r3, r3
 8008316:	f023 030f 	bic.w	r3, r3, #15
 800831a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	085b      	lsrs	r3, r3, #1
 8008320:	b29b      	uxth	r3, r3
 8008322:	f003 0307 	and.w	r3, r3, #7
 8008326:	b29a      	uxth	r2, r3
 8008328:	89fb      	ldrh	r3, [r7, #14]
 800832a:	4313      	orrs	r3, r2
 800832c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	89fa      	ldrh	r2, [r7, #14]
 8008334:	60da      	str	r2, [r3, #12]
 8008336:	e051      	b.n	80083dc <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 8008338:	2301      	movs	r3, #1
 800833a:	76bb      	strb	r3, [r7, #26]
 800833c:	e04e      	b.n	80083dc <UART_SetConfig+0x3dc>
      }
    }
  }
  else
  {
    switch (clocksource)
 800833e:	7efb      	ldrb	r3, [r7, #27]
 8008340:	3b01      	subs	r3, #1
 8008342:	2b07      	cmp	r3, #7
 8008344:	d821      	bhi.n	800838a <UART_SetConfig+0x38a>
 8008346:	a201      	add	r2, pc, #4	; (adr r2, 800834c <UART_SetConfig+0x34c>)
 8008348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800834c:	0800836d 	.word	0x0800836d
 8008350:	08008375 	.word	0x08008375
 8008354:	0800838b 	.word	0x0800838b
 8008358:	0800837b 	.word	0x0800837b
 800835c:	0800838b 	.word	0x0800838b
 8008360:	0800838b 	.word	0x0800838b
 8008364:	0800838b 	.word	0x0800838b
 8008368:	08008383 	.word	0x08008383
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800836c:	f7fd ff26 	bl	80061bc <HAL_RCC_GetPCLK2Freq>
 8008370:	6178      	str	r0, [r7, #20]
        break;
 8008372:	e00f      	b.n	8008394 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008374:	4b24      	ldr	r3, [pc, #144]	; (8008408 <UART_SetConfig+0x408>)
 8008376:	617b      	str	r3, [r7, #20]
        break;
 8008378:	e00c      	b.n	8008394 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800837a:	f7fd fe87 	bl	800608c <HAL_RCC_GetSysClockFreq>
 800837e:	6178      	str	r0, [r7, #20]
        break;
 8008380:	e008      	b.n	8008394 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008382:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008386:	617b      	str	r3, [r7, #20]
        break;
 8008388:	e004      	b.n	8008394 <UART_SetConfig+0x394>
      default:
        pclk = 0U;
 800838a:	2300      	movs	r3, #0
 800838c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800838e:	2301      	movs	r3, #1
 8008390:	76bb      	strb	r3, [r7, #26]
        break;
 8008392:	bf00      	nop
    }

    if (pclk != 0U)
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d020      	beq.n	80083dc <UART_SetConfig+0x3dc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800839e:	4a19      	ldr	r2, [pc, #100]	; (8008404 <UART_SetConfig+0x404>)
 80083a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083a4:	461a      	mov	r2, r3
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	fbb3 f2f2 	udiv	r2, r3, r2
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	085b      	lsrs	r3, r3, #1
 80083b2:	441a      	add	r2, r3
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80083bc:	b29b      	uxth	r3, r3
 80083be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	2b0f      	cmp	r3, #15
 80083c4:	d908      	bls.n	80083d8 <UART_SetConfig+0x3d8>
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083cc:	d204      	bcs.n	80083d8 <UART_SetConfig+0x3d8>
      {
        huart->Instance->BRR = usartdiv;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	693a      	ldr	r2, [r7, #16]
 80083d4:	60da      	str	r2, [r3, #12]
 80083d6:	e001      	b.n	80083dc <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2201      	movs	r2, #1
 80083e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2201      	movs	r2, #1
 80083e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2200      	movs	r2, #0
 80083f0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2200      	movs	r2, #0
 80083f6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80083f8:	7ebb      	ldrb	r3, [r7, #26]
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3720      	adds	r7, #32
 80083fe:	46bd      	mov	sp, r7
 8008400:	bdb0      	pop	{r4, r5, r7, pc}
 8008402:	bf00      	nop
 8008404:	0800cbd0 	.word	0x0800cbd0
 8008408:	00f42400 	.word	0x00f42400

0800840c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800840c:	b480      	push	{r7}
 800840e:	b083      	sub	sp, #12
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008418:	f003 0301 	and.w	r3, r3, #1
 800841c:	2b00      	cmp	r3, #0
 800841e:	d00a      	beq.n	8008436 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	430a      	orrs	r2, r1
 8008434:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800843a:	f003 0302 	and.w	r3, r3, #2
 800843e:	2b00      	cmp	r3, #0
 8008440:	d00a      	beq.n	8008458 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	430a      	orrs	r2, r1
 8008456:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800845c:	f003 0304 	and.w	r3, r3, #4
 8008460:	2b00      	cmp	r3, #0
 8008462:	d00a      	beq.n	800847a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	430a      	orrs	r2, r1
 8008478:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800847e:	f003 0308 	and.w	r3, r3, #8
 8008482:	2b00      	cmp	r3, #0
 8008484:	d00a      	beq.n	800849c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	430a      	orrs	r2, r1
 800849a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084a0:	f003 0310 	and.w	r3, r3, #16
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d00a      	beq.n	80084be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	689b      	ldr	r3, [r3, #8]
 80084ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	430a      	orrs	r2, r1
 80084bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084c2:	f003 0320 	and.w	r3, r3, #32
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d00a      	beq.n	80084e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	689b      	ldr	r3, [r3, #8]
 80084d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	430a      	orrs	r2, r1
 80084de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d01a      	beq.n	8008522 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	430a      	orrs	r2, r1
 8008500:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008506:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800850a:	d10a      	bne.n	8008522 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	430a      	orrs	r2, r1
 8008520:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800852a:	2b00      	cmp	r3, #0
 800852c:	d00a      	beq.n	8008544 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	430a      	orrs	r2, r1
 8008542:	605a      	str	r2, [r3, #4]
  }
}
 8008544:	bf00      	nop
 8008546:	370c      	adds	r7, #12
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr

08008550 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b086      	sub	sp, #24
 8008554:	af02      	add	r7, sp, #8
 8008556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008560:	f7fa fab8 	bl	8002ad4 <HAL_GetTick>
 8008564:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f003 0308 	and.w	r3, r3, #8
 8008570:	2b08      	cmp	r3, #8
 8008572:	d10e      	bne.n	8008592 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008574:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008578:	9300      	str	r3, [sp, #0]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2200      	movs	r2, #0
 800857e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f000 f82f 	bl	80085e6 <UART_WaitOnFlagUntilTimeout>
 8008588:	4603      	mov	r3, r0
 800858a:	2b00      	cmp	r3, #0
 800858c:	d001      	beq.n	8008592 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800858e:	2303      	movs	r3, #3
 8008590:	e025      	b.n	80085de <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f003 0304 	and.w	r3, r3, #4
 800859c:	2b04      	cmp	r3, #4
 800859e:	d10e      	bne.n	80085be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80085a4:	9300      	str	r3, [sp, #0]
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2200      	movs	r2, #0
 80085aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 f819 	bl	80085e6 <UART_WaitOnFlagUntilTimeout>
 80085b4:	4603      	mov	r3, r0
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d001      	beq.n	80085be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085ba:	2303      	movs	r3, #3
 80085bc:	e00f      	b.n	80085de <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2220      	movs	r2, #32
 80085c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2220      	movs	r2, #32
 80085ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2200      	movs	r2, #0
 80085d2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2200      	movs	r2, #0
 80085d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80085dc:	2300      	movs	r3, #0
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3710      	adds	r7, #16
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}

080085e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80085e6:	b580      	push	{r7, lr}
 80085e8:	b09c      	sub	sp, #112	; 0x70
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	60f8      	str	r0, [r7, #12]
 80085ee:	60b9      	str	r1, [r7, #8]
 80085f0:	603b      	str	r3, [r7, #0]
 80085f2:	4613      	mov	r3, r2
 80085f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085f6:	e0a9      	b.n	800874c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80085fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085fe:	f000 80a5 	beq.w	800874c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008602:	f7fa fa67 	bl	8002ad4 <HAL_GetTick>
 8008606:	4602      	mov	r2, r0
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	1ad3      	subs	r3, r2, r3
 800860c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800860e:	429a      	cmp	r2, r3
 8008610:	d302      	bcc.n	8008618 <UART_WaitOnFlagUntilTimeout+0x32>
 8008612:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008614:	2b00      	cmp	r3, #0
 8008616:	d140      	bne.n	800869a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800861e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008620:	e853 3f00 	ldrex	r3, [r3]
 8008624:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008628:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800862c:	667b      	str	r3, [r7, #100]	; 0x64
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	461a      	mov	r2, r3
 8008634:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008636:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008638:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800863a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800863c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800863e:	e841 2300 	strex	r3, r2, [r1]
 8008642:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008644:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008646:	2b00      	cmp	r3, #0
 8008648:	d1e6      	bne.n	8008618 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	3308      	adds	r3, #8
 8008650:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008654:	e853 3f00 	ldrex	r3, [r3]
 8008658:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800865a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800865c:	f023 0301 	bic.w	r3, r3, #1
 8008660:	663b      	str	r3, [r7, #96]	; 0x60
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	3308      	adds	r3, #8
 8008668:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800866a:	64ba      	str	r2, [r7, #72]	; 0x48
 800866c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800866e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008670:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008672:	e841 2300 	strex	r3, r2, [r1]
 8008676:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008678:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800867a:	2b00      	cmp	r3, #0
 800867c:	d1e5      	bne.n	800864a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2220      	movs	r2, #32
 8008682:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2220      	movs	r2, #32
 800868a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2200      	movs	r2, #0
 8008692:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008696:	2303      	movs	r3, #3
 8008698:	e069      	b.n	800876e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f003 0304 	and.w	r3, r3, #4
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d051      	beq.n	800874c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	69db      	ldr	r3, [r3, #28]
 80086ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086b6:	d149      	bne.n	800874c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80086c0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ca:	e853 3f00 	ldrex	r3, [r3]
 80086ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80086d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80086d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	461a      	mov	r2, r3
 80086de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086e0:	637b      	str	r3, [r7, #52]	; 0x34
 80086e2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80086e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086e8:	e841 2300 	strex	r3, r2, [r1]
 80086ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80086ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d1e6      	bne.n	80086c2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	3308      	adds	r3, #8
 80086fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	e853 3f00 	ldrex	r3, [r3]
 8008702:	613b      	str	r3, [r7, #16]
   return(result);
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	f023 0301 	bic.w	r3, r3, #1
 800870a:	66bb      	str	r3, [r7, #104]	; 0x68
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	3308      	adds	r3, #8
 8008712:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008714:	623a      	str	r2, [r7, #32]
 8008716:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008718:	69f9      	ldr	r1, [r7, #28]
 800871a:	6a3a      	ldr	r2, [r7, #32]
 800871c:	e841 2300 	strex	r3, r2, [r1]
 8008720:	61bb      	str	r3, [r7, #24]
   return(result);
 8008722:	69bb      	ldr	r3, [r7, #24]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d1e5      	bne.n	80086f4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2220      	movs	r2, #32
 800872c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2220      	movs	r2, #32
 8008734:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2220      	movs	r2, #32
 800873c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2200      	movs	r2, #0
 8008744:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008748:	2303      	movs	r3, #3
 800874a:	e010      	b.n	800876e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	69da      	ldr	r2, [r3, #28]
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	4013      	ands	r3, r2
 8008756:	68ba      	ldr	r2, [r7, #8]
 8008758:	429a      	cmp	r2, r3
 800875a:	bf0c      	ite	eq
 800875c:	2301      	moveq	r3, #1
 800875e:	2300      	movne	r3, #0
 8008760:	b2db      	uxtb	r3, r3
 8008762:	461a      	mov	r2, r3
 8008764:	79fb      	ldrb	r3, [r7, #7]
 8008766:	429a      	cmp	r2, r3
 8008768:	f43f af46 	beq.w	80085f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800876c:	2300      	movs	r3, #0
}
 800876e:	4618      	mov	r0, r3
 8008770:	3770      	adds	r7, #112	; 0x70
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
	...

08008778 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008778:	b480      	push	{r7}
 800877a:	b09d      	sub	sp, #116	; 0x74
 800877c:	af00      	add	r7, sp, #0
 800877e:	60f8      	str	r0, [r7, #12]
 8008780:	60b9      	str	r1, [r7, #8]
 8008782:	4613      	mov	r3, r2
 8008784:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	68ba      	ldr	r2, [r7, #8]
 800878a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	88fa      	ldrh	r2, [r7, #6]
 8008790:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	88fa      	ldrh	r2, [r7, #6]
 8008798:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2200      	movs	r2, #0
 80087a0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	689b      	ldr	r3, [r3, #8]
 80087a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087aa:	d10e      	bne.n	80087ca <UART_Start_Receive_IT+0x52>
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	691b      	ldr	r3, [r3, #16]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d105      	bne.n	80087c0 <UART_Start_Receive_IT+0x48>
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80087ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80087be:	e02d      	b.n	800881c <UART_Start_Receive_IT+0xa4>
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	22ff      	movs	r2, #255	; 0xff
 80087c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80087c8:	e028      	b.n	800881c <UART_Start_Receive_IT+0xa4>
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	689b      	ldr	r3, [r3, #8]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d10d      	bne.n	80087ee <UART_Start_Receive_IT+0x76>
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	691b      	ldr	r3, [r3, #16]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d104      	bne.n	80087e4 <UART_Start_Receive_IT+0x6c>
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	22ff      	movs	r2, #255	; 0xff
 80087de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80087e2:	e01b      	b.n	800881c <UART_Start_Receive_IT+0xa4>
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	227f      	movs	r2, #127	; 0x7f
 80087e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80087ec:	e016      	b.n	800881c <UART_Start_Receive_IT+0xa4>
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80087f6:	d10d      	bne.n	8008814 <UART_Start_Receive_IT+0x9c>
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	691b      	ldr	r3, [r3, #16]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d104      	bne.n	800880a <UART_Start_Receive_IT+0x92>
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	227f      	movs	r2, #127	; 0x7f
 8008804:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008808:	e008      	b.n	800881c <UART_Start_Receive_IT+0xa4>
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	223f      	movs	r2, #63	; 0x3f
 800880e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008812:	e003      	b.n	800881c <UART_Start_Receive_IT+0xa4>
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2200      	movs	r2, #0
 8008818:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2200      	movs	r2, #0
 8008820:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2222      	movs	r2, #34	; 0x22
 8008828:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	3308      	adds	r3, #8
 8008832:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008834:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008836:	e853 3f00 	ldrex	r3, [r3]
 800883a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800883c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800883e:	f043 0301 	orr.w	r3, r3, #1
 8008842:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	3308      	adds	r3, #8
 800884a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800884c:	65fa      	str	r2, [r7, #92]	; 0x5c
 800884e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008850:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008852:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008854:	e841 2300 	strex	r3, r2, [r1]
 8008858:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800885a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800885c:	2b00      	cmp	r3, #0
 800885e:	d1e5      	bne.n	800882c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008864:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008868:	d14d      	bne.n	8008906 <UART_Start_Receive_IT+0x18e>
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008870:	88fa      	ldrh	r2, [r7, #6]
 8008872:	429a      	cmp	r2, r3
 8008874:	d347      	bcc.n	8008906 <UART_Start_Receive_IT+0x18e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	689b      	ldr	r3, [r3, #8]
 800887a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800887e:	d107      	bne.n	8008890 <UART_Start_Receive_IT+0x118>
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	691b      	ldr	r3, [r3, #16]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d103      	bne.n	8008890 <UART_Start_Receive_IT+0x118>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	4a39      	ldr	r2, [pc, #228]	; (8008970 <UART_Start_Receive_IT+0x1f8>)
 800888c:	671a      	str	r2, [r3, #112]	; 0x70
 800888e:	e002      	b.n	8008896 <UART_Start_Receive_IT+0x11e>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	4a38      	ldr	r2, [pc, #224]	; (8008974 <UART_Start_Receive_IT+0x1fc>)
 8008894:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2200      	movs	r2, #0
 800889a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088a6:	e853 3f00 	ldrex	r3, [r3]
 80088aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80088ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	461a      	mov	r2, r3
 80088ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80088bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80088be:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80088c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088c4:	e841 2300 	strex	r3, r2, [r1]
 80088c8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80088ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d1e6      	bne.n	800889e <UART_Start_Receive_IT+0x126>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	3308      	adds	r3, #8
 80088d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088da:	e853 3f00 	ldrex	r3, [r3]
 80088de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80088e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088e6:	667b      	str	r3, [r7, #100]	; 0x64
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	3308      	adds	r3, #8
 80088ee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80088f0:	637a      	str	r2, [r7, #52]	; 0x34
 80088f2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80088f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80088f8:	e841 2300 	strex	r3, r2, [r1]
 80088fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80088fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008900:	2b00      	cmp	r3, #0
 8008902:	d1e5      	bne.n	80088d0 <UART_Start_Receive_IT+0x158>
 8008904:	e02c      	b.n	8008960 <UART_Start_Receive_IT+0x1e8>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	689b      	ldr	r3, [r3, #8]
 800890a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800890e:	d107      	bne.n	8008920 <UART_Start_Receive_IT+0x1a8>
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	691b      	ldr	r3, [r3, #16]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d103      	bne.n	8008920 <UART_Start_Receive_IT+0x1a8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	4a17      	ldr	r2, [pc, #92]	; (8008978 <UART_Start_Receive_IT+0x200>)
 800891c:	671a      	str	r2, [r3, #112]	; 0x70
 800891e:	e002      	b.n	8008926 <UART_Start_Receive_IT+0x1ae>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	4a16      	ldr	r2, [pc, #88]	; (800897c <UART_Start_Receive_IT+0x204>)
 8008924:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2200      	movs	r2, #0
 800892a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	e853 3f00 	ldrex	r3, [r3]
 800893a:	613b      	str	r3, [r7, #16]
   return(result);
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008942:	663b      	str	r3, [r7, #96]	; 0x60
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	461a      	mov	r2, r3
 800894a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800894c:	623b      	str	r3, [r7, #32]
 800894e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008950:	69f9      	ldr	r1, [r7, #28]
 8008952:	6a3a      	ldr	r2, [r7, #32]
 8008954:	e841 2300 	strex	r3, r2, [r1]
 8008958:	61bb      	str	r3, [r7, #24]
   return(result);
 800895a:	69bb      	ldr	r3, [r7, #24]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d1e6      	bne.n	800892e <UART_Start_Receive_IT+0x1b6>
  }
  return HAL_OK;
 8008960:	2300      	movs	r3, #0
}
 8008962:	4618      	mov	r0, r3
 8008964:	3774      	adds	r7, #116	; 0x74
 8008966:	46bd      	mov	sp, r7
 8008968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896c:	4770      	bx	lr
 800896e:	bf00      	nop
 8008970:	08009089 	.word	0x08009089
 8008974:	08008d91 	.word	0x08008d91
 8008978:	08008c2f 	.word	0x08008c2f
 800897c:	08008acf 	.word	0x08008acf

08008980 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008980:	b480      	push	{r7}
 8008982:	b095      	sub	sp, #84	; 0x54
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800898e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008990:	e853 3f00 	ldrex	r3, [r3]
 8008994:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008998:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800899c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	461a      	mov	r2, r3
 80089a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089a6:	643b      	str	r3, [r7, #64]	; 0x40
 80089a8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80089ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80089ae:	e841 2300 	strex	r3, r2, [r1]
 80089b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80089b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d1e6      	bne.n	8008988 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	3308      	adds	r3, #8
 80089c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c2:	6a3b      	ldr	r3, [r7, #32]
 80089c4:	e853 3f00 	ldrex	r3, [r3]
 80089c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80089ca:	69fb      	ldr	r3, [r7, #28]
 80089cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80089d0:	f023 0301 	bic.w	r3, r3, #1
 80089d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	3308      	adds	r3, #8
 80089dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80089de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80089e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80089e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089e6:	e841 2300 	strex	r3, r2, [r1]
 80089ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80089ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d1e3      	bne.n	80089ba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d118      	bne.n	8008a2c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	e853 3f00 	ldrex	r3, [r3]
 8008a06:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	f023 0310 	bic.w	r3, r3, #16
 8008a0e:	647b      	str	r3, [r7, #68]	; 0x44
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	461a      	mov	r2, r3
 8008a16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a18:	61bb      	str	r3, [r7, #24]
 8008a1a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a1c:	6979      	ldr	r1, [r7, #20]
 8008a1e:	69ba      	ldr	r2, [r7, #24]
 8008a20:	e841 2300 	strex	r3, r2, [r1]
 8008a24:	613b      	str	r3, [r7, #16]
   return(result);
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d1e6      	bne.n	80089fa <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2220      	movs	r2, #32
 8008a30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2200      	movs	r2, #0
 8008a38:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008a40:	bf00      	nop
 8008a42:	3754      	adds	r7, #84	; 0x54
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr

08008a4c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2200      	movs	r2, #0
 8008a66:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008a6a:	68f8      	ldr	r0, [r7, #12]
 8008a6c:	f7ff fab2 	bl	8007fd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a70:	bf00      	nop
 8008a72:	3710      	adds	r7, #16
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b088      	sub	sp, #32
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	e853 3f00 	ldrex	r3, [r3]
 8008a8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a94:	61fb      	str	r3, [r7, #28]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	69fb      	ldr	r3, [r7, #28]
 8008a9e:	61bb      	str	r3, [r7, #24]
 8008aa0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa2:	6979      	ldr	r1, [r7, #20]
 8008aa4:	69ba      	ldr	r2, [r7, #24]
 8008aa6:	e841 2300 	strex	r3, r2, [r1]
 8008aaa:	613b      	str	r3, [r7, #16]
   return(result);
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d1e6      	bne.n	8008a80 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2220      	movs	r2, #32
 8008ab6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2200      	movs	r2, #0
 8008abe:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f7ff fa7d 	bl	8007fc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ac6:	bf00      	nop
 8008ac8:	3720      	adds	r7, #32
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}

08008ace <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008ace:	b580      	push	{r7, lr}
 8008ad0:	b096      	sub	sp, #88	; 0x58
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008adc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ae6:	2b22      	cmp	r3, #34	; 0x22
 8008ae8:	f040 8095 	bne.w	8008c16 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008af6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008afa:	b2d9      	uxtb	r1, r3
 8008afc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008b00:	b2da      	uxtb	r2, r3
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b06:	400a      	ands	r2, r1
 8008b08:	b2d2      	uxtb	r2, r2
 8008b0a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b10:	1c5a      	adds	r2, r3, #1
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b1c:	b29b      	uxth	r3, r3
 8008b1e:	3b01      	subs	r3, #1
 8008b20:	b29a      	uxth	r2, r3
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d178      	bne.n	8008c26 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b3c:	e853 3f00 	ldrex	r3, [r3]
 8008b40:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b48:	653b      	str	r3, [r7, #80]	; 0x50
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	461a      	mov	r2, r3
 8008b50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b52:	647b      	str	r3, [r7, #68]	; 0x44
 8008b54:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008b58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b5a:	e841 2300 	strex	r3, r2, [r1]
 8008b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d1e6      	bne.n	8008b34 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	3308      	adds	r3, #8
 8008b6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b70:	e853 3f00 	ldrex	r3, [r3]
 8008b74:	623b      	str	r3, [r7, #32]
   return(result);
 8008b76:	6a3b      	ldr	r3, [r7, #32]
 8008b78:	f023 0301 	bic.w	r3, r3, #1
 8008b7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	3308      	adds	r3, #8
 8008b84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008b86:	633a      	str	r2, [r7, #48]	; 0x30
 8008b88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b8e:	e841 2300 	strex	r3, r2, [r1]
 8008b92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d1e5      	bne.n	8008b66 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2220      	movs	r2, #32
 8008b9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d12e      	bne.n	8008c0e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	e853 3f00 	ldrex	r3, [r3]
 8008bc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f023 0310 	bic.w	r3, r3, #16
 8008bca:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bd4:	61fb      	str	r3, [r7, #28]
 8008bd6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd8:	69b9      	ldr	r1, [r7, #24]
 8008bda:	69fa      	ldr	r2, [r7, #28]
 8008bdc:	e841 2300 	strex	r3, r2, [r1]
 8008be0:	617b      	str	r3, [r7, #20]
   return(result);
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d1e6      	bne.n	8008bb6 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	69db      	ldr	r3, [r3, #28]
 8008bee:	f003 0310 	and.w	r3, r3, #16
 8008bf2:	2b10      	cmp	r3, #16
 8008bf4:	d103      	bne.n	8008bfe <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	2210      	movs	r2, #16
 8008bfc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008c04:	4619      	mov	r1, r3
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f7ff f9ee 	bl	8007fe8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008c0c:	e00b      	b.n	8008c26 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f7f9 fa3a 	bl	8002088 <HAL_UART_RxCpltCallback>
}
 8008c14:	e007      	b.n	8008c26 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	699a      	ldr	r2, [r3, #24]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f042 0208 	orr.w	r2, r2, #8
 8008c24:	619a      	str	r2, [r3, #24]
}
 8008c26:	bf00      	nop
 8008c28:	3758      	adds	r7, #88	; 0x58
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}

08008c2e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008c2e:	b580      	push	{r7, lr}
 8008c30:	b096      	sub	sp, #88	; 0x58
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008c3c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c46:	2b22      	cmp	r3, #34	; 0x22
 8008c48:	f040 8095 	bne.w	8008d76 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c52:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c5a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008c5c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008c60:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008c64:	4013      	ands	r3, r2
 8008c66:	b29a      	uxth	r2, r3
 8008c68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c6a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c70:	1c9a      	adds	r2, r3, #2
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008c7c:	b29b      	uxth	r3, r3
 8008c7e:	3b01      	subs	r3, #1
 8008c80:	b29a      	uxth	r2, r3
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d178      	bne.n	8008d86 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c9c:	e853 3f00 	ldrex	r3, [r3]
 8008ca0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ca8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	461a      	mov	r2, r3
 8008cb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cb2:	643b      	str	r3, [r7, #64]	; 0x40
 8008cb4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008cb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008cba:	e841 2300 	strex	r3, r2, [r1]
 8008cbe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d1e6      	bne.n	8008c94 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	3308      	adds	r3, #8
 8008ccc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cce:	6a3b      	ldr	r3, [r7, #32]
 8008cd0:	e853 3f00 	ldrex	r3, [r3]
 8008cd4:	61fb      	str	r3, [r7, #28]
   return(result);
 8008cd6:	69fb      	ldr	r3, [r7, #28]
 8008cd8:	f023 0301 	bic.w	r3, r3, #1
 8008cdc:	64bb      	str	r3, [r7, #72]	; 0x48
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	3308      	adds	r3, #8
 8008ce4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ce6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008ce8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008cec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cee:	e841 2300 	strex	r3, r2, [r1]
 8008cf2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d1e5      	bne.n	8008cc6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2220      	movs	r2, #32
 8008cfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2200      	movs	r2, #0
 8008d06:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d12e      	bne.n	8008d6e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2200      	movs	r2, #0
 8008d14:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	e853 3f00 	ldrex	r3, [r3]
 8008d22:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	f023 0310 	bic.w	r3, r3, #16
 8008d2a:	647b      	str	r3, [r7, #68]	; 0x44
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	461a      	mov	r2, r3
 8008d32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d34:	61bb      	str	r3, [r7, #24]
 8008d36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d38:	6979      	ldr	r1, [r7, #20]
 8008d3a:	69ba      	ldr	r2, [r7, #24]
 8008d3c:	e841 2300 	strex	r3, r2, [r1]
 8008d40:	613b      	str	r3, [r7, #16]
   return(result);
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d1e6      	bne.n	8008d16 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	69db      	ldr	r3, [r3, #28]
 8008d4e:	f003 0310 	and.w	r3, r3, #16
 8008d52:	2b10      	cmp	r3, #16
 8008d54:	d103      	bne.n	8008d5e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	2210      	movs	r2, #16
 8008d5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008d64:	4619      	mov	r1, r3
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f7ff f93e 	bl	8007fe8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008d6c:	e00b      	b.n	8008d86 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f7f9 f98a 	bl	8002088 <HAL_UART_RxCpltCallback>
}
 8008d74:	e007      	b.n	8008d86 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	699a      	ldr	r2, [r3, #24]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f042 0208 	orr.w	r2, r2, #8
 8008d84:	619a      	str	r2, [r3, #24]
}
 8008d86:	bf00      	nop
 8008d88:	3758      	adds	r7, #88	; 0x58
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}
	...

08008d90 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b0a6      	sub	sp, #152	; 0x98
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008d9e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	69db      	ldr	r3, [r3, #28]
 8008da8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	689b      	ldr	r3, [r3, #8]
 8008dbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dc6:	2b22      	cmp	r3, #34	; 0x22
 8008dc8:	f040 814f 	bne.w	800906a <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008dd2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008dd6:	e0f6      	b.n	8008fc6 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dde:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008de2:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8008de6:	b2d9      	uxtb	r1, r3
 8008de8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8008dec:	b2da      	uxtb	r2, r3
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008df2:	400a      	ands	r2, r1
 8008df4:	b2d2      	uxtb	r2, r2
 8008df6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dfc:	1c5a      	adds	r2, r3, #1
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e08:	b29b      	uxth	r3, r3
 8008e0a:	3b01      	subs	r3, #1
 8008e0c:	b29a      	uxth	r2, r3
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	69db      	ldr	r3, [r3, #28]
 8008e1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008e1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008e22:	f003 0307 	and.w	r3, r3, #7
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d053      	beq.n	8008ed2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008e2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008e2e:	f003 0301 	and.w	r3, r3, #1
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d011      	beq.n	8008e5a <UART_RxISR_8BIT_FIFOEN+0xca>
 8008e36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d00b      	beq.n	8008e5a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	2201      	movs	r2, #1
 8008e48:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e50:	f043 0201 	orr.w	r2, r3, #1
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e5a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008e5e:	f003 0302 	and.w	r3, r3, #2
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d011      	beq.n	8008e8a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008e66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008e6a:	f003 0301 	and.w	r3, r3, #1
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d00b      	beq.n	8008e8a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	2202      	movs	r2, #2
 8008e78:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e80:	f043 0204 	orr.w	r2, r3, #4
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008e8e:	f003 0304 	and.w	r3, r3, #4
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d011      	beq.n	8008eba <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008e96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008e9a:	f003 0301 	and.w	r3, r3, #1
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d00b      	beq.n	8008eba <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	2204      	movs	r2, #4
 8008ea8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008eb0:	f043 0202 	orr.w	r2, r3, #2
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d006      	beq.n	8008ed2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f7ff f885 	bl	8007fd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ed8:	b29b      	uxth	r3, r3
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d173      	bne.n	8008fc6 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ee6:	e853 3f00 	ldrex	r3, [r3]
 8008eea:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008eec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008eee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ef2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	461a      	mov	r2, r3
 8008efc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008f00:	66bb      	str	r3, [r7, #104]	; 0x68
 8008f02:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f04:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008f06:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008f08:	e841 2300 	strex	r3, r2, [r1]
 8008f0c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008f0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d1e4      	bne.n	8008ede <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	3308      	adds	r3, #8
 8008f1a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f1e:	e853 3f00 	ldrex	r3, [r3]
 8008f22:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008f24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f2a:	f023 0301 	bic.w	r3, r3, #1
 8008f2e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	3308      	adds	r3, #8
 8008f36:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008f38:	657a      	str	r2, [r7, #84]	; 0x54
 8008f3a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f3c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008f3e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008f40:	e841 2300 	strex	r3, r2, [r1]
 8008f44:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008f46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d1e3      	bne.n	8008f14 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2220      	movs	r2, #32
 8008f50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2200      	movs	r2, #0
 8008f58:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f5e:	2b01      	cmp	r3, #1
 8008f60:	d12e      	bne.n	8008fc0 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2200      	movs	r2, #0
 8008f66:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f70:	e853 3f00 	ldrex	r3, [r3]
 8008f74:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f78:	f023 0310 	bic.w	r3, r3, #16
 8008f7c:	67bb      	str	r3, [r7, #120]	; 0x78
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	461a      	mov	r2, r3
 8008f84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f86:	643b      	str	r3, [r7, #64]	; 0x40
 8008f88:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f8a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008f8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008f8e:	e841 2300 	strex	r3, r2, [r1]
 8008f92:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d1e6      	bne.n	8008f68 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	69db      	ldr	r3, [r3, #28]
 8008fa0:	f003 0310 	and.w	r3, r3, #16
 8008fa4:	2b10      	cmp	r3, #16
 8008fa6:	d103      	bne.n	8008fb0 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	2210      	movs	r2, #16
 8008fae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008fb6:	4619      	mov	r1, r3
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f7ff f815 	bl	8007fe8 <HAL_UARTEx_RxEventCallback>
 8008fbe:	e002      	b.n	8008fc6 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f7f9 f861 	bl	8002088 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008fc6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d006      	beq.n	8008fdc <UART_RxISR_8BIT_FIFOEN+0x24c>
 8008fce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008fd2:	f003 0320 	and.w	r3, r3, #32
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	f47f aefe 	bne.w	8008dd8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008fe2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008fe6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d045      	beq.n	800907a <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008ff4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	d23e      	bcs.n	800907a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	3308      	adds	r3, #8
 8009002:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009004:	6a3b      	ldr	r3, [r7, #32]
 8009006:	e853 3f00 	ldrex	r3, [r3]
 800900a:	61fb      	str	r3, [r7, #28]
   return(result);
 800900c:	69fb      	ldr	r3, [r7, #28]
 800900e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009012:	673b      	str	r3, [r7, #112]	; 0x70
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	3308      	adds	r3, #8
 800901a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800901c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800901e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009020:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009022:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009024:	e841 2300 	strex	r3, r2, [r1]
 8009028:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800902a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800902c:	2b00      	cmp	r3, #0
 800902e:	d1e5      	bne.n	8008ffc <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	4a14      	ldr	r2, [pc, #80]	; (8009084 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8009034:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	e853 3f00 	ldrex	r3, [r3]
 8009042:	60bb      	str	r3, [r7, #8]
   return(result);
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	f043 0320 	orr.w	r3, r3, #32
 800904a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	461a      	mov	r2, r3
 8009052:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009054:	61bb      	str	r3, [r7, #24]
 8009056:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009058:	6979      	ldr	r1, [r7, #20]
 800905a:	69ba      	ldr	r2, [r7, #24]
 800905c:	e841 2300 	strex	r3, r2, [r1]
 8009060:	613b      	str	r3, [r7, #16]
   return(result);
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d1e6      	bne.n	8009036 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009068:	e007      	b.n	800907a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	699a      	ldr	r2, [r3, #24]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f042 0208 	orr.w	r2, r2, #8
 8009078:	619a      	str	r2, [r3, #24]
}
 800907a:	bf00      	nop
 800907c:	3798      	adds	r7, #152	; 0x98
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}
 8009082:	bf00      	nop
 8009084:	08008acf 	.word	0x08008acf

08009088 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b0a8      	sub	sp, #160	; 0xa0
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009096:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	69db      	ldr	r3, [r3, #28]
 80090a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	689b      	ldr	r3, [r3, #8]
 80090b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090be:	2b22      	cmp	r3, #34	; 0x22
 80090c0:	f040 8153 	bne.w	800936a <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80090ca:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80090ce:	e0fa      	b.n	80092c6 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80090e2:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80090e6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80090ea:	4013      	ands	r3, r2
 80090ec:	b29a      	uxth	r2, r3
 80090ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80090f2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090f8:	1c9a      	adds	r2, r3, #2
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009104:	b29b      	uxth	r3, r3
 8009106:	3b01      	subs	r3, #1
 8009108:	b29a      	uxth	r2, r3
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	69db      	ldr	r3, [r3, #28]
 8009116:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800911a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800911e:	f003 0307 	and.w	r3, r3, #7
 8009122:	2b00      	cmp	r3, #0
 8009124:	d053      	beq.n	80091ce <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009126:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800912a:	f003 0301 	and.w	r3, r3, #1
 800912e:	2b00      	cmp	r3, #0
 8009130:	d011      	beq.n	8009156 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009132:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800913a:	2b00      	cmp	r3, #0
 800913c:	d00b      	beq.n	8009156 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	2201      	movs	r2, #1
 8009144:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800914c:	f043 0201 	orr.w	r2, r3, #1
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009156:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800915a:	f003 0302 	and.w	r3, r3, #2
 800915e:	2b00      	cmp	r3, #0
 8009160:	d011      	beq.n	8009186 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009162:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009166:	f003 0301 	and.w	r3, r3, #1
 800916a:	2b00      	cmp	r3, #0
 800916c:	d00b      	beq.n	8009186 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	2202      	movs	r2, #2
 8009174:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800917c:	f043 0204 	orr.w	r2, r3, #4
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009186:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800918a:	f003 0304 	and.w	r3, r3, #4
 800918e:	2b00      	cmp	r3, #0
 8009190:	d011      	beq.n	80091b6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009192:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009196:	f003 0301 	and.w	r3, r3, #1
 800919a:	2b00      	cmp	r3, #0
 800919c:	d00b      	beq.n	80091b6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	2204      	movs	r2, #4
 80091a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091ac:	f043 0202 	orr.w	r2, r3, #2
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d006      	beq.n	80091ce <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f7fe ff07 	bl	8007fd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2200      	movs	r2, #0
 80091ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091d4:	b29b      	uxth	r3, r3
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d175      	bne.n	80092c6 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80091e2:	e853 3f00 	ldrex	r3, [r3]
 80091e6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80091e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	461a      	mov	r2, r3
 80091f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80091fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80091fe:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009200:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009202:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009204:	e841 2300 	strex	r3, r2, [r1]
 8009208:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800920a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800920c:	2b00      	cmp	r3, #0
 800920e:	d1e4      	bne.n	80091da <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	3308      	adds	r3, #8
 8009216:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009218:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800921a:	e853 3f00 	ldrex	r3, [r3]
 800921e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009220:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009222:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009226:	f023 0301 	bic.w	r3, r3, #1
 800922a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	3308      	adds	r3, #8
 8009234:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009238:	65ba      	str	r2, [r7, #88]	; 0x58
 800923a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800923c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800923e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009240:	e841 2300 	strex	r3, r2, [r1]
 8009244:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009246:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009248:	2b00      	cmp	r3, #0
 800924a:	d1e1      	bne.n	8009210 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2220      	movs	r2, #32
 8009250:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2200      	movs	r2, #0
 8009258:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800925e:	2b01      	cmp	r3, #1
 8009260:	d12e      	bne.n	80092c0 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2200      	movs	r2, #0
 8009266:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800926e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009270:	e853 3f00 	ldrex	r3, [r3]
 8009274:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009278:	f023 0310 	bic.w	r3, r3, #16
 800927c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	461a      	mov	r2, r3
 8009284:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009286:	647b      	str	r3, [r7, #68]	; 0x44
 8009288:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800928a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800928c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800928e:	e841 2300 	strex	r3, r2, [r1]
 8009292:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009296:	2b00      	cmp	r3, #0
 8009298:	d1e6      	bne.n	8009268 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	69db      	ldr	r3, [r3, #28]
 80092a0:	f003 0310 	and.w	r3, r3, #16
 80092a4:	2b10      	cmp	r3, #16
 80092a6:	d103      	bne.n	80092b0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	2210      	movs	r2, #16
 80092ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80092b6:	4619      	mov	r1, r3
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f7fe fe95 	bl	8007fe8 <HAL_UARTEx_RxEventCallback>
 80092be:	e002      	b.n	80092c6 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f7f8 fee1 	bl	8002088 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80092c6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d006      	beq.n	80092dc <UART_RxISR_16BIT_FIFOEN+0x254>
 80092ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80092d2:	f003 0320 	and.w	r3, r3, #32
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	f47f aefa 	bne.w	80090d0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80092e2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80092e6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d045      	beq.n	800937a <UART_RxISR_16BIT_FIFOEN+0x2f2>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80092f4:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d23e      	bcs.n	800937a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	3308      	adds	r3, #8
 8009302:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009306:	e853 3f00 	ldrex	r3, [r3]
 800930a:	623b      	str	r3, [r7, #32]
   return(result);
 800930c:	6a3b      	ldr	r3, [r7, #32]
 800930e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009312:	677b      	str	r3, [r7, #116]	; 0x74
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	3308      	adds	r3, #8
 800931a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800931c:	633a      	str	r2, [r7, #48]	; 0x30
 800931e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009320:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009322:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009324:	e841 2300 	strex	r3, r2, [r1]
 8009328:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800932a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800932c:	2b00      	cmp	r3, #0
 800932e:	d1e5      	bne.n	80092fc <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	4a14      	ldr	r2, [pc, #80]	; (8009384 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009334:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	e853 3f00 	ldrex	r3, [r3]
 8009342:	60fb      	str	r3, [r7, #12]
   return(result);
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	f043 0320 	orr.w	r3, r3, #32
 800934a:	673b      	str	r3, [r7, #112]	; 0x70
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	461a      	mov	r2, r3
 8009352:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009354:	61fb      	str	r3, [r7, #28]
 8009356:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009358:	69b9      	ldr	r1, [r7, #24]
 800935a:	69fa      	ldr	r2, [r7, #28]
 800935c:	e841 2300 	strex	r3, r2, [r1]
 8009360:	617b      	str	r3, [r7, #20]
   return(result);
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d1e6      	bne.n	8009336 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009368:	e007      	b.n	800937a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	699a      	ldr	r2, [r3, #24]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f042 0208 	orr.w	r2, r2, #8
 8009378:	619a      	str	r2, [r3, #24]
}
 800937a:	bf00      	nop
 800937c:	37a0      	adds	r7, #160	; 0xa0
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}
 8009382:	bf00      	nop
 8009384:	08008c2f 	.word	0x08008c2f

08009388 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009388:	b480      	push	{r7}
 800938a:	b083      	sub	sp, #12
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009390:	bf00      	nop
 8009392:	370c      	adds	r7, #12
 8009394:	46bd      	mov	sp, r7
 8009396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939a:	4770      	bx	lr

0800939c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800939c:	b480      	push	{r7}
 800939e:	b083      	sub	sp, #12
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80093a4:	bf00      	nop
 80093a6:	370c      	adds	r7, #12
 80093a8:	46bd      	mov	sp, r7
 80093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ae:	4770      	bx	lr

080093b0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b083      	sub	sp, #12
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80093b8:	bf00      	nop
 80093ba:	370c      	adds	r7, #12
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr

080093c4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80093c4:	b480      	push	{r7}
 80093c6:	b085      	sub	sp, #20
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	d101      	bne.n	80093da <HAL_UARTEx_DisableFifoMode+0x16>
 80093d6:	2302      	movs	r3, #2
 80093d8:	e027      	b.n	800942a <HAL_UARTEx_DisableFifoMode+0x66>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2201      	movs	r2, #1
 80093de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2224      	movs	r2, #36	; 0x24
 80093e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	681a      	ldr	r2, [r3, #0]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f022 0201 	bic.w	r2, r2, #1
 8009400:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009408:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2200      	movs	r2, #0
 800940e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	68fa      	ldr	r2, [r7, #12]
 8009416:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2220      	movs	r2, #32
 800941c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2200      	movs	r2, #0
 8009424:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009428:	2300      	movs	r3, #0
}
 800942a:	4618      	mov	r0, r3
 800942c:	3714      	adds	r7, #20
 800942e:	46bd      	mov	sp, r7
 8009430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009434:	4770      	bx	lr

08009436 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009436:	b580      	push	{r7, lr}
 8009438:	b084      	sub	sp, #16
 800943a:	af00      	add	r7, sp, #0
 800943c:	6078      	str	r0, [r7, #4]
 800943e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009446:	2b01      	cmp	r3, #1
 8009448:	d101      	bne.n	800944e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800944a:	2302      	movs	r3, #2
 800944c:	e02d      	b.n	80094aa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2201      	movs	r2, #1
 8009452:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2224      	movs	r2, #36	; 0x24
 800945a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	681a      	ldr	r2, [r3, #0]
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f022 0201 	bic.w	r2, r2, #1
 8009474:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	689b      	ldr	r3, [r3, #8]
 800947c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	683a      	ldr	r2, [r7, #0]
 8009486:	430a      	orrs	r2, r1
 8009488:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f000 f850 	bl	8009530 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	68fa      	ldr	r2, [r7, #12]
 8009496:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2220      	movs	r2, #32
 800949c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2200      	movs	r2, #0
 80094a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80094a8:	2300      	movs	r3, #0
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3710      	adds	r7, #16
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}

080094b2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80094b2:	b580      	push	{r7, lr}
 80094b4:	b084      	sub	sp, #16
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	6078      	str	r0, [r7, #4]
 80094ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80094c2:	2b01      	cmp	r3, #1
 80094c4:	d101      	bne.n	80094ca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80094c6:	2302      	movs	r3, #2
 80094c8:	e02d      	b.n	8009526 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2201      	movs	r2, #1
 80094ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2224      	movs	r2, #36	; 0x24
 80094d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	681a      	ldr	r2, [r3, #0]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f022 0201 	bic.w	r2, r2, #1
 80094f0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	689b      	ldr	r3, [r3, #8]
 80094f8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	683a      	ldr	r2, [r7, #0]
 8009502:	430a      	orrs	r2, r1
 8009504:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f000 f812 	bl	8009530 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	68fa      	ldr	r2, [r7, #12]
 8009512:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2220      	movs	r2, #32
 8009518:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2200      	movs	r2, #0
 8009520:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009524:	2300      	movs	r3, #0
}
 8009526:	4618      	mov	r0, r3
 8009528:	3710      	adds	r7, #16
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
	...

08009530 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009530:	b480      	push	{r7}
 8009532:	b085      	sub	sp, #20
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800953c:	2b00      	cmp	r3, #0
 800953e:	d108      	bne.n	8009552 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2201      	movs	r2, #1
 8009544:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2201      	movs	r2, #1
 800954c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009550:	e031      	b.n	80095b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009552:	2308      	movs	r3, #8
 8009554:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009556:	2308      	movs	r3, #8
 8009558:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	689b      	ldr	r3, [r3, #8]
 8009560:	0e5b      	lsrs	r3, r3, #25
 8009562:	b2db      	uxtb	r3, r3
 8009564:	f003 0307 	and.w	r3, r3, #7
 8009568:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	689b      	ldr	r3, [r3, #8]
 8009570:	0f5b      	lsrs	r3, r3, #29
 8009572:	b2db      	uxtb	r3, r3
 8009574:	f003 0307 	and.w	r3, r3, #7
 8009578:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800957a:	7bbb      	ldrb	r3, [r7, #14]
 800957c:	7b3a      	ldrb	r2, [r7, #12]
 800957e:	4911      	ldr	r1, [pc, #68]	; (80095c4 <UARTEx_SetNbDataToProcess+0x94>)
 8009580:	5c8a      	ldrb	r2, [r1, r2]
 8009582:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009586:	7b3a      	ldrb	r2, [r7, #12]
 8009588:	490f      	ldr	r1, [pc, #60]	; (80095c8 <UARTEx_SetNbDataToProcess+0x98>)
 800958a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800958c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009590:	b29a      	uxth	r2, r3
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009598:	7bfb      	ldrb	r3, [r7, #15]
 800959a:	7b7a      	ldrb	r2, [r7, #13]
 800959c:	4909      	ldr	r1, [pc, #36]	; (80095c4 <UARTEx_SetNbDataToProcess+0x94>)
 800959e:	5c8a      	ldrb	r2, [r1, r2]
 80095a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80095a4:	7b7a      	ldrb	r2, [r7, #13]
 80095a6:	4908      	ldr	r1, [pc, #32]	; (80095c8 <UARTEx_SetNbDataToProcess+0x98>)
 80095a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80095aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80095ae:	b29a      	uxth	r2, r3
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80095b6:	bf00      	nop
 80095b8:	3714      	adds	r7, #20
 80095ba:	46bd      	mov	sp, r7
 80095bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c0:	4770      	bx	lr
 80095c2:	bf00      	nop
 80095c4:	0800cbe8 	.word	0x0800cbe8
 80095c8:	0800cbf0 	.word	0x0800cbf0

080095cc <__errno>:
 80095cc:	4b01      	ldr	r3, [pc, #4]	; (80095d4 <__errno+0x8>)
 80095ce:	6818      	ldr	r0, [r3, #0]
 80095d0:	4770      	bx	lr
 80095d2:	bf00      	nop
 80095d4:	20000010 	.word	0x20000010

080095d8 <__libc_init_array>:
 80095d8:	b570      	push	{r4, r5, r6, lr}
 80095da:	4d0d      	ldr	r5, [pc, #52]	; (8009610 <__libc_init_array+0x38>)
 80095dc:	4c0d      	ldr	r4, [pc, #52]	; (8009614 <__libc_init_array+0x3c>)
 80095de:	1b64      	subs	r4, r4, r5
 80095e0:	10a4      	asrs	r4, r4, #2
 80095e2:	2600      	movs	r6, #0
 80095e4:	42a6      	cmp	r6, r4
 80095e6:	d109      	bne.n	80095fc <__libc_init_array+0x24>
 80095e8:	4d0b      	ldr	r5, [pc, #44]	; (8009618 <__libc_init_array+0x40>)
 80095ea:	4c0c      	ldr	r4, [pc, #48]	; (800961c <__libc_init_array+0x44>)
 80095ec:	f002 fec0 	bl	800c370 <_init>
 80095f0:	1b64      	subs	r4, r4, r5
 80095f2:	10a4      	asrs	r4, r4, #2
 80095f4:	2600      	movs	r6, #0
 80095f6:	42a6      	cmp	r6, r4
 80095f8:	d105      	bne.n	8009606 <__libc_init_array+0x2e>
 80095fa:	bd70      	pop	{r4, r5, r6, pc}
 80095fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009600:	4798      	blx	r3
 8009602:	3601      	adds	r6, #1
 8009604:	e7ee      	b.n	80095e4 <__libc_init_array+0xc>
 8009606:	f855 3b04 	ldr.w	r3, [r5], #4
 800960a:	4798      	blx	r3
 800960c:	3601      	adds	r6, #1
 800960e:	e7f2      	b.n	80095f6 <__libc_init_array+0x1e>
 8009610:	0800cfe4 	.word	0x0800cfe4
 8009614:	0800cfe4 	.word	0x0800cfe4
 8009618:	0800cfe4 	.word	0x0800cfe4
 800961c:	0800cfe8 	.word	0x0800cfe8

08009620 <malloc>:
 8009620:	4b02      	ldr	r3, [pc, #8]	; (800962c <malloc+0xc>)
 8009622:	4601      	mov	r1, r0
 8009624:	6818      	ldr	r0, [r3, #0]
 8009626:	f000 b869 	b.w	80096fc <_malloc_r>
 800962a:	bf00      	nop
 800962c:	20000010 	.word	0x20000010

08009630 <memcpy>:
 8009630:	440a      	add	r2, r1
 8009632:	4291      	cmp	r1, r2
 8009634:	f100 33ff 	add.w	r3, r0, #4294967295
 8009638:	d100      	bne.n	800963c <memcpy+0xc>
 800963a:	4770      	bx	lr
 800963c:	b510      	push	{r4, lr}
 800963e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009642:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009646:	4291      	cmp	r1, r2
 8009648:	d1f9      	bne.n	800963e <memcpy+0xe>
 800964a:	bd10      	pop	{r4, pc}

0800964c <memset>:
 800964c:	4402      	add	r2, r0
 800964e:	4603      	mov	r3, r0
 8009650:	4293      	cmp	r3, r2
 8009652:	d100      	bne.n	8009656 <memset+0xa>
 8009654:	4770      	bx	lr
 8009656:	f803 1b01 	strb.w	r1, [r3], #1
 800965a:	e7f9      	b.n	8009650 <memset+0x4>

0800965c <_free_r>:
 800965c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800965e:	2900      	cmp	r1, #0
 8009660:	d048      	beq.n	80096f4 <_free_r+0x98>
 8009662:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009666:	9001      	str	r0, [sp, #4]
 8009668:	2b00      	cmp	r3, #0
 800966a:	f1a1 0404 	sub.w	r4, r1, #4
 800966e:	bfb8      	it	lt
 8009670:	18e4      	addlt	r4, r4, r3
 8009672:	f001 fbc1 	bl	800adf8 <__malloc_lock>
 8009676:	4a20      	ldr	r2, [pc, #128]	; (80096f8 <_free_r+0x9c>)
 8009678:	9801      	ldr	r0, [sp, #4]
 800967a:	6813      	ldr	r3, [r2, #0]
 800967c:	4615      	mov	r5, r2
 800967e:	b933      	cbnz	r3, 800968e <_free_r+0x32>
 8009680:	6063      	str	r3, [r4, #4]
 8009682:	6014      	str	r4, [r2, #0]
 8009684:	b003      	add	sp, #12
 8009686:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800968a:	f001 bbbb 	b.w	800ae04 <__malloc_unlock>
 800968e:	42a3      	cmp	r3, r4
 8009690:	d90b      	bls.n	80096aa <_free_r+0x4e>
 8009692:	6821      	ldr	r1, [r4, #0]
 8009694:	1862      	adds	r2, r4, r1
 8009696:	4293      	cmp	r3, r2
 8009698:	bf04      	itt	eq
 800969a:	681a      	ldreq	r2, [r3, #0]
 800969c:	685b      	ldreq	r3, [r3, #4]
 800969e:	6063      	str	r3, [r4, #4]
 80096a0:	bf04      	itt	eq
 80096a2:	1852      	addeq	r2, r2, r1
 80096a4:	6022      	streq	r2, [r4, #0]
 80096a6:	602c      	str	r4, [r5, #0]
 80096a8:	e7ec      	b.n	8009684 <_free_r+0x28>
 80096aa:	461a      	mov	r2, r3
 80096ac:	685b      	ldr	r3, [r3, #4]
 80096ae:	b10b      	cbz	r3, 80096b4 <_free_r+0x58>
 80096b0:	42a3      	cmp	r3, r4
 80096b2:	d9fa      	bls.n	80096aa <_free_r+0x4e>
 80096b4:	6811      	ldr	r1, [r2, #0]
 80096b6:	1855      	adds	r5, r2, r1
 80096b8:	42a5      	cmp	r5, r4
 80096ba:	d10b      	bne.n	80096d4 <_free_r+0x78>
 80096bc:	6824      	ldr	r4, [r4, #0]
 80096be:	4421      	add	r1, r4
 80096c0:	1854      	adds	r4, r2, r1
 80096c2:	42a3      	cmp	r3, r4
 80096c4:	6011      	str	r1, [r2, #0]
 80096c6:	d1dd      	bne.n	8009684 <_free_r+0x28>
 80096c8:	681c      	ldr	r4, [r3, #0]
 80096ca:	685b      	ldr	r3, [r3, #4]
 80096cc:	6053      	str	r3, [r2, #4]
 80096ce:	4421      	add	r1, r4
 80096d0:	6011      	str	r1, [r2, #0]
 80096d2:	e7d7      	b.n	8009684 <_free_r+0x28>
 80096d4:	d902      	bls.n	80096dc <_free_r+0x80>
 80096d6:	230c      	movs	r3, #12
 80096d8:	6003      	str	r3, [r0, #0]
 80096da:	e7d3      	b.n	8009684 <_free_r+0x28>
 80096dc:	6825      	ldr	r5, [r4, #0]
 80096de:	1961      	adds	r1, r4, r5
 80096e0:	428b      	cmp	r3, r1
 80096e2:	bf04      	itt	eq
 80096e4:	6819      	ldreq	r1, [r3, #0]
 80096e6:	685b      	ldreq	r3, [r3, #4]
 80096e8:	6063      	str	r3, [r4, #4]
 80096ea:	bf04      	itt	eq
 80096ec:	1949      	addeq	r1, r1, r5
 80096ee:	6021      	streq	r1, [r4, #0]
 80096f0:	6054      	str	r4, [r2, #4]
 80096f2:	e7c7      	b.n	8009684 <_free_r+0x28>
 80096f4:	b003      	add	sp, #12
 80096f6:	bd30      	pop	{r4, r5, pc}
 80096f8:	20000200 	.word	0x20000200

080096fc <_malloc_r>:
 80096fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096fe:	1ccd      	adds	r5, r1, #3
 8009700:	f025 0503 	bic.w	r5, r5, #3
 8009704:	3508      	adds	r5, #8
 8009706:	2d0c      	cmp	r5, #12
 8009708:	bf38      	it	cc
 800970a:	250c      	movcc	r5, #12
 800970c:	2d00      	cmp	r5, #0
 800970e:	4606      	mov	r6, r0
 8009710:	db01      	blt.n	8009716 <_malloc_r+0x1a>
 8009712:	42a9      	cmp	r1, r5
 8009714:	d903      	bls.n	800971e <_malloc_r+0x22>
 8009716:	230c      	movs	r3, #12
 8009718:	6033      	str	r3, [r6, #0]
 800971a:	2000      	movs	r0, #0
 800971c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800971e:	f001 fb6b 	bl	800adf8 <__malloc_lock>
 8009722:	4921      	ldr	r1, [pc, #132]	; (80097a8 <_malloc_r+0xac>)
 8009724:	680a      	ldr	r2, [r1, #0]
 8009726:	4614      	mov	r4, r2
 8009728:	b99c      	cbnz	r4, 8009752 <_malloc_r+0x56>
 800972a:	4f20      	ldr	r7, [pc, #128]	; (80097ac <_malloc_r+0xb0>)
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	b923      	cbnz	r3, 800973a <_malloc_r+0x3e>
 8009730:	4621      	mov	r1, r4
 8009732:	4630      	mov	r0, r6
 8009734:	f000 fca6 	bl	800a084 <_sbrk_r>
 8009738:	6038      	str	r0, [r7, #0]
 800973a:	4629      	mov	r1, r5
 800973c:	4630      	mov	r0, r6
 800973e:	f000 fca1 	bl	800a084 <_sbrk_r>
 8009742:	1c43      	adds	r3, r0, #1
 8009744:	d123      	bne.n	800978e <_malloc_r+0x92>
 8009746:	230c      	movs	r3, #12
 8009748:	6033      	str	r3, [r6, #0]
 800974a:	4630      	mov	r0, r6
 800974c:	f001 fb5a 	bl	800ae04 <__malloc_unlock>
 8009750:	e7e3      	b.n	800971a <_malloc_r+0x1e>
 8009752:	6823      	ldr	r3, [r4, #0]
 8009754:	1b5b      	subs	r3, r3, r5
 8009756:	d417      	bmi.n	8009788 <_malloc_r+0x8c>
 8009758:	2b0b      	cmp	r3, #11
 800975a:	d903      	bls.n	8009764 <_malloc_r+0x68>
 800975c:	6023      	str	r3, [r4, #0]
 800975e:	441c      	add	r4, r3
 8009760:	6025      	str	r5, [r4, #0]
 8009762:	e004      	b.n	800976e <_malloc_r+0x72>
 8009764:	6863      	ldr	r3, [r4, #4]
 8009766:	42a2      	cmp	r2, r4
 8009768:	bf0c      	ite	eq
 800976a:	600b      	streq	r3, [r1, #0]
 800976c:	6053      	strne	r3, [r2, #4]
 800976e:	4630      	mov	r0, r6
 8009770:	f001 fb48 	bl	800ae04 <__malloc_unlock>
 8009774:	f104 000b 	add.w	r0, r4, #11
 8009778:	1d23      	adds	r3, r4, #4
 800977a:	f020 0007 	bic.w	r0, r0, #7
 800977e:	1ac2      	subs	r2, r0, r3
 8009780:	d0cc      	beq.n	800971c <_malloc_r+0x20>
 8009782:	1a1b      	subs	r3, r3, r0
 8009784:	50a3      	str	r3, [r4, r2]
 8009786:	e7c9      	b.n	800971c <_malloc_r+0x20>
 8009788:	4622      	mov	r2, r4
 800978a:	6864      	ldr	r4, [r4, #4]
 800978c:	e7cc      	b.n	8009728 <_malloc_r+0x2c>
 800978e:	1cc4      	adds	r4, r0, #3
 8009790:	f024 0403 	bic.w	r4, r4, #3
 8009794:	42a0      	cmp	r0, r4
 8009796:	d0e3      	beq.n	8009760 <_malloc_r+0x64>
 8009798:	1a21      	subs	r1, r4, r0
 800979a:	4630      	mov	r0, r6
 800979c:	f000 fc72 	bl	800a084 <_sbrk_r>
 80097a0:	3001      	adds	r0, #1
 80097a2:	d1dd      	bne.n	8009760 <_malloc_r+0x64>
 80097a4:	e7cf      	b.n	8009746 <_malloc_r+0x4a>
 80097a6:	bf00      	nop
 80097a8:	20000200 	.word	0x20000200
 80097ac:	20000204 	.word	0x20000204

080097b0 <__cvt>:
 80097b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80097b4:	ec55 4b10 	vmov	r4, r5, d0
 80097b8:	2d00      	cmp	r5, #0
 80097ba:	460e      	mov	r6, r1
 80097bc:	4619      	mov	r1, r3
 80097be:	462b      	mov	r3, r5
 80097c0:	bfbb      	ittet	lt
 80097c2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80097c6:	461d      	movlt	r5, r3
 80097c8:	2300      	movge	r3, #0
 80097ca:	232d      	movlt	r3, #45	; 0x2d
 80097cc:	700b      	strb	r3, [r1, #0]
 80097ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097d0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80097d4:	4691      	mov	r9, r2
 80097d6:	f023 0820 	bic.w	r8, r3, #32
 80097da:	bfbc      	itt	lt
 80097dc:	4622      	movlt	r2, r4
 80097de:	4614      	movlt	r4, r2
 80097e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80097e4:	d005      	beq.n	80097f2 <__cvt+0x42>
 80097e6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80097ea:	d100      	bne.n	80097ee <__cvt+0x3e>
 80097ec:	3601      	adds	r6, #1
 80097ee:	2102      	movs	r1, #2
 80097f0:	e000      	b.n	80097f4 <__cvt+0x44>
 80097f2:	2103      	movs	r1, #3
 80097f4:	ab03      	add	r3, sp, #12
 80097f6:	9301      	str	r3, [sp, #4]
 80097f8:	ab02      	add	r3, sp, #8
 80097fa:	9300      	str	r3, [sp, #0]
 80097fc:	ec45 4b10 	vmov	d0, r4, r5
 8009800:	4653      	mov	r3, sl
 8009802:	4632      	mov	r2, r6
 8009804:	f000 fd08 	bl	800a218 <_dtoa_r>
 8009808:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800980c:	4607      	mov	r7, r0
 800980e:	d102      	bne.n	8009816 <__cvt+0x66>
 8009810:	f019 0f01 	tst.w	r9, #1
 8009814:	d022      	beq.n	800985c <__cvt+0xac>
 8009816:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800981a:	eb07 0906 	add.w	r9, r7, r6
 800981e:	d110      	bne.n	8009842 <__cvt+0x92>
 8009820:	783b      	ldrb	r3, [r7, #0]
 8009822:	2b30      	cmp	r3, #48	; 0x30
 8009824:	d10a      	bne.n	800983c <__cvt+0x8c>
 8009826:	2200      	movs	r2, #0
 8009828:	2300      	movs	r3, #0
 800982a:	4620      	mov	r0, r4
 800982c:	4629      	mov	r1, r5
 800982e:	f7f7 f923 	bl	8000a78 <__aeabi_dcmpeq>
 8009832:	b918      	cbnz	r0, 800983c <__cvt+0x8c>
 8009834:	f1c6 0601 	rsb	r6, r6, #1
 8009838:	f8ca 6000 	str.w	r6, [sl]
 800983c:	f8da 3000 	ldr.w	r3, [sl]
 8009840:	4499      	add	r9, r3
 8009842:	2200      	movs	r2, #0
 8009844:	2300      	movs	r3, #0
 8009846:	4620      	mov	r0, r4
 8009848:	4629      	mov	r1, r5
 800984a:	f7f7 f915 	bl	8000a78 <__aeabi_dcmpeq>
 800984e:	b108      	cbz	r0, 8009854 <__cvt+0xa4>
 8009850:	f8cd 900c 	str.w	r9, [sp, #12]
 8009854:	2230      	movs	r2, #48	; 0x30
 8009856:	9b03      	ldr	r3, [sp, #12]
 8009858:	454b      	cmp	r3, r9
 800985a:	d307      	bcc.n	800986c <__cvt+0xbc>
 800985c:	9b03      	ldr	r3, [sp, #12]
 800985e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009860:	1bdb      	subs	r3, r3, r7
 8009862:	4638      	mov	r0, r7
 8009864:	6013      	str	r3, [r2, #0]
 8009866:	b004      	add	sp, #16
 8009868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800986c:	1c59      	adds	r1, r3, #1
 800986e:	9103      	str	r1, [sp, #12]
 8009870:	701a      	strb	r2, [r3, #0]
 8009872:	e7f0      	b.n	8009856 <__cvt+0xa6>

08009874 <__exponent>:
 8009874:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009876:	4603      	mov	r3, r0
 8009878:	2900      	cmp	r1, #0
 800987a:	bfb8      	it	lt
 800987c:	4249      	neglt	r1, r1
 800987e:	f803 2b02 	strb.w	r2, [r3], #2
 8009882:	bfb4      	ite	lt
 8009884:	222d      	movlt	r2, #45	; 0x2d
 8009886:	222b      	movge	r2, #43	; 0x2b
 8009888:	2909      	cmp	r1, #9
 800988a:	7042      	strb	r2, [r0, #1]
 800988c:	dd2a      	ble.n	80098e4 <__exponent+0x70>
 800988e:	f10d 0407 	add.w	r4, sp, #7
 8009892:	46a4      	mov	ip, r4
 8009894:	270a      	movs	r7, #10
 8009896:	46a6      	mov	lr, r4
 8009898:	460a      	mov	r2, r1
 800989a:	fb91 f6f7 	sdiv	r6, r1, r7
 800989e:	fb07 1516 	mls	r5, r7, r6, r1
 80098a2:	3530      	adds	r5, #48	; 0x30
 80098a4:	2a63      	cmp	r2, #99	; 0x63
 80098a6:	f104 34ff 	add.w	r4, r4, #4294967295
 80098aa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80098ae:	4631      	mov	r1, r6
 80098b0:	dcf1      	bgt.n	8009896 <__exponent+0x22>
 80098b2:	3130      	adds	r1, #48	; 0x30
 80098b4:	f1ae 0502 	sub.w	r5, lr, #2
 80098b8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80098bc:	1c44      	adds	r4, r0, #1
 80098be:	4629      	mov	r1, r5
 80098c0:	4561      	cmp	r1, ip
 80098c2:	d30a      	bcc.n	80098da <__exponent+0x66>
 80098c4:	f10d 0209 	add.w	r2, sp, #9
 80098c8:	eba2 020e 	sub.w	r2, r2, lr
 80098cc:	4565      	cmp	r5, ip
 80098ce:	bf88      	it	hi
 80098d0:	2200      	movhi	r2, #0
 80098d2:	4413      	add	r3, r2
 80098d4:	1a18      	subs	r0, r3, r0
 80098d6:	b003      	add	sp, #12
 80098d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80098de:	f804 2f01 	strb.w	r2, [r4, #1]!
 80098e2:	e7ed      	b.n	80098c0 <__exponent+0x4c>
 80098e4:	2330      	movs	r3, #48	; 0x30
 80098e6:	3130      	adds	r1, #48	; 0x30
 80098e8:	7083      	strb	r3, [r0, #2]
 80098ea:	70c1      	strb	r1, [r0, #3]
 80098ec:	1d03      	adds	r3, r0, #4
 80098ee:	e7f1      	b.n	80098d4 <__exponent+0x60>

080098f0 <_printf_float>:
 80098f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098f4:	ed2d 8b02 	vpush	{d8}
 80098f8:	b08d      	sub	sp, #52	; 0x34
 80098fa:	460c      	mov	r4, r1
 80098fc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009900:	4616      	mov	r6, r2
 8009902:	461f      	mov	r7, r3
 8009904:	4605      	mov	r5, r0
 8009906:	f001 fa73 	bl	800adf0 <_localeconv_r>
 800990a:	f8d0 a000 	ldr.w	sl, [r0]
 800990e:	4650      	mov	r0, sl
 8009910:	f7f6 fc36 	bl	8000180 <strlen>
 8009914:	2300      	movs	r3, #0
 8009916:	930a      	str	r3, [sp, #40]	; 0x28
 8009918:	6823      	ldr	r3, [r4, #0]
 800991a:	9305      	str	r3, [sp, #20]
 800991c:	f8d8 3000 	ldr.w	r3, [r8]
 8009920:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009924:	3307      	adds	r3, #7
 8009926:	f023 0307 	bic.w	r3, r3, #7
 800992a:	f103 0208 	add.w	r2, r3, #8
 800992e:	f8c8 2000 	str.w	r2, [r8]
 8009932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009936:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800993a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800993e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009942:	9307      	str	r3, [sp, #28]
 8009944:	f8cd 8018 	str.w	r8, [sp, #24]
 8009948:	ee08 0a10 	vmov	s16, r0
 800994c:	4b9f      	ldr	r3, [pc, #636]	; (8009bcc <_printf_float+0x2dc>)
 800994e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009952:	f04f 32ff 	mov.w	r2, #4294967295
 8009956:	f7f7 f8c1 	bl	8000adc <__aeabi_dcmpun>
 800995a:	bb88      	cbnz	r0, 80099c0 <_printf_float+0xd0>
 800995c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009960:	4b9a      	ldr	r3, [pc, #616]	; (8009bcc <_printf_float+0x2dc>)
 8009962:	f04f 32ff 	mov.w	r2, #4294967295
 8009966:	f7f7 f89b 	bl	8000aa0 <__aeabi_dcmple>
 800996a:	bb48      	cbnz	r0, 80099c0 <_printf_float+0xd0>
 800996c:	2200      	movs	r2, #0
 800996e:	2300      	movs	r3, #0
 8009970:	4640      	mov	r0, r8
 8009972:	4649      	mov	r1, r9
 8009974:	f7f7 f88a 	bl	8000a8c <__aeabi_dcmplt>
 8009978:	b110      	cbz	r0, 8009980 <_printf_float+0x90>
 800997a:	232d      	movs	r3, #45	; 0x2d
 800997c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009980:	4b93      	ldr	r3, [pc, #588]	; (8009bd0 <_printf_float+0x2e0>)
 8009982:	4894      	ldr	r0, [pc, #592]	; (8009bd4 <_printf_float+0x2e4>)
 8009984:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009988:	bf94      	ite	ls
 800998a:	4698      	movls	r8, r3
 800998c:	4680      	movhi	r8, r0
 800998e:	2303      	movs	r3, #3
 8009990:	6123      	str	r3, [r4, #16]
 8009992:	9b05      	ldr	r3, [sp, #20]
 8009994:	f023 0204 	bic.w	r2, r3, #4
 8009998:	6022      	str	r2, [r4, #0]
 800999a:	f04f 0900 	mov.w	r9, #0
 800999e:	9700      	str	r7, [sp, #0]
 80099a0:	4633      	mov	r3, r6
 80099a2:	aa0b      	add	r2, sp, #44	; 0x2c
 80099a4:	4621      	mov	r1, r4
 80099a6:	4628      	mov	r0, r5
 80099a8:	f000 f9d8 	bl	8009d5c <_printf_common>
 80099ac:	3001      	adds	r0, #1
 80099ae:	f040 8090 	bne.w	8009ad2 <_printf_float+0x1e2>
 80099b2:	f04f 30ff 	mov.w	r0, #4294967295
 80099b6:	b00d      	add	sp, #52	; 0x34
 80099b8:	ecbd 8b02 	vpop	{d8}
 80099bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099c0:	4642      	mov	r2, r8
 80099c2:	464b      	mov	r3, r9
 80099c4:	4640      	mov	r0, r8
 80099c6:	4649      	mov	r1, r9
 80099c8:	f7f7 f888 	bl	8000adc <__aeabi_dcmpun>
 80099cc:	b140      	cbz	r0, 80099e0 <_printf_float+0xf0>
 80099ce:	464b      	mov	r3, r9
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	bfbc      	itt	lt
 80099d4:	232d      	movlt	r3, #45	; 0x2d
 80099d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80099da:	487f      	ldr	r0, [pc, #508]	; (8009bd8 <_printf_float+0x2e8>)
 80099dc:	4b7f      	ldr	r3, [pc, #508]	; (8009bdc <_printf_float+0x2ec>)
 80099de:	e7d1      	b.n	8009984 <_printf_float+0x94>
 80099e0:	6863      	ldr	r3, [r4, #4]
 80099e2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80099e6:	9206      	str	r2, [sp, #24]
 80099e8:	1c5a      	adds	r2, r3, #1
 80099ea:	d13f      	bne.n	8009a6c <_printf_float+0x17c>
 80099ec:	2306      	movs	r3, #6
 80099ee:	6063      	str	r3, [r4, #4]
 80099f0:	9b05      	ldr	r3, [sp, #20]
 80099f2:	6861      	ldr	r1, [r4, #4]
 80099f4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80099f8:	2300      	movs	r3, #0
 80099fa:	9303      	str	r3, [sp, #12]
 80099fc:	ab0a      	add	r3, sp, #40	; 0x28
 80099fe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009a02:	ab09      	add	r3, sp, #36	; 0x24
 8009a04:	ec49 8b10 	vmov	d0, r8, r9
 8009a08:	9300      	str	r3, [sp, #0]
 8009a0a:	6022      	str	r2, [r4, #0]
 8009a0c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009a10:	4628      	mov	r0, r5
 8009a12:	f7ff fecd 	bl	80097b0 <__cvt>
 8009a16:	9b06      	ldr	r3, [sp, #24]
 8009a18:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a1a:	2b47      	cmp	r3, #71	; 0x47
 8009a1c:	4680      	mov	r8, r0
 8009a1e:	d108      	bne.n	8009a32 <_printf_float+0x142>
 8009a20:	1cc8      	adds	r0, r1, #3
 8009a22:	db02      	blt.n	8009a2a <_printf_float+0x13a>
 8009a24:	6863      	ldr	r3, [r4, #4]
 8009a26:	4299      	cmp	r1, r3
 8009a28:	dd41      	ble.n	8009aae <_printf_float+0x1be>
 8009a2a:	f1ab 0b02 	sub.w	fp, fp, #2
 8009a2e:	fa5f fb8b 	uxtb.w	fp, fp
 8009a32:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009a36:	d820      	bhi.n	8009a7a <_printf_float+0x18a>
 8009a38:	3901      	subs	r1, #1
 8009a3a:	465a      	mov	r2, fp
 8009a3c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009a40:	9109      	str	r1, [sp, #36]	; 0x24
 8009a42:	f7ff ff17 	bl	8009874 <__exponent>
 8009a46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a48:	1813      	adds	r3, r2, r0
 8009a4a:	2a01      	cmp	r2, #1
 8009a4c:	4681      	mov	r9, r0
 8009a4e:	6123      	str	r3, [r4, #16]
 8009a50:	dc02      	bgt.n	8009a58 <_printf_float+0x168>
 8009a52:	6822      	ldr	r2, [r4, #0]
 8009a54:	07d2      	lsls	r2, r2, #31
 8009a56:	d501      	bpl.n	8009a5c <_printf_float+0x16c>
 8009a58:	3301      	adds	r3, #1
 8009a5a:	6123      	str	r3, [r4, #16]
 8009a5c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d09c      	beq.n	800999e <_printf_float+0xae>
 8009a64:	232d      	movs	r3, #45	; 0x2d
 8009a66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a6a:	e798      	b.n	800999e <_printf_float+0xae>
 8009a6c:	9a06      	ldr	r2, [sp, #24]
 8009a6e:	2a47      	cmp	r2, #71	; 0x47
 8009a70:	d1be      	bne.n	80099f0 <_printf_float+0x100>
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d1bc      	bne.n	80099f0 <_printf_float+0x100>
 8009a76:	2301      	movs	r3, #1
 8009a78:	e7b9      	b.n	80099ee <_printf_float+0xfe>
 8009a7a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009a7e:	d118      	bne.n	8009ab2 <_printf_float+0x1c2>
 8009a80:	2900      	cmp	r1, #0
 8009a82:	6863      	ldr	r3, [r4, #4]
 8009a84:	dd0b      	ble.n	8009a9e <_printf_float+0x1ae>
 8009a86:	6121      	str	r1, [r4, #16]
 8009a88:	b913      	cbnz	r3, 8009a90 <_printf_float+0x1a0>
 8009a8a:	6822      	ldr	r2, [r4, #0]
 8009a8c:	07d0      	lsls	r0, r2, #31
 8009a8e:	d502      	bpl.n	8009a96 <_printf_float+0x1a6>
 8009a90:	3301      	adds	r3, #1
 8009a92:	440b      	add	r3, r1
 8009a94:	6123      	str	r3, [r4, #16]
 8009a96:	65a1      	str	r1, [r4, #88]	; 0x58
 8009a98:	f04f 0900 	mov.w	r9, #0
 8009a9c:	e7de      	b.n	8009a5c <_printf_float+0x16c>
 8009a9e:	b913      	cbnz	r3, 8009aa6 <_printf_float+0x1b6>
 8009aa0:	6822      	ldr	r2, [r4, #0]
 8009aa2:	07d2      	lsls	r2, r2, #31
 8009aa4:	d501      	bpl.n	8009aaa <_printf_float+0x1ba>
 8009aa6:	3302      	adds	r3, #2
 8009aa8:	e7f4      	b.n	8009a94 <_printf_float+0x1a4>
 8009aaa:	2301      	movs	r3, #1
 8009aac:	e7f2      	b.n	8009a94 <_printf_float+0x1a4>
 8009aae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009ab2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ab4:	4299      	cmp	r1, r3
 8009ab6:	db05      	blt.n	8009ac4 <_printf_float+0x1d4>
 8009ab8:	6823      	ldr	r3, [r4, #0]
 8009aba:	6121      	str	r1, [r4, #16]
 8009abc:	07d8      	lsls	r0, r3, #31
 8009abe:	d5ea      	bpl.n	8009a96 <_printf_float+0x1a6>
 8009ac0:	1c4b      	adds	r3, r1, #1
 8009ac2:	e7e7      	b.n	8009a94 <_printf_float+0x1a4>
 8009ac4:	2900      	cmp	r1, #0
 8009ac6:	bfd4      	ite	le
 8009ac8:	f1c1 0202 	rsble	r2, r1, #2
 8009acc:	2201      	movgt	r2, #1
 8009ace:	4413      	add	r3, r2
 8009ad0:	e7e0      	b.n	8009a94 <_printf_float+0x1a4>
 8009ad2:	6823      	ldr	r3, [r4, #0]
 8009ad4:	055a      	lsls	r2, r3, #21
 8009ad6:	d407      	bmi.n	8009ae8 <_printf_float+0x1f8>
 8009ad8:	6923      	ldr	r3, [r4, #16]
 8009ada:	4642      	mov	r2, r8
 8009adc:	4631      	mov	r1, r6
 8009ade:	4628      	mov	r0, r5
 8009ae0:	47b8      	blx	r7
 8009ae2:	3001      	adds	r0, #1
 8009ae4:	d12c      	bne.n	8009b40 <_printf_float+0x250>
 8009ae6:	e764      	b.n	80099b2 <_printf_float+0xc2>
 8009ae8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009aec:	f240 80e0 	bls.w	8009cb0 <_printf_float+0x3c0>
 8009af0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009af4:	2200      	movs	r2, #0
 8009af6:	2300      	movs	r3, #0
 8009af8:	f7f6 ffbe 	bl	8000a78 <__aeabi_dcmpeq>
 8009afc:	2800      	cmp	r0, #0
 8009afe:	d034      	beq.n	8009b6a <_printf_float+0x27a>
 8009b00:	4a37      	ldr	r2, [pc, #220]	; (8009be0 <_printf_float+0x2f0>)
 8009b02:	2301      	movs	r3, #1
 8009b04:	4631      	mov	r1, r6
 8009b06:	4628      	mov	r0, r5
 8009b08:	47b8      	blx	r7
 8009b0a:	3001      	adds	r0, #1
 8009b0c:	f43f af51 	beq.w	80099b2 <_printf_float+0xc2>
 8009b10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b14:	429a      	cmp	r2, r3
 8009b16:	db02      	blt.n	8009b1e <_printf_float+0x22e>
 8009b18:	6823      	ldr	r3, [r4, #0]
 8009b1a:	07d8      	lsls	r0, r3, #31
 8009b1c:	d510      	bpl.n	8009b40 <_printf_float+0x250>
 8009b1e:	ee18 3a10 	vmov	r3, s16
 8009b22:	4652      	mov	r2, sl
 8009b24:	4631      	mov	r1, r6
 8009b26:	4628      	mov	r0, r5
 8009b28:	47b8      	blx	r7
 8009b2a:	3001      	adds	r0, #1
 8009b2c:	f43f af41 	beq.w	80099b2 <_printf_float+0xc2>
 8009b30:	f04f 0800 	mov.w	r8, #0
 8009b34:	f104 091a 	add.w	r9, r4, #26
 8009b38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b3a:	3b01      	subs	r3, #1
 8009b3c:	4543      	cmp	r3, r8
 8009b3e:	dc09      	bgt.n	8009b54 <_printf_float+0x264>
 8009b40:	6823      	ldr	r3, [r4, #0]
 8009b42:	079b      	lsls	r3, r3, #30
 8009b44:	f100 8105 	bmi.w	8009d52 <_printf_float+0x462>
 8009b48:	68e0      	ldr	r0, [r4, #12]
 8009b4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b4c:	4298      	cmp	r0, r3
 8009b4e:	bfb8      	it	lt
 8009b50:	4618      	movlt	r0, r3
 8009b52:	e730      	b.n	80099b6 <_printf_float+0xc6>
 8009b54:	2301      	movs	r3, #1
 8009b56:	464a      	mov	r2, r9
 8009b58:	4631      	mov	r1, r6
 8009b5a:	4628      	mov	r0, r5
 8009b5c:	47b8      	blx	r7
 8009b5e:	3001      	adds	r0, #1
 8009b60:	f43f af27 	beq.w	80099b2 <_printf_float+0xc2>
 8009b64:	f108 0801 	add.w	r8, r8, #1
 8009b68:	e7e6      	b.n	8009b38 <_printf_float+0x248>
 8009b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	dc39      	bgt.n	8009be4 <_printf_float+0x2f4>
 8009b70:	4a1b      	ldr	r2, [pc, #108]	; (8009be0 <_printf_float+0x2f0>)
 8009b72:	2301      	movs	r3, #1
 8009b74:	4631      	mov	r1, r6
 8009b76:	4628      	mov	r0, r5
 8009b78:	47b8      	blx	r7
 8009b7a:	3001      	adds	r0, #1
 8009b7c:	f43f af19 	beq.w	80099b2 <_printf_float+0xc2>
 8009b80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b84:	4313      	orrs	r3, r2
 8009b86:	d102      	bne.n	8009b8e <_printf_float+0x29e>
 8009b88:	6823      	ldr	r3, [r4, #0]
 8009b8a:	07d9      	lsls	r1, r3, #31
 8009b8c:	d5d8      	bpl.n	8009b40 <_printf_float+0x250>
 8009b8e:	ee18 3a10 	vmov	r3, s16
 8009b92:	4652      	mov	r2, sl
 8009b94:	4631      	mov	r1, r6
 8009b96:	4628      	mov	r0, r5
 8009b98:	47b8      	blx	r7
 8009b9a:	3001      	adds	r0, #1
 8009b9c:	f43f af09 	beq.w	80099b2 <_printf_float+0xc2>
 8009ba0:	f04f 0900 	mov.w	r9, #0
 8009ba4:	f104 0a1a 	add.w	sl, r4, #26
 8009ba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009baa:	425b      	negs	r3, r3
 8009bac:	454b      	cmp	r3, r9
 8009bae:	dc01      	bgt.n	8009bb4 <_printf_float+0x2c4>
 8009bb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bb2:	e792      	b.n	8009ada <_printf_float+0x1ea>
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	4652      	mov	r2, sl
 8009bb8:	4631      	mov	r1, r6
 8009bba:	4628      	mov	r0, r5
 8009bbc:	47b8      	blx	r7
 8009bbe:	3001      	adds	r0, #1
 8009bc0:	f43f aef7 	beq.w	80099b2 <_printf_float+0xc2>
 8009bc4:	f109 0901 	add.w	r9, r9, #1
 8009bc8:	e7ee      	b.n	8009ba8 <_printf_float+0x2b8>
 8009bca:	bf00      	nop
 8009bcc:	7fefffff 	.word	0x7fefffff
 8009bd0:	0800cbfc 	.word	0x0800cbfc
 8009bd4:	0800cc00 	.word	0x0800cc00
 8009bd8:	0800cc08 	.word	0x0800cc08
 8009bdc:	0800cc04 	.word	0x0800cc04
 8009be0:	0800cc0c 	.word	0x0800cc0c
 8009be4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009be6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009be8:	429a      	cmp	r2, r3
 8009bea:	bfa8      	it	ge
 8009bec:	461a      	movge	r2, r3
 8009bee:	2a00      	cmp	r2, #0
 8009bf0:	4691      	mov	r9, r2
 8009bf2:	dc37      	bgt.n	8009c64 <_printf_float+0x374>
 8009bf4:	f04f 0b00 	mov.w	fp, #0
 8009bf8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009bfc:	f104 021a 	add.w	r2, r4, #26
 8009c00:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009c02:	9305      	str	r3, [sp, #20]
 8009c04:	eba3 0309 	sub.w	r3, r3, r9
 8009c08:	455b      	cmp	r3, fp
 8009c0a:	dc33      	bgt.n	8009c74 <_printf_float+0x384>
 8009c0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c10:	429a      	cmp	r2, r3
 8009c12:	db3b      	blt.n	8009c8c <_printf_float+0x39c>
 8009c14:	6823      	ldr	r3, [r4, #0]
 8009c16:	07da      	lsls	r2, r3, #31
 8009c18:	d438      	bmi.n	8009c8c <_printf_float+0x39c>
 8009c1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c1c:	9b05      	ldr	r3, [sp, #20]
 8009c1e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c20:	1ad3      	subs	r3, r2, r3
 8009c22:	eba2 0901 	sub.w	r9, r2, r1
 8009c26:	4599      	cmp	r9, r3
 8009c28:	bfa8      	it	ge
 8009c2a:	4699      	movge	r9, r3
 8009c2c:	f1b9 0f00 	cmp.w	r9, #0
 8009c30:	dc35      	bgt.n	8009c9e <_printf_float+0x3ae>
 8009c32:	f04f 0800 	mov.w	r8, #0
 8009c36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c3a:	f104 0a1a 	add.w	sl, r4, #26
 8009c3e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c42:	1a9b      	subs	r3, r3, r2
 8009c44:	eba3 0309 	sub.w	r3, r3, r9
 8009c48:	4543      	cmp	r3, r8
 8009c4a:	f77f af79 	ble.w	8009b40 <_printf_float+0x250>
 8009c4e:	2301      	movs	r3, #1
 8009c50:	4652      	mov	r2, sl
 8009c52:	4631      	mov	r1, r6
 8009c54:	4628      	mov	r0, r5
 8009c56:	47b8      	blx	r7
 8009c58:	3001      	adds	r0, #1
 8009c5a:	f43f aeaa 	beq.w	80099b2 <_printf_float+0xc2>
 8009c5e:	f108 0801 	add.w	r8, r8, #1
 8009c62:	e7ec      	b.n	8009c3e <_printf_float+0x34e>
 8009c64:	4613      	mov	r3, r2
 8009c66:	4631      	mov	r1, r6
 8009c68:	4642      	mov	r2, r8
 8009c6a:	4628      	mov	r0, r5
 8009c6c:	47b8      	blx	r7
 8009c6e:	3001      	adds	r0, #1
 8009c70:	d1c0      	bne.n	8009bf4 <_printf_float+0x304>
 8009c72:	e69e      	b.n	80099b2 <_printf_float+0xc2>
 8009c74:	2301      	movs	r3, #1
 8009c76:	4631      	mov	r1, r6
 8009c78:	4628      	mov	r0, r5
 8009c7a:	9205      	str	r2, [sp, #20]
 8009c7c:	47b8      	blx	r7
 8009c7e:	3001      	adds	r0, #1
 8009c80:	f43f ae97 	beq.w	80099b2 <_printf_float+0xc2>
 8009c84:	9a05      	ldr	r2, [sp, #20]
 8009c86:	f10b 0b01 	add.w	fp, fp, #1
 8009c8a:	e7b9      	b.n	8009c00 <_printf_float+0x310>
 8009c8c:	ee18 3a10 	vmov	r3, s16
 8009c90:	4652      	mov	r2, sl
 8009c92:	4631      	mov	r1, r6
 8009c94:	4628      	mov	r0, r5
 8009c96:	47b8      	blx	r7
 8009c98:	3001      	adds	r0, #1
 8009c9a:	d1be      	bne.n	8009c1a <_printf_float+0x32a>
 8009c9c:	e689      	b.n	80099b2 <_printf_float+0xc2>
 8009c9e:	9a05      	ldr	r2, [sp, #20]
 8009ca0:	464b      	mov	r3, r9
 8009ca2:	4442      	add	r2, r8
 8009ca4:	4631      	mov	r1, r6
 8009ca6:	4628      	mov	r0, r5
 8009ca8:	47b8      	blx	r7
 8009caa:	3001      	adds	r0, #1
 8009cac:	d1c1      	bne.n	8009c32 <_printf_float+0x342>
 8009cae:	e680      	b.n	80099b2 <_printf_float+0xc2>
 8009cb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009cb2:	2a01      	cmp	r2, #1
 8009cb4:	dc01      	bgt.n	8009cba <_printf_float+0x3ca>
 8009cb6:	07db      	lsls	r3, r3, #31
 8009cb8:	d538      	bpl.n	8009d2c <_printf_float+0x43c>
 8009cba:	2301      	movs	r3, #1
 8009cbc:	4642      	mov	r2, r8
 8009cbe:	4631      	mov	r1, r6
 8009cc0:	4628      	mov	r0, r5
 8009cc2:	47b8      	blx	r7
 8009cc4:	3001      	adds	r0, #1
 8009cc6:	f43f ae74 	beq.w	80099b2 <_printf_float+0xc2>
 8009cca:	ee18 3a10 	vmov	r3, s16
 8009cce:	4652      	mov	r2, sl
 8009cd0:	4631      	mov	r1, r6
 8009cd2:	4628      	mov	r0, r5
 8009cd4:	47b8      	blx	r7
 8009cd6:	3001      	adds	r0, #1
 8009cd8:	f43f ae6b 	beq.w	80099b2 <_printf_float+0xc2>
 8009cdc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	f7f6 fec8 	bl	8000a78 <__aeabi_dcmpeq>
 8009ce8:	b9d8      	cbnz	r0, 8009d22 <_printf_float+0x432>
 8009cea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cec:	f108 0201 	add.w	r2, r8, #1
 8009cf0:	3b01      	subs	r3, #1
 8009cf2:	4631      	mov	r1, r6
 8009cf4:	4628      	mov	r0, r5
 8009cf6:	47b8      	blx	r7
 8009cf8:	3001      	adds	r0, #1
 8009cfa:	d10e      	bne.n	8009d1a <_printf_float+0x42a>
 8009cfc:	e659      	b.n	80099b2 <_printf_float+0xc2>
 8009cfe:	2301      	movs	r3, #1
 8009d00:	4652      	mov	r2, sl
 8009d02:	4631      	mov	r1, r6
 8009d04:	4628      	mov	r0, r5
 8009d06:	47b8      	blx	r7
 8009d08:	3001      	adds	r0, #1
 8009d0a:	f43f ae52 	beq.w	80099b2 <_printf_float+0xc2>
 8009d0e:	f108 0801 	add.w	r8, r8, #1
 8009d12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d14:	3b01      	subs	r3, #1
 8009d16:	4543      	cmp	r3, r8
 8009d18:	dcf1      	bgt.n	8009cfe <_printf_float+0x40e>
 8009d1a:	464b      	mov	r3, r9
 8009d1c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009d20:	e6dc      	b.n	8009adc <_printf_float+0x1ec>
 8009d22:	f04f 0800 	mov.w	r8, #0
 8009d26:	f104 0a1a 	add.w	sl, r4, #26
 8009d2a:	e7f2      	b.n	8009d12 <_printf_float+0x422>
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	4642      	mov	r2, r8
 8009d30:	e7df      	b.n	8009cf2 <_printf_float+0x402>
 8009d32:	2301      	movs	r3, #1
 8009d34:	464a      	mov	r2, r9
 8009d36:	4631      	mov	r1, r6
 8009d38:	4628      	mov	r0, r5
 8009d3a:	47b8      	blx	r7
 8009d3c:	3001      	adds	r0, #1
 8009d3e:	f43f ae38 	beq.w	80099b2 <_printf_float+0xc2>
 8009d42:	f108 0801 	add.w	r8, r8, #1
 8009d46:	68e3      	ldr	r3, [r4, #12]
 8009d48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d4a:	1a5b      	subs	r3, r3, r1
 8009d4c:	4543      	cmp	r3, r8
 8009d4e:	dcf0      	bgt.n	8009d32 <_printf_float+0x442>
 8009d50:	e6fa      	b.n	8009b48 <_printf_float+0x258>
 8009d52:	f04f 0800 	mov.w	r8, #0
 8009d56:	f104 0919 	add.w	r9, r4, #25
 8009d5a:	e7f4      	b.n	8009d46 <_printf_float+0x456>

08009d5c <_printf_common>:
 8009d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d60:	4616      	mov	r6, r2
 8009d62:	4699      	mov	r9, r3
 8009d64:	688a      	ldr	r2, [r1, #8]
 8009d66:	690b      	ldr	r3, [r1, #16]
 8009d68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	bfb8      	it	lt
 8009d70:	4613      	movlt	r3, r2
 8009d72:	6033      	str	r3, [r6, #0]
 8009d74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009d78:	4607      	mov	r7, r0
 8009d7a:	460c      	mov	r4, r1
 8009d7c:	b10a      	cbz	r2, 8009d82 <_printf_common+0x26>
 8009d7e:	3301      	adds	r3, #1
 8009d80:	6033      	str	r3, [r6, #0]
 8009d82:	6823      	ldr	r3, [r4, #0]
 8009d84:	0699      	lsls	r1, r3, #26
 8009d86:	bf42      	ittt	mi
 8009d88:	6833      	ldrmi	r3, [r6, #0]
 8009d8a:	3302      	addmi	r3, #2
 8009d8c:	6033      	strmi	r3, [r6, #0]
 8009d8e:	6825      	ldr	r5, [r4, #0]
 8009d90:	f015 0506 	ands.w	r5, r5, #6
 8009d94:	d106      	bne.n	8009da4 <_printf_common+0x48>
 8009d96:	f104 0a19 	add.w	sl, r4, #25
 8009d9a:	68e3      	ldr	r3, [r4, #12]
 8009d9c:	6832      	ldr	r2, [r6, #0]
 8009d9e:	1a9b      	subs	r3, r3, r2
 8009da0:	42ab      	cmp	r3, r5
 8009da2:	dc26      	bgt.n	8009df2 <_printf_common+0x96>
 8009da4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009da8:	1e13      	subs	r3, r2, #0
 8009daa:	6822      	ldr	r2, [r4, #0]
 8009dac:	bf18      	it	ne
 8009dae:	2301      	movne	r3, #1
 8009db0:	0692      	lsls	r2, r2, #26
 8009db2:	d42b      	bmi.n	8009e0c <_printf_common+0xb0>
 8009db4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009db8:	4649      	mov	r1, r9
 8009dba:	4638      	mov	r0, r7
 8009dbc:	47c0      	blx	r8
 8009dbe:	3001      	adds	r0, #1
 8009dc0:	d01e      	beq.n	8009e00 <_printf_common+0xa4>
 8009dc2:	6823      	ldr	r3, [r4, #0]
 8009dc4:	68e5      	ldr	r5, [r4, #12]
 8009dc6:	6832      	ldr	r2, [r6, #0]
 8009dc8:	f003 0306 	and.w	r3, r3, #6
 8009dcc:	2b04      	cmp	r3, #4
 8009dce:	bf08      	it	eq
 8009dd0:	1aad      	subeq	r5, r5, r2
 8009dd2:	68a3      	ldr	r3, [r4, #8]
 8009dd4:	6922      	ldr	r2, [r4, #16]
 8009dd6:	bf0c      	ite	eq
 8009dd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ddc:	2500      	movne	r5, #0
 8009dde:	4293      	cmp	r3, r2
 8009de0:	bfc4      	itt	gt
 8009de2:	1a9b      	subgt	r3, r3, r2
 8009de4:	18ed      	addgt	r5, r5, r3
 8009de6:	2600      	movs	r6, #0
 8009de8:	341a      	adds	r4, #26
 8009dea:	42b5      	cmp	r5, r6
 8009dec:	d11a      	bne.n	8009e24 <_printf_common+0xc8>
 8009dee:	2000      	movs	r0, #0
 8009df0:	e008      	b.n	8009e04 <_printf_common+0xa8>
 8009df2:	2301      	movs	r3, #1
 8009df4:	4652      	mov	r2, sl
 8009df6:	4649      	mov	r1, r9
 8009df8:	4638      	mov	r0, r7
 8009dfa:	47c0      	blx	r8
 8009dfc:	3001      	adds	r0, #1
 8009dfe:	d103      	bne.n	8009e08 <_printf_common+0xac>
 8009e00:	f04f 30ff 	mov.w	r0, #4294967295
 8009e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e08:	3501      	adds	r5, #1
 8009e0a:	e7c6      	b.n	8009d9a <_printf_common+0x3e>
 8009e0c:	18e1      	adds	r1, r4, r3
 8009e0e:	1c5a      	adds	r2, r3, #1
 8009e10:	2030      	movs	r0, #48	; 0x30
 8009e12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009e16:	4422      	add	r2, r4
 8009e18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009e1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009e20:	3302      	adds	r3, #2
 8009e22:	e7c7      	b.n	8009db4 <_printf_common+0x58>
 8009e24:	2301      	movs	r3, #1
 8009e26:	4622      	mov	r2, r4
 8009e28:	4649      	mov	r1, r9
 8009e2a:	4638      	mov	r0, r7
 8009e2c:	47c0      	blx	r8
 8009e2e:	3001      	adds	r0, #1
 8009e30:	d0e6      	beq.n	8009e00 <_printf_common+0xa4>
 8009e32:	3601      	adds	r6, #1
 8009e34:	e7d9      	b.n	8009dea <_printf_common+0x8e>
	...

08009e38 <_printf_i>:
 8009e38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e3c:	460c      	mov	r4, r1
 8009e3e:	4691      	mov	r9, r2
 8009e40:	7e27      	ldrb	r7, [r4, #24]
 8009e42:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009e44:	2f78      	cmp	r7, #120	; 0x78
 8009e46:	4680      	mov	r8, r0
 8009e48:	469a      	mov	sl, r3
 8009e4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009e4e:	d807      	bhi.n	8009e60 <_printf_i+0x28>
 8009e50:	2f62      	cmp	r7, #98	; 0x62
 8009e52:	d80a      	bhi.n	8009e6a <_printf_i+0x32>
 8009e54:	2f00      	cmp	r7, #0
 8009e56:	f000 80d8 	beq.w	800a00a <_printf_i+0x1d2>
 8009e5a:	2f58      	cmp	r7, #88	; 0x58
 8009e5c:	f000 80a3 	beq.w	8009fa6 <_printf_i+0x16e>
 8009e60:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009e64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009e68:	e03a      	b.n	8009ee0 <_printf_i+0xa8>
 8009e6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009e6e:	2b15      	cmp	r3, #21
 8009e70:	d8f6      	bhi.n	8009e60 <_printf_i+0x28>
 8009e72:	a001      	add	r0, pc, #4	; (adr r0, 8009e78 <_printf_i+0x40>)
 8009e74:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009e78:	08009ed1 	.word	0x08009ed1
 8009e7c:	08009ee5 	.word	0x08009ee5
 8009e80:	08009e61 	.word	0x08009e61
 8009e84:	08009e61 	.word	0x08009e61
 8009e88:	08009e61 	.word	0x08009e61
 8009e8c:	08009e61 	.word	0x08009e61
 8009e90:	08009ee5 	.word	0x08009ee5
 8009e94:	08009e61 	.word	0x08009e61
 8009e98:	08009e61 	.word	0x08009e61
 8009e9c:	08009e61 	.word	0x08009e61
 8009ea0:	08009e61 	.word	0x08009e61
 8009ea4:	08009ff1 	.word	0x08009ff1
 8009ea8:	08009f15 	.word	0x08009f15
 8009eac:	08009fd3 	.word	0x08009fd3
 8009eb0:	08009e61 	.word	0x08009e61
 8009eb4:	08009e61 	.word	0x08009e61
 8009eb8:	0800a013 	.word	0x0800a013
 8009ebc:	08009e61 	.word	0x08009e61
 8009ec0:	08009f15 	.word	0x08009f15
 8009ec4:	08009e61 	.word	0x08009e61
 8009ec8:	08009e61 	.word	0x08009e61
 8009ecc:	08009fdb 	.word	0x08009fdb
 8009ed0:	680b      	ldr	r3, [r1, #0]
 8009ed2:	1d1a      	adds	r2, r3, #4
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	600a      	str	r2, [r1, #0]
 8009ed8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009edc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	e0a3      	b.n	800a02c <_printf_i+0x1f4>
 8009ee4:	6825      	ldr	r5, [r4, #0]
 8009ee6:	6808      	ldr	r0, [r1, #0]
 8009ee8:	062e      	lsls	r6, r5, #24
 8009eea:	f100 0304 	add.w	r3, r0, #4
 8009eee:	d50a      	bpl.n	8009f06 <_printf_i+0xce>
 8009ef0:	6805      	ldr	r5, [r0, #0]
 8009ef2:	600b      	str	r3, [r1, #0]
 8009ef4:	2d00      	cmp	r5, #0
 8009ef6:	da03      	bge.n	8009f00 <_printf_i+0xc8>
 8009ef8:	232d      	movs	r3, #45	; 0x2d
 8009efa:	426d      	negs	r5, r5
 8009efc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f00:	485e      	ldr	r0, [pc, #376]	; (800a07c <_printf_i+0x244>)
 8009f02:	230a      	movs	r3, #10
 8009f04:	e019      	b.n	8009f3a <_printf_i+0x102>
 8009f06:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009f0a:	6805      	ldr	r5, [r0, #0]
 8009f0c:	600b      	str	r3, [r1, #0]
 8009f0e:	bf18      	it	ne
 8009f10:	b22d      	sxthne	r5, r5
 8009f12:	e7ef      	b.n	8009ef4 <_printf_i+0xbc>
 8009f14:	680b      	ldr	r3, [r1, #0]
 8009f16:	6825      	ldr	r5, [r4, #0]
 8009f18:	1d18      	adds	r0, r3, #4
 8009f1a:	6008      	str	r0, [r1, #0]
 8009f1c:	0628      	lsls	r0, r5, #24
 8009f1e:	d501      	bpl.n	8009f24 <_printf_i+0xec>
 8009f20:	681d      	ldr	r5, [r3, #0]
 8009f22:	e002      	b.n	8009f2a <_printf_i+0xf2>
 8009f24:	0669      	lsls	r1, r5, #25
 8009f26:	d5fb      	bpl.n	8009f20 <_printf_i+0xe8>
 8009f28:	881d      	ldrh	r5, [r3, #0]
 8009f2a:	4854      	ldr	r0, [pc, #336]	; (800a07c <_printf_i+0x244>)
 8009f2c:	2f6f      	cmp	r7, #111	; 0x6f
 8009f2e:	bf0c      	ite	eq
 8009f30:	2308      	moveq	r3, #8
 8009f32:	230a      	movne	r3, #10
 8009f34:	2100      	movs	r1, #0
 8009f36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009f3a:	6866      	ldr	r6, [r4, #4]
 8009f3c:	60a6      	str	r6, [r4, #8]
 8009f3e:	2e00      	cmp	r6, #0
 8009f40:	bfa2      	ittt	ge
 8009f42:	6821      	ldrge	r1, [r4, #0]
 8009f44:	f021 0104 	bicge.w	r1, r1, #4
 8009f48:	6021      	strge	r1, [r4, #0]
 8009f4a:	b90d      	cbnz	r5, 8009f50 <_printf_i+0x118>
 8009f4c:	2e00      	cmp	r6, #0
 8009f4e:	d04d      	beq.n	8009fec <_printf_i+0x1b4>
 8009f50:	4616      	mov	r6, r2
 8009f52:	fbb5 f1f3 	udiv	r1, r5, r3
 8009f56:	fb03 5711 	mls	r7, r3, r1, r5
 8009f5a:	5dc7      	ldrb	r7, [r0, r7]
 8009f5c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009f60:	462f      	mov	r7, r5
 8009f62:	42bb      	cmp	r3, r7
 8009f64:	460d      	mov	r5, r1
 8009f66:	d9f4      	bls.n	8009f52 <_printf_i+0x11a>
 8009f68:	2b08      	cmp	r3, #8
 8009f6a:	d10b      	bne.n	8009f84 <_printf_i+0x14c>
 8009f6c:	6823      	ldr	r3, [r4, #0]
 8009f6e:	07df      	lsls	r7, r3, #31
 8009f70:	d508      	bpl.n	8009f84 <_printf_i+0x14c>
 8009f72:	6923      	ldr	r3, [r4, #16]
 8009f74:	6861      	ldr	r1, [r4, #4]
 8009f76:	4299      	cmp	r1, r3
 8009f78:	bfde      	ittt	le
 8009f7a:	2330      	movle	r3, #48	; 0x30
 8009f7c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009f80:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009f84:	1b92      	subs	r2, r2, r6
 8009f86:	6122      	str	r2, [r4, #16]
 8009f88:	f8cd a000 	str.w	sl, [sp]
 8009f8c:	464b      	mov	r3, r9
 8009f8e:	aa03      	add	r2, sp, #12
 8009f90:	4621      	mov	r1, r4
 8009f92:	4640      	mov	r0, r8
 8009f94:	f7ff fee2 	bl	8009d5c <_printf_common>
 8009f98:	3001      	adds	r0, #1
 8009f9a:	d14c      	bne.n	800a036 <_printf_i+0x1fe>
 8009f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009fa0:	b004      	add	sp, #16
 8009fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fa6:	4835      	ldr	r0, [pc, #212]	; (800a07c <_printf_i+0x244>)
 8009fa8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009fac:	6823      	ldr	r3, [r4, #0]
 8009fae:	680e      	ldr	r6, [r1, #0]
 8009fb0:	061f      	lsls	r7, r3, #24
 8009fb2:	f856 5b04 	ldr.w	r5, [r6], #4
 8009fb6:	600e      	str	r6, [r1, #0]
 8009fb8:	d514      	bpl.n	8009fe4 <_printf_i+0x1ac>
 8009fba:	07d9      	lsls	r1, r3, #31
 8009fbc:	bf44      	itt	mi
 8009fbe:	f043 0320 	orrmi.w	r3, r3, #32
 8009fc2:	6023      	strmi	r3, [r4, #0]
 8009fc4:	b91d      	cbnz	r5, 8009fce <_printf_i+0x196>
 8009fc6:	6823      	ldr	r3, [r4, #0]
 8009fc8:	f023 0320 	bic.w	r3, r3, #32
 8009fcc:	6023      	str	r3, [r4, #0]
 8009fce:	2310      	movs	r3, #16
 8009fd0:	e7b0      	b.n	8009f34 <_printf_i+0xfc>
 8009fd2:	6823      	ldr	r3, [r4, #0]
 8009fd4:	f043 0320 	orr.w	r3, r3, #32
 8009fd8:	6023      	str	r3, [r4, #0]
 8009fda:	2378      	movs	r3, #120	; 0x78
 8009fdc:	4828      	ldr	r0, [pc, #160]	; (800a080 <_printf_i+0x248>)
 8009fde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009fe2:	e7e3      	b.n	8009fac <_printf_i+0x174>
 8009fe4:	065e      	lsls	r6, r3, #25
 8009fe6:	bf48      	it	mi
 8009fe8:	b2ad      	uxthmi	r5, r5
 8009fea:	e7e6      	b.n	8009fba <_printf_i+0x182>
 8009fec:	4616      	mov	r6, r2
 8009fee:	e7bb      	b.n	8009f68 <_printf_i+0x130>
 8009ff0:	680b      	ldr	r3, [r1, #0]
 8009ff2:	6826      	ldr	r6, [r4, #0]
 8009ff4:	6960      	ldr	r0, [r4, #20]
 8009ff6:	1d1d      	adds	r5, r3, #4
 8009ff8:	600d      	str	r5, [r1, #0]
 8009ffa:	0635      	lsls	r5, r6, #24
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	d501      	bpl.n	800a004 <_printf_i+0x1cc>
 800a000:	6018      	str	r0, [r3, #0]
 800a002:	e002      	b.n	800a00a <_printf_i+0x1d2>
 800a004:	0671      	lsls	r1, r6, #25
 800a006:	d5fb      	bpl.n	800a000 <_printf_i+0x1c8>
 800a008:	8018      	strh	r0, [r3, #0]
 800a00a:	2300      	movs	r3, #0
 800a00c:	6123      	str	r3, [r4, #16]
 800a00e:	4616      	mov	r6, r2
 800a010:	e7ba      	b.n	8009f88 <_printf_i+0x150>
 800a012:	680b      	ldr	r3, [r1, #0]
 800a014:	1d1a      	adds	r2, r3, #4
 800a016:	600a      	str	r2, [r1, #0]
 800a018:	681e      	ldr	r6, [r3, #0]
 800a01a:	6862      	ldr	r2, [r4, #4]
 800a01c:	2100      	movs	r1, #0
 800a01e:	4630      	mov	r0, r6
 800a020:	f7f6 f8b6 	bl	8000190 <memchr>
 800a024:	b108      	cbz	r0, 800a02a <_printf_i+0x1f2>
 800a026:	1b80      	subs	r0, r0, r6
 800a028:	6060      	str	r0, [r4, #4]
 800a02a:	6863      	ldr	r3, [r4, #4]
 800a02c:	6123      	str	r3, [r4, #16]
 800a02e:	2300      	movs	r3, #0
 800a030:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a034:	e7a8      	b.n	8009f88 <_printf_i+0x150>
 800a036:	6923      	ldr	r3, [r4, #16]
 800a038:	4632      	mov	r2, r6
 800a03a:	4649      	mov	r1, r9
 800a03c:	4640      	mov	r0, r8
 800a03e:	47d0      	blx	sl
 800a040:	3001      	adds	r0, #1
 800a042:	d0ab      	beq.n	8009f9c <_printf_i+0x164>
 800a044:	6823      	ldr	r3, [r4, #0]
 800a046:	079b      	lsls	r3, r3, #30
 800a048:	d413      	bmi.n	800a072 <_printf_i+0x23a>
 800a04a:	68e0      	ldr	r0, [r4, #12]
 800a04c:	9b03      	ldr	r3, [sp, #12]
 800a04e:	4298      	cmp	r0, r3
 800a050:	bfb8      	it	lt
 800a052:	4618      	movlt	r0, r3
 800a054:	e7a4      	b.n	8009fa0 <_printf_i+0x168>
 800a056:	2301      	movs	r3, #1
 800a058:	4632      	mov	r2, r6
 800a05a:	4649      	mov	r1, r9
 800a05c:	4640      	mov	r0, r8
 800a05e:	47d0      	blx	sl
 800a060:	3001      	adds	r0, #1
 800a062:	d09b      	beq.n	8009f9c <_printf_i+0x164>
 800a064:	3501      	adds	r5, #1
 800a066:	68e3      	ldr	r3, [r4, #12]
 800a068:	9903      	ldr	r1, [sp, #12]
 800a06a:	1a5b      	subs	r3, r3, r1
 800a06c:	42ab      	cmp	r3, r5
 800a06e:	dcf2      	bgt.n	800a056 <_printf_i+0x21e>
 800a070:	e7eb      	b.n	800a04a <_printf_i+0x212>
 800a072:	2500      	movs	r5, #0
 800a074:	f104 0619 	add.w	r6, r4, #25
 800a078:	e7f5      	b.n	800a066 <_printf_i+0x22e>
 800a07a:	bf00      	nop
 800a07c:	0800cc0e 	.word	0x0800cc0e
 800a080:	0800cc1f 	.word	0x0800cc1f

0800a084 <_sbrk_r>:
 800a084:	b538      	push	{r3, r4, r5, lr}
 800a086:	4d06      	ldr	r5, [pc, #24]	; (800a0a0 <_sbrk_r+0x1c>)
 800a088:	2300      	movs	r3, #0
 800a08a:	4604      	mov	r4, r0
 800a08c:	4608      	mov	r0, r1
 800a08e:	602b      	str	r3, [r5, #0]
 800a090:	f7f8 fc30 	bl	80028f4 <_sbrk>
 800a094:	1c43      	adds	r3, r0, #1
 800a096:	d102      	bne.n	800a09e <_sbrk_r+0x1a>
 800a098:	682b      	ldr	r3, [r5, #0]
 800a09a:	b103      	cbz	r3, 800a09e <_sbrk_r+0x1a>
 800a09c:	6023      	str	r3, [r4, #0]
 800a09e:	bd38      	pop	{r3, r4, r5, pc}
 800a0a0:	20000ca4 	.word	0x20000ca4

0800a0a4 <siprintf>:
 800a0a4:	b40e      	push	{r1, r2, r3}
 800a0a6:	b500      	push	{lr}
 800a0a8:	b09c      	sub	sp, #112	; 0x70
 800a0aa:	ab1d      	add	r3, sp, #116	; 0x74
 800a0ac:	9002      	str	r0, [sp, #8]
 800a0ae:	9006      	str	r0, [sp, #24]
 800a0b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a0b4:	4809      	ldr	r0, [pc, #36]	; (800a0dc <siprintf+0x38>)
 800a0b6:	9107      	str	r1, [sp, #28]
 800a0b8:	9104      	str	r1, [sp, #16]
 800a0ba:	4909      	ldr	r1, [pc, #36]	; (800a0e0 <siprintf+0x3c>)
 800a0bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0c0:	9105      	str	r1, [sp, #20]
 800a0c2:	6800      	ldr	r0, [r0, #0]
 800a0c4:	9301      	str	r3, [sp, #4]
 800a0c6:	a902      	add	r1, sp, #8
 800a0c8:	f001 fa8a 	bl	800b5e0 <_svfiprintf_r>
 800a0cc:	9b02      	ldr	r3, [sp, #8]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	701a      	strb	r2, [r3, #0]
 800a0d2:	b01c      	add	sp, #112	; 0x70
 800a0d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a0d8:	b003      	add	sp, #12
 800a0da:	4770      	bx	lr
 800a0dc:	20000010 	.word	0x20000010
 800a0e0:	ffff0208 	.word	0xffff0208

0800a0e4 <strcat>:
 800a0e4:	b510      	push	{r4, lr}
 800a0e6:	4602      	mov	r2, r0
 800a0e8:	7814      	ldrb	r4, [r2, #0]
 800a0ea:	4613      	mov	r3, r2
 800a0ec:	3201      	adds	r2, #1
 800a0ee:	2c00      	cmp	r4, #0
 800a0f0:	d1fa      	bne.n	800a0e8 <strcat+0x4>
 800a0f2:	3b01      	subs	r3, #1
 800a0f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a0f8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a0fc:	2a00      	cmp	r2, #0
 800a0fe:	d1f9      	bne.n	800a0f4 <strcat+0x10>
 800a100:	bd10      	pop	{r4, pc}

0800a102 <quorem>:
 800a102:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a106:	6903      	ldr	r3, [r0, #16]
 800a108:	690c      	ldr	r4, [r1, #16]
 800a10a:	42a3      	cmp	r3, r4
 800a10c:	4607      	mov	r7, r0
 800a10e:	f2c0 8081 	blt.w	800a214 <quorem+0x112>
 800a112:	3c01      	subs	r4, #1
 800a114:	f101 0814 	add.w	r8, r1, #20
 800a118:	f100 0514 	add.w	r5, r0, #20
 800a11c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a120:	9301      	str	r3, [sp, #4]
 800a122:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a126:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a12a:	3301      	adds	r3, #1
 800a12c:	429a      	cmp	r2, r3
 800a12e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a132:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a136:	fbb2 f6f3 	udiv	r6, r2, r3
 800a13a:	d331      	bcc.n	800a1a0 <quorem+0x9e>
 800a13c:	f04f 0e00 	mov.w	lr, #0
 800a140:	4640      	mov	r0, r8
 800a142:	46ac      	mov	ip, r5
 800a144:	46f2      	mov	sl, lr
 800a146:	f850 2b04 	ldr.w	r2, [r0], #4
 800a14a:	b293      	uxth	r3, r2
 800a14c:	fb06 e303 	mla	r3, r6, r3, lr
 800a150:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a154:	b29b      	uxth	r3, r3
 800a156:	ebaa 0303 	sub.w	r3, sl, r3
 800a15a:	0c12      	lsrs	r2, r2, #16
 800a15c:	f8dc a000 	ldr.w	sl, [ip]
 800a160:	fb06 e202 	mla	r2, r6, r2, lr
 800a164:	fa13 f38a 	uxtah	r3, r3, sl
 800a168:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a16c:	fa1f fa82 	uxth.w	sl, r2
 800a170:	f8dc 2000 	ldr.w	r2, [ip]
 800a174:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a178:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a17c:	b29b      	uxth	r3, r3
 800a17e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a182:	4581      	cmp	r9, r0
 800a184:	f84c 3b04 	str.w	r3, [ip], #4
 800a188:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a18c:	d2db      	bcs.n	800a146 <quorem+0x44>
 800a18e:	f855 300b 	ldr.w	r3, [r5, fp]
 800a192:	b92b      	cbnz	r3, 800a1a0 <quorem+0x9e>
 800a194:	9b01      	ldr	r3, [sp, #4]
 800a196:	3b04      	subs	r3, #4
 800a198:	429d      	cmp	r5, r3
 800a19a:	461a      	mov	r2, r3
 800a19c:	d32e      	bcc.n	800a1fc <quorem+0xfa>
 800a19e:	613c      	str	r4, [r7, #16]
 800a1a0:	4638      	mov	r0, r7
 800a1a2:	f001 f8b3 	bl	800b30c <__mcmp>
 800a1a6:	2800      	cmp	r0, #0
 800a1a8:	db24      	blt.n	800a1f4 <quorem+0xf2>
 800a1aa:	3601      	adds	r6, #1
 800a1ac:	4628      	mov	r0, r5
 800a1ae:	f04f 0c00 	mov.w	ip, #0
 800a1b2:	f858 2b04 	ldr.w	r2, [r8], #4
 800a1b6:	f8d0 e000 	ldr.w	lr, [r0]
 800a1ba:	b293      	uxth	r3, r2
 800a1bc:	ebac 0303 	sub.w	r3, ip, r3
 800a1c0:	0c12      	lsrs	r2, r2, #16
 800a1c2:	fa13 f38e 	uxtah	r3, r3, lr
 800a1c6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a1ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a1ce:	b29b      	uxth	r3, r3
 800a1d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a1d4:	45c1      	cmp	r9, r8
 800a1d6:	f840 3b04 	str.w	r3, [r0], #4
 800a1da:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a1de:	d2e8      	bcs.n	800a1b2 <quorem+0xb0>
 800a1e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a1e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a1e8:	b922      	cbnz	r2, 800a1f4 <quorem+0xf2>
 800a1ea:	3b04      	subs	r3, #4
 800a1ec:	429d      	cmp	r5, r3
 800a1ee:	461a      	mov	r2, r3
 800a1f0:	d30a      	bcc.n	800a208 <quorem+0x106>
 800a1f2:	613c      	str	r4, [r7, #16]
 800a1f4:	4630      	mov	r0, r6
 800a1f6:	b003      	add	sp, #12
 800a1f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1fc:	6812      	ldr	r2, [r2, #0]
 800a1fe:	3b04      	subs	r3, #4
 800a200:	2a00      	cmp	r2, #0
 800a202:	d1cc      	bne.n	800a19e <quorem+0x9c>
 800a204:	3c01      	subs	r4, #1
 800a206:	e7c7      	b.n	800a198 <quorem+0x96>
 800a208:	6812      	ldr	r2, [r2, #0]
 800a20a:	3b04      	subs	r3, #4
 800a20c:	2a00      	cmp	r2, #0
 800a20e:	d1f0      	bne.n	800a1f2 <quorem+0xf0>
 800a210:	3c01      	subs	r4, #1
 800a212:	e7eb      	b.n	800a1ec <quorem+0xea>
 800a214:	2000      	movs	r0, #0
 800a216:	e7ee      	b.n	800a1f6 <quorem+0xf4>

0800a218 <_dtoa_r>:
 800a218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a21c:	ed2d 8b02 	vpush	{d8}
 800a220:	ec57 6b10 	vmov	r6, r7, d0
 800a224:	b095      	sub	sp, #84	; 0x54
 800a226:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a228:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a22c:	9105      	str	r1, [sp, #20]
 800a22e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a232:	4604      	mov	r4, r0
 800a234:	9209      	str	r2, [sp, #36]	; 0x24
 800a236:	930f      	str	r3, [sp, #60]	; 0x3c
 800a238:	b975      	cbnz	r5, 800a258 <_dtoa_r+0x40>
 800a23a:	2010      	movs	r0, #16
 800a23c:	f7ff f9f0 	bl	8009620 <malloc>
 800a240:	4602      	mov	r2, r0
 800a242:	6260      	str	r0, [r4, #36]	; 0x24
 800a244:	b920      	cbnz	r0, 800a250 <_dtoa_r+0x38>
 800a246:	4bb2      	ldr	r3, [pc, #712]	; (800a510 <_dtoa_r+0x2f8>)
 800a248:	21ea      	movs	r1, #234	; 0xea
 800a24a:	48b2      	ldr	r0, [pc, #712]	; (800a514 <_dtoa_r+0x2fc>)
 800a24c:	f001 fac8 	bl	800b7e0 <__assert_func>
 800a250:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a254:	6005      	str	r5, [r0, #0]
 800a256:	60c5      	str	r5, [r0, #12]
 800a258:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a25a:	6819      	ldr	r1, [r3, #0]
 800a25c:	b151      	cbz	r1, 800a274 <_dtoa_r+0x5c>
 800a25e:	685a      	ldr	r2, [r3, #4]
 800a260:	604a      	str	r2, [r1, #4]
 800a262:	2301      	movs	r3, #1
 800a264:	4093      	lsls	r3, r2
 800a266:	608b      	str	r3, [r1, #8]
 800a268:	4620      	mov	r0, r4
 800a26a:	f000 fe11 	bl	800ae90 <_Bfree>
 800a26e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a270:	2200      	movs	r2, #0
 800a272:	601a      	str	r2, [r3, #0]
 800a274:	1e3b      	subs	r3, r7, #0
 800a276:	bfb9      	ittee	lt
 800a278:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a27c:	9303      	strlt	r3, [sp, #12]
 800a27e:	2300      	movge	r3, #0
 800a280:	f8c8 3000 	strge.w	r3, [r8]
 800a284:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a288:	4ba3      	ldr	r3, [pc, #652]	; (800a518 <_dtoa_r+0x300>)
 800a28a:	bfbc      	itt	lt
 800a28c:	2201      	movlt	r2, #1
 800a28e:	f8c8 2000 	strlt.w	r2, [r8]
 800a292:	ea33 0309 	bics.w	r3, r3, r9
 800a296:	d11b      	bne.n	800a2d0 <_dtoa_r+0xb8>
 800a298:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a29a:	f242 730f 	movw	r3, #9999	; 0x270f
 800a29e:	6013      	str	r3, [r2, #0]
 800a2a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a2a4:	4333      	orrs	r3, r6
 800a2a6:	f000 857a 	beq.w	800ad9e <_dtoa_r+0xb86>
 800a2aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2ac:	b963      	cbnz	r3, 800a2c8 <_dtoa_r+0xb0>
 800a2ae:	4b9b      	ldr	r3, [pc, #620]	; (800a51c <_dtoa_r+0x304>)
 800a2b0:	e024      	b.n	800a2fc <_dtoa_r+0xe4>
 800a2b2:	4b9b      	ldr	r3, [pc, #620]	; (800a520 <_dtoa_r+0x308>)
 800a2b4:	9300      	str	r3, [sp, #0]
 800a2b6:	3308      	adds	r3, #8
 800a2b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a2ba:	6013      	str	r3, [r2, #0]
 800a2bc:	9800      	ldr	r0, [sp, #0]
 800a2be:	b015      	add	sp, #84	; 0x54
 800a2c0:	ecbd 8b02 	vpop	{d8}
 800a2c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2c8:	4b94      	ldr	r3, [pc, #592]	; (800a51c <_dtoa_r+0x304>)
 800a2ca:	9300      	str	r3, [sp, #0]
 800a2cc:	3303      	adds	r3, #3
 800a2ce:	e7f3      	b.n	800a2b8 <_dtoa_r+0xa0>
 800a2d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	ec51 0b17 	vmov	r0, r1, d7
 800a2da:	2300      	movs	r3, #0
 800a2dc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a2e0:	f7f6 fbca 	bl	8000a78 <__aeabi_dcmpeq>
 800a2e4:	4680      	mov	r8, r0
 800a2e6:	b158      	cbz	r0, 800a300 <_dtoa_r+0xe8>
 800a2e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	6013      	str	r3, [r2, #0]
 800a2ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	f000 8551 	beq.w	800ad98 <_dtoa_r+0xb80>
 800a2f6:	488b      	ldr	r0, [pc, #556]	; (800a524 <_dtoa_r+0x30c>)
 800a2f8:	6018      	str	r0, [r3, #0]
 800a2fa:	1e43      	subs	r3, r0, #1
 800a2fc:	9300      	str	r3, [sp, #0]
 800a2fe:	e7dd      	b.n	800a2bc <_dtoa_r+0xa4>
 800a300:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a304:	aa12      	add	r2, sp, #72	; 0x48
 800a306:	a913      	add	r1, sp, #76	; 0x4c
 800a308:	4620      	mov	r0, r4
 800a30a:	f001 f8a3 	bl	800b454 <__d2b>
 800a30e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a312:	4683      	mov	fp, r0
 800a314:	2d00      	cmp	r5, #0
 800a316:	d07c      	beq.n	800a412 <_dtoa_r+0x1fa>
 800a318:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a31a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a31e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a322:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a326:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a32a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a32e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a332:	4b7d      	ldr	r3, [pc, #500]	; (800a528 <_dtoa_r+0x310>)
 800a334:	2200      	movs	r2, #0
 800a336:	4630      	mov	r0, r6
 800a338:	4639      	mov	r1, r7
 800a33a:	f7f5 ff7d 	bl	8000238 <__aeabi_dsub>
 800a33e:	a36e      	add	r3, pc, #440	; (adr r3, 800a4f8 <_dtoa_r+0x2e0>)
 800a340:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a344:	f7f6 f930 	bl	80005a8 <__aeabi_dmul>
 800a348:	a36d      	add	r3, pc, #436	; (adr r3, 800a500 <_dtoa_r+0x2e8>)
 800a34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a34e:	f7f5 ff75 	bl	800023c <__adddf3>
 800a352:	4606      	mov	r6, r0
 800a354:	4628      	mov	r0, r5
 800a356:	460f      	mov	r7, r1
 800a358:	f7f6 f8bc 	bl	80004d4 <__aeabi_i2d>
 800a35c:	a36a      	add	r3, pc, #424	; (adr r3, 800a508 <_dtoa_r+0x2f0>)
 800a35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a362:	f7f6 f921 	bl	80005a8 <__aeabi_dmul>
 800a366:	4602      	mov	r2, r0
 800a368:	460b      	mov	r3, r1
 800a36a:	4630      	mov	r0, r6
 800a36c:	4639      	mov	r1, r7
 800a36e:	f7f5 ff65 	bl	800023c <__adddf3>
 800a372:	4606      	mov	r6, r0
 800a374:	460f      	mov	r7, r1
 800a376:	f7f6 fbc7 	bl	8000b08 <__aeabi_d2iz>
 800a37a:	2200      	movs	r2, #0
 800a37c:	4682      	mov	sl, r0
 800a37e:	2300      	movs	r3, #0
 800a380:	4630      	mov	r0, r6
 800a382:	4639      	mov	r1, r7
 800a384:	f7f6 fb82 	bl	8000a8c <__aeabi_dcmplt>
 800a388:	b148      	cbz	r0, 800a39e <_dtoa_r+0x186>
 800a38a:	4650      	mov	r0, sl
 800a38c:	f7f6 f8a2 	bl	80004d4 <__aeabi_i2d>
 800a390:	4632      	mov	r2, r6
 800a392:	463b      	mov	r3, r7
 800a394:	f7f6 fb70 	bl	8000a78 <__aeabi_dcmpeq>
 800a398:	b908      	cbnz	r0, 800a39e <_dtoa_r+0x186>
 800a39a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a39e:	f1ba 0f16 	cmp.w	sl, #22
 800a3a2:	d854      	bhi.n	800a44e <_dtoa_r+0x236>
 800a3a4:	4b61      	ldr	r3, [pc, #388]	; (800a52c <_dtoa_r+0x314>)
 800a3a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a3b2:	f7f6 fb6b 	bl	8000a8c <__aeabi_dcmplt>
 800a3b6:	2800      	cmp	r0, #0
 800a3b8:	d04b      	beq.n	800a452 <_dtoa_r+0x23a>
 800a3ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a3be:	2300      	movs	r3, #0
 800a3c0:	930e      	str	r3, [sp, #56]	; 0x38
 800a3c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a3c4:	1b5d      	subs	r5, r3, r5
 800a3c6:	1e6b      	subs	r3, r5, #1
 800a3c8:	9304      	str	r3, [sp, #16]
 800a3ca:	bf43      	ittte	mi
 800a3cc:	2300      	movmi	r3, #0
 800a3ce:	f1c5 0801 	rsbmi	r8, r5, #1
 800a3d2:	9304      	strmi	r3, [sp, #16]
 800a3d4:	f04f 0800 	movpl.w	r8, #0
 800a3d8:	f1ba 0f00 	cmp.w	sl, #0
 800a3dc:	db3b      	blt.n	800a456 <_dtoa_r+0x23e>
 800a3de:	9b04      	ldr	r3, [sp, #16]
 800a3e0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a3e4:	4453      	add	r3, sl
 800a3e6:	9304      	str	r3, [sp, #16]
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	9306      	str	r3, [sp, #24]
 800a3ec:	9b05      	ldr	r3, [sp, #20]
 800a3ee:	2b09      	cmp	r3, #9
 800a3f0:	d869      	bhi.n	800a4c6 <_dtoa_r+0x2ae>
 800a3f2:	2b05      	cmp	r3, #5
 800a3f4:	bfc4      	itt	gt
 800a3f6:	3b04      	subgt	r3, #4
 800a3f8:	9305      	strgt	r3, [sp, #20]
 800a3fa:	9b05      	ldr	r3, [sp, #20]
 800a3fc:	f1a3 0302 	sub.w	r3, r3, #2
 800a400:	bfcc      	ite	gt
 800a402:	2500      	movgt	r5, #0
 800a404:	2501      	movle	r5, #1
 800a406:	2b03      	cmp	r3, #3
 800a408:	d869      	bhi.n	800a4de <_dtoa_r+0x2c6>
 800a40a:	e8df f003 	tbb	[pc, r3]
 800a40e:	4e2c      	.short	0x4e2c
 800a410:	5a4c      	.short	0x5a4c
 800a412:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a416:	441d      	add	r5, r3
 800a418:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a41c:	2b20      	cmp	r3, #32
 800a41e:	bfc1      	itttt	gt
 800a420:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a424:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a428:	fa09 f303 	lslgt.w	r3, r9, r3
 800a42c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a430:	bfda      	itte	le
 800a432:	f1c3 0320 	rsble	r3, r3, #32
 800a436:	fa06 f003 	lslle.w	r0, r6, r3
 800a43a:	4318      	orrgt	r0, r3
 800a43c:	f7f6 f83a 	bl	80004b4 <__aeabi_ui2d>
 800a440:	2301      	movs	r3, #1
 800a442:	4606      	mov	r6, r0
 800a444:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a448:	3d01      	subs	r5, #1
 800a44a:	9310      	str	r3, [sp, #64]	; 0x40
 800a44c:	e771      	b.n	800a332 <_dtoa_r+0x11a>
 800a44e:	2301      	movs	r3, #1
 800a450:	e7b6      	b.n	800a3c0 <_dtoa_r+0x1a8>
 800a452:	900e      	str	r0, [sp, #56]	; 0x38
 800a454:	e7b5      	b.n	800a3c2 <_dtoa_r+0x1aa>
 800a456:	f1ca 0300 	rsb	r3, sl, #0
 800a45a:	9306      	str	r3, [sp, #24]
 800a45c:	2300      	movs	r3, #0
 800a45e:	eba8 080a 	sub.w	r8, r8, sl
 800a462:	930d      	str	r3, [sp, #52]	; 0x34
 800a464:	e7c2      	b.n	800a3ec <_dtoa_r+0x1d4>
 800a466:	2300      	movs	r3, #0
 800a468:	9308      	str	r3, [sp, #32]
 800a46a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	dc39      	bgt.n	800a4e4 <_dtoa_r+0x2cc>
 800a470:	f04f 0901 	mov.w	r9, #1
 800a474:	f8cd 9004 	str.w	r9, [sp, #4]
 800a478:	464b      	mov	r3, r9
 800a47a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a47e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a480:	2200      	movs	r2, #0
 800a482:	6042      	str	r2, [r0, #4]
 800a484:	2204      	movs	r2, #4
 800a486:	f102 0614 	add.w	r6, r2, #20
 800a48a:	429e      	cmp	r6, r3
 800a48c:	6841      	ldr	r1, [r0, #4]
 800a48e:	d92f      	bls.n	800a4f0 <_dtoa_r+0x2d8>
 800a490:	4620      	mov	r0, r4
 800a492:	f000 fcbd 	bl	800ae10 <_Balloc>
 800a496:	9000      	str	r0, [sp, #0]
 800a498:	2800      	cmp	r0, #0
 800a49a:	d14b      	bne.n	800a534 <_dtoa_r+0x31c>
 800a49c:	4b24      	ldr	r3, [pc, #144]	; (800a530 <_dtoa_r+0x318>)
 800a49e:	4602      	mov	r2, r0
 800a4a0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a4a4:	e6d1      	b.n	800a24a <_dtoa_r+0x32>
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	e7de      	b.n	800a468 <_dtoa_r+0x250>
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	9308      	str	r3, [sp, #32]
 800a4ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4b0:	eb0a 0903 	add.w	r9, sl, r3
 800a4b4:	f109 0301 	add.w	r3, r9, #1
 800a4b8:	2b01      	cmp	r3, #1
 800a4ba:	9301      	str	r3, [sp, #4]
 800a4bc:	bfb8      	it	lt
 800a4be:	2301      	movlt	r3, #1
 800a4c0:	e7dd      	b.n	800a47e <_dtoa_r+0x266>
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	e7f2      	b.n	800a4ac <_dtoa_r+0x294>
 800a4c6:	2501      	movs	r5, #1
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	9305      	str	r3, [sp, #20]
 800a4cc:	9508      	str	r5, [sp, #32]
 800a4ce:	f04f 39ff 	mov.w	r9, #4294967295
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	f8cd 9004 	str.w	r9, [sp, #4]
 800a4d8:	2312      	movs	r3, #18
 800a4da:	9209      	str	r2, [sp, #36]	; 0x24
 800a4dc:	e7cf      	b.n	800a47e <_dtoa_r+0x266>
 800a4de:	2301      	movs	r3, #1
 800a4e0:	9308      	str	r3, [sp, #32]
 800a4e2:	e7f4      	b.n	800a4ce <_dtoa_r+0x2b6>
 800a4e4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a4e8:	f8cd 9004 	str.w	r9, [sp, #4]
 800a4ec:	464b      	mov	r3, r9
 800a4ee:	e7c6      	b.n	800a47e <_dtoa_r+0x266>
 800a4f0:	3101      	adds	r1, #1
 800a4f2:	6041      	str	r1, [r0, #4]
 800a4f4:	0052      	lsls	r2, r2, #1
 800a4f6:	e7c6      	b.n	800a486 <_dtoa_r+0x26e>
 800a4f8:	636f4361 	.word	0x636f4361
 800a4fc:	3fd287a7 	.word	0x3fd287a7
 800a500:	8b60c8b3 	.word	0x8b60c8b3
 800a504:	3fc68a28 	.word	0x3fc68a28
 800a508:	509f79fb 	.word	0x509f79fb
 800a50c:	3fd34413 	.word	0x3fd34413
 800a510:	0800cc3d 	.word	0x0800cc3d
 800a514:	0800cc54 	.word	0x0800cc54
 800a518:	7ff00000 	.word	0x7ff00000
 800a51c:	0800cc39 	.word	0x0800cc39
 800a520:	0800cc30 	.word	0x0800cc30
 800a524:	0800cc0d 	.word	0x0800cc0d
 800a528:	3ff80000 	.word	0x3ff80000
 800a52c:	0800cd50 	.word	0x0800cd50
 800a530:	0800ccb3 	.word	0x0800ccb3
 800a534:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a536:	9a00      	ldr	r2, [sp, #0]
 800a538:	601a      	str	r2, [r3, #0]
 800a53a:	9b01      	ldr	r3, [sp, #4]
 800a53c:	2b0e      	cmp	r3, #14
 800a53e:	f200 80ad 	bhi.w	800a69c <_dtoa_r+0x484>
 800a542:	2d00      	cmp	r5, #0
 800a544:	f000 80aa 	beq.w	800a69c <_dtoa_r+0x484>
 800a548:	f1ba 0f00 	cmp.w	sl, #0
 800a54c:	dd36      	ble.n	800a5bc <_dtoa_r+0x3a4>
 800a54e:	4ac3      	ldr	r2, [pc, #780]	; (800a85c <_dtoa_r+0x644>)
 800a550:	f00a 030f 	and.w	r3, sl, #15
 800a554:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a558:	ed93 7b00 	vldr	d7, [r3]
 800a55c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a560:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a564:	eeb0 8a47 	vmov.f32	s16, s14
 800a568:	eef0 8a67 	vmov.f32	s17, s15
 800a56c:	d016      	beq.n	800a59c <_dtoa_r+0x384>
 800a56e:	4bbc      	ldr	r3, [pc, #752]	; (800a860 <_dtoa_r+0x648>)
 800a570:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a574:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a578:	f7f6 f940 	bl	80007fc <__aeabi_ddiv>
 800a57c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a580:	f007 070f 	and.w	r7, r7, #15
 800a584:	2503      	movs	r5, #3
 800a586:	4eb6      	ldr	r6, [pc, #728]	; (800a860 <_dtoa_r+0x648>)
 800a588:	b957      	cbnz	r7, 800a5a0 <_dtoa_r+0x388>
 800a58a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a58e:	ec53 2b18 	vmov	r2, r3, d8
 800a592:	f7f6 f933 	bl	80007fc <__aeabi_ddiv>
 800a596:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a59a:	e029      	b.n	800a5f0 <_dtoa_r+0x3d8>
 800a59c:	2502      	movs	r5, #2
 800a59e:	e7f2      	b.n	800a586 <_dtoa_r+0x36e>
 800a5a0:	07f9      	lsls	r1, r7, #31
 800a5a2:	d508      	bpl.n	800a5b6 <_dtoa_r+0x39e>
 800a5a4:	ec51 0b18 	vmov	r0, r1, d8
 800a5a8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a5ac:	f7f5 fffc 	bl	80005a8 <__aeabi_dmul>
 800a5b0:	ec41 0b18 	vmov	d8, r0, r1
 800a5b4:	3501      	adds	r5, #1
 800a5b6:	107f      	asrs	r7, r7, #1
 800a5b8:	3608      	adds	r6, #8
 800a5ba:	e7e5      	b.n	800a588 <_dtoa_r+0x370>
 800a5bc:	f000 80a6 	beq.w	800a70c <_dtoa_r+0x4f4>
 800a5c0:	f1ca 0600 	rsb	r6, sl, #0
 800a5c4:	4ba5      	ldr	r3, [pc, #660]	; (800a85c <_dtoa_r+0x644>)
 800a5c6:	4fa6      	ldr	r7, [pc, #664]	; (800a860 <_dtoa_r+0x648>)
 800a5c8:	f006 020f 	and.w	r2, r6, #15
 800a5cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a5d8:	f7f5 ffe6 	bl	80005a8 <__aeabi_dmul>
 800a5dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5e0:	1136      	asrs	r6, r6, #4
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	2502      	movs	r5, #2
 800a5e6:	2e00      	cmp	r6, #0
 800a5e8:	f040 8085 	bne.w	800a6f6 <_dtoa_r+0x4de>
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d1d2      	bne.n	800a596 <_dtoa_r+0x37e>
 800a5f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	f000 808c 	beq.w	800a710 <_dtoa_r+0x4f8>
 800a5f8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a5fc:	4b99      	ldr	r3, [pc, #612]	; (800a864 <_dtoa_r+0x64c>)
 800a5fe:	2200      	movs	r2, #0
 800a600:	4630      	mov	r0, r6
 800a602:	4639      	mov	r1, r7
 800a604:	f7f6 fa42 	bl	8000a8c <__aeabi_dcmplt>
 800a608:	2800      	cmp	r0, #0
 800a60a:	f000 8081 	beq.w	800a710 <_dtoa_r+0x4f8>
 800a60e:	9b01      	ldr	r3, [sp, #4]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d07d      	beq.n	800a710 <_dtoa_r+0x4f8>
 800a614:	f1b9 0f00 	cmp.w	r9, #0
 800a618:	dd3c      	ble.n	800a694 <_dtoa_r+0x47c>
 800a61a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a61e:	9307      	str	r3, [sp, #28]
 800a620:	2200      	movs	r2, #0
 800a622:	4b91      	ldr	r3, [pc, #580]	; (800a868 <_dtoa_r+0x650>)
 800a624:	4630      	mov	r0, r6
 800a626:	4639      	mov	r1, r7
 800a628:	f7f5 ffbe 	bl	80005a8 <__aeabi_dmul>
 800a62c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a630:	3501      	adds	r5, #1
 800a632:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a636:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a63a:	4628      	mov	r0, r5
 800a63c:	f7f5 ff4a 	bl	80004d4 <__aeabi_i2d>
 800a640:	4632      	mov	r2, r6
 800a642:	463b      	mov	r3, r7
 800a644:	f7f5 ffb0 	bl	80005a8 <__aeabi_dmul>
 800a648:	4b88      	ldr	r3, [pc, #544]	; (800a86c <_dtoa_r+0x654>)
 800a64a:	2200      	movs	r2, #0
 800a64c:	f7f5 fdf6 	bl	800023c <__adddf3>
 800a650:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a654:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a658:	9303      	str	r3, [sp, #12]
 800a65a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d15c      	bne.n	800a71a <_dtoa_r+0x502>
 800a660:	4b83      	ldr	r3, [pc, #524]	; (800a870 <_dtoa_r+0x658>)
 800a662:	2200      	movs	r2, #0
 800a664:	4630      	mov	r0, r6
 800a666:	4639      	mov	r1, r7
 800a668:	f7f5 fde6 	bl	8000238 <__aeabi_dsub>
 800a66c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a670:	4606      	mov	r6, r0
 800a672:	460f      	mov	r7, r1
 800a674:	f7f6 fa28 	bl	8000ac8 <__aeabi_dcmpgt>
 800a678:	2800      	cmp	r0, #0
 800a67a:	f040 8296 	bne.w	800abaa <_dtoa_r+0x992>
 800a67e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a682:	4630      	mov	r0, r6
 800a684:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a688:	4639      	mov	r1, r7
 800a68a:	f7f6 f9ff 	bl	8000a8c <__aeabi_dcmplt>
 800a68e:	2800      	cmp	r0, #0
 800a690:	f040 8288 	bne.w	800aba4 <_dtoa_r+0x98c>
 800a694:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a698:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a69c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	f2c0 8158 	blt.w	800a954 <_dtoa_r+0x73c>
 800a6a4:	f1ba 0f0e 	cmp.w	sl, #14
 800a6a8:	f300 8154 	bgt.w	800a954 <_dtoa_r+0x73c>
 800a6ac:	4b6b      	ldr	r3, [pc, #428]	; (800a85c <_dtoa_r+0x644>)
 800a6ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a6b2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a6b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	f280 80e3 	bge.w	800a884 <_dtoa_r+0x66c>
 800a6be:	9b01      	ldr	r3, [sp, #4]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	f300 80df 	bgt.w	800a884 <_dtoa_r+0x66c>
 800a6c6:	f040 826d 	bne.w	800aba4 <_dtoa_r+0x98c>
 800a6ca:	4b69      	ldr	r3, [pc, #420]	; (800a870 <_dtoa_r+0x658>)
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	4640      	mov	r0, r8
 800a6d0:	4649      	mov	r1, r9
 800a6d2:	f7f5 ff69 	bl	80005a8 <__aeabi_dmul>
 800a6d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a6da:	f7f6 f9eb 	bl	8000ab4 <__aeabi_dcmpge>
 800a6de:	9e01      	ldr	r6, [sp, #4]
 800a6e0:	4637      	mov	r7, r6
 800a6e2:	2800      	cmp	r0, #0
 800a6e4:	f040 8243 	bne.w	800ab6e <_dtoa_r+0x956>
 800a6e8:	9d00      	ldr	r5, [sp, #0]
 800a6ea:	2331      	movs	r3, #49	; 0x31
 800a6ec:	f805 3b01 	strb.w	r3, [r5], #1
 800a6f0:	f10a 0a01 	add.w	sl, sl, #1
 800a6f4:	e23f      	b.n	800ab76 <_dtoa_r+0x95e>
 800a6f6:	07f2      	lsls	r2, r6, #31
 800a6f8:	d505      	bpl.n	800a706 <_dtoa_r+0x4ee>
 800a6fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6fe:	f7f5 ff53 	bl	80005a8 <__aeabi_dmul>
 800a702:	3501      	adds	r5, #1
 800a704:	2301      	movs	r3, #1
 800a706:	1076      	asrs	r6, r6, #1
 800a708:	3708      	adds	r7, #8
 800a70a:	e76c      	b.n	800a5e6 <_dtoa_r+0x3ce>
 800a70c:	2502      	movs	r5, #2
 800a70e:	e76f      	b.n	800a5f0 <_dtoa_r+0x3d8>
 800a710:	9b01      	ldr	r3, [sp, #4]
 800a712:	f8cd a01c 	str.w	sl, [sp, #28]
 800a716:	930c      	str	r3, [sp, #48]	; 0x30
 800a718:	e78d      	b.n	800a636 <_dtoa_r+0x41e>
 800a71a:	9900      	ldr	r1, [sp, #0]
 800a71c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a71e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a720:	4b4e      	ldr	r3, [pc, #312]	; (800a85c <_dtoa_r+0x644>)
 800a722:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a726:	4401      	add	r1, r0
 800a728:	9102      	str	r1, [sp, #8]
 800a72a:	9908      	ldr	r1, [sp, #32]
 800a72c:	eeb0 8a47 	vmov.f32	s16, s14
 800a730:	eef0 8a67 	vmov.f32	s17, s15
 800a734:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a738:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a73c:	2900      	cmp	r1, #0
 800a73e:	d045      	beq.n	800a7cc <_dtoa_r+0x5b4>
 800a740:	494c      	ldr	r1, [pc, #304]	; (800a874 <_dtoa_r+0x65c>)
 800a742:	2000      	movs	r0, #0
 800a744:	f7f6 f85a 	bl	80007fc <__aeabi_ddiv>
 800a748:	ec53 2b18 	vmov	r2, r3, d8
 800a74c:	f7f5 fd74 	bl	8000238 <__aeabi_dsub>
 800a750:	9d00      	ldr	r5, [sp, #0]
 800a752:	ec41 0b18 	vmov	d8, r0, r1
 800a756:	4639      	mov	r1, r7
 800a758:	4630      	mov	r0, r6
 800a75a:	f7f6 f9d5 	bl	8000b08 <__aeabi_d2iz>
 800a75e:	900c      	str	r0, [sp, #48]	; 0x30
 800a760:	f7f5 feb8 	bl	80004d4 <__aeabi_i2d>
 800a764:	4602      	mov	r2, r0
 800a766:	460b      	mov	r3, r1
 800a768:	4630      	mov	r0, r6
 800a76a:	4639      	mov	r1, r7
 800a76c:	f7f5 fd64 	bl	8000238 <__aeabi_dsub>
 800a770:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a772:	3330      	adds	r3, #48	; 0x30
 800a774:	f805 3b01 	strb.w	r3, [r5], #1
 800a778:	ec53 2b18 	vmov	r2, r3, d8
 800a77c:	4606      	mov	r6, r0
 800a77e:	460f      	mov	r7, r1
 800a780:	f7f6 f984 	bl	8000a8c <__aeabi_dcmplt>
 800a784:	2800      	cmp	r0, #0
 800a786:	d165      	bne.n	800a854 <_dtoa_r+0x63c>
 800a788:	4632      	mov	r2, r6
 800a78a:	463b      	mov	r3, r7
 800a78c:	4935      	ldr	r1, [pc, #212]	; (800a864 <_dtoa_r+0x64c>)
 800a78e:	2000      	movs	r0, #0
 800a790:	f7f5 fd52 	bl	8000238 <__aeabi_dsub>
 800a794:	ec53 2b18 	vmov	r2, r3, d8
 800a798:	f7f6 f978 	bl	8000a8c <__aeabi_dcmplt>
 800a79c:	2800      	cmp	r0, #0
 800a79e:	f040 80b9 	bne.w	800a914 <_dtoa_r+0x6fc>
 800a7a2:	9b02      	ldr	r3, [sp, #8]
 800a7a4:	429d      	cmp	r5, r3
 800a7a6:	f43f af75 	beq.w	800a694 <_dtoa_r+0x47c>
 800a7aa:	4b2f      	ldr	r3, [pc, #188]	; (800a868 <_dtoa_r+0x650>)
 800a7ac:	ec51 0b18 	vmov	r0, r1, d8
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	f7f5 fef9 	bl	80005a8 <__aeabi_dmul>
 800a7b6:	4b2c      	ldr	r3, [pc, #176]	; (800a868 <_dtoa_r+0x650>)
 800a7b8:	ec41 0b18 	vmov	d8, r0, r1
 800a7bc:	2200      	movs	r2, #0
 800a7be:	4630      	mov	r0, r6
 800a7c0:	4639      	mov	r1, r7
 800a7c2:	f7f5 fef1 	bl	80005a8 <__aeabi_dmul>
 800a7c6:	4606      	mov	r6, r0
 800a7c8:	460f      	mov	r7, r1
 800a7ca:	e7c4      	b.n	800a756 <_dtoa_r+0x53e>
 800a7cc:	ec51 0b17 	vmov	r0, r1, d7
 800a7d0:	f7f5 feea 	bl	80005a8 <__aeabi_dmul>
 800a7d4:	9b02      	ldr	r3, [sp, #8]
 800a7d6:	9d00      	ldr	r5, [sp, #0]
 800a7d8:	930c      	str	r3, [sp, #48]	; 0x30
 800a7da:	ec41 0b18 	vmov	d8, r0, r1
 800a7de:	4639      	mov	r1, r7
 800a7e0:	4630      	mov	r0, r6
 800a7e2:	f7f6 f991 	bl	8000b08 <__aeabi_d2iz>
 800a7e6:	9011      	str	r0, [sp, #68]	; 0x44
 800a7e8:	f7f5 fe74 	bl	80004d4 <__aeabi_i2d>
 800a7ec:	4602      	mov	r2, r0
 800a7ee:	460b      	mov	r3, r1
 800a7f0:	4630      	mov	r0, r6
 800a7f2:	4639      	mov	r1, r7
 800a7f4:	f7f5 fd20 	bl	8000238 <__aeabi_dsub>
 800a7f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a7fa:	3330      	adds	r3, #48	; 0x30
 800a7fc:	f805 3b01 	strb.w	r3, [r5], #1
 800a800:	9b02      	ldr	r3, [sp, #8]
 800a802:	429d      	cmp	r5, r3
 800a804:	4606      	mov	r6, r0
 800a806:	460f      	mov	r7, r1
 800a808:	f04f 0200 	mov.w	r2, #0
 800a80c:	d134      	bne.n	800a878 <_dtoa_r+0x660>
 800a80e:	4b19      	ldr	r3, [pc, #100]	; (800a874 <_dtoa_r+0x65c>)
 800a810:	ec51 0b18 	vmov	r0, r1, d8
 800a814:	f7f5 fd12 	bl	800023c <__adddf3>
 800a818:	4602      	mov	r2, r0
 800a81a:	460b      	mov	r3, r1
 800a81c:	4630      	mov	r0, r6
 800a81e:	4639      	mov	r1, r7
 800a820:	f7f6 f952 	bl	8000ac8 <__aeabi_dcmpgt>
 800a824:	2800      	cmp	r0, #0
 800a826:	d175      	bne.n	800a914 <_dtoa_r+0x6fc>
 800a828:	ec53 2b18 	vmov	r2, r3, d8
 800a82c:	4911      	ldr	r1, [pc, #68]	; (800a874 <_dtoa_r+0x65c>)
 800a82e:	2000      	movs	r0, #0
 800a830:	f7f5 fd02 	bl	8000238 <__aeabi_dsub>
 800a834:	4602      	mov	r2, r0
 800a836:	460b      	mov	r3, r1
 800a838:	4630      	mov	r0, r6
 800a83a:	4639      	mov	r1, r7
 800a83c:	f7f6 f926 	bl	8000a8c <__aeabi_dcmplt>
 800a840:	2800      	cmp	r0, #0
 800a842:	f43f af27 	beq.w	800a694 <_dtoa_r+0x47c>
 800a846:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a848:	1e6b      	subs	r3, r5, #1
 800a84a:	930c      	str	r3, [sp, #48]	; 0x30
 800a84c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a850:	2b30      	cmp	r3, #48	; 0x30
 800a852:	d0f8      	beq.n	800a846 <_dtoa_r+0x62e>
 800a854:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a858:	e04a      	b.n	800a8f0 <_dtoa_r+0x6d8>
 800a85a:	bf00      	nop
 800a85c:	0800cd50 	.word	0x0800cd50
 800a860:	0800cd28 	.word	0x0800cd28
 800a864:	3ff00000 	.word	0x3ff00000
 800a868:	40240000 	.word	0x40240000
 800a86c:	401c0000 	.word	0x401c0000
 800a870:	40140000 	.word	0x40140000
 800a874:	3fe00000 	.word	0x3fe00000
 800a878:	4baf      	ldr	r3, [pc, #700]	; (800ab38 <_dtoa_r+0x920>)
 800a87a:	f7f5 fe95 	bl	80005a8 <__aeabi_dmul>
 800a87e:	4606      	mov	r6, r0
 800a880:	460f      	mov	r7, r1
 800a882:	e7ac      	b.n	800a7de <_dtoa_r+0x5c6>
 800a884:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a888:	9d00      	ldr	r5, [sp, #0]
 800a88a:	4642      	mov	r2, r8
 800a88c:	464b      	mov	r3, r9
 800a88e:	4630      	mov	r0, r6
 800a890:	4639      	mov	r1, r7
 800a892:	f7f5 ffb3 	bl	80007fc <__aeabi_ddiv>
 800a896:	f7f6 f937 	bl	8000b08 <__aeabi_d2iz>
 800a89a:	9002      	str	r0, [sp, #8]
 800a89c:	f7f5 fe1a 	bl	80004d4 <__aeabi_i2d>
 800a8a0:	4642      	mov	r2, r8
 800a8a2:	464b      	mov	r3, r9
 800a8a4:	f7f5 fe80 	bl	80005a8 <__aeabi_dmul>
 800a8a8:	4602      	mov	r2, r0
 800a8aa:	460b      	mov	r3, r1
 800a8ac:	4630      	mov	r0, r6
 800a8ae:	4639      	mov	r1, r7
 800a8b0:	f7f5 fcc2 	bl	8000238 <__aeabi_dsub>
 800a8b4:	9e02      	ldr	r6, [sp, #8]
 800a8b6:	9f01      	ldr	r7, [sp, #4]
 800a8b8:	3630      	adds	r6, #48	; 0x30
 800a8ba:	f805 6b01 	strb.w	r6, [r5], #1
 800a8be:	9e00      	ldr	r6, [sp, #0]
 800a8c0:	1bae      	subs	r6, r5, r6
 800a8c2:	42b7      	cmp	r7, r6
 800a8c4:	4602      	mov	r2, r0
 800a8c6:	460b      	mov	r3, r1
 800a8c8:	d137      	bne.n	800a93a <_dtoa_r+0x722>
 800a8ca:	f7f5 fcb7 	bl	800023c <__adddf3>
 800a8ce:	4642      	mov	r2, r8
 800a8d0:	464b      	mov	r3, r9
 800a8d2:	4606      	mov	r6, r0
 800a8d4:	460f      	mov	r7, r1
 800a8d6:	f7f6 f8f7 	bl	8000ac8 <__aeabi_dcmpgt>
 800a8da:	b9c8      	cbnz	r0, 800a910 <_dtoa_r+0x6f8>
 800a8dc:	4642      	mov	r2, r8
 800a8de:	464b      	mov	r3, r9
 800a8e0:	4630      	mov	r0, r6
 800a8e2:	4639      	mov	r1, r7
 800a8e4:	f7f6 f8c8 	bl	8000a78 <__aeabi_dcmpeq>
 800a8e8:	b110      	cbz	r0, 800a8f0 <_dtoa_r+0x6d8>
 800a8ea:	9b02      	ldr	r3, [sp, #8]
 800a8ec:	07d9      	lsls	r1, r3, #31
 800a8ee:	d40f      	bmi.n	800a910 <_dtoa_r+0x6f8>
 800a8f0:	4620      	mov	r0, r4
 800a8f2:	4659      	mov	r1, fp
 800a8f4:	f000 facc 	bl	800ae90 <_Bfree>
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	702b      	strb	r3, [r5, #0]
 800a8fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a8fe:	f10a 0001 	add.w	r0, sl, #1
 800a902:	6018      	str	r0, [r3, #0]
 800a904:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a906:	2b00      	cmp	r3, #0
 800a908:	f43f acd8 	beq.w	800a2bc <_dtoa_r+0xa4>
 800a90c:	601d      	str	r5, [r3, #0]
 800a90e:	e4d5      	b.n	800a2bc <_dtoa_r+0xa4>
 800a910:	f8cd a01c 	str.w	sl, [sp, #28]
 800a914:	462b      	mov	r3, r5
 800a916:	461d      	mov	r5, r3
 800a918:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a91c:	2a39      	cmp	r2, #57	; 0x39
 800a91e:	d108      	bne.n	800a932 <_dtoa_r+0x71a>
 800a920:	9a00      	ldr	r2, [sp, #0]
 800a922:	429a      	cmp	r2, r3
 800a924:	d1f7      	bne.n	800a916 <_dtoa_r+0x6fe>
 800a926:	9a07      	ldr	r2, [sp, #28]
 800a928:	9900      	ldr	r1, [sp, #0]
 800a92a:	3201      	adds	r2, #1
 800a92c:	9207      	str	r2, [sp, #28]
 800a92e:	2230      	movs	r2, #48	; 0x30
 800a930:	700a      	strb	r2, [r1, #0]
 800a932:	781a      	ldrb	r2, [r3, #0]
 800a934:	3201      	adds	r2, #1
 800a936:	701a      	strb	r2, [r3, #0]
 800a938:	e78c      	b.n	800a854 <_dtoa_r+0x63c>
 800a93a:	4b7f      	ldr	r3, [pc, #508]	; (800ab38 <_dtoa_r+0x920>)
 800a93c:	2200      	movs	r2, #0
 800a93e:	f7f5 fe33 	bl	80005a8 <__aeabi_dmul>
 800a942:	2200      	movs	r2, #0
 800a944:	2300      	movs	r3, #0
 800a946:	4606      	mov	r6, r0
 800a948:	460f      	mov	r7, r1
 800a94a:	f7f6 f895 	bl	8000a78 <__aeabi_dcmpeq>
 800a94e:	2800      	cmp	r0, #0
 800a950:	d09b      	beq.n	800a88a <_dtoa_r+0x672>
 800a952:	e7cd      	b.n	800a8f0 <_dtoa_r+0x6d8>
 800a954:	9a08      	ldr	r2, [sp, #32]
 800a956:	2a00      	cmp	r2, #0
 800a958:	f000 80c4 	beq.w	800aae4 <_dtoa_r+0x8cc>
 800a95c:	9a05      	ldr	r2, [sp, #20]
 800a95e:	2a01      	cmp	r2, #1
 800a960:	f300 80a8 	bgt.w	800aab4 <_dtoa_r+0x89c>
 800a964:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a966:	2a00      	cmp	r2, #0
 800a968:	f000 80a0 	beq.w	800aaac <_dtoa_r+0x894>
 800a96c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a970:	9e06      	ldr	r6, [sp, #24]
 800a972:	4645      	mov	r5, r8
 800a974:	9a04      	ldr	r2, [sp, #16]
 800a976:	2101      	movs	r1, #1
 800a978:	441a      	add	r2, r3
 800a97a:	4620      	mov	r0, r4
 800a97c:	4498      	add	r8, r3
 800a97e:	9204      	str	r2, [sp, #16]
 800a980:	f000 fb42 	bl	800b008 <__i2b>
 800a984:	4607      	mov	r7, r0
 800a986:	2d00      	cmp	r5, #0
 800a988:	dd0b      	ble.n	800a9a2 <_dtoa_r+0x78a>
 800a98a:	9b04      	ldr	r3, [sp, #16]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	dd08      	ble.n	800a9a2 <_dtoa_r+0x78a>
 800a990:	42ab      	cmp	r3, r5
 800a992:	9a04      	ldr	r2, [sp, #16]
 800a994:	bfa8      	it	ge
 800a996:	462b      	movge	r3, r5
 800a998:	eba8 0803 	sub.w	r8, r8, r3
 800a99c:	1aed      	subs	r5, r5, r3
 800a99e:	1ad3      	subs	r3, r2, r3
 800a9a0:	9304      	str	r3, [sp, #16]
 800a9a2:	9b06      	ldr	r3, [sp, #24]
 800a9a4:	b1fb      	cbz	r3, 800a9e6 <_dtoa_r+0x7ce>
 800a9a6:	9b08      	ldr	r3, [sp, #32]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	f000 809f 	beq.w	800aaec <_dtoa_r+0x8d4>
 800a9ae:	2e00      	cmp	r6, #0
 800a9b0:	dd11      	ble.n	800a9d6 <_dtoa_r+0x7be>
 800a9b2:	4639      	mov	r1, r7
 800a9b4:	4632      	mov	r2, r6
 800a9b6:	4620      	mov	r0, r4
 800a9b8:	f000 fbe2 	bl	800b180 <__pow5mult>
 800a9bc:	465a      	mov	r2, fp
 800a9be:	4601      	mov	r1, r0
 800a9c0:	4607      	mov	r7, r0
 800a9c2:	4620      	mov	r0, r4
 800a9c4:	f000 fb36 	bl	800b034 <__multiply>
 800a9c8:	4659      	mov	r1, fp
 800a9ca:	9007      	str	r0, [sp, #28]
 800a9cc:	4620      	mov	r0, r4
 800a9ce:	f000 fa5f 	bl	800ae90 <_Bfree>
 800a9d2:	9b07      	ldr	r3, [sp, #28]
 800a9d4:	469b      	mov	fp, r3
 800a9d6:	9b06      	ldr	r3, [sp, #24]
 800a9d8:	1b9a      	subs	r2, r3, r6
 800a9da:	d004      	beq.n	800a9e6 <_dtoa_r+0x7ce>
 800a9dc:	4659      	mov	r1, fp
 800a9de:	4620      	mov	r0, r4
 800a9e0:	f000 fbce 	bl	800b180 <__pow5mult>
 800a9e4:	4683      	mov	fp, r0
 800a9e6:	2101      	movs	r1, #1
 800a9e8:	4620      	mov	r0, r4
 800a9ea:	f000 fb0d 	bl	800b008 <__i2b>
 800a9ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	4606      	mov	r6, r0
 800a9f4:	dd7c      	ble.n	800aaf0 <_dtoa_r+0x8d8>
 800a9f6:	461a      	mov	r2, r3
 800a9f8:	4601      	mov	r1, r0
 800a9fa:	4620      	mov	r0, r4
 800a9fc:	f000 fbc0 	bl	800b180 <__pow5mult>
 800aa00:	9b05      	ldr	r3, [sp, #20]
 800aa02:	2b01      	cmp	r3, #1
 800aa04:	4606      	mov	r6, r0
 800aa06:	dd76      	ble.n	800aaf6 <_dtoa_r+0x8de>
 800aa08:	2300      	movs	r3, #0
 800aa0a:	9306      	str	r3, [sp, #24]
 800aa0c:	6933      	ldr	r3, [r6, #16]
 800aa0e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800aa12:	6918      	ldr	r0, [r3, #16]
 800aa14:	f000 faa8 	bl	800af68 <__hi0bits>
 800aa18:	f1c0 0020 	rsb	r0, r0, #32
 800aa1c:	9b04      	ldr	r3, [sp, #16]
 800aa1e:	4418      	add	r0, r3
 800aa20:	f010 001f 	ands.w	r0, r0, #31
 800aa24:	f000 8086 	beq.w	800ab34 <_dtoa_r+0x91c>
 800aa28:	f1c0 0320 	rsb	r3, r0, #32
 800aa2c:	2b04      	cmp	r3, #4
 800aa2e:	dd7f      	ble.n	800ab30 <_dtoa_r+0x918>
 800aa30:	f1c0 001c 	rsb	r0, r0, #28
 800aa34:	9b04      	ldr	r3, [sp, #16]
 800aa36:	4403      	add	r3, r0
 800aa38:	4480      	add	r8, r0
 800aa3a:	4405      	add	r5, r0
 800aa3c:	9304      	str	r3, [sp, #16]
 800aa3e:	f1b8 0f00 	cmp.w	r8, #0
 800aa42:	dd05      	ble.n	800aa50 <_dtoa_r+0x838>
 800aa44:	4659      	mov	r1, fp
 800aa46:	4642      	mov	r2, r8
 800aa48:	4620      	mov	r0, r4
 800aa4a:	f000 fbf3 	bl	800b234 <__lshift>
 800aa4e:	4683      	mov	fp, r0
 800aa50:	9b04      	ldr	r3, [sp, #16]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	dd05      	ble.n	800aa62 <_dtoa_r+0x84a>
 800aa56:	4631      	mov	r1, r6
 800aa58:	461a      	mov	r2, r3
 800aa5a:	4620      	mov	r0, r4
 800aa5c:	f000 fbea 	bl	800b234 <__lshift>
 800aa60:	4606      	mov	r6, r0
 800aa62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d069      	beq.n	800ab3c <_dtoa_r+0x924>
 800aa68:	4631      	mov	r1, r6
 800aa6a:	4658      	mov	r0, fp
 800aa6c:	f000 fc4e 	bl	800b30c <__mcmp>
 800aa70:	2800      	cmp	r0, #0
 800aa72:	da63      	bge.n	800ab3c <_dtoa_r+0x924>
 800aa74:	2300      	movs	r3, #0
 800aa76:	4659      	mov	r1, fp
 800aa78:	220a      	movs	r2, #10
 800aa7a:	4620      	mov	r0, r4
 800aa7c:	f000 fa2a 	bl	800aed4 <__multadd>
 800aa80:	9b08      	ldr	r3, [sp, #32]
 800aa82:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aa86:	4683      	mov	fp, r0
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	f000 818f 	beq.w	800adac <_dtoa_r+0xb94>
 800aa8e:	4639      	mov	r1, r7
 800aa90:	2300      	movs	r3, #0
 800aa92:	220a      	movs	r2, #10
 800aa94:	4620      	mov	r0, r4
 800aa96:	f000 fa1d 	bl	800aed4 <__multadd>
 800aa9a:	f1b9 0f00 	cmp.w	r9, #0
 800aa9e:	4607      	mov	r7, r0
 800aaa0:	f300 808e 	bgt.w	800abc0 <_dtoa_r+0x9a8>
 800aaa4:	9b05      	ldr	r3, [sp, #20]
 800aaa6:	2b02      	cmp	r3, #2
 800aaa8:	dc50      	bgt.n	800ab4c <_dtoa_r+0x934>
 800aaaa:	e089      	b.n	800abc0 <_dtoa_r+0x9a8>
 800aaac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aaae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aab2:	e75d      	b.n	800a970 <_dtoa_r+0x758>
 800aab4:	9b01      	ldr	r3, [sp, #4]
 800aab6:	1e5e      	subs	r6, r3, #1
 800aab8:	9b06      	ldr	r3, [sp, #24]
 800aaba:	42b3      	cmp	r3, r6
 800aabc:	bfbf      	itttt	lt
 800aabe:	9b06      	ldrlt	r3, [sp, #24]
 800aac0:	9606      	strlt	r6, [sp, #24]
 800aac2:	1af2      	sublt	r2, r6, r3
 800aac4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800aac6:	bfb6      	itet	lt
 800aac8:	189b      	addlt	r3, r3, r2
 800aaca:	1b9e      	subge	r6, r3, r6
 800aacc:	930d      	strlt	r3, [sp, #52]	; 0x34
 800aace:	9b01      	ldr	r3, [sp, #4]
 800aad0:	bfb8      	it	lt
 800aad2:	2600      	movlt	r6, #0
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	bfb5      	itete	lt
 800aad8:	eba8 0503 	sublt.w	r5, r8, r3
 800aadc:	9b01      	ldrge	r3, [sp, #4]
 800aade:	2300      	movlt	r3, #0
 800aae0:	4645      	movge	r5, r8
 800aae2:	e747      	b.n	800a974 <_dtoa_r+0x75c>
 800aae4:	9e06      	ldr	r6, [sp, #24]
 800aae6:	9f08      	ldr	r7, [sp, #32]
 800aae8:	4645      	mov	r5, r8
 800aaea:	e74c      	b.n	800a986 <_dtoa_r+0x76e>
 800aaec:	9a06      	ldr	r2, [sp, #24]
 800aaee:	e775      	b.n	800a9dc <_dtoa_r+0x7c4>
 800aaf0:	9b05      	ldr	r3, [sp, #20]
 800aaf2:	2b01      	cmp	r3, #1
 800aaf4:	dc18      	bgt.n	800ab28 <_dtoa_r+0x910>
 800aaf6:	9b02      	ldr	r3, [sp, #8]
 800aaf8:	b9b3      	cbnz	r3, 800ab28 <_dtoa_r+0x910>
 800aafa:	9b03      	ldr	r3, [sp, #12]
 800aafc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab00:	b9a3      	cbnz	r3, 800ab2c <_dtoa_r+0x914>
 800ab02:	9b03      	ldr	r3, [sp, #12]
 800ab04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ab08:	0d1b      	lsrs	r3, r3, #20
 800ab0a:	051b      	lsls	r3, r3, #20
 800ab0c:	b12b      	cbz	r3, 800ab1a <_dtoa_r+0x902>
 800ab0e:	9b04      	ldr	r3, [sp, #16]
 800ab10:	3301      	adds	r3, #1
 800ab12:	9304      	str	r3, [sp, #16]
 800ab14:	f108 0801 	add.w	r8, r8, #1
 800ab18:	2301      	movs	r3, #1
 800ab1a:	9306      	str	r3, [sp, #24]
 800ab1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	f47f af74 	bne.w	800aa0c <_dtoa_r+0x7f4>
 800ab24:	2001      	movs	r0, #1
 800ab26:	e779      	b.n	800aa1c <_dtoa_r+0x804>
 800ab28:	2300      	movs	r3, #0
 800ab2a:	e7f6      	b.n	800ab1a <_dtoa_r+0x902>
 800ab2c:	9b02      	ldr	r3, [sp, #8]
 800ab2e:	e7f4      	b.n	800ab1a <_dtoa_r+0x902>
 800ab30:	d085      	beq.n	800aa3e <_dtoa_r+0x826>
 800ab32:	4618      	mov	r0, r3
 800ab34:	301c      	adds	r0, #28
 800ab36:	e77d      	b.n	800aa34 <_dtoa_r+0x81c>
 800ab38:	40240000 	.word	0x40240000
 800ab3c:	9b01      	ldr	r3, [sp, #4]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	dc38      	bgt.n	800abb4 <_dtoa_r+0x99c>
 800ab42:	9b05      	ldr	r3, [sp, #20]
 800ab44:	2b02      	cmp	r3, #2
 800ab46:	dd35      	ble.n	800abb4 <_dtoa_r+0x99c>
 800ab48:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ab4c:	f1b9 0f00 	cmp.w	r9, #0
 800ab50:	d10d      	bne.n	800ab6e <_dtoa_r+0x956>
 800ab52:	4631      	mov	r1, r6
 800ab54:	464b      	mov	r3, r9
 800ab56:	2205      	movs	r2, #5
 800ab58:	4620      	mov	r0, r4
 800ab5a:	f000 f9bb 	bl	800aed4 <__multadd>
 800ab5e:	4601      	mov	r1, r0
 800ab60:	4606      	mov	r6, r0
 800ab62:	4658      	mov	r0, fp
 800ab64:	f000 fbd2 	bl	800b30c <__mcmp>
 800ab68:	2800      	cmp	r0, #0
 800ab6a:	f73f adbd 	bgt.w	800a6e8 <_dtoa_r+0x4d0>
 800ab6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab70:	9d00      	ldr	r5, [sp, #0]
 800ab72:	ea6f 0a03 	mvn.w	sl, r3
 800ab76:	f04f 0800 	mov.w	r8, #0
 800ab7a:	4631      	mov	r1, r6
 800ab7c:	4620      	mov	r0, r4
 800ab7e:	f000 f987 	bl	800ae90 <_Bfree>
 800ab82:	2f00      	cmp	r7, #0
 800ab84:	f43f aeb4 	beq.w	800a8f0 <_dtoa_r+0x6d8>
 800ab88:	f1b8 0f00 	cmp.w	r8, #0
 800ab8c:	d005      	beq.n	800ab9a <_dtoa_r+0x982>
 800ab8e:	45b8      	cmp	r8, r7
 800ab90:	d003      	beq.n	800ab9a <_dtoa_r+0x982>
 800ab92:	4641      	mov	r1, r8
 800ab94:	4620      	mov	r0, r4
 800ab96:	f000 f97b 	bl	800ae90 <_Bfree>
 800ab9a:	4639      	mov	r1, r7
 800ab9c:	4620      	mov	r0, r4
 800ab9e:	f000 f977 	bl	800ae90 <_Bfree>
 800aba2:	e6a5      	b.n	800a8f0 <_dtoa_r+0x6d8>
 800aba4:	2600      	movs	r6, #0
 800aba6:	4637      	mov	r7, r6
 800aba8:	e7e1      	b.n	800ab6e <_dtoa_r+0x956>
 800abaa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800abac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800abb0:	4637      	mov	r7, r6
 800abb2:	e599      	b.n	800a6e8 <_dtoa_r+0x4d0>
 800abb4:	9b08      	ldr	r3, [sp, #32]
 800abb6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	f000 80fd 	beq.w	800adba <_dtoa_r+0xba2>
 800abc0:	2d00      	cmp	r5, #0
 800abc2:	dd05      	ble.n	800abd0 <_dtoa_r+0x9b8>
 800abc4:	4639      	mov	r1, r7
 800abc6:	462a      	mov	r2, r5
 800abc8:	4620      	mov	r0, r4
 800abca:	f000 fb33 	bl	800b234 <__lshift>
 800abce:	4607      	mov	r7, r0
 800abd0:	9b06      	ldr	r3, [sp, #24]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d05c      	beq.n	800ac90 <_dtoa_r+0xa78>
 800abd6:	6879      	ldr	r1, [r7, #4]
 800abd8:	4620      	mov	r0, r4
 800abda:	f000 f919 	bl	800ae10 <_Balloc>
 800abde:	4605      	mov	r5, r0
 800abe0:	b928      	cbnz	r0, 800abee <_dtoa_r+0x9d6>
 800abe2:	4b80      	ldr	r3, [pc, #512]	; (800ade4 <_dtoa_r+0xbcc>)
 800abe4:	4602      	mov	r2, r0
 800abe6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800abea:	f7ff bb2e 	b.w	800a24a <_dtoa_r+0x32>
 800abee:	693a      	ldr	r2, [r7, #16]
 800abf0:	3202      	adds	r2, #2
 800abf2:	0092      	lsls	r2, r2, #2
 800abf4:	f107 010c 	add.w	r1, r7, #12
 800abf8:	300c      	adds	r0, #12
 800abfa:	f7fe fd19 	bl	8009630 <memcpy>
 800abfe:	2201      	movs	r2, #1
 800ac00:	4629      	mov	r1, r5
 800ac02:	4620      	mov	r0, r4
 800ac04:	f000 fb16 	bl	800b234 <__lshift>
 800ac08:	9b00      	ldr	r3, [sp, #0]
 800ac0a:	3301      	adds	r3, #1
 800ac0c:	9301      	str	r3, [sp, #4]
 800ac0e:	9b00      	ldr	r3, [sp, #0]
 800ac10:	444b      	add	r3, r9
 800ac12:	9307      	str	r3, [sp, #28]
 800ac14:	9b02      	ldr	r3, [sp, #8]
 800ac16:	f003 0301 	and.w	r3, r3, #1
 800ac1a:	46b8      	mov	r8, r7
 800ac1c:	9306      	str	r3, [sp, #24]
 800ac1e:	4607      	mov	r7, r0
 800ac20:	9b01      	ldr	r3, [sp, #4]
 800ac22:	4631      	mov	r1, r6
 800ac24:	3b01      	subs	r3, #1
 800ac26:	4658      	mov	r0, fp
 800ac28:	9302      	str	r3, [sp, #8]
 800ac2a:	f7ff fa6a 	bl	800a102 <quorem>
 800ac2e:	4603      	mov	r3, r0
 800ac30:	3330      	adds	r3, #48	; 0x30
 800ac32:	9004      	str	r0, [sp, #16]
 800ac34:	4641      	mov	r1, r8
 800ac36:	4658      	mov	r0, fp
 800ac38:	9308      	str	r3, [sp, #32]
 800ac3a:	f000 fb67 	bl	800b30c <__mcmp>
 800ac3e:	463a      	mov	r2, r7
 800ac40:	4681      	mov	r9, r0
 800ac42:	4631      	mov	r1, r6
 800ac44:	4620      	mov	r0, r4
 800ac46:	f000 fb7d 	bl	800b344 <__mdiff>
 800ac4a:	68c2      	ldr	r2, [r0, #12]
 800ac4c:	9b08      	ldr	r3, [sp, #32]
 800ac4e:	4605      	mov	r5, r0
 800ac50:	bb02      	cbnz	r2, 800ac94 <_dtoa_r+0xa7c>
 800ac52:	4601      	mov	r1, r0
 800ac54:	4658      	mov	r0, fp
 800ac56:	f000 fb59 	bl	800b30c <__mcmp>
 800ac5a:	9b08      	ldr	r3, [sp, #32]
 800ac5c:	4602      	mov	r2, r0
 800ac5e:	4629      	mov	r1, r5
 800ac60:	4620      	mov	r0, r4
 800ac62:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800ac66:	f000 f913 	bl	800ae90 <_Bfree>
 800ac6a:	9b05      	ldr	r3, [sp, #20]
 800ac6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac6e:	9d01      	ldr	r5, [sp, #4]
 800ac70:	ea43 0102 	orr.w	r1, r3, r2
 800ac74:	9b06      	ldr	r3, [sp, #24]
 800ac76:	430b      	orrs	r3, r1
 800ac78:	9b08      	ldr	r3, [sp, #32]
 800ac7a:	d10d      	bne.n	800ac98 <_dtoa_r+0xa80>
 800ac7c:	2b39      	cmp	r3, #57	; 0x39
 800ac7e:	d029      	beq.n	800acd4 <_dtoa_r+0xabc>
 800ac80:	f1b9 0f00 	cmp.w	r9, #0
 800ac84:	dd01      	ble.n	800ac8a <_dtoa_r+0xa72>
 800ac86:	9b04      	ldr	r3, [sp, #16]
 800ac88:	3331      	adds	r3, #49	; 0x31
 800ac8a:	9a02      	ldr	r2, [sp, #8]
 800ac8c:	7013      	strb	r3, [r2, #0]
 800ac8e:	e774      	b.n	800ab7a <_dtoa_r+0x962>
 800ac90:	4638      	mov	r0, r7
 800ac92:	e7b9      	b.n	800ac08 <_dtoa_r+0x9f0>
 800ac94:	2201      	movs	r2, #1
 800ac96:	e7e2      	b.n	800ac5e <_dtoa_r+0xa46>
 800ac98:	f1b9 0f00 	cmp.w	r9, #0
 800ac9c:	db06      	blt.n	800acac <_dtoa_r+0xa94>
 800ac9e:	9905      	ldr	r1, [sp, #20]
 800aca0:	ea41 0909 	orr.w	r9, r1, r9
 800aca4:	9906      	ldr	r1, [sp, #24]
 800aca6:	ea59 0101 	orrs.w	r1, r9, r1
 800acaa:	d120      	bne.n	800acee <_dtoa_r+0xad6>
 800acac:	2a00      	cmp	r2, #0
 800acae:	ddec      	ble.n	800ac8a <_dtoa_r+0xa72>
 800acb0:	4659      	mov	r1, fp
 800acb2:	2201      	movs	r2, #1
 800acb4:	4620      	mov	r0, r4
 800acb6:	9301      	str	r3, [sp, #4]
 800acb8:	f000 fabc 	bl	800b234 <__lshift>
 800acbc:	4631      	mov	r1, r6
 800acbe:	4683      	mov	fp, r0
 800acc0:	f000 fb24 	bl	800b30c <__mcmp>
 800acc4:	2800      	cmp	r0, #0
 800acc6:	9b01      	ldr	r3, [sp, #4]
 800acc8:	dc02      	bgt.n	800acd0 <_dtoa_r+0xab8>
 800acca:	d1de      	bne.n	800ac8a <_dtoa_r+0xa72>
 800accc:	07da      	lsls	r2, r3, #31
 800acce:	d5dc      	bpl.n	800ac8a <_dtoa_r+0xa72>
 800acd0:	2b39      	cmp	r3, #57	; 0x39
 800acd2:	d1d8      	bne.n	800ac86 <_dtoa_r+0xa6e>
 800acd4:	9a02      	ldr	r2, [sp, #8]
 800acd6:	2339      	movs	r3, #57	; 0x39
 800acd8:	7013      	strb	r3, [r2, #0]
 800acda:	462b      	mov	r3, r5
 800acdc:	461d      	mov	r5, r3
 800acde:	3b01      	subs	r3, #1
 800ace0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ace4:	2a39      	cmp	r2, #57	; 0x39
 800ace6:	d050      	beq.n	800ad8a <_dtoa_r+0xb72>
 800ace8:	3201      	adds	r2, #1
 800acea:	701a      	strb	r2, [r3, #0]
 800acec:	e745      	b.n	800ab7a <_dtoa_r+0x962>
 800acee:	2a00      	cmp	r2, #0
 800acf0:	dd03      	ble.n	800acfa <_dtoa_r+0xae2>
 800acf2:	2b39      	cmp	r3, #57	; 0x39
 800acf4:	d0ee      	beq.n	800acd4 <_dtoa_r+0xabc>
 800acf6:	3301      	adds	r3, #1
 800acf8:	e7c7      	b.n	800ac8a <_dtoa_r+0xa72>
 800acfa:	9a01      	ldr	r2, [sp, #4]
 800acfc:	9907      	ldr	r1, [sp, #28]
 800acfe:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ad02:	428a      	cmp	r2, r1
 800ad04:	d02a      	beq.n	800ad5c <_dtoa_r+0xb44>
 800ad06:	4659      	mov	r1, fp
 800ad08:	2300      	movs	r3, #0
 800ad0a:	220a      	movs	r2, #10
 800ad0c:	4620      	mov	r0, r4
 800ad0e:	f000 f8e1 	bl	800aed4 <__multadd>
 800ad12:	45b8      	cmp	r8, r7
 800ad14:	4683      	mov	fp, r0
 800ad16:	f04f 0300 	mov.w	r3, #0
 800ad1a:	f04f 020a 	mov.w	r2, #10
 800ad1e:	4641      	mov	r1, r8
 800ad20:	4620      	mov	r0, r4
 800ad22:	d107      	bne.n	800ad34 <_dtoa_r+0xb1c>
 800ad24:	f000 f8d6 	bl	800aed4 <__multadd>
 800ad28:	4680      	mov	r8, r0
 800ad2a:	4607      	mov	r7, r0
 800ad2c:	9b01      	ldr	r3, [sp, #4]
 800ad2e:	3301      	adds	r3, #1
 800ad30:	9301      	str	r3, [sp, #4]
 800ad32:	e775      	b.n	800ac20 <_dtoa_r+0xa08>
 800ad34:	f000 f8ce 	bl	800aed4 <__multadd>
 800ad38:	4639      	mov	r1, r7
 800ad3a:	4680      	mov	r8, r0
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	220a      	movs	r2, #10
 800ad40:	4620      	mov	r0, r4
 800ad42:	f000 f8c7 	bl	800aed4 <__multadd>
 800ad46:	4607      	mov	r7, r0
 800ad48:	e7f0      	b.n	800ad2c <_dtoa_r+0xb14>
 800ad4a:	f1b9 0f00 	cmp.w	r9, #0
 800ad4e:	9a00      	ldr	r2, [sp, #0]
 800ad50:	bfcc      	ite	gt
 800ad52:	464d      	movgt	r5, r9
 800ad54:	2501      	movle	r5, #1
 800ad56:	4415      	add	r5, r2
 800ad58:	f04f 0800 	mov.w	r8, #0
 800ad5c:	4659      	mov	r1, fp
 800ad5e:	2201      	movs	r2, #1
 800ad60:	4620      	mov	r0, r4
 800ad62:	9301      	str	r3, [sp, #4]
 800ad64:	f000 fa66 	bl	800b234 <__lshift>
 800ad68:	4631      	mov	r1, r6
 800ad6a:	4683      	mov	fp, r0
 800ad6c:	f000 face 	bl	800b30c <__mcmp>
 800ad70:	2800      	cmp	r0, #0
 800ad72:	dcb2      	bgt.n	800acda <_dtoa_r+0xac2>
 800ad74:	d102      	bne.n	800ad7c <_dtoa_r+0xb64>
 800ad76:	9b01      	ldr	r3, [sp, #4]
 800ad78:	07db      	lsls	r3, r3, #31
 800ad7a:	d4ae      	bmi.n	800acda <_dtoa_r+0xac2>
 800ad7c:	462b      	mov	r3, r5
 800ad7e:	461d      	mov	r5, r3
 800ad80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad84:	2a30      	cmp	r2, #48	; 0x30
 800ad86:	d0fa      	beq.n	800ad7e <_dtoa_r+0xb66>
 800ad88:	e6f7      	b.n	800ab7a <_dtoa_r+0x962>
 800ad8a:	9a00      	ldr	r2, [sp, #0]
 800ad8c:	429a      	cmp	r2, r3
 800ad8e:	d1a5      	bne.n	800acdc <_dtoa_r+0xac4>
 800ad90:	f10a 0a01 	add.w	sl, sl, #1
 800ad94:	2331      	movs	r3, #49	; 0x31
 800ad96:	e779      	b.n	800ac8c <_dtoa_r+0xa74>
 800ad98:	4b13      	ldr	r3, [pc, #76]	; (800ade8 <_dtoa_r+0xbd0>)
 800ad9a:	f7ff baaf 	b.w	800a2fc <_dtoa_r+0xe4>
 800ad9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	f47f aa86 	bne.w	800a2b2 <_dtoa_r+0x9a>
 800ada6:	4b11      	ldr	r3, [pc, #68]	; (800adec <_dtoa_r+0xbd4>)
 800ada8:	f7ff baa8 	b.w	800a2fc <_dtoa_r+0xe4>
 800adac:	f1b9 0f00 	cmp.w	r9, #0
 800adb0:	dc03      	bgt.n	800adba <_dtoa_r+0xba2>
 800adb2:	9b05      	ldr	r3, [sp, #20]
 800adb4:	2b02      	cmp	r3, #2
 800adb6:	f73f aec9 	bgt.w	800ab4c <_dtoa_r+0x934>
 800adba:	9d00      	ldr	r5, [sp, #0]
 800adbc:	4631      	mov	r1, r6
 800adbe:	4658      	mov	r0, fp
 800adc0:	f7ff f99f 	bl	800a102 <quorem>
 800adc4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800adc8:	f805 3b01 	strb.w	r3, [r5], #1
 800adcc:	9a00      	ldr	r2, [sp, #0]
 800adce:	1aaa      	subs	r2, r5, r2
 800add0:	4591      	cmp	r9, r2
 800add2:	ddba      	ble.n	800ad4a <_dtoa_r+0xb32>
 800add4:	4659      	mov	r1, fp
 800add6:	2300      	movs	r3, #0
 800add8:	220a      	movs	r2, #10
 800adda:	4620      	mov	r0, r4
 800addc:	f000 f87a 	bl	800aed4 <__multadd>
 800ade0:	4683      	mov	fp, r0
 800ade2:	e7eb      	b.n	800adbc <_dtoa_r+0xba4>
 800ade4:	0800ccb3 	.word	0x0800ccb3
 800ade8:	0800cc0c 	.word	0x0800cc0c
 800adec:	0800cc30 	.word	0x0800cc30

0800adf0 <_localeconv_r>:
 800adf0:	4800      	ldr	r0, [pc, #0]	; (800adf4 <_localeconv_r+0x4>)
 800adf2:	4770      	bx	lr
 800adf4:	20000164 	.word	0x20000164

0800adf8 <__malloc_lock>:
 800adf8:	4801      	ldr	r0, [pc, #4]	; (800ae00 <__malloc_lock+0x8>)
 800adfa:	f000 bd22 	b.w	800b842 <__retarget_lock_acquire_recursive>
 800adfe:	bf00      	nop
 800ae00:	20000cac 	.word	0x20000cac

0800ae04 <__malloc_unlock>:
 800ae04:	4801      	ldr	r0, [pc, #4]	; (800ae0c <__malloc_unlock+0x8>)
 800ae06:	f000 bd1d 	b.w	800b844 <__retarget_lock_release_recursive>
 800ae0a:	bf00      	nop
 800ae0c:	20000cac 	.word	0x20000cac

0800ae10 <_Balloc>:
 800ae10:	b570      	push	{r4, r5, r6, lr}
 800ae12:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ae14:	4604      	mov	r4, r0
 800ae16:	460d      	mov	r5, r1
 800ae18:	b976      	cbnz	r6, 800ae38 <_Balloc+0x28>
 800ae1a:	2010      	movs	r0, #16
 800ae1c:	f7fe fc00 	bl	8009620 <malloc>
 800ae20:	4602      	mov	r2, r0
 800ae22:	6260      	str	r0, [r4, #36]	; 0x24
 800ae24:	b920      	cbnz	r0, 800ae30 <_Balloc+0x20>
 800ae26:	4b18      	ldr	r3, [pc, #96]	; (800ae88 <_Balloc+0x78>)
 800ae28:	4818      	ldr	r0, [pc, #96]	; (800ae8c <_Balloc+0x7c>)
 800ae2a:	2166      	movs	r1, #102	; 0x66
 800ae2c:	f000 fcd8 	bl	800b7e0 <__assert_func>
 800ae30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae34:	6006      	str	r6, [r0, #0]
 800ae36:	60c6      	str	r6, [r0, #12]
 800ae38:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ae3a:	68f3      	ldr	r3, [r6, #12]
 800ae3c:	b183      	cbz	r3, 800ae60 <_Balloc+0x50>
 800ae3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae40:	68db      	ldr	r3, [r3, #12]
 800ae42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ae46:	b9b8      	cbnz	r0, 800ae78 <_Balloc+0x68>
 800ae48:	2101      	movs	r1, #1
 800ae4a:	fa01 f605 	lsl.w	r6, r1, r5
 800ae4e:	1d72      	adds	r2, r6, #5
 800ae50:	0092      	lsls	r2, r2, #2
 800ae52:	4620      	mov	r0, r4
 800ae54:	f000 fb5a 	bl	800b50c <_calloc_r>
 800ae58:	b160      	cbz	r0, 800ae74 <_Balloc+0x64>
 800ae5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ae5e:	e00e      	b.n	800ae7e <_Balloc+0x6e>
 800ae60:	2221      	movs	r2, #33	; 0x21
 800ae62:	2104      	movs	r1, #4
 800ae64:	4620      	mov	r0, r4
 800ae66:	f000 fb51 	bl	800b50c <_calloc_r>
 800ae6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae6c:	60f0      	str	r0, [r6, #12]
 800ae6e:	68db      	ldr	r3, [r3, #12]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d1e4      	bne.n	800ae3e <_Balloc+0x2e>
 800ae74:	2000      	movs	r0, #0
 800ae76:	bd70      	pop	{r4, r5, r6, pc}
 800ae78:	6802      	ldr	r2, [r0, #0]
 800ae7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ae7e:	2300      	movs	r3, #0
 800ae80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ae84:	e7f7      	b.n	800ae76 <_Balloc+0x66>
 800ae86:	bf00      	nop
 800ae88:	0800cc3d 	.word	0x0800cc3d
 800ae8c:	0800ccc4 	.word	0x0800ccc4

0800ae90 <_Bfree>:
 800ae90:	b570      	push	{r4, r5, r6, lr}
 800ae92:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ae94:	4605      	mov	r5, r0
 800ae96:	460c      	mov	r4, r1
 800ae98:	b976      	cbnz	r6, 800aeb8 <_Bfree+0x28>
 800ae9a:	2010      	movs	r0, #16
 800ae9c:	f7fe fbc0 	bl	8009620 <malloc>
 800aea0:	4602      	mov	r2, r0
 800aea2:	6268      	str	r0, [r5, #36]	; 0x24
 800aea4:	b920      	cbnz	r0, 800aeb0 <_Bfree+0x20>
 800aea6:	4b09      	ldr	r3, [pc, #36]	; (800aecc <_Bfree+0x3c>)
 800aea8:	4809      	ldr	r0, [pc, #36]	; (800aed0 <_Bfree+0x40>)
 800aeaa:	218a      	movs	r1, #138	; 0x8a
 800aeac:	f000 fc98 	bl	800b7e0 <__assert_func>
 800aeb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aeb4:	6006      	str	r6, [r0, #0]
 800aeb6:	60c6      	str	r6, [r0, #12]
 800aeb8:	b13c      	cbz	r4, 800aeca <_Bfree+0x3a>
 800aeba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aebc:	6862      	ldr	r2, [r4, #4]
 800aebe:	68db      	ldr	r3, [r3, #12]
 800aec0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aec4:	6021      	str	r1, [r4, #0]
 800aec6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aeca:	bd70      	pop	{r4, r5, r6, pc}
 800aecc:	0800cc3d 	.word	0x0800cc3d
 800aed0:	0800ccc4 	.word	0x0800ccc4

0800aed4 <__multadd>:
 800aed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aed8:	690e      	ldr	r6, [r1, #16]
 800aeda:	4607      	mov	r7, r0
 800aedc:	4698      	mov	r8, r3
 800aede:	460c      	mov	r4, r1
 800aee0:	f101 0014 	add.w	r0, r1, #20
 800aee4:	2300      	movs	r3, #0
 800aee6:	6805      	ldr	r5, [r0, #0]
 800aee8:	b2a9      	uxth	r1, r5
 800aeea:	fb02 8101 	mla	r1, r2, r1, r8
 800aeee:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800aef2:	0c2d      	lsrs	r5, r5, #16
 800aef4:	fb02 c505 	mla	r5, r2, r5, ip
 800aef8:	b289      	uxth	r1, r1
 800aefa:	3301      	adds	r3, #1
 800aefc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800af00:	429e      	cmp	r6, r3
 800af02:	f840 1b04 	str.w	r1, [r0], #4
 800af06:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800af0a:	dcec      	bgt.n	800aee6 <__multadd+0x12>
 800af0c:	f1b8 0f00 	cmp.w	r8, #0
 800af10:	d022      	beq.n	800af58 <__multadd+0x84>
 800af12:	68a3      	ldr	r3, [r4, #8]
 800af14:	42b3      	cmp	r3, r6
 800af16:	dc19      	bgt.n	800af4c <__multadd+0x78>
 800af18:	6861      	ldr	r1, [r4, #4]
 800af1a:	4638      	mov	r0, r7
 800af1c:	3101      	adds	r1, #1
 800af1e:	f7ff ff77 	bl	800ae10 <_Balloc>
 800af22:	4605      	mov	r5, r0
 800af24:	b928      	cbnz	r0, 800af32 <__multadd+0x5e>
 800af26:	4602      	mov	r2, r0
 800af28:	4b0d      	ldr	r3, [pc, #52]	; (800af60 <__multadd+0x8c>)
 800af2a:	480e      	ldr	r0, [pc, #56]	; (800af64 <__multadd+0x90>)
 800af2c:	21b5      	movs	r1, #181	; 0xb5
 800af2e:	f000 fc57 	bl	800b7e0 <__assert_func>
 800af32:	6922      	ldr	r2, [r4, #16]
 800af34:	3202      	adds	r2, #2
 800af36:	f104 010c 	add.w	r1, r4, #12
 800af3a:	0092      	lsls	r2, r2, #2
 800af3c:	300c      	adds	r0, #12
 800af3e:	f7fe fb77 	bl	8009630 <memcpy>
 800af42:	4621      	mov	r1, r4
 800af44:	4638      	mov	r0, r7
 800af46:	f7ff ffa3 	bl	800ae90 <_Bfree>
 800af4a:	462c      	mov	r4, r5
 800af4c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800af50:	3601      	adds	r6, #1
 800af52:	f8c3 8014 	str.w	r8, [r3, #20]
 800af56:	6126      	str	r6, [r4, #16]
 800af58:	4620      	mov	r0, r4
 800af5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af5e:	bf00      	nop
 800af60:	0800ccb3 	.word	0x0800ccb3
 800af64:	0800ccc4 	.word	0x0800ccc4

0800af68 <__hi0bits>:
 800af68:	0c03      	lsrs	r3, r0, #16
 800af6a:	041b      	lsls	r3, r3, #16
 800af6c:	b9d3      	cbnz	r3, 800afa4 <__hi0bits+0x3c>
 800af6e:	0400      	lsls	r0, r0, #16
 800af70:	2310      	movs	r3, #16
 800af72:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800af76:	bf04      	itt	eq
 800af78:	0200      	lsleq	r0, r0, #8
 800af7a:	3308      	addeq	r3, #8
 800af7c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800af80:	bf04      	itt	eq
 800af82:	0100      	lsleq	r0, r0, #4
 800af84:	3304      	addeq	r3, #4
 800af86:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800af8a:	bf04      	itt	eq
 800af8c:	0080      	lsleq	r0, r0, #2
 800af8e:	3302      	addeq	r3, #2
 800af90:	2800      	cmp	r0, #0
 800af92:	db05      	blt.n	800afa0 <__hi0bits+0x38>
 800af94:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800af98:	f103 0301 	add.w	r3, r3, #1
 800af9c:	bf08      	it	eq
 800af9e:	2320      	moveq	r3, #32
 800afa0:	4618      	mov	r0, r3
 800afa2:	4770      	bx	lr
 800afa4:	2300      	movs	r3, #0
 800afa6:	e7e4      	b.n	800af72 <__hi0bits+0xa>

0800afa8 <__lo0bits>:
 800afa8:	6803      	ldr	r3, [r0, #0]
 800afaa:	f013 0207 	ands.w	r2, r3, #7
 800afae:	4601      	mov	r1, r0
 800afb0:	d00b      	beq.n	800afca <__lo0bits+0x22>
 800afb2:	07da      	lsls	r2, r3, #31
 800afb4:	d424      	bmi.n	800b000 <__lo0bits+0x58>
 800afb6:	0798      	lsls	r0, r3, #30
 800afb8:	bf49      	itett	mi
 800afba:	085b      	lsrmi	r3, r3, #1
 800afbc:	089b      	lsrpl	r3, r3, #2
 800afbe:	2001      	movmi	r0, #1
 800afc0:	600b      	strmi	r3, [r1, #0]
 800afc2:	bf5c      	itt	pl
 800afc4:	600b      	strpl	r3, [r1, #0]
 800afc6:	2002      	movpl	r0, #2
 800afc8:	4770      	bx	lr
 800afca:	b298      	uxth	r0, r3
 800afcc:	b9b0      	cbnz	r0, 800affc <__lo0bits+0x54>
 800afce:	0c1b      	lsrs	r3, r3, #16
 800afd0:	2010      	movs	r0, #16
 800afd2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800afd6:	bf04      	itt	eq
 800afd8:	0a1b      	lsreq	r3, r3, #8
 800afda:	3008      	addeq	r0, #8
 800afdc:	071a      	lsls	r2, r3, #28
 800afde:	bf04      	itt	eq
 800afe0:	091b      	lsreq	r3, r3, #4
 800afe2:	3004      	addeq	r0, #4
 800afe4:	079a      	lsls	r2, r3, #30
 800afe6:	bf04      	itt	eq
 800afe8:	089b      	lsreq	r3, r3, #2
 800afea:	3002      	addeq	r0, #2
 800afec:	07da      	lsls	r2, r3, #31
 800afee:	d403      	bmi.n	800aff8 <__lo0bits+0x50>
 800aff0:	085b      	lsrs	r3, r3, #1
 800aff2:	f100 0001 	add.w	r0, r0, #1
 800aff6:	d005      	beq.n	800b004 <__lo0bits+0x5c>
 800aff8:	600b      	str	r3, [r1, #0]
 800affa:	4770      	bx	lr
 800affc:	4610      	mov	r0, r2
 800affe:	e7e8      	b.n	800afd2 <__lo0bits+0x2a>
 800b000:	2000      	movs	r0, #0
 800b002:	4770      	bx	lr
 800b004:	2020      	movs	r0, #32
 800b006:	4770      	bx	lr

0800b008 <__i2b>:
 800b008:	b510      	push	{r4, lr}
 800b00a:	460c      	mov	r4, r1
 800b00c:	2101      	movs	r1, #1
 800b00e:	f7ff feff 	bl	800ae10 <_Balloc>
 800b012:	4602      	mov	r2, r0
 800b014:	b928      	cbnz	r0, 800b022 <__i2b+0x1a>
 800b016:	4b05      	ldr	r3, [pc, #20]	; (800b02c <__i2b+0x24>)
 800b018:	4805      	ldr	r0, [pc, #20]	; (800b030 <__i2b+0x28>)
 800b01a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b01e:	f000 fbdf 	bl	800b7e0 <__assert_func>
 800b022:	2301      	movs	r3, #1
 800b024:	6144      	str	r4, [r0, #20]
 800b026:	6103      	str	r3, [r0, #16]
 800b028:	bd10      	pop	{r4, pc}
 800b02a:	bf00      	nop
 800b02c:	0800ccb3 	.word	0x0800ccb3
 800b030:	0800ccc4 	.word	0x0800ccc4

0800b034 <__multiply>:
 800b034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b038:	4614      	mov	r4, r2
 800b03a:	690a      	ldr	r2, [r1, #16]
 800b03c:	6923      	ldr	r3, [r4, #16]
 800b03e:	429a      	cmp	r2, r3
 800b040:	bfb8      	it	lt
 800b042:	460b      	movlt	r3, r1
 800b044:	460d      	mov	r5, r1
 800b046:	bfbc      	itt	lt
 800b048:	4625      	movlt	r5, r4
 800b04a:	461c      	movlt	r4, r3
 800b04c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b050:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b054:	68ab      	ldr	r3, [r5, #8]
 800b056:	6869      	ldr	r1, [r5, #4]
 800b058:	eb0a 0709 	add.w	r7, sl, r9
 800b05c:	42bb      	cmp	r3, r7
 800b05e:	b085      	sub	sp, #20
 800b060:	bfb8      	it	lt
 800b062:	3101      	addlt	r1, #1
 800b064:	f7ff fed4 	bl	800ae10 <_Balloc>
 800b068:	b930      	cbnz	r0, 800b078 <__multiply+0x44>
 800b06a:	4602      	mov	r2, r0
 800b06c:	4b42      	ldr	r3, [pc, #264]	; (800b178 <__multiply+0x144>)
 800b06e:	4843      	ldr	r0, [pc, #268]	; (800b17c <__multiply+0x148>)
 800b070:	f240 115d 	movw	r1, #349	; 0x15d
 800b074:	f000 fbb4 	bl	800b7e0 <__assert_func>
 800b078:	f100 0614 	add.w	r6, r0, #20
 800b07c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b080:	4633      	mov	r3, r6
 800b082:	2200      	movs	r2, #0
 800b084:	4543      	cmp	r3, r8
 800b086:	d31e      	bcc.n	800b0c6 <__multiply+0x92>
 800b088:	f105 0c14 	add.w	ip, r5, #20
 800b08c:	f104 0314 	add.w	r3, r4, #20
 800b090:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b094:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b098:	9202      	str	r2, [sp, #8]
 800b09a:	ebac 0205 	sub.w	r2, ip, r5
 800b09e:	3a15      	subs	r2, #21
 800b0a0:	f022 0203 	bic.w	r2, r2, #3
 800b0a4:	3204      	adds	r2, #4
 800b0a6:	f105 0115 	add.w	r1, r5, #21
 800b0aa:	458c      	cmp	ip, r1
 800b0ac:	bf38      	it	cc
 800b0ae:	2204      	movcc	r2, #4
 800b0b0:	9201      	str	r2, [sp, #4]
 800b0b2:	9a02      	ldr	r2, [sp, #8]
 800b0b4:	9303      	str	r3, [sp, #12]
 800b0b6:	429a      	cmp	r2, r3
 800b0b8:	d808      	bhi.n	800b0cc <__multiply+0x98>
 800b0ba:	2f00      	cmp	r7, #0
 800b0bc:	dc55      	bgt.n	800b16a <__multiply+0x136>
 800b0be:	6107      	str	r7, [r0, #16]
 800b0c0:	b005      	add	sp, #20
 800b0c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0c6:	f843 2b04 	str.w	r2, [r3], #4
 800b0ca:	e7db      	b.n	800b084 <__multiply+0x50>
 800b0cc:	f8b3 a000 	ldrh.w	sl, [r3]
 800b0d0:	f1ba 0f00 	cmp.w	sl, #0
 800b0d4:	d020      	beq.n	800b118 <__multiply+0xe4>
 800b0d6:	f105 0e14 	add.w	lr, r5, #20
 800b0da:	46b1      	mov	r9, r6
 800b0dc:	2200      	movs	r2, #0
 800b0de:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b0e2:	f8d9 b000 	ldr.w	fp, [r9]
 800b0e6:	b2a1      	uxth	r1, r4
 800b0e8:	fa1f fb8b 	uxth.w	fp, fp
 800b0ec:	fb0a b101 	mla	r1, sl, r1, fp
 800b0f0:	4411      	add	r1, r2
 800b0f2:	f8d9 2000 	ldr.w	r2, [r9]
 800b0f6:	0c24      	lsrs	r4, r4, #16
 800b0f8:	0c12      	lsrs	r2, r2, #16
 800b0fa:	fb0a 2404 	mla	r4, sl, r4, r2
 800b0fe:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b102:	b289      	uxth	r1, r1
 800b104:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b108:	45f4      	cmp	ip, lr
 800b10a:	f849 1b04 	str.w	r1, [r9], #4
 800b10e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b112:	d8e4      	bhi.n	800b0de <__multiply+0xaa>
 800b114:	9901      	ldr	r1, [sp, #4]
 800b116:	5072      	str	r2, [r6, r1]
 800b118:	9a03      	ldr	r2, [sp, #12]
 800b11a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b11e:	3304      	adds	r3, #4
 800b120:	f1b9 0f00 	cmp.w	r9, #0
 800b124:	d01f      	beq.n	800b166 <__multiply+0x132>
 800b126:	6834      	ldr	r4, [r6, #0]
 800b128:	f105 0114 	add.w	r1, r5, #20
 800b12c:	46b6      	mov	lr, r6
 800b12e:	f04f 0a00 	mov.w	sl, #0
 800b132:	880a      	ldrh	r2, [r1, #0]
 800b134:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b138:	fb09 b202 	mla	r2, r9, r2, fp
 800b13c:	4492      	add	sl, r2
 800b13e:	b2a4      	uxth	r4, r4
 800b140:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b144:	f84e 4b04 	str.w	r4, [lr], #4
 800b148:	f851 4b04 	ldr.w	r4, [r1], #4
 800b14c:	f8be 2000 	ldrh.w	r2, [lr]
 800b150:	0c24      	lsrs	r4, r4, #16
 800b152:	fb09 2404 	mla	r4, r9, r4, r2
 800b156:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b15a:	458c      	cmp	ip, r1
 800b15c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b160:	d8e7      	bhi.n	800b132 <__multiply+0xfe>
 800b162:	9a01      	ldr	r2, [sp, #4]
 800b164:	50b4      	str	r4, [r6, r2]
 800b166:	3604      	adds	r6, #4
 800b168:	e7a3      	b.n	800b0b2 <__multiply+0x7e>
 800b16a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d1a5      	bne.n	800b0be <__multiply+0x8a>
 800b172:	3f01      	subs	r7, #1
 800b174:	e7a1      	b.n	800b0ba <__multiply+0x86>
 800b176:	bf00      	nop
 800b178:	0800ccb3 	.word	0x0800ccb3
 800b17c:	0800ccc4 	.word	0x0800ccc4

0800b180 <__pow5mult>:
 800b180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b184:	4615      	mov	r5, r2
 800b186:	f012 0203 	ands.w	r2, r2, #3
 800b18a:	4606      	mov	r6, r0
 800b18c:	460f      	mov	r7, r1
 800b18e:	d007      	beq.n	800b1a0 <__pow5mult+0x20>
 800b190:	4c25      	ldr	r4, [pc, #148]	; (800b228 <__pow5mult+0xa8>)
 800b192:	3a01      	subs	r2, #1
 800b194:	2300      	movs	r3, #0
 800b196:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b19a:	f7ff fe9b 	bl	800aed4 <__multadd>
 800b19e:	4607      	mov	r7, r0
 800b1a0:	10ad      	asrs	r5, r5, #2
 800b1a2:	d03d      	beq.n	800b220 <__pow5mult+0xa0>
 800b1a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b1a6:	b97c      	cbnz	r4, 800b1c8 <__pow5mult+0x48>
 800b1a8:	2010      	movs	r0, #16
 800b1aa:	f7fe fa39 	bl	8009620 <malloc>
 800b1ae:	4602      	mov	r2, r0
 800b1b0:	6270      	str	r0, [r6, #36]	; 0x24
 800b1b2:	b928      	cbnz	r0, 800b1c0 <__pow5mult+0x40>
 800b1b4:	4b1d      	ldr	r3, [pc, #116]	; (800b22c <__pow5mult+0xac>)
 800b1b6:	481e      	ldr	r0, [pc, #120]	; (800b230 <__pow5mult+0xb0>)
 800b1b8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b1bc:	f000 fb10 	bl	800b7e0 <__assert_func>
 800b1c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b1c4:	6004      	str	r4, [r0, #0]
 800b1c6:	60c4      	str	r4, [r0, #12]
 800b1c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b1cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b1d0:	b94c      	cbnz	r4, 800b1e6 <__pow5mult+0x66>
 800b1d2:	f240 2171 	movw	r1, #625	; 0x271
 800b1d6:	4630      	mov	r0, r6
 800b1d8:	f7ff ff16 	bl	800b008 <__i2b>
 800b1dc:	2300      	movs	r3, #0
 800b1de:	f8c8 0008 	str.w	r0, [r8, #8]
 800b1e2:	4604      	mov	r4, r0
 800b1e4:	6003      	str	r3, [r0, #0]
 800b1e6:	f04f 0900 	mov.w	r9, #0
 800b1ea:	07eb      	lsls	r3, r5, #31
 800b1ec:	d50a      	bpl.n	800b204 <__pow5mult+0x84>
 800b1ee:	4639      	mov	r1, r7
 800b1f0:	4622      	mov	r2, r4
 800b1f2:	4630      	mov	r0, r6
 800b1f4:	f7ff ff1e 	bl	800b034 <__multiply>
 800b1f8:	4639      	mov	r1, r7
 800b1fa:	4680      	mov	r8, r0
 800b1fc:	4630      	mov	r0, r6
 800b1fe:	f7ff fe47 	bl	800ae90 <_Bfree>
 800b202:	4647      	mov	r7, r8
 800b204:	106d      	asrs	r5, r5, #1
 800b206:	d00b      	beq.n	800b220 <__pow5mult+0xa0>
 800b208:	6820      	ldr	r0, [r4, #0]
 800b20a:	b938      	cbnz	r0, 800b21c <__pow5mult+0x9c>
 800b20c:	4622      	mov	r2, r4
 800b20e:	4621      	mov	r1, r4
 800b210:	4630      	mov	r0, r6
 800b212:	f7ff ff0f 	bl	800b034 <__multiply>
 800b216:	6020      	str	r0, [r4, #0]
 800b218:	f8c0 9000 	str.w	r9, [r0]
 800b21c:	4604      	mov	r4, r0
 800b21e:	e7e4      	b.n	800b1ea <__pow5mult+0x6a>
 800b220:	4638      	mov	r0, r7
 800b222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b226:	bf00      	nop
 800b228:	0800ce18 	.word	0x0800ce18
 800b22c:	0800cc3d 	.word	0x0800cc3d
 800b230:	0800ccc4 	.word	0x0800ccc4

0800b234 <__lshift>:
 800b234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b238:	460c      	mov	r4, r1
 800b23a:	6849      	ldr	r1, [r1, #4]
 800b23c:	6923      	ldr	r3, [r4, #16]
 800b23e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b242:	68a3      	ldr	r3, [r4, #8]
 800b244:	4607      	mov	r7, r0
 800b246:	4691      	mov	r9, r2
 800b248:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b24c:	f108 0601 	add.w	r6, r8, #1
 800b250:	42b3      	cmp	r3, r6
 800b252:	db0b      	blt.n	800b26c <__lshift+0x38>
 800b254:	4638      	mov	r0, r7
 800b256:	f7ff fddb 	bl	800ae10 <_Balloc>
 800b25a:	4605      	mov	r5, r0
 800b25c:	b948      	cbnz	r0, 800b272 <__lshift+0x3e>
 800b25e:	4602      	mov	r2, r0
 800b260:	4b28      	ldr	r3, [pc, #160]	; (800b304 <__lshift+0xd0>)
 800b262:	4829      	ldr	r0, [pc, #164]	; (800b308 <__lshift+0xd4>)
 800b264:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b268:	f000 faba 	bl	800b7e0 <__assert_func>
 800b26c:	3101      	adds	r1, #1
 800b26e:	005b      	lsls	r3, r3, #1
 800b270:	e7ee      	b.n	800b250 <__lshift+0x1c>
 800b272:	2300      	movs	r3, #0
 800b274:	f100 0114 	add.w	r1, r0, #20
 800b278:	f100 0210 	add.w	r2, r0, #16
 800b27c:	4618      	mov	r0, r3
 800b27e:	4553      	cmp	r3, sl
 800b280:	db33      	blt.n	800b2ea <__lshift+0xb6>
 800b282:	6920      	ldr	r0, [r4, #16]
 800b284:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b288:	f104 0314 	add.w	r3, r4, #20
 800b28c:	f019 091f 	ands.w	r9, r9, #31
 800b290:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b294:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b298:	d02b      	beq.n	800b2f2 <__lshift+0xbe>
 800b29a:	f1c9 0e20 	rsb	lr, r9, #32
 800b29e:	468a      	mov	sl, r1
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	6818      	ldr	r0, [r3, #0]
 800b2a4:	fa00 f009 	lsl.w	r0, r0, r9
 800b2a8:	4302      	orrs	r2, r0
 800b2aa:	f84a 2b04 	str.w	r2, [sl], #4
 800b2ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2b2:	459c      	cmp	ip, r3
 800b2b4:	fa22 f20e 	lsr.w	r2, r2, lr
 800b2b8:	d8f3      	bhi.n	800b2a2 <__lshift+0x6e>
 800b2ba:	ebac 0304 	sub.w	r3, ip, r4
 800b2be:	3b15      	subs	r3, #21
 800b2c0:	f023 0303 	bic.w	r3, r3, #3
 800b2c4:	3304      	adds	r3, #4
 800b2c6:	f104 0015 	add.w	r0, r4, #21
 800b2ca:	4584      	cmp	ip, r0
 800b2cc:	bf38      	it	cc
 800b2ce:	2304      	movcc	r3, #4
 800b2d0:	50ca      	str	r2, [r1, r3]
 800b2d2:	b10a      	cbz	r2, 800b2d8 <__lshift+0xa4>
 800b2d4:	f108 0602 	add.w	r6, r8, #2
 800b2d8:	3e01      	subs	r6, #1
 800b2da:	4638      	mov	r0, r7
 800b2dc:	612e      	str	r6, [r5, #16]
 800b2de:	4621      	mov	r1, r4
 800b2e0:	f7ff fdd6 	bl	800ae90 <_Bfree>
 800b2e4:	4628      	mov	r0, r5
 800b2e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2ea:	f842 0f04 	str.w	r0, [r2, #4]!
 800b2ee:	3301      	adds	r3, #1
 800b2f0:	e7c5      	b.n	800b27e <__lshift+0x4a>
 800b2f2:	3904      	subs	r1, #4
 800b2f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2f8:	f841 2f04 	str.w	r2, [r1, #4]!
 800b2fc:	459c      	cmp	ip, r3
 800b2fe:	d8f9      	bhi.n	800b2f4 <__lshift+0xc0>
 800b300:	e7ea      	b.n	800b2d8 <__lshift+0xa4>
 800b302:	bf00      	nop
 800b304:	0800ccb3 	.word	0x0800ccb3
 800b308:	0800ccc4 	.word	0x0800ccc4

0800b30c <__mcmp>:
 800b30c:	b530      	push	{r4, r5, lr}
 800b30e:	6902      	ldr	r2, [r0, #16]
 800b310:	690c      	ldr	r4, [r1, #16]
 800b312:	1b12      	subs	r2, r2, r4
 800b314:	d10e      	bne.n	800b334 <__mcmp+0x28>
 800b316:	f100 0314 	add.w	r3, r0, #20
 800b31a:	3114      	adds	r1, #20
 800b31c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b320:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b324:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b328:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b32c:	42a5      	cmp	r5, r4
 800b32e:	d003      	beq.n	800b338 <__mcmp+0x2c>
 800b330:	d305      	bcc.n	800b33e <__mcmp+0x32>
 800b332:	2201      	movs	r2, #1
 800b334:	4610      	mov	r0, r2
 800b336:	bd30      	pop	{r4, r5, pc}
 800b338:	4283      	cmp	r3, r0
 800b33a:	d3f3      	bcc.n	800b324 <__mcmp+0x18>
 800b33c:	e7fa      	b.n	800b334 <__mcmp+0x28>
 800b33e:	f04f 32ff 	mov.w	r2, #4294967295
 800b342:	e7f7      	b.n	800b334 <__mcmp+0x28>

0800b344 <__mdiff>:
 800b344:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b348:	460c      	mov	r4, r1
 800b34a:	4606      	mov	r6, r0
 800b34c:	4611      	mov	r1, r2
 800b34e:	4620      	mov	r0, r4
 800b350:	4617      	mov	r7, r2
 800b352:	f7ff ffdb 	bl	800b30c <__mcmp>
 800b356:	1e05      	subs	r5, r0, #0
 800b358:	d110      	bne.n	800b37c <__mdiff+0x38>
 800b35a:	4629      	mov	r1, r5
 800b35c:	4630      	mov	r0, r6
 800b35e:	f7ff fd57 	bl	800ae10 <_Balloc>
 800b362:	b930      	cbnz	r0, 800b372 <__mdiff+0x2e>
 800b364:	4b39      	ldr	r3, [pc, #228]	; (800b44c <__mdiff+0x108>)
 800b366:	4602      	mov	r2, r0
 800b368:	f240 2132 	movw	r1, #562	; 0x232
 800b36c:	4838      	ldr	r0, [pc, #224]	; (800b450 <__mdiff+0x10c>)
 800b36e:	f000 fa37 	bl	800b7e0 <__assert_func>
 800b372:	2301      	movs	r3, #1
 800b374:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b378:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b37c:	bfa4      	itt	ge
 800b37e:	463b      	movge	r3, r7
 800b380:	4627      	movge	r7, r4
 800b382:	4630      	mov	r0, r6
 800b384:	6879      	ldr	r1, [r7, #4]
 800b386:	bfa6      	itte	ge
 800b388:	461c      	movge	r4, r3
 800b38a:	2500      	movge	r5, #0
 800b38c:	2501      	movlt	r5, #1
 800b38e:	f7ff fd3f 	bl	800ae10 <_Balloc>
 800b392:	b920      	cbnz	r0, 800b39e <__mdiff+0x5a>
 800b394:	4b2d      	ldr	r3, [pc, #180]	; (800b44c <__mdiff+0x108>)
 800b396:	4602      	mov	r2, r0
 800b398:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b39c:	e7e6      	b.n	800b36c <__mdiff+0x28>
 800b39e:	693e      	ldr	r6, [r7, #16]
 800b3a0:	60c5      	str	r5, [r0, #12]
 800b3a2:	6925      	ldr	r5, [r4, #16]
 800b3a4:	f107 0114 	add.w	r1, r7, #20
 800b3a8:	f104 0914 	add.w	r9, r4, #20
 800b3ac:	f100 0e14 	add.w	lr, r0, #20
 800b3b0:	f107 0210 	add.w	r2, r7, #16
 800b3b4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b3b8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b3bc:	46f2      	mov	sl, lr
 800b3be:	2700      	movs	r7, #0
 800b3c0:	f859 3b04 	ldr.w	r3, [r9], #4
 800b3c4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b3c8:	fa1f f883 	uxth.w	r8, r3
 800b3cc:	fa17 f78b 	uxtah	r7, r7, fp
 800b3d0:	0c1b      	lsrs	r3, r3, #16
 800b3d2:	eba7 0808 	sub.w	r8, r7, r8
 800b3d6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b3da:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b3de:	fa1f f888 	uxth.w	r8, r8
 800b3e2:	141f      	asrs	r7, r3, #16
 800b3e4:	454d      	cmp	r5, r9
 800b3e6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b3ea:	f84a 3b04 	str.w	r3, [sl], #4
 800b3ee:	d8e7      	bhi.n	800b3c0 <__mdiff+0x7c>
 800b3f0:	1b2b      	subs	r3, r5, r4
 800b3f2:	3b15      	subs	r3, #21
 800b3f4:	f023 0303 	bic.w	r3, r3, #3
 800b3f8:	3304      	adds	r3, #4
 800b3fa:	3415      	adds	r4, #21
 800b3fc:	42a5      	cmp	r5, r4
 800b3fe:	bf38      	it	cc
 800b400:	2304      	movcc	r3, #4
 800b402:	4419      	add	r1, r3
 800b404:	4473      	add	r3, lr
 800b406:	469e      	mov	lr, r3
 800b408:	460d      	mov	r5, r1
 800b40a:	4565      	cmp	r5, ip
 800b40c:	d30e      	bcc.n	800b42c <__mdiff+0xe8>
 800b40e:	f10c 0203 	add.w	r2, ip, #3
 800b412:	1a52      	subs	r2, r2, r1
 800b414:	f022 0203 	bic.w	r2, r2, #3
 800b418:	3903      	subs	r1, #3
 800b41a:	458c      	cmp	ip, r1
 800b41c:	bf38      	it	cc
 800b41e:	2200      	movcc	r2, #0
 800b420:	441a      	add	r2, r3
 800b422:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b426:	b17b      	cbz	r3, 800b448 <__mdiff+0x104>
 800b428:	6106      	str	r6, [r0, #16]
 800b42a:	e7a5      	b.n	800b378 <__mdiff+0x34>
 800b42c:	f855 8b04 	ldr.w	r8, [r5], #4
 800b430:	fa17 f488 	uxtah	r4, r7, r8
 800b434:	1422      	asrs	r2, r4, #16
 800b436:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b43a:	b2a4      	uxth	r4, r4
 800b43c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b440:	f84e 4b04 	str.w	r4, [lr], #4
 800b444:	1417      	asrs	r7, r2, #16
 800b446:	e7e0      	b.n	800b40a <__mdiff+0xc6>
 800b448:	3e01      	subs	r6, #1
 800b44a:	e7ea      	b.n	800b422 <__mdiff+0xde>
 800b44c:	0800ccb3 	.word	0x0800ccb3
 800b450:	0800ccc4 	.word	0x0800ccc4

0800b454 <__d2b>:
 800b454:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b458:	4689      	mov	r9, r1
 800b45a:	2101      	movs	r1, #1
 800b45c:	ec57 6b10 	vmov	r6, r7, d0
 800b460:	4690      	mov	r8, r2
 800b462:	f7ff fcd5 	bl	800ae10 <_Balloc>
 800b466:	4604      	mov	r4, r0
 800b468:	b930      	cbnz	r0, 800b478 <__d2b+0x24>
 800b46a:	4602      	mov	r2, r0
 800b46c:	4b25      	ldr	r3, [pc, #148]	; (800b504 <__d2b+0xb0>)
 800b46e:	4826      	ldr	r0, [pc, #152]	; (800b508 <__d2b+0xb4>)
 800b470:	f240 310a 	movw	r1, #778	; 0x30a
 800b474:	f000 f9b4 	bl	800b7e0 <__assert_func>
 800b478:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b47c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b480:	bb35      	cbnz	r5, 800b4d0 <__d2b+0x7c>
 800b482:	2e00      	cmp	r6, #0
 800b484:	9301      	str	r3, [sp, #4]
 800b486:	d028      	beq.n	800b4da <__d2b+0x86>
 800b488:	4668      	mov	r0, sp
 800b48a:	9600      	str	r6, [sp, #0]
 800b48c:	f7ff fd8c 	bl	800afa8 <__lo0bits>
 800b490:	9900      	ldr	r1, [sp, #0]
 800b492:	b300      	cbz	r0, 800b4d6 <__d2b+0x82>
 800b494:	9a01      	ldr	r2, [sp, #4]
 800b496:	f1c0 0320 	rsb	r3, r0, #32
 800b49a:	fa02 f303 	lsl.w	r3, r2, r3
 800b49e:	430b      	orrs	r3, r1
 800b4a0:	40c2      	lsrs	r2, r0
 800b4a2:	6163      	str	r3, [r4, #20]
 800b4a4:	9201      	str	r2, [sp, #4]
 800b4a6:	9b01      	ldr	r3, [sp, #4]
 800b4a8:	61a3      	str	r3, [r4, #24]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	bf14      	ite	ne
 800b4ae:	2202      	movne	r2, #2
 800b4b0:	2201      	moveq	r2, #1
 800b4b2:	6122      	str	r2, [r4, #16]
 800b4b4:	b1d5      	cbz	r5, 800b4ec <__d2b+0x98>
 800b4b6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b4ba:	4405      	add	r5, r0
 800b4bc:	f8c9 5000 	str.w	r5, [r9]
 800b4c0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b4c4:	f8c8 0000 	str.w	r0, [r8]
 800b4c8:	4620      	mov	r0, r4
 800b4ca:	b003      	add	sp, #12
 800b4cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b4d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b4d4:	e7d5      	b.n	800b482 <__d2b+0x2e>
 800b4d6:	6161      	str	r1, [r4, #20]
 800b4d8:	e7e5      	b.n	800b4a6 <__d2b+0x52>
 800b4da:	a801      	add	r0, sp, #4
 800b4dc:	f7ff fd64 	bl	800afa8 <__lo0bits>
 800b4e0:	9b01      	ldr	r3, [sp, #4]
 800b4e2:	6163      	str	r3, [r4, #20]
 800b4e4:	2201      	movs	r2, #1
 800b4e6:	6122      	str	r2, [r4, #16]
 800b4e8:	3020      	adds	r0, #32
 800b4ea:	e7e3      	b.n	800b4b4 <__d2b+0x60>
 800b4ec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b4f0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b4f4:	f8c9 0000 	str.w	r0, [r9]
 800b4f8:	6918      	ldr	r0, [r3, #16]
 800b4fa:	f7ff fd35 	bl	800af68 <__hi0bits>
 800b4fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b502:	e7df      	b.n	800b4c4 <__d2b+0x70>
 800b504:	0800ccb3 	.word	0x0800ccb3
 800b508:	0800ccc4 	.word	0x0800ccc4

0800b50c <_calloc_r>:
 800b50c:	b513      	push	{r0, r1, r4, lr}
 800b50e:	434a      	muls	r2, r1
 800b510:	4611      	mov	r1, r2
 800b512:	9201      	str	r2, [sp, #4]
 800b514:	f7fe f8f2 	bl	80096fc <_malloc_r>
 800b518:	4604      	mov	r4, r0
 800b51a:	b118      	cbz	r0, 800b524 <_calloc_r+0x18>
 800b51c:	9a01      	ldr	r2, [sp, #4]
 800b51e:	2100      	movs	r1, #0
 800b520:	f7fe f894 	bl	800964c <memset>
 800b524:	4620      	mov	r0, r4
 800b526:	b002      	add	sp, #8
 800b528:	bd10      	pop	{r4, pc}

0800b52a <__ssputs_r>:
 800b52a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b52e:	688e      	ldr	r6, [r1, #8]
 800b530:	429e      	cmp	r6, r3
 800b532:	4682      	mov	sl, r0
 800b534:	460c      	mov	r4, r1
 800b536:	4690      	mov	r8, r2
 800b538:	461f      	mov	r7, r3
 800b53a:	d838      	bhi.n	800b5ae <__ssputs_r+0x84>
 800b53c:	898a      	ldrh	r2, [r1, #12]
 800b53e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b542:	d032      	beq.n	800b5aa <__ssputs_r+0x80>
 800b544:	6825      	ldr	r5, [r4, #0]
 800b546:	6909      	ldr	r1, [r1, #16]
 800b548:	eba5 0901 	sub.w	r9, r5, r1
 800b54c:	6965      	ldr	r5, [r4, #20]
 800b54e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b552:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b556:	3301      	adds	r3, #1
 800b558:	444b      	add	r3, r9
 800b55a:	106d      	asrs	r5, r5, #1
 800b55c:	429d      	cmp	r5, r3
 800b55e:	bf38      	it	cc
 800b560:	461d      	movcc	r5, r3
 800b562:	0553      	lsls	r3, r2, #21
 800b564:	d531      	bpl.n	800b5ca <__ssputs_r+0xa0>
 800b566:	4629      	mov	r1, r5
 800b568:	f7fe f8c8 	bl	80096fc <_malloc_r>
 800b56c:	4606      	mov	r6, r0
 800b56e:	b950      	cbnz	r0, 800b586 <__ssputs_r+0x5c>
 800b570:	230c      	movs	r3, #12
 800b572:	f8ca 3000 	str.w	r3, [sl]
 800b576:	89a3      	ldrh	r3, [r4, #12]
 800b578:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b57c:	81a3      	strh	r3, [r4, #12]
 800b57e:	f04f 30ff 	mov.w	r0, #4294967295
 800b582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b586:	6921      	ldr	r1, [r4, #16]
 800b588:	464a      	mov	r2, r9
 800b58a:	f7fe f851 	bl	8009630 <memcpy>
 800b58e:	89a3      	ldrh	r3, [r4, #12]
 800b590:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b598:	81a3      	strh	r3, [r4, #12]
 800b59a:	6126      	str	r6, [r4, #16]
 800b59c:	6165      	str	r5, [r4, #20]
 800b59e:	444e      	add	r6, r9
 800b5a0:	eba5 0509 	sub.w	r5, r5, r9
 800b5a4:	6026      	str	r6, [r4, #0]
 800b5a6:	60a5      	str	r5, [r4, #8]
 800b5a8:	463e      	mov	r6, r7
 800b5aa:	42be      	cmp	r6, r7
 800b5ac:	d900      	bls.n	800b5b0 <__ssputs_r+0x86>
 800b5ae:	463e      	mov	r6, r7
 800b5b0:	4632      	mov	r2, r6
 800b5b2:	6820      	ldr	r0, [r4, #0]
 800b5b4:	4641      	mov	r1, r8
 800b5b6:	f000 f958 	bl	800b86a <memmove>
 800b5ba:	68a3      	ldr	r3, [r4, #8]
 800b5bc:	6822      	ldr	r2, [r4, #0]
 800b5be:	1b9b      	subs	r3, r3, r6
 800b5c0:	4432      	add	r2, r6
 800b5c2:	60a3      	str	r3, [r4, #8]
 800b5c4:	6022      	str	r2, [r4, #0]
 800b5c6:	2000      	movs	r0, #0
 800b5c8:	e7db      	b.n	800b582 <__ssputs_r+0x58>
 800b5ca:	462a      	mov	r2, r5
 800b5cc:	f000 f967 	bl	800b89e <_realloc_r>
 800b5d0:	4606      	mov	r6, r0
 800b5d2:	2800      	cmp	r0, #0
 800b5d4:	d1e1      	bne.n	800b59a <__ssputs_r+0x70>
 800b5d6:	6921      	ldr	r1, [r4, #16]
 800b5d8:	4650      	mov	r0, sl
 800b5da:	f7fe f83f 	bl	800965c <_free_r>
 800b5de:	e7c7      	b.n	800b570 <__ssputs_r+0x46>

0800b5e0 <_svfiprintf_r>:
 800b5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5e4:	4698      	mov	r8, r3
 800b5e6:	898b      	ldrh	r3, [r1, #12]
 800b5e8:	061b      	lsls	r3, r3, #24
 800b5ea:	b09d      	sub	sp, #116	; 0x74
 800b5ec:	4607      	mov	r7, r0
 800b5ee:	460d      	mov	r5, r1
 800b5f0:	4614      	mov	r4, r2
 800b5f2:	d50e      	bpl.n	800b612 <_svfiprintf_r+0x32>
 800b5f4:	690b      	ldr	r3, [r1, #16]
 800b5f6:	b963      	cbnz	r3, 800b612 <_svfiprintf_r+0x32>
 800b5f8:	2140      	movs	r1, #64	; 0x40
 800b5fa:	f7fe f87f 	bl	80096fc <_malloc_r>
 800b5fe:	6028      	str	r0, [r5, #0]
 800b600:	6128      	str	r0, [r5, #16]
 800b602:	b920      	cbnz	r0, 800b60e <_svfiprintf_r+0x2e>
 800b604:	230c      	movs	r3, #12
 800b606:	603b      	str	r3, [r7, #0]
 800b608:	f04f 30ff 	mov.w	r0, #4294967295
 800b60c:	e0d1      	b.n	800b7b2 <_svfiprintf_r+0x1d2>
 800b60e:	2340      	movs	r3, #64	; 0x40
 800b610:	616b      	str	r3, [r5, #20]
 800b612:	2300      	movs	r3, #0
 800b614:	9309      	str	r3, [sp, #36]	; 0x24
 800b616:	2320      	movs	r3, #32
 800b618:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b61c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b620:	2330      	movs	r3, #48	; 0x30
 800b622:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b7cc <_svfiprintf_r+0x1ec>
 800b626:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b62a:	f04f 0901 	mov.w	r9, #1
 800b62e:	4623      	mov	r3, r4
 800b630:	469a      	mov	sl, r3
 800b632:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b636:	b10a      	cbz	r2, 800b63c <_svfiprintf_r+0x5c>
 800b638:	2a25      	cmp	r2, #37	; 0x25
 800b63a:	d1f9      	bne.n	800b630 <_svfiprintf_r+0x50>
 800b63c:	ebba 0b04 	subs.w	fp, sl, r4
 800b640:	d00b      	beq.n	800b65a <_svfiprintf_r+0x7a>
 800b642:	465b      	mov	r3, fp
 800b644:	4622      	mov	r2, r4
 800b646:	4629      	mov	r1, r5
 800b648:	4638      	mov	r0, r7
 800b64a:	f7ff ff6e 	bl	800b52a <__ssputs_r>
 800b64e:	3001      	adds	r0, #1
 800b650:	f000 80aa 	beq.w	800b7a8 <_svfiprintf_r+0x1c8>
 800b654:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b656:	445a      	add	r2, fp
 800b658:	9209      	str	r2, [sp, #36]	; 0x24
 800b65a:	f89a 3000 	ldrb.w	r3, [sl]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	f000 80a2 	beq.w	800b7a8 <_svfiprintf_r+0x1c8>
 800b664:	2300      	movs	r3, #0
 800b666:	f04f 32ff 	mov.w	r2, #4294967295
 800b66a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b66e:	f10a 0a01 	add.w	sl, sl, #1
 800b672:	9304      	str	r3, [sp, #16]
 800b674:	9307      	str	r3, [sp, #28]
 800b676:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b67a:	931a      	str	r3, [sp, #104]	; 0x68
 800b67c:	4654      	mov	r4, sl
 800b67e:	2205      	movs	r2, #5
 800b680:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b684:	4851      	ldr	r0, [pc, #324]	; (800b7cc <_svfiprintf_r+0x1ec>)
 800b686:	f7f4 fd83 	bl	8000190 <memchr>
 800b68a:	9a04      	ldr	r2, [sp, #16]
 800b68c:	b9d8      	cbnz	r0, 800b6c6 <_svfiprintf_r+0xe6>
 800b68e:	06d0      	lsls	r0, r2, #27
 800b690:	bf44      	itt	mi
 800b692:	2320      	movmi	r3, #32
 800b694:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b698:	0711      	lsls	r1, r2, #28
 800b69a:	bf44      	itt	mi
 800b69c:	232b      	movmi	r3, #43	; 0x2b
 800b69e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6a2:	f89a 3000 	ldrb.w	r3, [sl]
 800b6a6:	2b2a      	cmp	r3, #42	; 0x2a
 800b6a8:	d015      	beq.n	800b6d6 <_svfiprintf_r+0xf6>
 800b6aa:	9a07      	ldr	r2, [sp, #28]
 800b6ac:	4654      	mov	r4, sl
 800b6ae:	2000      	movs	r0, #0
 800b6b0:	f04f 0c0a 	mov.w	ip, #10
 800b6b4:	4621      	mov	r1, r4
 800b6b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b6ba:	3b30      	subs	r3, #48	; 0x30
 800b6bc:	2b09      	cmp	r3, #9
 800b6be:	d94e      	bls.n	800b75e <_svfiprintf_r+0x17e>
 800b6c0:	b1b0      	cbz	r0, 800b6f0 <_svfiprintf_r+0x110>
 800b6c2:	9207      	str	r2, [sp, #28]
 800b6c4:	e014      	b.n	800b6f0 <_svfiprintf_r+0x110>
 800b6c6:	eba0 0308 	sub.w	r3, r0, r8
 800b6ca:	fa09 f303 	lsl.w	r3, r9, r3
 800b6ce:	4313      	orrs	r3, r2
 800b6d0:	9304      	str	r3, [sp, #16]
 800b6d2:	46a2      	mov	sl, r4
 800b6d4:	e7d2      	b.n	800b67c <_svfiprintf_r+0x9c>
 800b6d6:	9b03      	ldr	r3, [sp, #12]
 800b6d8:	1d19      	adds	r1, r3, #4
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	9103      	str	r1, [sp, #12]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	bfbb      	ittet	lt
 800b6e2:	425b      	neglt	r3, r3
 800b6e4:	f042 0202 	orrlt.w	r2, r2, #2
 800b6e8:	9307      	strge	r3, [sp, #28]
 800b6ea:	9307      	strlt	r3, [sp, #28]
 800b6ec:	bfb8      	it	lt
 800b6ee:	9204      	strlt	r2, [sp, #16]
 800b6f0:	7823      	ldrb	r3, [r4, #0]
 800b6f2:	2b2e      	cmp	r3, #46	; 0x2e
 800b6f4:	d10c      	bne.n	800b710 <_svfiprintf_r+0x130>
 800b6f6:	7863      	ldrb	r3, [r4, #1]
 800b6f8:	2b2a      	cmp	r3, #42	; 0x2a
 800b6fa:	d135      	bne.n	800b768 <_svfiprintf_r+0x188>
 800b6fc:	9b03      	ldr	r3, [sp, #12]
 800b6fe:	1d1a      	adds	r2, r3, #4
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	9203      	str	r2, [sp, #12]
 800b704:	2b00      	cmp	r3, #0
 800b706:	bfb8      	it	lt
 800b708:	f04f 33ff 	movlt.w	r3, #4294967295
 800b70c:	3402      	adds	r4, #2
 800b70e:	9305      	str	r3, [sp, #20]
 800b710:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b7dc <_svfiprintf_r+0x1fc>
 800b714:	7821      	ldrb	r1, [r4, #0]
 800b716:	2203      	movs	r2, #3
 800b718:	4650      	mov	r0, sl
 800b71a:	f7f4 fd39 	bl	8000190 <memchr>
 800b71e:	b140      	cbz	r0, 800b732 <_svfiprintf_r+0x152>
 800b720:	2340      	movs	r3, #64	; 0x40
 800b722:	eba0 000a 	sub.w	r0, r0, sl
 800b726:	fa03 f000 	lsl.w	r0, r3, r0
 800b72a:	9b04      	ldr	r3, [sp, #16]
 800b72c:	4303      	orrs	r3, r0
 800b72e:	3401      	adds	r4, #1
 800b730:	9304      	str	r3, [sp, #16]
 800b732:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b736:	4826      	ldr	r0, [pc, #152]	; (800b7d0 <_svfiprintf_r+0x1f0>)
 800b738:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b73c:	2206      	movs	r2, #6
 800b73e:	f7f4 fd27 	bl	8000190 <memchr>
 800b742:	2800      	cmp	r0, #0
 800b744:	d038      	beq.n	800b7b8 <_svfiprintf_r+0x1d8>
 800b746:	4b23      	ldr	r3, [pc, #140]	; (800b7d4 <_svfiprintf_r+0x1f4>)
 800b748:	bb1b      	cbnz	r3, 800b792 <_svfiprintf_r+0x1b2>
 800b74a:	9b03      	ldr	r3, [sp, #12]
 800b74c:	3307      	adds	r3, #7
 800b74e:	f023 0307 	bic.w	r3, r3, #7
 800b752:	3308      	adds	r3, #8
 800b754:	9303      	str	r3, [sp, #12]
 800b756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b758:	4433      	add	r3, r6
 800b75a:	9309      	str	r3, [sp, #36]	; 0x24
 800b75c:	e767      	b.n	800b62e <_svfiprintf_r+0x4e>
 800b75e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b762:	460c      	mov	r4, r1
 800b764:	2001      	movs	r0, #1
 800b766:	e7a5      	b.n	800b6b4 <_svfiprintf_r+0xd4>
 800b768:	2300      	movs	r3, #0
 800b76a:	3401      	adds	r4, #1
 800b76c:	9305      	str	r3, [sp, #20]
 800b76e:	4619      	mov	r1, r3
 800b770:	f04f 0c0a 	mov.w	ip, #10
 800b774:	4620      	mov	r0, r4
 800b776:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b77a:	3a30      	subs	r2, #48	; 0x30
 800b77c:	2a09      	cmp	r2, #9
 800b77e:	d903      	bls.n	800b788 <_svfiprintf_r+0x1a8>
 800b780:	2b00      	cmp	r3, #0
 800b782:	d0c5      	beq.n	800b710 <_svfiprintf_r+0x130>
 800b784:	9105      	str	r1, [sp, #20]
 800b786:	e7c3      	b.n	800b710 <_svfiprintf_r+0x130>
 800b788:	fb0c 2101 	mla	r1, ip, r1, r2
 800b78c:	4604      	mov	r4, r0
 800b78e:	2301      	movs	r3, #1
 800b790:	e7f0      	b.n	800b774 <_svfiprintf_r+0x194>
 800b792:	ab03      	add	r3, sp, #12
 800b794:	9300      	str	r3, [sp, #0]
 800b796:	462a      	mov	r2, r5
 800b798:	4b0f      	ldr	r3, [pc, #60]	; (800b7d8 <_svfiprintf_r+0x1f8>)
 800b79a:	a904      	add	r1, sp, #16
 800b79c:	4638      	mov	r0, r7
 800b79e:	f7fe f8a7 	bl	80098f0 <_printf_float>
 800b7a2:	1c42      	adds	r2, r0, #1
 800b7a4:	4606      	mov	r6, r0
 800b7a6:	d1d6      	bne.n	800b756 <_svfiprintf_r+0x176>
 800b7a8:	89ab      	ldrh	r3, [r5, #12]
 800b7aa:	065b      	lsls	r3, r3, #25
 800b7ac:	f53f af2c 	bmi.w	800b608 <_svfiprintf_r+0x28>
 800b7b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b7b2:	b01d      	add	sp, #116	; 0x74
 800b7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7b8:	ab03      	add	r3, sp, #12
 800b7ba:	9300      	str	r3, [sp, #0]
 800b7bc:	462a      	mov	r2, r5
 800b7be:	4b06      	ldr	r3, [pc, #24]	; (800b7d8 <_svfiprintf_r+0x1f8>)
 800b7c0:	a904      	add	r1, sp, #16
 800b7c2:	4638      	mov	r0, r7
 800b7c4:	f7fe fb38 	bl	8009e38 <_printf_i>
 800b7c8:	e7eb      	b.n	800b7a2 <_svfiprintf_r+0x1c2>
 800b7ca:	bf00      	nop
 800b7cc:	0800ce24 	.word	0x0800ce24
 800b7d0:	0800ce2e 	.word	0x0800ce2e
 800b7d4:	080098f1 	.word	0x080098f1
 800b7d8:	0800b52b 	.word	0x0800b52b
 800b7dc:	0800ce2a 	.word	0x0800ce2a

0800b7e0 <__assert_func>:
 800b7e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b7e2:	4614      	mov	r4, r2
 800b7e4:	461a      	mov	r2, r3
 800b7e6:	4b09      	ldr	r3, [pc, #36]	; (800b80c <__assert_func+0x2c>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	4605      	mov	r5, r0
 800b7ec:	68d8      	ldr	r0, [r3, #12]
 800b7ee:	b14c      	cbz	r4, 800b804 <__assert_func+0x24>
 800b7f0:	4b07      	ldr	r3, [pc, #28]	; (800b810 <__assert_func+0x30>)
 800b7f2:	9100      	str	r1, [sp, #0]
 800b7f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b7f8:	4906      	ldr	r1, [pc, #24]	; (800b814 <__assert_func+0x34>)
 800b7fa:	462b      	mov	r3, r5
 800b7fc:	f000 f80e 	bl	800b81c <fiprintf>
 800b800:	f000 fa9a 	bl	800bd38 <abort>
 800b804:	4b04      	ldr	r3, [pc, #16]	; (800b818 <__assert_func+0x38>)
 800b806:	461c      	mov	r4, r3
 800b808:	e7f3      	b.n	800b7f2 <__assert_func+0x12>
 800b80a:	bf00      	nop
 800b80c:	20000010 	.word	0x20000010
 800b810:	0800ce35 	.word	0x0800ce35
 800b814:	0800ce42 	.word	0x0800ce42
 800b818:	0800ce70 	.word	0x0800ce70

0800b81c <fiprintf>:
 800b81c:	b40e      	push	{r1, r2, r3}
 800b81e:	b503      	push	{r0, r1, lr}
 800b820:	4601      	mov	r1, r0
 800b822:	ab03      	add	r3, sp, #12
 800b824:	4805      	ldr	r0, [pc, #20]	; (800b83c <fiprintf+0x20>)
 800b826:	f853 2b04 	ldr.w	r2, [r3], #4
 800b82a:	6800      	ldr	r0, [r0, #0]
 800b82c:	9301      	str	r3, [sp, #4]
 800b82e:	f000 f885 	bl	800b93c <_vfiprintf_r>
 800b832:	b002      	add	sp, #8
 800b834:	f85d eb04 	ldr.w	lr, [sp], #4
 800b838:	b003      	add	sp, #12
 800b83a:	4770      	bx	lr
 800b83c:	20000010 	.word	0x20000010

0800b840 <__retarget_lock_init_recursive>:
 800b840:	4770      	bx	lr

0800b842 <__retarget_lock_acquire_recursive>:
 800b842:	4770      	bx	lr

0800b844 <__retarget_lock_release_recursive>:
 800b844:	4770      	bx	lr

0800b846 <__ascii_mbtowc>:
 800b846:	b082      	sub	sp, #8
 800b848:	b901      	cbnz	r1, 800b84c <__ascii_mbtowc+0x6>
 800b84a:	a901      	add	r1, sp, #4
 800b84c:	b142      	cbz	r2, 800b860 <__ascii_mbtowc+0x1a>
 800b84e:	b14b      	cbz	r3, 800b864 <__ascii_mbtowc+0x1e>
 800b850:	7813      	ldrb	r3, [r2, #0]
 800b852:	600b      	str	r3, [r1, #0]
 800b854:	7812      	ldrb	r2, [r2, #0]
 800b856:	1e10      	subs	r0, r2, #0
 800b858:	bf18      	it	ne
 800b85a:	2001      	movne	r0, #1
 800b85c:	b002      	add	sp, #8
 800b85e:	4770      	bx	lr
 800b860:	4610      	mov	r0, r2
 800b862:	e7fb      	b.n	800b85c <__ascii_mbtowc+0x16>
 800b864:	f06f 0001 	mvn.w	r0, #1
 800b868:	e7f8      	b.n	800b85c <__ascii_mbtowc+0x16>

0800b86a <memmove>:
 800b86a:	4288      	cmp	r0, r1
 800b86c:	b510      	push	{r4, lr}
 800b86e:	eb01 0402 	add.w	r4, r1, r2
 800b872:	d902      	bls.n	800b87a <memmove+0x10>
 800b874:	4284      	cmp	r4, r0
 800b876:	4623      	mov	r3, r4
 800b878:	d807      	bhi.n	800b88a <memmove+0x20>
 800b87a:	1e43      	subs	r3, r0, #1
 800b87c:	42a1      	cmp	r1, r4
 800b87e:	d008      	beq.n	800b892 <memmove+0x28>
 800b880:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b884:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b888:	e7f8      	b.n	800b87c <memmove+0x12>
 800b88a:	4402      	add	r2, r0
 800b88c:	4601      	mov	r1, r0
 800b88e:	428a      	cmp	r2, r1
 800b890:	d100      	bne.n	800b894 <memmove+0x2a>
 800b892:	bd10      	pop	{r4, pc}
 800b894:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b898:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b89c:	e7f7      	b.n	800b88e <memmove+0x24>

0800b89e <_realloc_r>:
 800b89e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8a0:	4607      	mov	r7, r0
 800b8a2:	4614      	mov	r4, r2
 800b8a4:	460e      	mov	r6, r1
 800b8a6:	b921      	cbnz	r1, 800b8b2 <_realloc_r+0x14>
 800b8a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b8ac:	4611      	mov	r1, r2
 800b8ae:	f7fd bf25 	b.w	80096fc <_malloc_r>
 800b8b2:	b922      	cbnz	r2, 800b8be <_realloc_r+0x20>
 800b8b4:	f7fd fed2 	bl	800965c <_free_r>
 800b8b8:	4625      	mov	r5, r4
 800b8ba:	4628      	mov	r0, r5
 800b8bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8be:	f000 fc5f 	bl	800c180 <_malloc_usable_size_r>
 800b8c2:	42a0      	cmp	r0, r4
 800b8c4:	d20f      	bcs.n	800b8e6 <_realloc_r+0x48>
 800b8c6:	4621      	mov	r1, r4
 800b8c8:	4638      	mov	r0, r7
 800b8ca:	f7fd ff17 	bl	80096fc <_malloc_r>
 800b8ce:	4605      	mov	r5, r0
 800b8d0:	2800      	cmp	r0, #0
 800b8d2:	d0f2      	beq.n	800b8ba <_realloc_r+0x1c>
 800b8d4:	4631      	mov	r1, r6
 800b8d6:	4622      	mov	r2, r4
 800b8d8:	f7fd feaa 	bl	8009630 <memcpy>
 800b8dc:	4631      	mov	r1, r6
 800b8de:	4638      	mov	r0, r7
 800b8e0:	f7fd febc 	bl	800965c <_free_r>
 800b8e4:	e7e9      	b.n	800b8ba <_realloc_r+0x1c>
 800b8e6:	4635      	mov	r5, r6
 800b8e8:	e7e7      	b.n	800b8ba <_realloc_r+0x1c>

0800b8ea <__sfputc_r>:
 800b8ea:	6893      	ldr	r3, [r2, #8]
 800b8ec:	3b01      	subs	r3, #1
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	b410      	push	{r4}
 800b8f2:	6093      	str	r3, [r2, #8]
 800b8f4:	da08      	bge.n	800b908 <__sfputc_r+0x1e>
 800b8f6:	6994      	ldr	r4, [r2, #24]
 800b8f8:	42a3      	cmp	r3, r4
 800b8fa:	db01      	blt.n	800b900 <__sfputc_r+0x16>
 800b8fc:	290a      	cmp	r1, #10
 800b8fe:	d103      	bne.n	800b908 <__sfputc_r+0x1e>
 800b900:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b904:	f000 b94a 	b.w	800bb9c <__swbuf_r>
 800b908:	6813      	ldr	r3, [r2, #0]
 800b90a:	1c58      	adds	r0, r3, #1
 800b90c:	6010      	str	r0, [r2, #0]
 800b90e:	7019      	strb	r1, [r3, #0]
 800b910:	4608      	mov	r0, r1
 800b912:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b916:	4770      	bx	lr

0800b918 <__sfputs_r>:
 800b918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b91a:	4606      	mov	r6, r0
 800b91c:	460f      	mov	r7, r1
 800b91e:	4614      	mov	r4, r2
 800b920:	18d5      	adds	r5, r2, r3
 800b922:	42ac      	cmp	r4, r5
 800b924:	d101      	bne.n	800b92a <__sfputs_r+0x12>
 800b926:	2000      	movs	r0, #0
 800b928:	e007      	b.n	800b93a <__sfputs_r+0x22>
 800b92a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b92e:	463a      	mov	r2, r7
 800b930:	4630      	mov	r0, r6
 800b932:	f7ff ffda 	bl	800b8ea <__sfputc_r>
 800b936:	1c43      	adds	r3, r0, #1
 800b938:	d1f3      	bne.n	800b922 <__sfputs_r+0xa>
 800b93a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b93c <_vfiprintf_r>:
 800b93c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b940:	460d      	mov	r5, r1
 800b942:	b09d      	sub	sp, #116	; 0x74
 800b944:	4614      	mov	r4, r2
 800b946:	4698      	mov	r8, r3
 800b948:	4606      	mov	r6, r0
 800b94a:	b118      	cbz	r0, 800b954 <_vfiprintf_r+0x18>
 800b94c:	6983      	ldr	r3, [r0, #24]
 800b94e:	b90b      	cbnz	r3, 800b954 <_vfiprintf_r+0x18>
 800b950:	f000 fb14 	bl	800bf7c <__sinit>
 800b954:	4b89      	ldr	r3, [pc, #548]	; (800bb7c <_vfiprintf_r+0x240>)
 800b956:	429d      	cmp	r5, r3
 800b958:	d11b      	bne.n	800b992 <_vfiprintf_r+0x56>
 800b95a:	6875      	ldr	r5, [r6, #4]
 800b95c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b95e:	07d9      	lsls	r1, r3, #31
 800b960:	d405      	bmi.n	800b96e <_vfiprintf_r+0x32>
 800b962:	89ab      	ldrh	r3, [r5, #12]
 800b964:	059a      	lsls	r2, r3, #22
 800b966:	d402      	bmi.n	800b96e <_vfiprintf_r+0x32>
 800b968:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b96a:	f7ff ff6a 	bl	800b842 <__retarget_lock_acquire_recursive>
 800b96e:	89ab      	ldrh	r3, [r5, #12]
 800b970:	071b      	lsls	r3, r3, #28
 800b972:	d501      	bpl.n	800b978 <_vfiprintf_r+0x3c>
 800b974:	692b      	ldr	r3, [r5, #16]
 800b976:	b9eb      	cbnz	r3, 800b9b4 <_vfiprintf_r+0x78>
 800b978:	4629      	mov	r1, r5
 800b97a:	4630      	mov	r0, r6
 800b97c:	f000 f96e 	bl	800bc5c <__swsetup_r>
 800b980:	b1c0      	cbz	r0, 800b9b4 <_vfiprintf_r+0x78>
 800b982:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b984:	07dc      	lsls	r4, r3, #31
 800b986:	d50e      	bpl.n	800b9a6 <_vfiprintf_r+0x6a>
 800b988:	f04f 30ff 	mov.w	r0, #4294967295
 800b98c:	b01d      	add	sp, #116	; 0x74
 800b98e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b992:	4b7b      	ldr	r3, [pc, #492]	; (800bb80 <_vfiprintf_r+0x244>)
 800b994:	429d      	cmp	r5, r3
 800b996:	d101      	bne.n	800b99c <_vfiprintf_r+0x60>
 800b998:	68b5      	ldr	r5, [r6, #8]
 800b99a:	e7df      	b.n	800b95c <_vfiprintf_r+0x20>
 800b99c:	4b79      	ldr	r3, [pc, #484]	; (800bb84 <_vfiprintf_r+0x248>)
 800b99e:	429d      	cmp	r5, r3
 800b9a0:	bf08      	it	eq
 800b9a2:	68f5      	ldreq	r5, [r6, #12]
 800b9a4:	e7da      	b.n	800b95c <_vfiprintf_r+0x20>
 800b9a6:	89ab      	ldrh	r3, [r5, #12]
 800b9a8:	0598      	lsls	r0, r3, #22
 800b9aa:	d4ed      	bmi.n	800b988 <_vfiprintf_r+0x4c>
 800b9ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b9ae:	f7ff ff49 	bl	800b844 <__retarget_lock_release_recursive>
 800b9b2:	e7e9      	b.n	800b988 <_vfiprintf_r+0x4c>
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	9309      	str	r3, [sp, #36]	; 0x24
 800b9b8:	2320      	movs	r3, #32
 800b9ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b9be:	f8cd 800c 	str.w	r8, [sp, #12]
 800b9c2:	2330      	movs	r3, #48	; 0x30
 800b9c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bb88 <_vfiprintf_r+0x24c>
 800b9c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b9cc:	f04f 0901 	mov.w	r9, #1
 800b9d0:	4623      	mov	r3, r4
 800b9d2:	469a      	mov	sl, r3
 800b9d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9d8:	b10a      	cbz	r2, 800b9de <_vfiprintf_r+0xa2>
 800b9da:	2a25      	cmp	r2, #37	; 0x25
 800b9dc:	d1f9      	bne.n	800b9d2 <_vfiprintf_r+0x96>
 800b9de:	ebba 0b04 	subs.w	fp, sl, r4
 800b9e2:	d00b      	beq.n	800b9fc <_vfiprintf_r+0xc0>
 800b9e4:	465b      	mov	r3, fp
 800b9e6:	4622      	mov	r2, r4
 800b9e8:	4629      	mov	r1, r5
 800b9ea:	4630      	mov	r0, r6
 800b9ec:	f7ff ff94 	bl	800b918 <__sfputs_r>
 800b9f0:	3001      	adds	r0, #1
 800b9f2:	f000 80aa 	beq.w	800bb4a <_vfiprintf_r+0x20e>
 800b9f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9f8:	445a      	add	r2, fp
 800b9fa:	9209      	str	r2, [sp, #36]	; 0x24
 800b9fc:	f89a 3000 	ldrb.w	r3, [sl]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	f000 80a2 	beq.w	800bb4a <_vfiprintf_r+0x20e>
 800ba06:	2300      	movs	r3, #0
 800ba08:	f04f 32ff 	mov.w	r2, #4294967295
 800ba0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba10:	f10a 0a01 	add.w	sl, sl, #1
 800ba14:	9304      	str	r3, [sp, #16]
 800ba16:	9307      	str	r3, [sp, #28]
 800ba18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba1c:	931a      	str	r3, [sp, #104]	; 0x68
 800ba1e:	4654      	mov	r4, sl
 800ba20:	2205      	movs	r2, #5
 800ba22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba26:	4858      	ldr	r0, [pc, #352]	; (800bb88 <_vfiprintf_r+0x24c>)
 800ba28:	f7f4 fbb2 	bl	8000190 <memchr>
 800ba2c:	9a04      	ldr	r2, [sp, #16]
 800ba2e:	b9d8      	cbnz	r0, 800ba68 <_vfiprintf_r+0x12c>
 800ba30:	06d1      	lsls	r1, r2, #27
 800ba32:	bf44      	itt	mi
 800ba34:	2320      	movmi	r3, #32
 800ba36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba3a:	0713      	lsls	r3, r2, #28
 800ba3c:	bf44      	itt	mi
 800ba3e:	232b      	movmi	r3, #43	; 0x2b
 800ba40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba44:	f89a 3000 	ldrb.w	r3, [sl]
 800ba48:	2b2a      	cmp	r3, #42	; 0x2a
 800ba4a:	d015      	beq.n	800ba78 <_vfiprintf_r+0x13c>
 800ba4c:	9a07      	ldr	r2, [sp, #28]
 800ba4e:	4654      	mov	r4, sl
 800ba50:	2000      	movs	r0, #0
 800ba52:	f04f 0c0a 	mov.w	ip, #10
 800ba56:	4621      	mov	r1, r4
 800ba58:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba5c:	3b30      	subs	r3, #48	; 0x30
 800ba5e:	2b09      	cmp	r3, #9
 800ba60:	d94e      	bls.n	800bb00 <_vfiprintf_r+0x1c4>
 800ba62:	b1b0      	cbz	r0, 800ba92 <_vfiprintf_r+0x156>
 800ba64:	9207      	str	r2, [sp, #28]
 800ba66:	e014      	b.n	800ba92 <_vfiprintf_r+0x156>
 800ba68:	eba0 0308 	sub.w	r3, r0, r8
 800ba6c:	fa09 f303 	lsl.w	r3, r9, r3
 800ba70:	4313      	orrs	r3, r2
 800ba72:	9304      	str	r3, [sp, #16]
 800ba74:	46a2      	mov	sl, r4
 800ba76:	e7d2      	b.n	800ba1e <_vfiprintf_r+0xe2>
 800ba78:	9b03      	ldr	r3, [sp, #12]
 800ba7a:	1d19      	adds	r1, r3, #4
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	9103      	str	r1, [sp, #12]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	bfbb      	ittet	lt
 800ba84:	425b      	neglt	r3, r3
 800ba86:	f042 0202 	orrlt.w	r2, r2, #2
 800ba8a:	9307      	strge	r3, [sp, #28]
 800ba8c:	9307      	strlt	r3, [sp, #28]
 800ba8e:	bfb8      	it	lt
 800ba90:	9204      	strlt	r2, [sp, #16]
 800ba92:	7823      	ldrb	r3, [r4, #0]
 800ba94:	2b2e      	cmp	r3, #46	; 0x2e
 800ba96:	d10c      	bne.n	800bab2 <_vfiprintf_r+0x176>
 800ba98:	7863      	ldrb	r3, [r4, #1]
 800ba9a:	2b2a      	cmp	r3, #42	; 0x2a
 800ba9c:	d135      	bne.n	800bb0a <_vfiprintf_r+0x1ce>
 800ba9e:	9b03      	ldr	r3, [sp, #12]
 800baa0:	1d1a      	adds	r2, r3, #4
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	9203      	str	r2, [sp, #12]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	bfb8      	it	lt
 800baaa:	f04f 33ff 	movlt.w	r3, #4294967295
 800baae:	3402      	adds	r4, #2
 800bab0:	9305      	str	r3, [sp, #20]
 800bab2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bb98 <_vfiprintf_r+0x25c>
 800bab6:	7821      	ldrb	r1, [r4, #0]
 800bab8:	2203      	movs	r2, #3
 800baba:	4650      	mov	r0, sl
 800babc:	f7f4 fb68 	bl	8000190 <memchr>
 800bac0:	b140      	cbz	r0, 800bad4 <_vfiprintf_r+0x198>
 800bac2:	2340      	movs	r3, #64	; 0x40
 800bac4:	eba0 000a 	sub.w	r0, r0, sl
 800bac8:	fa03 f000 	lsl.w	r0, r3, r0
 800bacc:	9b04      	ldr	r3, [sp, #16]
 800bace:	4303      	orrs	r3, r0
 800bad0:	3401      	adds	r4, #1
 800bad2:	9304      	str	r3, [sp, #16]
 800bad4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bad8:	482c      	ldr	r0, [pc, #176]	; (800bb8c <_vfiprintf_r+0x250>)
 800bada:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bade:	2206      	movs	r2, #6
 800bae0:	f7f4 fb56 	bl	8000190 <memchr>
 800bae4:	2800      	cmp	r0, #0
 800bae6:	d03f      	beq.n	800bb68 <_vfiprintf_r+0x22c>
 800bae8:	4b29      	ldr	r3, [pc, #164]	; (800bb90 <_vfiprintf_r+0x254>)
 800baea:	bb1b      	cbnz	r3, 800bb34 <_vfiprintf_r+0x1f8>
 800baec:	9b03      	ldr	r3, [sp, #12]
 800baee:	3307      	adds	r3, #7
 800baf0:	f023 0307 	bic.w	r3, r3, #7
 800baf4:	3308      	adds	r3, #8
 800baf6:	9303      	str	r3, [sp, #12]
 800baf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bafa:	443b      	add	r3, r7
 800bafc:	9309      	str	r3, [sp, #36]	; 0x24
 800bafe:	e767      	b.n	800b9d0 <_vfiprintf_r+0x94>
 800bb00:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb04:	460c      	mov	r4, r1
 800bb06:	2001      	movs	r0, #1
 800bb08:	e7a5      	b.n	800ba56 <_vfiprintf_r+0x11a>
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	3401      	adds	r4, #1
 800bb0e:	9305      	str	r3, [sp, #20]
 800bb10:	4619      	mov	r1, r3
 800bb12:	f04f 0c0a 	mov.w	ip, #10
 800bb16:	4620      	mov	r0, r4
 800bb18:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb1c:	3a30      	subs	r2, #48	; 0x30
 800bb1e:	2a09      	cmp	r2, #9
 800bb20:	d903      	bls.n	800bb2a <_vfiprintf_r+0x1ee>
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d0c5      	beq.n	800bab2 <_vfiprintf_r+0x176>
 800bb26:	9105      	str	r1, [sp, #20]
 800bb28:	e7c3      	b.n	800bab2 <_vfiprintf_r+0x176>
 800bb2a:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb2e:	4604      	mov	r4, r0
 800bb30:	2301      	movs	r3, #1
 800bb32:	e7f0      	b.n	800bb16 <_vfiprintf_r+0x1da>
 800bb34:	ab03      	add	r3, sp, #12
 800bb36:	9300      	str	r3, [sp, #0]
 800bb38:	462a      	mov	r2, r5
 800bb3a:	4b16      	ldr	r3, [pc, #88]	; (800bb94 <_vfiprintf_r+0x258>)
 800bb3c:	a904      	add	r1, sp, #16
 800bb3e:	4630      	mov	r0, r6
 800bb40:	f7fd fed6 	bl	80098f0 <_printf_float>
 800bb44:	4607      	mov	r7, r0
 800bb46:	1c78      	adds	r0, r7, #1
 800bb48:	d1d6      	bne.n	800baf8 <_vfiprintf_r+0x1bc>
 800bb4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb4c:	07d9      	lsls	r1, r3, #31
 800bb4e:	d405      	bmi.n	800bb5c <_vfiprintf_r+0x220>
 800bb50:	89ab      	ldrh	r3, [r5, #12]
 800bb52:	059a      	lsls	r2, r3, #22
 800bb54:	d402      	bmi.n	800bb5c <_vfiprintf_r+0x220>
 800bb56:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb58:	f7ff fe74 	bl	800b844 <__retarget_lock_release_recursive>
 800bb5c:	89ab      	ldrh	r3, [r5, #12]
 800bb5e:	065b      	lsls	r3, r3, #25
 800bb60:	f53f af12 	bmi.w	800b988 <_vfiprintf_r+0x4c>
 800bb64:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb66:	e711      	b.n	800b98c <_vfiprintf_r+0x50>
 800bb68:	ab03      	add	r3, sp, #12
 800bb6a:	9300      	str	r3, [sp, #0]
 800bb6c:	462a      	mov	r2, r5
 800bb6e:	4b09      	ldr	r3, [pc, #36]	; (800bb94 <_vfiprintf_r+0x258>)
 800bb70:	a904      	add	r1, sp, #16
 800bb72:	4630      	mov	r0, r6
 800bb74:	f7fe f960 	bl	8009e38 <_printf_i>
 800bb78:	e7e4      	b.n	800bb44 <_vfiprintf_r+0x208>
 800bb7a:	bf00      	nop
 800bb7c:	0800cf9c 	.word	0x0800cf9c
 800bb80:	0800cfbc 	.word	0x0800cfbc
 800bb84:	0800cf7c 	.word	0x0800cf7c
 800bb88:	0800ce24 	.word	0x0800ce24
 800bb8c:	0800ce2e 	.word	0x0800ce2e
 800bb90:	080098f1 	.word	0x080098f1
 800bb94:	0800b919 	.word	0x0800b919
 800bb98:	0800ce2a 	.word	0x0800ce2a

0800bb9c <__swbuf_r>:
 800bb9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb9e:	460e      	mov	r6, r1
 800bba0:	4614      	mov	r4, r2
 800bba2:	4605      	mov	r5, r0
 800bba4:	b118      	cbz	r0, 800bbae <__swbuf_r+0x12>
 800bba6:	6983      	ldr	r3, [r0, #24]
 800bba8:	b90b      	cbnz	r3, 800bbae <__swbuf_r+0x12>
 800bbaa:	f000 f9e7 	bl	800bf7c <__sinit>
 800bbae:	4b21      	ldr	r3, [pc, #132]	; (800bc34 <__swbuf_r+0x98>)
 800bbb0:	429c      	cmp	r4, r3
 800bbb2:	d12b      	bne.n	800bc0c <__swbuf_r+0x70>
 800bbb4:	686c      	ldr	r4, [r5, #4]
 800bbb6:	69a3      	ldr	r3, [r4, #24]
 800bbb8:	60a3      	str	r3, [r4, #8]
 800bbba:	89a3      	ldrh	r3, [r4, #12]
 800bbbc:	071a      	lsls	r2, r3, #28
 800bbbe:	d52f      	bpl.n	800bc20 <__swbuf_r+0x84>
 800bbc0:	6923      	ldr	r3, [r4, #16]
 800bbc2:	b36b      	cbz	r3, 800bc20 <__swbuf_r+0x84>
 800bbc4:	6923      	ldr	r3, [r4, #16]
 800bbc6:	6820      	ldr	r0, [r4, #0]
 800bbc8:	1ac0      	subs	r0, r0, r3
 800bbca:	6963      	ldr	r3, [r4, #20]
 800bbcc:	b2f6      	uxtb	r6, r6
 800bbce:	4283      	cmp	r3, r0
 800bbd0:	4637      	mov	r7, r6
 800bbd2:	dc04      	bgt.n	800bbde <__swbuf_r+0x42>
 800bbd4:	4621      	mov	r1, r4
 800bbd6:	4628      	mov	r0, r5
 800bbd8:	f000 f93c 	bl	800be54 <_fflush_r>
 800bbdc:	bb30      	cbnz	r0, 800bc2c <__swbuf_r+0x90>
 800bbde:	68a3      	ldr	r3, [r4, #8]
 800bbe0:	3b01      	subs	r3, #1
 800bbe2:	60a3      	str	r3, [r4, #8]
 800bbe4:	6823      	ldr	r3, [r4, #0]
 800bbe6:	1c5a      	adds	r2, r3, #1
 800bbe8:	6022      	str	r2, [r4, #0]
 800bbea:	701e      	strb	r6, [r3, #0]
 800bbec:	6963      	ldr	r3, [r4, #20]
 800bbee:	3001      	adds	r0, #1
 800bbf0:	4283      	cmp	r3, r0
 800bbf2:	d004      	beq.n	800bbfe <__swbuf_r+0x62>
 800bbf4:	89a3      	ldrh	r3, [r4, #12]
 800bbf6:	07db      	lsls	r3, r3, #31
 800bbf8:	d506      	bpl.n	800bc08 <__swbuf_r+0x6c>
 800bbfa:	2e0a      	cmp	r6, #10
 800bbfc:	d104      	bne.n	800bc08 <__swbuf_r+0x6c>
 800bbfe:	4621      	mov	r1, r4
 800bc00:	4628      	mov	r0, r5
 800bc02:	f000 f927 	bl	800be54 <_fflush_r>
 800bc06:	b988      	cbnz	r0, 800bc2c <__swbuf_r+0x90>
 800bc08:	4638      	mov	r0, r7
 800bc0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc0c:	4b0a      	ldr	r3, [pc, #40]	; (800bc38 <__swbuf_r+0x9c>)
 800bc0e:	429c      	cmp	r4, r3
 800bc10:	d101      	bne.n	800bc16 <__swbuf_r+0x7a>
 800bc12:	68ac      	ldr	r4, [r5, #8]
 800bc14:	e7cf      	b.n	800bbb6 <__swbuf_r+0x1a>
 800bc16:	4b09      	ldr	r3, [pc, #36]	; (800bc3c <__swbuf_r+0xa0>)
 800bc18:	429c      	cmp	r4, r3
 800bc1a:	bf08      	it	eq
 800bc1c:	68ec      	ldreq	r4, [r5, #12]
 800bc1e:	e7ca      	b.n	800bbb6 <__swbuf_r+0x1a>
 800bc20:	4621      	mov	r1, r4
 800bc22:	4628      	mov	r0, r5
 800bc24:	f000 f81a 	bl	800bc5c <__swsetup_r>
 800bc28:	2800      	cmp	r0, #0
 800bc2a:	d0cb      	beq.n	800bbc4 <__swbuf_r+0x28>
 800bc2c:	f04f 37ff 	mov.w	r7, #4294967295
 800bc30:	e7ea      	b.n	800bc08 <__swbuf_r+0x6c>
 800bc32:	bf00      	nop
 800bc34:	0800cf9c 	.word	0x0800cf9c
 800bc38:	0800cfbc 	.word	0x0800cfbc
 800bc3c:	0800cf7c 	.word	0x0800cf7c

0800bc40 <__ascii_wctomb>:
 800bc40:	b149      	cbz	r1, 800bc56 <__ascii_wctomb+0x16>
 800bc42:	2aff      	cmp	r2, #255	; 0xff
 800bc44:	bf85      	ittet	hi
 800bc46:	238a      	movhi	r3, #138	; 0x8a
 800bc48:	6003      	strhi	r3, [r0, #0]
 800bc4a:	700a      	strbls	r2, [r1, #0]
 800bc4c:	f04f 30ff 	movhi.w	r0, #4294967295
 800bc50:	bf98      	it	ls
 800bc52:	2001      	movls	r0, #1
 800bc54:	4770      	bx	lr
 800bc56:	4608      	mov	r0, r1
 800bc58:	4770      	bx	lr
	...

0800bc5c <__swsetup_r>:
 800bc5c:	4b32      	ldr	r3, [pc, #200]	; (800bd28 <__swsetup_r+0xcc>)
 800bc5e:	b570      	push	{r4, r5, r6, lr}
 800bc60:	681d      	ldr	r5, [r3, #0]
 800bc62:	4606      	mov	r6, r0
 800bc64:	460c      	mov	r4, r1
 800bc66:	b125      	cbz	r5, 800bc72 <__swsetup_r+0x16>
 800bc68:	69ab      	ldr	r3, [r5, #24]
 800bc6a:	b913      	cbnz	r3, 800bc72 <__swsetup_r+0x16>
 800bc6c:	4628      	mov	r0, r5
 800bc6e:	f000 f985 	bl	800bf7c <__sinit>
 800bc72:	4b2e      	ldr	r3, [pc, #184]	; (800bd2c <__swsetup_r+0xd0>)
 800bc74:	429c      	cmp	r4, r3
 800bc76:	d10f      	bne.n	800bc98 <__swsetup_r+0x3c>
 800bc78:	686c      	ldr	r4, [r5, #4]
 800bc7a:	89a3      	ldrh	r3, [r4, #12]
 800bc7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc80:	0719      	lsls	r1, r3, #28
 800bc82:	d42c      	bmi.n	800bcde <__swsetup_r+0x82>
 800bc84:	06dd      	lsls	r5, r3, #27
 800bc86:	d411      	bmi.n	800bcac <__swsetup_r+0x50>
 800bc88:	2309      	movs	r3, #9
 800bc8a:	6033      	str	r3, [r6, #0]
 800bc8c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bc90:	81a3      	strh	r3, [r4, #12]
 800bc92:	f04f 30ff 	mov.w	r0, #4294967295
 800bc96:	e03e      	b.n	800bd16 <__swsetup_r+0xba>
 800bc98:	4b25      	ldr	r3, [pc, #148]	; (800bd30 <__swsetup_r+0xd4>)
 800bc9a:	429c      	cmp	r4, r3
 800bc9c:	d101      	bne.n	800bca2 <__swsetup_r+0x46>
 800bc9e:	68ac      	ldr	r4, [r5, #8]
 800bca0:	e7eb      	b.n	800bc7a <__swsetup_r+0x1e>
 800bca2:	4b24      	ldr	r3, [pc, #144]	; (800bd34 <__swsetup_r+0xd8>)
 800bca4:	429c      	cmp	r4, r3
 800bca6:	bf08      	it	eq
 800bca8:	68ec      	ldreq	r4, [r5, #12]
 800bcaa:	e7e6      	b.n	800bc7a <__swsetup_r+0x1e>
 800bcac:	0758      	lsls	r0, r3, #29
 800bcae:	d512      	bpl.n	800bcd6 <__swsetup_r+0x7a>
 800bcb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bcb2:	b141      	cbz	r1, 800bcc6 <__swsetup_r+0x6a>
 800bcb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bcb8:	4299      	cmp	r1, r3
 800bcba:	d002      	beq.n	800bcc2 <__swsetup_r+0x66>
 800bcbc:	4630      	mov	r0, r6
 800bcbe:	f7fd fccd 	bl	800965c <_free_r>
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	6363      	str	r3, [r4, #52]	; 0x34
 800bcc6:	89a3      	ldrh	r3, [r4, #12]
 800bcc8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bccc:	81a3      	strh	r3, [r4, #12]
 800bcce:	2300      	movs	r3, #0
 800bcd0:	6063      	str	r3, [r4, #4]
 800bcd2:	6923      	ldr	r3, [r4, #16]
 800bcd4:	6023      	str	r3, [r4, #0]
 800bcd6:	89a3      	ldrh	r3, [r4, #12]
 800bcd8:	f043 0308 	orr.w	r3, r3, #8
 800bcdc:	81a3      	strh	r3, [r4, #12]
 800bcde:	6923      	ldr	r3, [r4, #16]
 800bce0:	b94b      	cbnz	r3, 800bcf6 <__swsetup_r+0x9a>
 800bce2:	89a3      	ldrh	r3, [r4, #12]
 800bce4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bce8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bcec:	d003      	beq.n	800bcf6 <__swsetup_r+0x9a>
 800bcee:	4621      	mov	r1, r4
 800bcf0:	4630      	mov	r0, r6
 800bcf2:	f000 fa05 	bl	800c100 <__smakebuf_r>
 800bcf6:	89a0      	ldrh	r0, [r4, #12]
 800bcf8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bcfc:	f010 0301 	ands.w	r3, r0, #1
 800bd00:	d00a      	beq.n	800bd18 <__swsetup_r+0xbc>
 800bd02:	2300      	movs	r3, #0
 800bd04:	60a3      	str	r3, [r4, #8]
 800bd06:	6963      	ldr	r3, [r4, #20]
 800bd08:	425b      	negs	r3, r3
 800bd0a:	61a3      	str	r3, [r4, #24]
 800bd0c:	6923      	ldr	r3, [r4, #16]
 800bd0e:	b943      	cbnz	r3, 800bd22 <__swsetup_r+0xc6>
 800bd10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bd14:	d1ba      	bne.n	800bc8c <__swsetup_r+0x30>
 800bd16:	bd70      	pop	{r4, r5, r6, pc}
 800bd18:	0781      	lsls	r1, r0, #30
 800bd1a:	bf58      	it	pl
 800bd1c:	6963      	ldrpl	r3, [r4, #20]
 800bd1e:	60a3      	str	r3, [r4, #8]
 800bd20:	e7f4      	b.n	800bd0c <__swsetup_r+0xb0>
 800bd22:	2000      	movs	r0, #0
 800bd24:	e7f7      	b.n	800bd16 <__swsetup_r+0xba>
 800bd26:	bf00      	nop
 800bd28:	20000010 	.word	0x20000010
 800bd2c:	0800cf9c 	.word	0x0800cf9c
 800bd30:	0800cfbc 	.word	0x0800cfbc
 800bd34:	0800cf7c 	.word	0x0800cf7c

0800bd38 <abort>:
 800bd38:	b508      	push	{r3, lr}
 800bd3a:	2006      	movs	r0, #6
 800bd3c:	f000 fa50 	bl	800c1e0 <raise>
 800bd40:	2001      	movs	r0, #1
 800bd42:	f7f6 fd5f 	bl	8002804 <_exit>
	...

0800bd48 <__sflush_r>:
 800bd48:	898a      	ldrh	r2, [r1, #12]
 800bd4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd4e:	4605      	mov	r5, r0
 800bd50:	0710      	lsls	r0, r2, #28
 800bd52:	460c      	mov	r4, r1
 800bd54:	d458      	bmi.n	800be08 <__sflush_r+0xc0>
 800bd56:	684b      	ldr	r3, [r1, #4]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	dc05      	bgt.n	800bd68 <__sflush_r+0x20>
 800bd5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	dc02      	bgt.n	800bd68 <__sflush_r+0x20>
 800bd62:	2000      	movs	r0, #0
 800bd64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bd6a:	2e00      	cmp	r6, #0
 800bd6c:	d0f9      	beq.n	800bd62 <__sflush_r+0x1a>
 800bd6e:	2300      	movs	r3, #0
 800bd70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bd74:	682f      	ldr	r7, [r5, #0]
 800bd76:	602b      	str	r3, [r5, #0]
 800bd78:	d032      	beq.n	800bde0 <__sflush_r+0x98>
 800bd7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bd7c:	89a3      	ldrh	r3, [r4, #12]
 800bd7e:	075a      	lsls	r2, r3, #29
 800bd80:	d505      	bpl.n	800bd8e <__sflush_r+0x46>
 800bd82:	6863      	ldr	r3, [r4, #4]
 800bd84:	1ac0      	subs	r0, r0, r3
 800bd86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bd88:	b10b      	cbz	r3, 800bd8e <__sflush_r+0x46>
 800bd8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bd8c:	1ac0      	subs	r0, r0, r3
 800bd8e:	2300      	movs	r3, #0
 800bd90:	4602      	mov	r2, r0
 800bd92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bd94:	6a21      	ldr	r1, [r4, #32]
 800bd96:	4628      	mov	r0, r5
 800bd98:	47b0      	blx	r6
 800bd9a:	1c43      	adds	r3, r0, #1
 800bd9c:	89a3      	ldrh	r3, [r4, #12]
 800bd9e:	d106      	bne.n	800bdae <__sflush_r+0x66>
 800bda0:	6829      	ldr	r1, [r5, #0]
 800bda2:	291d      	cmp	r1, #29
 800bda4:	d82c      	bhi.n	800be00 <__sflush_r+0xb8>
 800bda6:	4a2a      	ldr	r2, [pc, #168]	; (800be50 <__sflush_r+0x108>)
 800bda8:	40ca      	lsrs	r2, r1
 800bdaa:	07d6      	lsls	r6, r2, #31
 800bdac:	d528      	bpl.n	800be00 <__sflush_r+0xb8>
 800bdae:	2200      	movs	r2, #0
 800bdb0:	6062      	str	r2, [r4, #4]
 800bdb2:	04d9      	lsls	r1, r3, #19
 800bdb4:	6922      	ldr	r2, [r4, #16]
 800bdb6:	6022      	str	r2, [r4, #0]
 800bdb8:	d504      	bpl.n	800bdc4 <__sflush_r+0x7c>
 800bdba:	1c42      	adds	r2, r0, #1
 800bdbc:	d101      	bne.n	800bdc2 <__sflush_r+0x7a>
 800bdbe:	682b      	ldr	r3, [r5, #0]
 800bdc0:	b903      	cbnz	r3, 800bdc4 <__sflush_r+0x7c>
 800bdc2:	6560      	str	r0, [r4, #84]	; 0x54
 800bdc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bdc6:	602f      	str	r7, [r5, #0]
 800bdc8:	2900      	cmp	r1, #0
 800bdca:	d0ca      	beq.n	800bd62 <__sflush_r+0x1a>
 800bdcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bdd0:	4299      	cmp	r1, r3
 800bdd2:	d002      	beq.n	800bdda <__sflush_r+0x92>
 800bdd4:	4628      	mov	r0, r5
 800bdd6:	f7fd fc41 	bl	800965c <_free_r>
 800bdda:	2000      	movs	r0, #0
 800bddc:	6360      	str	r0, [r4, #52]	; 0x34
 800bdde:	e7c1      	b.n	800bd64 <__sflush_r+0x1c>
 800bde0:	6a21      	ldr	r1, [r4, #32]
 800bde2:	2301      	movs	r3, #1
 800bde4:	4628      	mov	r0, r5
 800bde6:	47b0      	blx	r6
 800bde8:	1c41      	adds	r1, r0, #1
 800bdea:	d1c7      	bne.n	800bd7c <__sflush_r+0x34>
 800bdec:	682b      	ldr	r3, [r5, #0]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d0c4      	beq.n	800bd7c <__sflush_r+0x34>
 800bdf2:	2b1d      	cmp	r3, #29
 800bdf4:	d001      	beq.n	800bdfa <__sflush_r+0xb2>
 800bdf6:	2b16      	cmp	r3, #22
 800bdf8:	d101      	bne.n	800bdfe <__sflush_r+0xb6>
 800bdfa:	602f      	str	r7, [r5, #0]
 800bdfc:	e7b1      	b.n	800bd62 <__sflush_r+0x1a>
 800bdfe:	89a3      	ldrh	r3, [r4, #12]
 800be00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be04:	81a3      	strh	r3, [r4, #12]
 800be06:	e7ad      	b.n	800bd64 <__sflush_r+0x1c>
 800be08:	690f      	ldr	r7, [r1, #16]
 800be0a:	2f00      	cmp	r7, #0
 800be0c:	d0a9      	beq.n	800bd62 <__sflush_r+0x1a>
 800be0e:	0793      	lsls	r3, r2, #30
 800be10:	680e      	ldr	r6, [r1, #0]
 800be12:	bf08      	it	eq
 800be14:	694b      	ldreq	r3, [r1, #20]
 800be16:	600f      	str	r7, [r1, #0]
 800be18:	bf18      	it	ne
 800be1a:	2300      	movne	r3, #0
 800be1c:	eba6 0807 	sub.w	r8, r6, r7
 800be20:	608b      	str	r3, [r1, #8]
 800be22:	f1b8 0f00 	cmp.w	r8, #0
 800be26:	dd9c      	ble.n	800bd62 <__sflush_r+0x1a>
 800be28:	6a21      	ldr	r1, [r4, #32]
 800be2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800be2c:	4643      	mov	r3, r8
 800be2e:	463a      	mov	r2, r7
 800be30:	4628      	mov	r0, r5
 800be32:	47b0      	blx	r6
 800be34:	2800      	cmp	r0, #0
 800be36:	dc06      	bgt.n	800be46 <__sflush_r+0xfe>
 800be38:	89a3      	ldrh	r3, [r4, #12]
 800be3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be3e:	81a3      	strh	r3, [r4, #12]
 800be40:	f04f 30ff 	mov.w	r0, #4294967295
 800be44:	e78e      	b.n	800bd64 <__sflush_r+0x1c>
 800be46:	4407      	add	r7, r0
 800be48:	eba8 0800 	sub.w	r8, r8, r0
 800be4c:	e7e9      	b.n	800be22 <__sflush_r+0xda>
 800be4e:	bf00      	nop
 800be50:	20400001 	.word	0x20400001

0800be54 <_fflush_r>:
 800be54:	b538      	push	{r3, r4, r5, lr}
 800be56:	690b      	ldr	r3, [r1, #16]
 800be58:	4605      	mov	r5, r0
 800be5a:	460c      	mov	r4, r1
 800be5c:	b913      	cbnz	r3, 800be64 <_fflush_r+0x10>
 800be5e:	2500      	movs	r5, #0
 800be60:	4628      	mov	r0, r5
 800be62:	bd38      	pop	{r3, r4, r5, pc}
 800be64:	b118      	cbz	r0, 800be6e <_fflush_r+0x1a>
 800be66:	6983      	ldr	r3, [r0, #24]
 800be68:	b90b      	cbnz	r3, 800be6e <_fflush_r+0x1a>
 800be6a:	f000 f887 	bl	800bf7c <__sinit>
 800be6e:	4b14      	ldr	r3, [pc, #80]	; (800bec0 <_fflush_r+0x6c>)
 800be70:	429c      	cmp	r4, r3
 800be72:	d11b      	bne.n	800beac <_fflush_r+0x58>
 800be74:	686c      	ldr	r4, [r5, #4]
 800be76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d0ef      	beq.n	800be5e <_fflush_r+0xa>
 800be7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800be80:	07d0      	lsls	r0, r2, #31
 800be82:	d404      	bmi.n	800be8e <_fflush_r+0x3a>
 800be84:	0599      	lsls	r1, r3, #22
 800be86:	d402      	bmi.n	800be8e <_fflush_r+0x3a>
 800be88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be8a:	f7ff fcda 	bl	800b842 <__retarget_lock_acquire_recursive>
 800be8e:	4628      	mov	r0, r5
 800be90:	4621      	mov	r1, r4
 800be92:	f7ff ff59 	bl	800bd48 <__sflush_r>
 800be96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be98:	07da      	lsls	r2, r3, #31
 800be9a:	4605      	mov	r5, r0
 800be9c:	d4e0      	bmi.n	800be60 <_fflush_r+0xc>
 800be9e:	89a3      	ldrh	r3, [r4, #12]
 800bea0:	059b      	lsls	r3, r3, #22
 800bea2:	d4dd      	bmi.n	800be60 <_fflush_r+0xc>
 800bea4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bea6:	f7ff fccd 	bl	800b844 <__retarget_lock_release_recursive>
 800beaa:	e7d9      	b.n	800be60 <_fflush_r+0xc>
 800beac:	4b05      	ldr	r3, [pc, #20]	; (800bec4 <_fflush_r+0x70>)
 800beae:	429c      	cmp	r4, r3
 800beb0:	d101      	bne.n	800beb6 <_fflush_r+0x62>
 800beb2:	68ac      	ldr	r4, [r5, #8]
 800beb4:	e7df      	b.n	800be76 <_fflush_r+0x22>
 800beb6:	4b04      	ldr	r3, [pc, #16]	; (800bec8 <_fflush_r+0x74>)
 800beb8:	429c      	cmp	r4, r3
 800beba:	bf08      	it	eq
 800bebc:	68ec      	ldreq	r4, [r5, #12]
 800bebe:	e7da      	b.n	800be76 <_fflush_r+0x22>
 800bec0:	0800cf9c 	.word	0x0800cf9c
 800bec4:	0800cfbc 	.word	0x0800cfbc
 800bec8:	0800cf7c 	.word	0x0800cf7c

0800becc <std>:
 800becc:	2300      	movs	r3, #0
 800bece:	b510      	push	{r4, lr}
 800bed0:	4604      	mov	r4, r0
 800bed2:	e9c0 3300 	strd	r3, r3, [r0]
 800bed6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800beda:	6083      	str	r3, [r0, #8]
 800bedc:	8181      	strh	r1, [r0, #12]
 800bede:	6643      	str	r3, [r0, #100]	; 0x64
 800bee0:	81c2      	strh	r2, [r0, #14]
 800bee2:	6183      	str	r3, [r0, #24]
 800bee4:	4619      	mov	r1, r3
 800bee6:	2208      	movs	r2, #8
 800bee8:	305c      	adds	r0, #92	; 0x5c
 800beea:	f7fd fbaf 	bl	800964c <memset>
 800beee:	4b05      	ldr	r3, [pc, #20]	; (800bf04 <std+0x38>)
 800bef0:	6263      	str	r3, [r4, #36]	; 0x24
 800bef2:	4b05      	ldr	r3, [pc, #20]	; (800bf08 <std+0x3c>)
 800bef4:	62a3      	str	r3, [r4, #40]	; 0x28
 800bef6:	4b05      	ldr	r3, [pc, #20]	; (800bf0c <std+0x40>)
 800bef8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800befa:	4b05      	ldr	r3, [pc, #20]	; (800bf10 <std+0x44>)
 800befc:	6224      	str	r4, [r4, #32]
 800befe:	6323      	str	r3, [r4, #48]	; 0x30
 800bf00:	bd10      	pop	{r4, pc}
 800bf02:	bf00      	nop
 800bf04:	0800c219 	.word	0x0800c219
 800bf08:	0800c23b 	.word	0x0800c23b
 800bf0c:	0800c273 	.word	0x0800c273
 800bf10:	0800c297 	.word	0x0800c297

0800bf14 <_cleanup_r>:
 800bf14:	4901      	ldr	r1, [pc, #4]	; (800bf1c <_cleanup_r+0x8>)
 800bf16:	f000 b8af 	b.w	800c078 <_fwalk_reent>
 800bf1a:	bf00      	nop
 800bf1c:	0800be55 	.word	0x0800be55

0800bf20 <__sfmoreglue>:
 800bf20:	b570      	push	{r4, r5, r6, lr}
 800bf22:	1e4a      	subs	r2, r1, #1
 800bf24:	2568      	movs	r5, #104	; 0x68
 800bf26:	4355      	muls	r5, r2
 800bf28:	460e      	mov	r6, r1
 800bf2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bf2e:	f7fd fbe5 	bl	80096fc <_malloc_r>
 800bf32:	4604      	mov	r4, r0
 800bf34:	b140      	cbz	r0, 800bf48 <__sfmoreglue+0x28>
 800bf36:	2100      	movs	r1, #0
 800bf38:	e9c0 1600 	strd	r1, r6, [r0]
 800bf3c:	300c      	adds	r0, #12
 800bf3e:	60a0      	str	r0, [r4, #8]
 800bf40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bf44:	f7fd fb82 	bl	800964c <memset>
 800bf48:	4620      	mov	r0, r4
 800bf4a:	bd70      	pop	{r4, r5, r6, pc}

0800bf4c <__sfp_lock_acquire>:
 800bf4c:	4801      	ldr	r0, [pc, #4]	; (800bf54 <__sfp_lock_acquire+0x8>)
 800bf4e:	f7ff bc78 	b.w	800b842 <__retarget_lock_acquire_recursive>
 800bf52:	bf00      	nop
 800bf54:	20000cb0 	.word	0x20000cb0

0800bf58 <__sfp_lock_release>:
 800bf58:	4801      	ldr	r0, [pc, #4]	; (800bf60 <__sfp_lock_release+0x8>)
 800bf5a:	f7ff bc73 	b.w	800b844 <__retarget_lock_release_recursive>
 800bf5e:	bf00      	nop
 800bf60:	20000cb0 	.word	0x20000cb0

0800bf64 <__sinit_lock_acquire>:
 800bf64:	4801      	ldr	r0, [pc, #4]	; (800bf6c <__sinit_lock_acquire+0x8>)
 800bf66:	f7ff bc6c 	b.w	800b842 <__retarget_lock_acquire_recursive>
 800bf6a:	bf00      	nop
 800bf6c:	20000cab 	.word	0x20000cab

0800bf70 <__sinit_lock_release>:
 800bf70:	4801      	ldr	r0, [pc, #4]	; (800bf78 <__sinit_lock_release+0x8>)
 800bf72:	f7ff bc67 	b.w	800b844 <__retarget_lock_release_recursive>
 800bf76:	bf00      	nop
 800bf78:	20000cab 	.word	0x20000cab

0800bf7c <__sinit>:
 800bf7c:	b510      	push	{r4, lr}
 800bf7e:	4604      	mov	r4, r0
 800bf80:	f7ff fff0 	bl	800bf64 <__sinit_lock_acquire>
 800bf84:	69a3      	ldr	r3, [r4, #24]
 800bf86:	b11b      	cbz	r3, 800bf90 <__sinit+0x14>
 800bf88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf8c:	f7ff bff0 	b.w	800bf70 <__sinit_lock_release>
 800bf90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bf94:	6523      	str	r3, [r4, #80]	; 0x50
 800bf96:	4b13      	ldr	r3, [pc, #76]	; (800bfe4 <__sinit+0x68>)
 800bf98:	4a13      	ldr	r2, [pc, #76]	; (800bfe8 <__sinit+0x6c>)
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	62a2      	str	r2, [r4, #40]	; 0x28
 800bf9e:	42a3      	cmp	r3, r4
 800bfa0:	bf04      	itt	eq
 800bfa2:	2301      	moveq	r3, #1
 800bfa4:	61a3      	streq	r3, [r4, #24]
 800bfa6:	4620      	mov	r0, r4
 800bfa8:	f000 f820 	bl	800bfec <__sfp>
 800bfac:	6060      	str	r0, [r4, #4]
 800bfae:	4620      	mov	r0, r4
 800bfb0:	f000 f81c 	bl	800bfec <__sfp>
 800bfb4:	60a0      	str	r0, [r4, #8]
 800bfb6:	4620      	mov	r0, r4
 800bfb8:	f000 f818 	bl	800bfec <__sfp>
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	60e0      	str	r0, [r4, #12]
 800bfc0:	2104      	movs	r1, #4
 800bfc2:	6860      	ldr	r0, [r4, #4]
 800bfc4:	f7ff ff82 	bl	800becc <std>
 800bfc8:	68a0      	ldr	r0, [r4, #8]
 800bfca:	2201      	movs	r2, #1
 800bfcc:	2109      	movs	r1, #9
 800bfce:	f7ff ff7d 	bl	800becc <std>
 800bfd2:	68e0      	ldr	r0, [r4, #12]
 800bfd4:	2202      	movs	r2, #2
 800bfd6:	2112      	movs	r1, #18
 800bfd8:	f7ff ff78 	bl	800becc <std>
 800bfdc:	2301      	movs	r3, #1
 800bfde:	61a3      	str	r3, [r4, #24]
 800bfe0:	e7d2      	b.n	800bf88 <__sinit+0xc>
 800bfe2:	bf00      	nop
 800bfe4:	0800cbf8 	.word	0x0800cbf8
 800bfe8:	0800bf15 	.word	0x0800bf15

0800bfec <__sfp>:
 800bfec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfee:	4607      	mov	r7, r0
 800bff0:	f7ff ffac 	bl	800bf4c <__sfp_lock_acquire>
 800bff4:	4b1e      	ldr	r3, [pc, #120]	; (800c070 <__sfp+0x84>)
 800bff6:	681e      	ldr	r6, [r3, #0]
 800bff8:	69b3      	ldr	r3, [r6, #24]
 800bffa:	b913      	cbnz	r3, 800c002 <__sfp+0x16>
 800bffc:	4630      	mov	r0, r6
 800bffe:	f7ff ffbd 	bl	800bf7c <__sinit>
 800c002:	3648      	adds	r6, #72	; 0x48
 800c004:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c008:	3b01      	subs	r3, #1
 800c00a:	d503      	bpl.n	800c014 <__sfp+0x28>
 800c00c:	6833      	ldr	r3, [r6, #0]
 800c00e:	b30b      	cbz	r3, 800c054 <__sfp+0x68>
 800c010:	6836      	ldr	r6, [r6, #0]
 800c012:	e7f7      	b.n	800c004 <__sfp+0x18>
 800c014:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c018:	b9d5      	cbnz	r5, 800c050 <__sfp+0x64>
 800c01a:	4b16      	ldr	r3, [pc, #88]	; (800c074 <__sfp+0x88>)
 800c01c:	60e3      	str	r3, [r4, #12]
 800c01e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c022:	6665      	str	r5, [r4, #100]	; 0x64
 800c024:	f7ff fc0c 	bl	800b840 <__retarget_lock_init_recursive>
 800c028:	f7ff ff96 	bl	800bf58 <__sfp_lock_release>
 800c02c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c030:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c034:	6025      	str	r5, [r4, #0]
 800c036:	61a5      	str	r5, [r4, #24]
 800c038:	2208      	movs	r2, #8
 800c03a:	4629      	mov	r1, r5
 800c03c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c040:	f7fd fb04 	bl	800964c <memset>
 800c044:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c048:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c04c:	4620      	mov	r0, r4
 800c04e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c050:	3468      	adds	r4, #104	; 0x68
 800c052:	e7d9      	b.n	800c008 <__sfp+0x1c>
 800c054:	2104      	movs	r1, #4
 800c056:	4638      	mov	r0, r7
 800c058:	f7ff ff62 	bl	800bf20 <__sfmoreglue>
 800c05c:	4604      	mov	r4, r0
 800c05e:	6030      	str	r0, [r6, #0]
 800c060:	2800      	cmp	r0, #0
 800c062:	d1d5      	bne.n	800c010 <__sfp+0x24>
 800c064:	f7ff ff78 	bl	800bf58 <__sfp_lock_release>
 800c068:	230c      	movs	r3, #12
 800c06a:	603b      	str	r3, [r7, #0]
 800c06c:	e7ee      	b.n	800c04c <__sfp+0x60>
 800c06e:	bf00      	nop
 800c070:	0800cbf8 	.word	0x0800cbf8
 800c074:	ffff0001 	.word	0xffff0001

0800c078 <_fwalk_reent>:
 800c078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c07c:	4606      	mov	r6, r0
 800c07e:	4688      	mov	r8, r1
 800c080:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c084:	2700      	movs	r7, #0
 800c086:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c08a:	f1b9 0901 	subs.w	r9, r9, #1
 800c08e:	d505      	bpl.n	800c09c <_fwalk_reent+0x24>
 800c090:	6824      	ldr	r4, [r4, #0]
 800c092:	2c00      	cmp	r4, #0
 800c094:	d1f7      	bne.n	800c086 <_fwalk_reent+0xe>
 800c096:	4638      	mov	r0, r7
 800c098:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c09c:	89ab      	ldrh	r3, [r5, #12]
 800c09e:	2b01      	cmp	r3, #1
 800c0a0:	d907      	bls.n	800c0b2 <_fwalk_reent+0x3a>
 800c0a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c0a6:	3301      	adds	r3, #1
 800c0a8:	d003      	beq.n	800c0b2 <_fwalk_reent+0x3a>
 800c0aa:	4629      	mov	r1, r5
 800c0ac:	4630      	mov	r0, r6
 800c0ae:	47c0      	blx	r8
 800c0b0:	4307      	orrs	r7, r0
 800c0b2:	3568      	adds	r5, #104	; 0x68
 800c0b4:	e7e9      	b.n	800c08a <_fwalk_reent+0x12>

0800c0b6 <__swhatbuf_r>:
 800c0b6:	b570      	push	{r4, r5, r6, lr}
 800c0b8:	460e      	mov	r6, r1
 800c0ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0be:	2900      	cmp	r1, #0
 800c0c0:	b096      	sub	sp, #88	; 0x58
 800c0c2:	4614      	mov	r4, r2
 800c0c4:	461d      	mov	r5, r3
 800c0c6:	da07      	bge.n	800c0d8 <__swhatbuf_r+0x22>
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	602b      	str	r3, [r5, #0]
 800c0cc:	89b3      	ldrh	r3, [r6, #12]
 800c0ce:	061a      	lsls	r2, r3, #24
 800c0d0:	d410      	bmi.n	800c0f4 <__swhatbuf_r+0x3e>
 800c0d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0d6:	e00e      	b.n	800c0f6 <__swhatbuf_r+0x40>
 800c0d8:	466a      	mov	r2, sp
 800c0da:	f000 f903 	bl	800c2e4 <_fstat_r>
 800c0de:	2800      	cmp	r0, #0
 800c0e0:	dbf2      	blt.n	800c0c8 <__swhatbuf_r+0x12>
 800c0e2:	9a01      	ldr	r2, [sp, #4]
 800c0e4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c0e8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c0ec:	425a      	negs	r2, r3
 800c0ee:	415a      	adcs	r2, r3
 800c0f0:	602a      	str	r2, [r5, #0]
 800c0f2:	e7ee      	b.n	800c0d2 <__swhatbuf_r+0x1c>
 800c0f4:	2340      	movs	r3, #64	; 0x40
 800c0f6:	2000      	movs	r0, #0
 800c0f8:	6023      	str	r3, [r4, #0]
 800c0fa:	b016      	add	sp, #88	; 0x58
 800c0fc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c100 <__smakebuf_r>:
 800c100:	898b      	ldrh	r3, [r1, #12]
 800c102:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c104:	079d      	lsls	r5, r3, #30
 800c106:	4606      	mov	r6, r0
 800c108:	460c      	mov	r4, r1
 800c10a:	d507      	bpl.n	800c11c <__smakebuf_r+0x1c>
 800c10c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c110:	6023      	str	r3, [r4, #0]
 800c112:	6123      	str	r3, [r4, #16]
 800c114:	2301      	movs	r3, #1
 800c116:	6163      	str	r3, [r4, #20]
 800c118:	b002      	add	sp, #8
 800c11a:	bd70      	pop	{r4, r5, r6, pc}
 800c11c:	ab01      	add	r3, sp, #4
 800c11e:	466a      	mov	r2, sp
 800c120:	f7ff ffc9 	bl	800c0b6 <__swhatbuf_r>
 800c124:	9900      	ldr	r1, [sp, #0]
 800c126:	4605      	mov	r5, r0
 800c128:	4630      	mov	r0, r6
 800c12a:	f7fd fae7 	bl	80096fc <_malloc_r>
 800c12e:	b948      	cbnz	r0, 800c144 <__smakebuf_r+0x44>
 800c130:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c134:	059a      	lsls	r2, r3, #22
 800c136:	d4ef      	bmi.n	800c118 <__smakebuf_r+0x18>
 800c138:	f023 0303 	bic.w	r3, r3, #3
 800c13c:	f043 0302 	orr.w	r3, r3, #2
 800c140:	81a3      	strh	r3, [r4, #12]
 800c142:	e7e3      	b.n	800c10c <__smakebuf_r+0xc>
 800c144:	4b0d      	ldr	r3, [pc, #52]	; (800c17c <__smakebuf_r+0x7c>)
 800c146:	62b3      	str	r3, [r6, #40]	; 0x28
 800c148:	89a3      	ldrh	r3, [r4, #12]
 800c14a:	6020      	str	r0, [r4, #0]
 800c14c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c150:	81a3      	strh	r3, [r4, #12]
 800c152:	9b00      	ldr	r3, [sp, #0]
 800c154:	6163      	str	r3, [r4, #20]
 800c156:	9b01      	ldr	r3, [sp, #4]
 800c158:	6120      	str	r0, [r4, #16]
 800c15a:	b15b      	cbz	r3, 800c174 <__smakebuf_r+0x74>
 800c15c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c160:	4630      	mov	r0, r6
 800c162:	f000 f8d1 	bl	800c308 <_isatty_r>
 800c166:	b128      	cbz	r0, 800c174 <__smakebuf_r+0x74>
 800c168:	89a3      	ldrh	r3, [r4, #12]
 800c16a:	f023 0303 	bic.w	r3, r3, #3
 800c16e:	f043 0301 	orr.w	r3, r3, #1
 800c172:	81a3      	strh	r3, [r4, #12]
 800c174:	89a0      	ldrh	r0, [r4, #12]
 800c176:	4305      	orrs	r5, r0
 800c178:	81a5      	strh	r5, [r4, #12]
 800c17a:	e7cd      	b.n	800c118 <__smakebuf_r+0x18>
 800c17c:	0800bf15 	.word	0x0800bf15

0800c180 <_malloc_usable_size_r>:
 800c180:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c184:	1f18      	subs	r0, r3, #4
 800c186:	2b00      	cmp	r3, #0
 800c188:	bfbc      	itt	lt
 800c18a:	580b      	ldrlt	r3, [r1, r0]
 800c18c:	18c0      	addlt	r0, r0, r3
 800c18e:	4770      	bx	lr

0800c190 <_raise_r>:
 800c190:	291f      	cmp	r1, #31
 800c192:	b538      	push	{r3, r4, r5, lr}
 800c194:	4604      	mov	r4, r0
 800c196:	460d      	mov	r5, r1
 800c198:	d904      	bls.n	800c1a4 <_raise_r+0x14>
 800c19a:	2316      	movs	r3, #22
 800c19c:	6003      	str	r3, [r0, #0]
 800c19e:	f04f 30ff 	mov.w	r0, #4294967295
 800c1a2:	bd38      	pop	{r3, r4, r5, pc}
 800c1a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c1a6:	b112      	cbz	r2, 800c1ae <_raise_r+0x1e>
 800c1a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c1ac:	b94b      	cbnz	r3, 800c1c2 <_raise_r+0x32>
 800c1ae:	4620      	mov	r0, r4
 800c1b0:	f000 f830 	bl	800c214 <_getpid_r>
 800c1b4:	462a      	mov	r2, r5
 800c1b6:	4601      	mov	r1, r0
 800c1b8:	4620      	mov	r0, r4
 800c1ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c1be:	f000 b817 	b.w	800c1f0 <_kill_r>
 800c1c2:	2b01      	cmp	r3, #1
 800c1c4:	d00a      	beq.n	800c1dc <_raise_r+0x4c>
 800c1c6:	1c59      	adds	r1, r3, #1
 800c1c8:	d103      	bne.n	800c1d2 <_raise_r+0x42>
 800c1ca:	2316      	movs	r3, #22
 800c1cc:	6003      	str	r3, [r0, #0]
 800c1ce:	2001      	movs	r0, #1
 800c1d0:	e7e7      	b.n	800c1a2 <_raise_r+0x12>
 800c1d2:	2400      	movs	r4, #0
 800c1d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c1d8:	4628      	mov	r0, r5
 800c1da:	4798      	blx	r3
 800c1dc:	2000      	movs	r0, #0
 800c1de:	e7e0      	b.n	800c1a2 <_raise_r+0x12>

0800c1e0 <raise>:
 800c1e0:	4b02      	ldr	r3, [pc, #8]	; (800c1ec <raise+0xc>)
 800c1e2:	4601      	mov	r1, r0
 800c1e4:	6818      	ldr	r0, [r3, #0]
 800c1e6:	f7ff bfd3 	b.w	800c190 <_raise_r>
 800c1ea:	bf00      	nop
 800c1ec:	20000010 	.word	0x20000010

0800c1f0 <_kill_r>:
 800c1f0:	b538      	push	{r3, r4, r5, lr}
 800c1f2:	4d07      	ldr	r5, [pc, #28]	; (800c210 <_kill_r+0x20>)
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	4604      	mov	r4, r0
 800c1f8:	4608      	mov	r0, r1
 800c1fa:	4611      	mov	r1, r2
 800c1fc:	602b      	str	r3, [r5, #0]
 800c1fe:	f7f6 faf1 	bl	80027e4 <_kill>
 800c202:	1c43      	adds	r3, r0, #1
 800c204:	d102      	bne.n	800c20c <_kill_r+0x1c>
 800c206:	682b      	ldr	r3, [r5, #0]
 800c208:	b103      	cbz	r3, 800c20c <_kill_r+0x1c>
 800c20a:	6023      	str	r3, [r4, #0]
 800c20c:	bd38      	pop	{r3, r4, r5, pc}
 800c20e:	bf00      	nop
 800c210:	20000ca4 	.word	0x20000ca4

0800c214 <_getpid_r>:
 800c214:	f7f6 bade 	b.w	80027d4 <_getpid>

0800c218 <__sread>:
 800c218:	b510      	push	{r4, lr}
 800c21a:	460c      	mov	r4, r1
 800c21c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c220:	f000 f894 	bl	800c34c <_read_r>
 800c224:	2800      	cmp	r0, #0
 800c226:	bfab      	itete	ge
 800c228:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c22a:	89a3      	ldrhlt	r3, [r4, #12]
 800c22c:	181b      	addge	r3, r3, r0
 800c22e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c232:	bfac      	ite	ge
 800c234:	6563      	strge	r3, [r4, #84]	; 0x54
 800c236:	81a3      	strhlt	r3, [r4, #12]
 800c238:	bd10      	pop	{r4, pc}

0800c23a <__swrite>:
 800c23a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c23e:	461f      	mov	r7, r3
 800c240:	898b      	ldrh	r3, [r1, #12]
 800c242:	05db      	lsls	r3, r3, #23
 800c244:	4605      	mov	r5, r0
 800c246:	460c      	mov	r4, r1
 800c248:	4616      	mov	r6, r2
 800c24a:	d505      	bpl.n	800c258 <__swrite+0x1e>
 800c24c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c250:	2302      	movs	r3, #2
 800c252:	2200      	movs	r2, #0
 800c254:	f000 f868 	bl	800c328 <_lseek_r>
 800c258:	89a3      	ldrh	r3, [r4, #12]
 800c25a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c25e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c262:	81a3      	strh	r3, [r4, #12]
 800c264:	4632      	mov	r2, r6
 800c266:	463b      	mov	r3, r7
 800c268:	4628      	mov	r0, r5
 800c26a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c26e:	f000 b817 	b.w	800c2a0 <_write_r>

0800c272 <__sseek>:
 800c272:	b510      	push	{r4, lr}
 800c274:	460c      	mov	r4, r1
 800c276:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c27a:	f000 f855 	bl	800c328 <_lseek_r>
 800c27e:	1c43      	adds	r3, r0, #1
 800c280:	89a3      	ldrh	r3, [r4, #12]
 800c282:	bf15      	itete	ne
 800c284:	6560      	strne	r0, [r4, #84]	; 0x54
 800c286:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c28a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c28e:	81a3      	strheq	r3, [r4, #12]
 800c290:	bf18      	it	ne
 800c292:	81a3      	strhne	r3, [r4, #12]
 800c294:	bd10      	pop	{r4, pc}

0800c296 <__sclose>:
 800c296:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c29a:	f000 b813 	b.w	800c2c4 <_close_r>
	...

0800c2a0 <_write_r>:
 800c2a0:	b538      	push	{r3, r4, r5, lr}
 800c2a2:	4d07      	ldr	r5, [pc, #28]	; (800c2c0 <_write_r+0x20>)
 800c2a4:	4604      	mov	r4, r0
 800c2a6:	4608      	mov	r0, r1
 800c2a8:	4611      	mov	r1, r2
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	602a      	str	r2, [r5, #0]
 800c2ae:	461a      	mov	r2, r3
 800c2b0:	f7f6 facf 	bl	8002852 <_write>
 800c2b4:	1c43      	adds	r3, r0, #1
 800c2b6:	d102      	bne.n	800c2be <_write_r+0x1e>
 800c2b8:	682b      	ldr	r3, [r5, #0]
 800c2ba:	b103      	cbz	r3, 800c2be <_write_r+0x1e>
 800c2bc:	6023      	str	r3, [r4, #0]
 800c2be:	bd38      	pop	{r3, r4, r5, pc}
 800c2c0:	20000ca4 	.word	0x20000ca4

0800c2c4 <_close_r>:
 800c2c4:	b538      	push	{r3, r4, r5, lr}
 800c2c6:	4d06      	ldr	r5, [pc, #24]	; (800c2e0 <_close_r+0x1c>)
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	4604      	mov	r4, r0
 800c2cc:	4608      	mov	r0, r1
 800c2ce:	602b      	str	r3, [r5, #0]
 800c2d0:	f7f6 fadb 	bl	800288a <_close>
 800c2d4:	1c43      	adds	r3, r0, #1
 800c2d6:	d102      	bne.n	800c2de <_close_r+0x1a>
 800c2d8:	682b      	ldr	r3, [r5, #0]
 800c2da:	b103      	cbz	r3, 800c2de <_close_r+0x1a>
 800c2dc:	6023      	str	r3, [r4, #0]
 800c2de:	bd38      	pop	{r3, r4, r5, pc}
 800c2e0:	20000ca4 	.word	0x20000ca4

0800c2e4 <_fstat_r>:
 800c2e4:	b538      	push	{r3, r4, r5, lr}
 800c2e6:	4d07      	ldr	r5, [pc, #28]	; (800c304 <_fstat_r+0x20>)
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	4604      	mov	r4, r0
 800c2ec:	4608      	mov	r0, r1
 800c2ee:	4611      	mov	r1, r2
 800c2f0:	602b      	str	r3, [r5, #0]
 800c2f2:	f7f6 fad6 	bl	80028a2 <_fstat>
 800c2f6:	1c43      	adds	r3, r0, #1
 800c2f8:	d102      	bne.n	800c300 <_fstat_r+0x1c>
 800c2fa:	682b      	ldr	r3, [r5, #0]
 800c2fc:	b103      	cbz	r3, 800c300 <_fstat_r+0x1c>
 800c2fe:	6023      	str	r3, [r4, #0]
 800c300:	bd38      	pop	{r3, r4, r5, pc}
 800c302:	bf00      	nop
 800c304:	20000ca4 	.word	0x20000ca4

0800c308 <_isatty_r>:
 800c308:	b538      	push	{r3, r4, r5, lr}
 800c30a:	4d06      	ldr	r5, [pc, #24]	; (800c324 <_isatty_r+0x1c>)
 800c30c:	2300      	movs	r3, #0
 800c30e:	4604      	mov	r4, r0
 800c310:	4608      	mov	r0, r1
 800c312:	602b      	str	r3, [r5, #0]
 800c314:	f7f6 fad5 	bl	80028c2 <_isatty>
 800c318:	1c43      	adds	r3, r0, #1
 800c31a:	d102      	bne.n	800c322 <_isatty_r+0x1a>
 800c31c:	682b      	ldr	r3, [r5, #0]
 800c31e:	b103      	cbz	r3, 800c322 <_isatty_r+0x1a>
 800c320:	6023      	str	r3, [r4, #0]
 800c322:	bd38      	pop	{r3, r4, r5, pc}
 800c324:	20000ca4 	.word	0x20000ca4

0800c328 <_lseek_r>:
 800c328:	b538      	push	{r3, r4, r5, lr}
 800c32a:	4d07      	ldr	r5, [pc, #28]	; (800c348 <_lseek_r+0x20>)
 800c32c:	4604      	mov	r4, r0
 800c32e:	4608      	mov	r0, r1
 800c330:	4611      	mov	r1, r2
 800c332:	2200      	movs	r2, #0
 800c334:	602a      	str	r2, [r5, #0]
 800c336:	461a      	mov	r2, r3
 800c338:	f7f6 face 	bl	80028d8 <_lseek>
 800c33c:	1c43      	adds	r3, r0, #1
 800c33e:	d102      	bne.n	800c346 <_lseek_r+0x1e>
 800c340:	682b      	ldr	r3, [r5, #0]
 800c342:	b103      	cbz	r3, 800c346 <_lseek_r+0x1e>
 800c344:	6023      	str	r3, [r4, #0]
 800c346:	bd38      	pop	{r3, r4, r5, pc}
 800c348:	20000ca4 	.word	0x20000ca4

0800c34c <_read_r>:
 800c34c:	b538      	push	{r3, r4, r5, lr}
 800c34e:	4d07      	ldr	r5, [pc, #28]	; (800c36c <_read_r+0x20>)
 800c350:	4604      	mov	r4, r0
 800c352:	4608      	mov	r0, r1
 800c354:	4611      	mov	r1, r2
 800c356:	2200      	movs	r2, #0
 800c358:	602a      	str	r2, [r5, #0]
 800c35a:	461a      	mov	r2, r3
 800c35c:	f7f6 fa5c 	bl	8002818 <_read>
 800c360:	1c43      	adds	r3, r0, #1
 800c362:	d102      	bne.n	800c36a <_read_r+0x1e>
 800c364:	682b      	ldr	r3, [r5, #0]
 800c366:	b103      	cbz	r3, 800c36a <_read_r+0x1e>
 800c368:	6023      	str	r3, [r4, #0]
 800c36a:	bd38      	pop	{r3, r4, r5, pc}
 800c36c:	20000ca4 	.word	0x20000ca4

0800c370 <_init>:
 800c370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c372:	bf00      	nop
 800c374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c376:	bc08      	pop	{r3}
 800c378:	469e      	mov	lr, r3
 800c37a:	4770      	bx	lr

0800c37c <_fini>:
 800c37c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c37e:	bf00      	nop
 800c380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c382:	bc08      	pop	{r3}
 800c384:	469e      	mov	lr, r3
 800c386:	4770      	bx	lr
