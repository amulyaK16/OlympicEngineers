
UART_HC-05_Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003460  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  0800359c  0800359c  0001359c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003690  08003690  00013690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003698  08003698  00013698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800369c  0800369c  0001369c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000004  080036a0  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000140  20000010  080036ac  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000150  080036ac  00020150  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000eb47  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001c6a  00000000  00000000  0002eb87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000d68  00000000  00000000  000307f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000cd0  00000000  00000000  00031560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0001b35f  00000000  00000000  00032230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000c67b  00000000  00000000  0004d58f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000ad305  00000000  00000000  00059c0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00106f0f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003700  00000000  00000000  00106f64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000010 	.word	0x20000010
 8000158:	00000000 	.word	0x00000000
 800015c:	08003584 	.word	0x08003584

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000014 	.word	0x20000014
 8000178:	08003584 	.word	0x08003584

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b96e 	b.w	8000470 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9d08      	ldr	r5, [sp, #32]
 80001b2:	4604      	mov	r4, r0
 80001b4:	468c      	mov	ip, r1
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	f040 8083 	bne.w	80002c2 <__udivmoddi4+0x116>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4617      	mov	r7, r2
 80001c0:	d947      	bls.n	8000252 <__udivmoddi4+0xa6>
 80001c2:	fab2 f282 	clz	r2, r2
 80001c6:	b142      	cbz	r2, 80001da <__udivmoddi4+0x2e>
 80001c8:	f1c2 0020 	rsb	r0, r2, #32
 80001cc:	fa24 f000 	lsr.w	r0, r4, r0
 80001d0:	4091      	lsls	r1, r2
 80001d2:	4097      	lsls	r7, r2
 80001d4:	ea40 0c01 	orr.w	ip, r0, r1
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001de:	0c23      	lsrs	r3, r4, #16
 80001e0:	fbbc f6f8 	udiv	r6, ip, r8
 80001e4:	fa1f fe87 	uxth.w	lr, r7
 80001e8:	fb08 c116 	mls	r1, r8, r6, ip
 80001ec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001f0:	fb06 f10e 	mul.w	r1, r6, lr
 80001f4:	4299      	cmp	r1, r3
 80001f6:	d909      	bls.n	800020c <__udivmoddi4+0x60>
 80001f8:	18fb      	adds	r3, r7, r3
 80001fa:	f106 30ff 	add.w	r0, r6, #4294967295
 80001fe:	f080 8119 	bcs.w	8000434 <__udivmoddi4+0x288>
 8000202:	4299      	cmp	r1, r3
 8000204:	f240 8116 	bls.w	8000434 <__udivmoddi4+0x288>
 8000208:	3e02      	subs	r6, #2
 800020a:	443b      	add	r3, r7
 800020c:	1a5b      	subs	r3, r3, r1
 800020e:	b2a4      	uxth	r4, r4
 8000210:	fbb3 f0f8 	udiv	r0, r3, r8
 8000214:	fb08 3310 	mls	r3, r8, r0, r3
 8000218:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800021c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000220:	45a6      	cmp	lr, r4
 8000222:	d909      	bls.n	8000238 <__udivmoddi4+0x8c>
 8000224:	193c      	adds	r4, r7, r4
 8000226:	f100 33ff 	add.w	r3, r0, #4294967295
 800022a:	f080 8105 	bcs.w	8000438 <__udivmoddi4+0x28c>
 800022e:	45a6      	cmp	lr, r4
 8000230:	f240 8102 	bls.w	8000438 <__udivmoddi4+0x28c>
 8000234:	3802      	subs	r0, #2
 8000236:	443c      	add	r4, r7
 8000238:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800023c:	eba4 040e 	sub.w	r4, r4, lr
 8000240:	2600      	movs	r6, #0
 8000242:	b11d      	cbz	r5, 800024c <__udivmoddi4+0xa0>
 8000244:	40d4      	lsrs	r4, r2
 8000246:	2300      	movs	r3, #0
 8000248:	e9c5 4300 	strd	r4, r3, [r5]
 800024c:	4631      	mov	r1, r6
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	b902      	cbnz	r2, 8000256 <__udivmoddi4+0xaa>
 8000254:	deff      	udf	#255	; 0xff
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	2a00      	cmp	r2, #0
 800025c:	d150      	bne.n	8000300 <__udivmoddi4+0x154>
 800025e:	1bcb      	subs	r3, r1, r7
 8000260:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000264:	fa1f f887 	uxth.w	r8, r7
 8000268:	2601      	movs	r6, #1
 800026a:	fbb3 fcfe 	udiv	ip, r3, lr
 800026e:	0c21      	lsrs	r1, r4, #16
 8000270:	fb0e 331c 	mls	r3, lr, ip, r3
 8000274:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000278:	fb08 f30c 	mul.w	r3, r8, ip
 800027c:	428b      	cmp	r3, r1
 800027e:	d907      	bls.n	8000290 <__udivmoddi4+0xe4>
 8000280:	1879      	adds	r1, r7, r1
 8000282:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000286:	d202      	bcs.n	800028e <__udivmoddi4+0xe2>
 8000288:	428b      	cmp	r3, r1
 800028a:	f200 80e9 	bhi.w	8000460 <__udivmoddi4+0x2b4>
 800028e:	4684      	mov	ip, r0
 8000290:	1ac9      	subs	r1, r1, r3
 8000292:	b2a3      	uxth	r3, r4
 8000294:	fbb1 f0fe 	udiv	r0, r1, lr
 8000298:	fb0e 1110 	mls	r1, lr, r0, r1
 800029c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002a0:	fb08 f800 	mul.w	r8, r8, r0
 80002a4:	45a0      	cmp	r8, r4
 80002a6:	d907      	bls.n	80002b8 <__udivmoddi4+0x10c>
 80002a8:	193c      	adds	r4, r7, r4
 80002aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ae:	d202      	bcs.n	80002b6 <__udivmoddi4+0x10a>
 80002b0:	45a0      	cmp	r8, r4
 80002b2:	f200 80d9 	bhi.w	8000468 <__udivmoddi4+0x2bc>
 80002b6:	4618      	mov	r0, r3
 80002b8:	eba4 0408 	sub.w	r4, r4, r8
 80002bc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002c0:	e7bf      	b.n	8000242 <__udivmoddi4+0x96>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0x12e>
 80002c6:	2d00      	cmp	r5, #0
 80002c8:	f000 80b1 	beq.w	800042e <__udivmoddi4+0x282>
 80002cc:	2600      	movs	r6, #0
 80002ce:	e9c5 0100 	strd	r0, r1, [r5]
 80002d2:	4630      	mov	r0, r6
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f683 	clz	r6, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d14a      	bne.n	8000378 <__udivmoddi4+0x1cc>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0x140>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80b8 	bhi.w	800045c <__udivmoddi4+0x2b0>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0103 	sbc.w	r1, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	468c      	mov	ip, r1
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	d0a8      	beq.n	800024c <__udivmoddi4+0xa0>
 80002fa:	e9c5 4c00 	strd	r4, ip, [r5]
 80002fe:	e7a5      	b.n	800024c <__udivmoddi4+0xa0>
 8000300:	f1c2 0320 	rsb	r3, r2, #32
 8000304:	fa20 f603 	lsr.w	r6, r0, r3
 8000308:	4097      	lsls	r7, r2
 800030a:	fa01 f002 	lsl.w	r0, r1, r2
 800030e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000312:	40d9      	lsrs	r1, r3
 8000314:	4330      	orrs	r0, r6
 8000316:	0c03      	lsrs	r3, r0, #16
 8000318:	fbb1 f6fe 	udiv	r6, r1, lr
 800031c:	fa1f f887 	uxth.w	r8, r7
 8000320:	fb0e 1116 	mls	r1, lr, r6, r1
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb06 f108 	mul.w	r1, r6, r8
 800032c:	4299      	cmp	r1, r3
 800032e:	fa04 f402 	lsl.w	r4, r4, r2
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x19c>
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	f106 3cff 	add.w	ip, r6, #4294967295
 800033a:	f080 808d 	bcs.w	8000458 <__udivmoddi4+0x2ac>
 800033e:	4299      	cmp	r1, r3
 8000340:	f240 808a 	bls.w	8000458 <__udivmoddi4+0x2ac>
 8000344:	3e02      	subs	r6, #2
 8000346:	443b      	add	r3, r7
 8000348:	1a5b      	subs	r3, r3, r1
 800034a:	b281      	uxth	r1, r0
 800034c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000350:	fb0e 3310 	mls	r3, lr, r0, r3
 8000354:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000358:	fb00 f308 	mul.w	r3, r0, r8
 800035c:	428b      	cmp	r3, r1
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x1c4>
 8000360:	1879      	adds	r1, r7, r1
 8000362:	f100 3cff 	add.w	ip, r0, #4294967295
 8000366:	d273      	bcs.n	8000450 <__udivmoddi4+0x2a4>
 8000368:	428b      	cmp	r3, r1
 800036a:	d971      	bls.n	8000450 <__udivmoddi4+0x2a4>
 800036c:	3802      	subs	r0, #2
 800036e:	4439      	add	r1, r7
 8000370:	1acb      	subs	r3, r1, r3
 8000372:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000376:	e778      	b.n	800026a <__udivmoddi4+0xbe>
 8000378:	f1c6 0c20 	rsb	ip, r6, #32
 800037c:	fa03 f406 	lsl.w	r4, r3, r6
 8000380:	fa22 f30c 	lsr.w	r3, r2, ip
 8000384:	431c      	orrs	r4, r3
 8000386:	fa20 f70c 	lsr.w	r7, r0, ip
 800038a:	fa01 f306 	lsl.w	r3, r1, r6
 800038e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000392:	fa21 f10c 	lsr.w	r1, r1, ip
 8000396:	431f      	orrs	r7, r3
 8000398:	0c3b      	lsrs	r3, r7, #16
 800039a:	fbb1 f9fe 	udiv	r9, r1, lr
 800039e:	fa1f f884 	uxth.w	r8, r4
 80003a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80003a6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003aa:	fb09 fa08 	mul.w	sl, r9, r8
 80003ae:	458a      	cmp	sl, r1
 80003b0:	fa02 f206 	lsl.w	r2, r2, r6
 80003b4:	fa00 f306 	lsl.w	r3, r0, r6
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x220>
 80003ba:	1861      	adds	r1, r4, r1
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c0:	d248      	bcs.n	8000454 <__udivmoddi4+0x2a8>
 80003c2:	458a      	cmp	sl, r1
 80003c4:	d946      	bls.n	8000454 <__udivmoddi4+0x2a8>
 80003c6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ca:	4421      	add	r1, r4
 80003cc:	eba1 010a 	sub.w	r1, r1, sl
 80003d0:	b2bf      	uxth	r7, r7
 80003d2:	fbb1 f0fe 	udiv	r0, r1, lr
 80003d6:	fb0e 1110 	mls	r1, lr, r0, r1
 80003da:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80003de:	fb00 f808 	mul.w	r8, r0, r8
 80003e2:	45b8      	cmp	r8, r7
 80003e4:	d907      	bls.n	80003f6 <__udivmoddi4+0x24a>
 80003e6:	19e7      	adds	r7, r4, r7
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d22e      	bcs.n	800044c <__udivmoddi4+0x2a0>
 80003ee:	45b8      	cmp	r8, r7
 80003f0:	d92c      	bls.n	800044c <__udivmoddi4+0x2a0>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4427      	add	r7, r4
 80003f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fa:	eba7 0708 	sub.w	r7, r7, r8
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	454f      	cmp	r7, r9
 8000404:	46c6      	mov	lr, r8
 8000406:	4649      	mov	r1, r9
 8000408:	d31a      	bcc.n	8000440 <__udivmoddi4+0x294>
 800040a:	d017      	beq.n	800043c <__udivmoddi4+0x290>
 800040c:	b15d      	cbz	r5, 8000426 <__udivmoddi4+0x27a>
 800040e:	ebb3 020e 	subs.w	r2, r3, lr
 8000412:	eb67 0701 	sbc.w	r7, r7, r1
 8000416:	fa07 fc0c 	lsl.w	ip, r7, ip
 800041a:	40f2      	lsrs	r2, r6
 800041c:	ea4c 0202 	orr.w	r2, ip, r2
 8000420:	40f7      	lsrs	r7, r6
 8000422:	e9c5 2700 	strd	r2, r7, [r5]
 8000426:	2600      	movs	r6, #0
 8000428:	4631      	mov	r1, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	462e      	mov	r6, r5
 8000430:	4628      	mov	r0, r5
 8000432:	e70b      	b.n	800024c <__udivmoddi4+0xa0>
 8000434:	4606      	mov	r6, r0
 8000436:	e6e9      	b.n	800020c <__udivmoddi4+0x60>
 8000438:	4618      	mov	r0, r3
 800043a:	e6fd      	b.n	8000238 <__udivmoddi4+0x8c>
 800043c:	4543      	cmp	r3, r8
 800043e:	d2e5      	bcs.n	800040c <__udivmoddi4+0x260>
 8000440:	ebb8 0e02 	subs.w	lr, r8, r2
 8000444:	eb69 0104 	sbc.w	r1, r9, r4
 8000448:	3801      	subs	r0, #1
 800044a:	e7df      	b.n	800040c <__udivmoddi4+0x260>
 800044c:	4608      	mov	r0, r1
 800044e:	e7d2      	b.n	80003f6 <__udivmoddi4+0x24a>
 8000450:	4660      	mov	r0, ip
 8000452:	e78d      	b.n	8000370 <__udivmoddi4+0x1c4>
 8000454:	4681      	mov	r9, r0
 8000456:	e7b9      	b.n	80003cc <__udivmoddi4+0x220>
 8000458:	4666      	mov	r6, ip
 800045a:	e775      	b.n	8000348 <__udivmoddi4+0x19c>
 800045c:	4630      	mov	r0, r6
 800045e:	e74a      	b.n	80002f6 <__udivmoddi4+0x14a>
 8000460:	f1ac 0c02 	sub.w	ip, ip, #2
 8000464:	4439      	add	r1, r7
 8000466:	e713      	b.n	8000290 <__udivmoddi4+0xe4>
 8000468:	3802      	subs	r0, #2
 800046a:	443c      	add	r4, r7
 800046c:	e724      	b.n	80002b8 <__udivmoddi4+0x10c>
 800046e:	bf00      	nop

08000470 <__aeabi_idiv0>:
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop

08000474 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000474:	b480      	push	{r7}
 8000476:	b085      	sub	sp, #20
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800047c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000480:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000482:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	4313      	orrs	r3, r2
 800048a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800048c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000490:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	4013      	ands	r3, r2
 8000496:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000498:	68fb      	ldr	r3, [r7, #12]
}
 800049a:	bf00      	nop
 800049c:	3714      	adds	r7, #20
 800049e:	46bd      	mov	sp, r7
 80004a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a4:	4770      	bx	lr
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b088      	sub	sp, #32
 80004ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ae:	f000 fb21 	bl	8000af4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b2:	f000 f87f 	bl	80005b4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004b6:	f000 f8c5 	bl	8000644 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ba:	f000 f979 	bl	80007b0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004be:	f000 f92b 	bl	8000718 <MX_USART1_UART_Init>
  MX_LPUART1_UART_Init();
 80004c2:	f000 f8dd 	bl	8000680 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80004c6:	2201      	movs	r2, #1
 80004c8:	2120      	movs	r1, #32
 80004ca:	4837      	ldr	r0, [pc, #220]	; (80005a8 <main+0x100>)
 80004cc:	f000 fe08 	bl	80010e0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80004d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004d4:	f000 fb94 	bl	8000c00 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80004d8:	2200      	movs	r2, #0
 80004da:	2120      	movs	r1, #32
 80004dc:	4832      	ldr	r0, [pc, #200]	; (80005a8 <main+0x100>)
 80004de:	f000 fdff 	bl	80010e0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80004e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004e6:	f000 fb8b 	bl	8000c00 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80004ea:	2201      	movs	r2, #1
 80004ec:	2120      	movs	r1, #32
 80004ee:	482e      	ldr	r0, [pc, #184]	; (80005a8 <main+0x100>)
 80004f0:	f000 fdf6 	bl	80010e0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80004f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004f8:	f000 fb82 	bl	8000c00 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80004fc:	2200      	movs	r2, #0
 80004fe:	2120      	movs	r1, #32
 8000500:	4829      	ldr	r0, [pc, #164]	; (80005a8 <main+0x100>)
 8000502:	f000 fded 	bl	80010e0 <HAL_GPIO_WritePin>
	volatile char rcv_buf[30] ="";
 8000506:	2300      	movs	r3, #0
 8000508:	603b      	str	r3, [r7, #0]
 800050a:	1d3b      	adds	r3, r7, #4
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	609a      	str	r2, [r3, #8]
 8000514:	60da      	str	r2, [r3, #12]
 8000516:	611a      	str	r2, [r3, #16]
 8000518:	615a      	str	r2, [r3, #20]
 800051a:	831a      	strh	r2, [r3, #24]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

		if(HAL_UART_Receive(&huart1, rcv_buf, 6, HAL_MAX_DELAY) != HAL_OK)
 800051c:	4639      	mov	r1, r7
 800051e:	f04f 33ff 	mov.w	r3, #4294967295
 8000522:	2206      	movs	r2, #6
 8000524:	4821      	ldr	r0, [pc, #132]	; (80005ac <main+0x104>)
 8000526:	f002 fa6f 	bl	8002a08 <HAL_UART_Receive>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d002      	beq.n	8000536 <main+0x8e>
		{
			Error_Handler();
 8000530:	f000 f966 	bl	8000800 <Error_Handler>
 8000534:	e003      	b.n	800053e <main+0x96>

		}
		else
		{
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8000536:	2120      	movs	r1, #32
 8000538:	481b      	ldr	r0, [pc, #108]	; (80005a8 <main+0x100>)
 800053a:	f000 fde9 	bl	8001110 <HAL_GPIO_TogglePin>
		}

		HAL_Delay(5000);
 800053e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000542:	f000 fb5d 	bl	8000c00 <HAL_Delay>

		if(HAL_UART_Transmit(&huart1, (uint8_t*)"Hello!\r\n", 15, HAL_MAX_DELAY) != HAL_OK)
 8000546:	f04f 33ff 	mov.w	r3, #4294967295
 800054a:	220f      	movs	r2, #15
 800054c:	4918      	ldr	r1, [pc, #96]	; (80005b0 <main+0x108>)
 800054e:	4817      	ldr	r0, [pc, #92]	; (80005ac <main+0x104>)
 8000550:	f002 f9c4 	bl	80028dc <HAL_UART_Transmit>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d020      	beq.n	800059c <main+0xf4>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800055a:	2201      	movs	r2, #1
 800055c:	2120      	movs	r1, #32
 800055e:	4812      	ldr	r0, [pc, #72]	; (80005a8 <main+0x100>)
 8000560:	f000 fdbe 	bl	80010e0 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 8000564:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000568:	f000 fb4a 	bl	8000c00 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800056c:	2200      	movs	r2, #0
 800056e:	2120      	movs	r1, #32
 8000570:	480d      	ldr	r0, [pc, #52]	; (80005a8 <main+0x100>)
 8000572:	f000 fdb5 	bl	80010e0 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 8000576:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800057a:	f000 fb41 	bl	8000c00 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800057e:	2201      	movs	r2, #1
 8000580:	2120      	movs	r1, #32
 8000582:	4809      	ldr	r0, [pc, #36]	; (80005a8 <main+0x100>)
 8000584:	f000 fdac 	bl	80010e0 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 8000588:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800058c:	f000 fb38 	bl	8000c00 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000590:	2200      	movs	r2, #0
 8000592:	2120      	movs	r1, #32
 8000594:	4804      	ldr	r0, [pc, #16]	; (80005a8 <main+0x100>)
 8000596:	f000 fda3 	bl	80010e0 <HAL_GPIO_WritePin>
 800059a:	e7bf      	b.n	800051c <main+0x74>
		}
		else
		{
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 800059c:	2120      	movs	r1, #32
 800059e:	4802      	ldr	r0, [pc, #8]	; (80005a8 <main+0x100>)
 80005a0:	f000 fdb6 	bl	8001110 <HAL_GPIO_TogglePin>
		if(HAL_UART_Receive(&huart1, rcv_buf, 6, HAL_MAX_DELAY) != HAL_OK)
 80005a4:	e7ba      	b.n	800051c <main+0x74>
 80005a6:	bf00      	nop
 80005a8:	48000400 	.word	0x48000400
 80005ac:	200000bc 	.word	0x200000bc
 80005b0:	0800359c 	.word	0x0800359c

080005b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b098      	sub	sp, #96	; 0x60
 80005b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ba:	f107 031c 	add.w	r3, r7, #28
 80005be:	2244      	movs	r2, #68	; 0x44
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f002 ffd6 	bl	8003574 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c8:	463b      	mov	r3, r7
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
 80005d2:	60da      	str	r2, [r3, #12]
 80005d4:	611a      	str	r2, [r3, #16]
 80005d6:	615a      	str	r2, [r3, #20]
 80005d8:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 80005da:	2322      	movs	r3, #34	; 0x22
 80005dc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005e4:	2301      	movs	r3, #1
 80005e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e8:	2340      	movs	r3, #64	; 0x40
 80005ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80005ec:	2300      	movs	r3, #0
 80005ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005f0:	2360      	movs	r3, #96	; 0x60
 80005f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005f4:	2300      	movs	r3, #0
 80005f6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f8:	f107 031c 	add.w	r3, r7, #28
 80005fc:	4618      	mov	r0, r3
 80005fe:	f001 f8f3 	bl	80017e8 <HAL_RCC_OscConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000608:	f000 f8fa 	bl	8000800 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800060c:	236f      	movs	r3, #111	; 0x6f
 800060e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000610:	2300      	movs	r3, #0
 8000612:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000628:	463b      	mov	r3, r7
 800062a:	2100      	movs	r1, #0
 800062c:	4618      	mov	r0, r3
 800062e:	f001 fc29 	bl	8001e84 <HAL_RCC_ClockConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000638:	f000 f8e2 	bl	8000800 <Error_Handler>
  }
}
 800063c:	bf00      	nop
 800063e:	3760      	adds	r7, #96	; 0x60
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}

08000644 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b08c      	sub	sp, #48	; 0x30
 8000648:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800064a:	463b      	mov	r3, r7
 800064c:	2230      	movs	r2, #48	; 0x30
 800064e:	2100      	movs	r1, #0
 8000650:	4618      	mov	r0, r3
 8000652:	f002 ff8f 	bl	8003574 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000656:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800065a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800065c:	2300      	movs	r3, #0
 800065e:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000660:	2310      	movs	r3, #16
 8000662:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000664:	463b      	mov	r3, r7
 8000666:	4618      	mov	r0, r3
 8000668:	f001 ffd2 	bl	8002610 <HAL_RCCEx_PeriphCLKConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000672:	f000 f8c5 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000676:	bf00      	nop
 8000678:	3730      	adds	r7, #48	; 0x30
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
	...

08000680 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000684:	4b22      	ldr	r3, [pc, #136]	; (8000710 <MX_LPUART1_UART_Init+0x90>)
 8000686:	4a23      	ldr	r2, [pc, #140]	; (8000714 <MX_LPUART1_UART_Init+0x94>)
 8000688:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 800068a:	4b21      	ldr	r3, [pc, #132]	; (8000710 <MX_LPUART1_UART_Init+0x90>)
 800068c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000690:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000692:	4b1f      	ldr	r3, [pc, #124]	; (8000710 <MX_LPUART1_UART_Init+0x90>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000698:	4b1d      	ldr	r3, [pc, #116]	; (8000710 <MX_LPUART1_UART_Init+0x90>)
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800069e:	4b1c      	ldr	r3, [pc, #112]	; (8000710 <MX_LPUART1_UART_Init+0x90>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006a4:	4b1a      	ldr	r3, [pc, #104]	; (8000710 <MX_LPUART1_UART_Init+0x90>)
 80006a6:	220c      	movs	r2, #12
 80006a8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006aa:	4b19      	ldr	r3, [pc, #100]	; (8000710 <MX_LPUART1_UART_Init+0x90>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006b0:	4b17      	ldr	r3, [pc, #92]	; (8000710 <MX_LPUART1_UART_Init+0x90>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006b6:	4b16      	ldr	r3, [pc, #88]	; (8000710 <MX_LPUART1_UART_Init+0x90>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006bc:	4b14      	ldr	r3, [pc, #80]	; (8000710 <MX_LPUART1_UART_Init+0x90>)
 80006be:	2200      	movs	r2, #0
 80006c0:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80006c2:	4b13      	ldr	r3, [pc, #76]	; (8000710 <MX_LPUART1_UART_Init+0x90>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006c8:	4811      	ldr	r0, [pc, #68]	; (8000710 <MX_LPUART1_UART_Init+0x90>)
 80006ca:	f002 f8b7 	bl	800283c <HAL_UART_Init>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80006d4:	f000 f894 	bl	8000800 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006d8:	2100      	movs	r1, #0
 80006da:	480d      	ldr	r0, [pc, #52]	; (8000710 <MX_LPUART1_UART_Init+0x90>)
 80006dc:	f002 fe5c 	bl	8003398 <HAL_UARTEx_SetTxFifoThreshold>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80006e6:	f000 f88b 	bl	8000800 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006ea:	2100      	movs	r1, #0
 80006ec:	4808      	ldr	r0, [pc, #32]	; (8000710 <MX_LPUART1_UART_Init+0x90>)
 80006ee:	f002 fe91 	bl	8003414 <HAL_UARTEx_SetRxFifoThreshold>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80006f8:	f000 f882 	bl	8000800 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80006fc:	4804      	ldr	r0, [pc, #16]	; (8000710 <MX_LPUART1_UART_Init+0x90>)
 80006fe:	f002 fe12 	bl	8003326 <HAL_UARTEx_DisableFifoMode>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000708:	f000 f87a 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	2000002c 	.word	0x2000002c
 8000714:	40008000 	.word	0x40008000

08000718 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800071c:	4b22      	ldr	r3, [pc, #136]	; (80007a8 <MX_USART1_UART_Init+0x90>)
 800071e:	4a23      	ldr	r2, [pc, #140]	; (80007ac <MX_USART1_UART_Init+0x94>)
 8000720:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000722:	4b21      	ldr	r3, [pc, #132]	; (80007a8 <MX_USART1_UART_Init+0x90>)
 8000724:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000728:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800072a:	4b1f      	ldr	r3, [pc, #124]	; (80007a8 <MX_USART1_UART_Init+0x90>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000730:	4b1d      	ldr	r3, [pc, #116]	; (80007a8 <MX_USART1_UART_Init+0x90>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000736:	4b1c      	ldr	r3, [pc, #112]	; (80007a8 <MX_USART1_UART_Init+0x90>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800073c:	4b1a      	ldr	r3, [pc, #104]	; (80007a8 <MX_USART1_UART_Init+0x90>)
 800073e:	220c      	movs	r2, #12
 8000740:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000742:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <MX_USART1_UART_Init+0x90>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000748:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <MX_USART1_UART_Init+0x90>)
 800074a:	2200      	movs	r2, #0
 800074c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800074e:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <MX_USART1_UART_Init+0x90>)
 8000750:	2200      	movs	r2, #0
 8000752:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000754:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <MX_USART1_UART_Init+0x90>)
 8000756:	2200      	movs	r2, #0
 8000758:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800075a:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <MX_USART1_UART_Init+0x90>)
 800075c:	2200      	movs	r2, #0
 800075e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000760:	4811      	ldr	r0, [pc, #68]	; (80007a8 <MX_USART1_UART_Init+0x90>)
 8000762:	f002 f86b 	bl	800283c <HAL_UART_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800076c:	f000 f848 	bl	8000800 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000770:	2100      	movs	r1, #0
 8000772:	480d      	ldr	r0, [pc, #52]	; (80007a8 <MX_USART1_UART_Init+0x90>)
 8000774:	f002 fe10 	bl	8003398 <HAL_UARTEx_SetTxFifoThreshold>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800077e:	f000 f83f 	bl	8000800 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000782:	2100      	movs	r1, #0
 8000784:	4808      	ldr	r0, [pc, #32]	; (80007a8 <MX_USART1_UART_Init+0x90>)
 8000786:	f002 fe45 	bl	8003414 <HAL_UARTEx_SetRxFifoThreshold>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000790:	f000 f836 	bl	8000800 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000794:	4804      	ldr	r0, [pc, #16]	; (80007a8 <MX_USART1_UART_Init+0x90>)
 8000796:	f002 fdc6 	bl	8003326 <HAL_UARTEx_DisableFifoMode>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80007a0:	f000 f82e 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	200000bc 	.word	0x200000bc
 80007ac:	40013800 	.word	0x40013800

080007b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b086      	sub	sp, #24
 80007b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c4:	2001      	movs	r0, #1
 80007c6:	f7ff fe55 	bl	8000474 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ca:	2002      	movs	r0, #2
 80007cc:	f7ff fe52 	bl	8000474 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2120      	movs	r1, #32
 80007d4:	4809      	ldr	r0, [pc, #36]	; (80007fc <MX_GPIO_Init+0x4c>)
 80007d6:	f000 fc83 	bl	80010e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80007da:	2320      	movs	r3, #32
 80007dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007de:	2301      	movs	r3, #1
 80007e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	4619      	mov	r1, r3
 80007ee:	4803      	ldr	r0, [pc, #12]	; (80007fc <MX_GPIO_Init+0x4c>)
 80007f0:	f000 fb0e 	bl	8000e10 <HAL_GPIO_Init>

}
 80007f4:	bf00      	nop
 80007f6:	3718      	adds	r7, #24
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	48000400 	.word	0x48000400

08000800 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000804:	b672      	cpsid	i
}
 8000806:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000808:	e7fe      	b.n	8000808 <Error_Handler+0x8>

0800080a <LL_AHB2_GRP1_EnableClock>:
{
 800080a:	b480      	push	{r7}
 800080c:	b085      	sub	sp, #20
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000812:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000816:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000818:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	4313      	orrs	r3, r2
 8000820:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000826:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	4013      	ands	r3, r2
 800082c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800082e:	68fb      	ldr	r3, [r7, #12]
}
 8000830:	bf00      	nop
 8000832:	3714      	adds	r7, #20
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr

0800083c <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800083c:	b480      	push	{r7}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000844:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000848:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800084a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4313      	orrs	r3, r2
 8000852:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000854:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000858:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	4013      	ands	r3, r2
 800085e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000860:	68fb      	ldr	r3, [r7, #12]
}
 8000862:	bf00      	nop
 8000864:	3714      	adds	r7, #20
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr

0800086e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800086e:	b480      	push	{r7}
 8000870:	b085      	sub	sp, #20
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000876:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800087a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800087c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	4313      	orrs	r3, r2
 8000884:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000886:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800088a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	4013      	ands	r3, r2
 8000890:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000892:	68fb      	ldr	r3, [r7, #12]
}
 8000894:	bf00      	nop
 8000896:	3714      	adds	r7, #20
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
	...

080008b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b094      	sub	sp, #80	; 0x50
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008c8:	f107 030c 	add.w	r3, r7, #12
 80008cc:	2230      	movs	r2, #48	; 0x30
 80008ce:	2100      	movs	r1, #0
 80008d0:	4618      	mov	r0, r3
 80008d2:	f002 fe4f 	bl	8003574 <memset>
  if(huart->Instance==LPUART1)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4a2c      	ldr	r2, [pc, #176]	; (800098c <HAL_UART_MspInit+0xdc>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d125      	bne.n	800092c <HAL_UART_MspInit+0x7c>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80008e0:	2302      	movs	r3, #2
 80008e2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008e8:	f107 030c 	add.w	r3, r7, #12
 80008ec:	4618      	mov	r0, r3
 80008ee:	f001 fe8f 	bl	8002610 <HAL_RCCEx_PeriphCLKConfig>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008f8:	f7ff ff82 	bl	8000800 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80008fc:	2001      	movs	r0, #1
 80008fe:	f7ff ff9d 	bl	800083c <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000902:	2001      	movs	r0, #1
 8000904:	f7ff ff81 	bl	800080a <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000908:	230c      	movs	r3, #12
 800090a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090c:	2302      	movs	r3, #2
 800090e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000918:	2308      	movs	r3, #8
 800091a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000920:	4619      	mov	r1, r3
 8000922:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000926:	f000 fa73 	bl	8000e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800092a:	e02b      	b.n	8000984 <HAL_UART_MspInit+0xd4>
  else if(huart->Instance==USART1)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a17      	ldr	r2, [pc, #92]	; (8000990 <HAL_UART_MspInit+0xe0>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d126      	bne.n	8000984 <HAL_UART_MspInit+0xd4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000936:	2301      	movs	r3, #1
 8000938:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800093a:	2300      	movs	r3, #0
 800093c:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800093e:	f107 030c 	add.w	r3, r7, #12
 8000942:	4618      	mov	r0, r3
 8000944:	f001 fe64 	bl	8002610 <HAL_RCCEx_PeriphCLKConfig>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <HAL_UART_MspInit+0xa2>
      Error_Handler();
 800094e:	f7ff ff57 	bl	8000800 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000952:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000956:	f7ff ff8a 	bl	800086e <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	2001      	movs	r0, #1
 800095c:	f7ff ff55 	bl	800080a <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000960:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000964:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000966:	2302      	movs	r3, #2
 8000968:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	2300      	movs	r3, #0
 8000970:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000972:	2307      	movs	r3, #7
 8000974:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000976:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800097a:	4619      	mov	r1, r3
 800097c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000980:	f000 fa46 	bl	8000e10 <HAL_GPIO_Init>
}
 8000984:	bf00      	nop
 8000986:	3750      	adds	r7, #80	; 0x50
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40008000 	.word	0x40008000
 8000990:	40013800 	.word	0x40013800

08000994 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000998:	e7fe      	b.n	8000998 <NMI_Handler+0x4>

0800099a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800099e:	e7fe      	b.n	800099e <HardFault_Handler+0x4>

080009a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <MemManage_Handler+0x4>

080009a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009aa:	e7fe      	b.n	80009aa <BusFault_Handler+0x4>

080009ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <UsageFault_Handler+0x4>

080009b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr

080009ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e0:	f000 f8e2 	bl	8000ba8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e4:	bf00      	nop
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80009ec:	4b22      	ldr	r3, [pc, #136]	; (8000a78 <SystemInit+0x90>)
 80009ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009f2:	4a21      	ldr	r2, [pc, #132]	; (8000a78 <SystemInit+0x90>)
 80009f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80009fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a06:	f043 0301 	orr.w	r3, r3, #1
 8000a0a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000a0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a10:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000a14:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000a16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a20:	4b16      	ldr	r3, [pc, #88]	; (8000a7c <SystemInit+0x94>)
 8000a22:	4013      	ands	r3, r2
 8000a24:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000a26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000a2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a32:	f023 0305 	bic.w	r3, r3, #5
 8000a36:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000a3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000a42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a46:	f023 0301 	bic.w	r3, r3, #1
 8000a4a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000a4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a52:	4a0b      	ldr	r2, [pc, #44]	; (8000a80 <SystemInit+0x98>)
 8000a54:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a64:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	619a      	str	r2, [r3, #24]
}
 8000a6e:	bf00      	nop
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	e000ed00 	.word	0xe000ed00
 8000a7c:	faf6fefb 	.word	0xfaf6fefb
 8000a80:	22041000 	.word	0x22041000

08000a84 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000a84:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a86:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a88:	3304      	adds	r3, #4

08000a8a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a8a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a8c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000a8e:	d3f9      	bcc.n	8000a84 <CopyDataInit>
  bx lr
 8000a90:	4770      	bx	lr

08000a92 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000a92:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000a94:	3004      	adds	r0, #4

08000a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000a96:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000a98:	d3fb      	bcc.n	8000a92 <FillZerobss>
  bx lr
 8000a9a:	4770      	bx	lr

08000a9c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a9c:	480c      	ldr	r0, [pc, #48]	; (8000ad0 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000a9e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000aa0:	f7ff ffa2 	bl	80009e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000aa4:	480b      	ldr	r0, [pc, #44]	; (8000ad4 <LoopForever+0x8>)
 8000aa6:	490c      	ldr	r1, [pc, #48]	; (8000ad8 <LoopForever+0xc>)
 8000aa8:	4a0c      	ldr	r2, [pc, #48]	; (8000adc <LoopForever+0x10>)
 8000aaa:	2300      	movs	r3, #0
 8000aac:	f7ff ffed 	bl	8000a8a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000ab0:	480b      	ldr	r0, [pc, #44]	; (8000ae0 <LoopForever+0x14>)
 8000ab2:	490c      	ldr	r1, [pc, #48]	; (8000ae4 <LoopForever+0x18>)
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	f7ff ffee 	bl	8000a96 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000aba:	480b      	ldr	r0, [pc, #44]	; (8000ae8 <LoopForever+0x1c>)
 8000abc:	490b      	ldr	r1, [pc, #44]	; (8000aec <LoopForever+0x20>)
 8000abe:	2300      	movs	r3, #0
 8000ac0:	f7ff ffe9 	bl	8000a96 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ac4:	f002 fd32 	bl	800352c <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000ac8:	f7ff fcee 	bl	80004a8 <main>

08000acc <LoopForever>:

LoopForever:
  b LoopForever
 8000acc:	e7fe      	b.n	8000acc <LoopForever>
 8000ace:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000ad0:	20003000 	.word	0x20003000
  INIT_DATA _sdata, _edata, _sidata
 8000ad4:	20000004 	.word	0x20000004
 8000ad8:	20000010 	.word	0x20000010
 8000adc:	080036a0 	.word	0x080036a0
  INIT_BSS _sbss, _ebss
 8000ae0:	20000010 	.word	0x20000010
 8000ae4:	20000150 	.word	0x20000150
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000ae8:	20030000 	.word	0x20030000
 8000aec:	20030000 	.word	0x20030000

08000af0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000af0:	e7fe      	b.n	8000af0 <ADC1_IRQHandler>
	...

08000af4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000afa:	2300      	movs	r3, #0
 8000afc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000afe:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <HAL_Init+0x3c>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a0b      	ldr	r2, [pc, #44]	; (8000b30 <HAL_Init+0x3c>)
 8000b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b08:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b0a:	2003      	movs	r0, #3
 8000b0c:	f000 f94e 	bl	8000dac <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b10:	200f      	movs	r0, #15
 8000b12:	f000 f80f 	bl	8000b34 <HAL_InitTick>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d002      	beq.n	8000b22 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	71fb      	strb	r3, [r7, #7]
 8000b20:	e001      	b.n	8000b26 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b22:	f7ff febd 	bl	80008a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b26:	79fb      	ldrb	r3, [r7, #7]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	58004000 	.word	0x58004000

08000b34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000b40:	4b17      	ldr	r3, [pc, #92]	; (8000ba0 <HAL_InitTick+0x6c>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d024      	beq.n	8000b92 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b48:	f001 fb4a 	bl	80021e0 <HAL_RCC_GetHCLKFreq>
 8000b4c:	4602      	mov	r2, r0
 8000b4e:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <HAL_InitTick+0x6c>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	4619      	mov	r1, r3
 8000b54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b58:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b60:	4618      	mov	r0, r3
 8000b62:	f000 f948 	bl	8000df6 <HAL_SYSTICK_Config>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d10f      	bne.n	8000b8c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2b0f      	cmp	r3, #15
 8000b70:	d809      	bhi.n	8000b86 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b72:	2200      	movs	r2, #0
 8000b74:	6879      	ldr	r1, [r7, #4]
 8000b76:	f04f 30ff 	mov.w	r0, #4294967295
 8000b7a:	f000 f922 	bl	8000dc2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b7e:	4a09      	ldr	r2, [pc, #36]	; (8000ba4 <HAL_InitTick+0x70>)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6013      	str	r3, [r2, #0]
 8000b84:	e007      	b.n	8000b96 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
 8000b88:	73fb      	strb	r3, [r7, #15]
 8000b8a:	e004      	b.n	8000b96 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	73fb      	strb	r3, [r7, #15]
 8000b90:	e001      	b.n	8000b96 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3710      	adds	r7, #16
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	2000000c 	.word	0x2000000c
 8000ba4:	20000008 	.word	0x20000008

08000ba8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <HAL_IncTick+0x20>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_IncTick+0x24>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	4a04      	ldr	r2, [pc, #16]	; (8000bcc <HAL_IncTick+0x24>)
 8000bba:	6013      	str	r3, [r2, #0]
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	2000000c 	.word	0x2000000c
 8000bcc:	2000014c 	.word	0x2000014c

08000bd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd4:	4b03      	ldr	r3, [pc, #12]	; (8000be4 <HAL_GetTick+0x14>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	2000014c 	.word	0x2000014c

08000be8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000bec:	4b03      	ldr	r3, [pc, #12]	; (8000bfc <HAL_GetTickPrio+0x14>)
 8000bee:	681b      	ldr	r3, [r3, #0]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	20000008 	.word	0x20000008

08000c00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8000c08:	f7ff ffe2 	bl	8000bd0 <HAL_GetTick>
 8000c0c:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c18:	d005      	beq.n	8000c26 <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 8000c1a:	4b0a      	ldr	r3, [pc, #40]	; (8000c44 <HAL_Delay+0x44>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	461a      	mov	r2, r3
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	4413      	add	r3, r2
 8000c24:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8000c26:	bf00      	nop
 8000c28:	f7ff ffd2 	bl	8000bd0 <HAL_GetTick>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	68fa      	ldr	r2, [r7, #12]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d8f7      	bhi.n	8000c28 <HAL_Delay+0x28>
    {
    }
  }
 8000c38:	bf00      	nop
 8000c3a:	bf00      	nop
 8000c3c:	3710      	adds	r7, #16
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	2000000c 	.word	0x2000000c

08000c48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f003 0307 	and.w	r3, r3, #7
 8000c56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c58:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <__NVIC_SetPriorityGrouping+0x44>)
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c5e:	68ba      	ldr	r2, [r7, #8]
 8000c60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c64:	4013      	ands	r3, r2
 8000c66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c7a:	4a04      	ldr	r2, [pc, #16]	; (8000c8c <__NVIC_SetPriorityGrouping+0x44>)
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	60d3      	str	r3, [r2, #12]
}
 8000c80:	bf00      	nop
 8000c82:	3714      	adds	r7, #20
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c94:	4b04      	ldr	r3, [pc, #16]	; (8000ca8 <__NVIC_GetPriorityGrouping+0x18>)
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	0a1b      	lsrs	r3, r3, #8
 8000c9a:	f003 0307 	and.w	r3, r3, #7
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	6039      	str	r1, [r7, #0]
 8000cb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	db0a      	blt.n	8000cd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	b2da      	uxtb	r2, r3
 8000cc4:	490c      	ldr	r1, [pc, #48]	; (8000cf8 <__NVIC_SetPriority+0x4c>)
 8000cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cca:	0112      	lsls	r2, r2, #4
 8000ccc:	b2d2      	uxtb	r2, r2
 8000cce:	440b      	add	r3, r1
 8000cd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd4:	e00a      	b.n	8000cec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	4908      	ldr	r1, [pc, #32]	; (8000cfc <__NVIC_SetPriority+0x50>)
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	f003 030f 	and.w	r3, r3, #15
 8000ce2:	3b04      	subs	r3, #4
 8000ce4:	0112      	lsls	r2, r2, #4
 8000ce6:	b2d2      	uxtb	r2, r2
 8000ce8:	440b      	add	r3, r1
 8000cea:	761a      	strb	r2, [r3, #24]
}
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000e100 	.word	0xe000e100
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b089      	sub	sp, #36	; 0x24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	f1c3 0307 	rsb	r3, r3, #7
 8000d1a:	2b04      	cmp	r3, #4
 8000d1c:	bf28      	it	cs
 8000d1e:	2304      	movcs	r3, #4
 8000d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	3304      	adds	r3, #4
 8000d26:	2b06      	cmp	r3, #6
 8000d28:	d902      	bls.n	8000d30 <NVIC_EncodePriority+0x30>
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	3b03      	subs	r3, #3
 8000d2e:	e000      	b.n	8000d32 <NVIC_EncodePriority+0x32>
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d34:	f04f 32ff 	mov.w	r2, #4294967295
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	43da      	mvns	r2, r3
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	401a      	ands	r2, r3
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d48:	f04f 31ff 	mov.w	r1, #4294967295
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d52:	43d9      	mvns	r1, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d58:	4313      	orrs	r3, r2
         );
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3724      	adds	r7, #36	; 0x24
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
	...

08000d68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3b01      	subs	r3, #1
 8000d74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d78:	d301      	bcc.n	8000d7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e00f      	b.n	8000d9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d7e:	4a0a      	ldr	r2, [pc, #40]	; (8000da8 <SysTick_Config+0x40>)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d86:	210f      	movs	r1, #15
 8000d88:	f04f 30ff 	mov.w	r0, #4294967295
 8000d8c:	f7ff ff8e 	bl	8000cac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d90:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <SysTick_Config+0x40>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d96:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <SysTick_Config+0x40>)
 8000d98:	2207      	movs	r2, #7
 8000d9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	e000e010 	.word	0xe000e010

08000dac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	f7ff ff47 	bl	8000c48 <__NVIC_SetPriorityGrouping>
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b086      	sub	sp, #24
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	4603      	mov	r3, r0
 8000dca:	60b9      	str	r1, [r7, #8]
 8000dcc:	607a      	str	r2, [r7, #4]
 8000dce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd0:	f7ff ff5e 	bl	8000c90 <__NVIC_GetPriorityGrouping>
 8000dd4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	68b9      	ldr	r1, [r7, #8]
 8000dda:	6978      	ldr	r0, [r7, #20]
 8000ddc:	f7ff ff90 	bl	8000d00 <NVIC_EncodePriority>
 8000de0:	4602      	mov	r2, r0
 8000de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000de6:	4611      	mov	r1, r2
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff ff5f 	bl	8000cac <__NVIC_SetPriority>
}
 8000dee:	bf00      	nop
 8000df0:	3718      	adds	r7, #24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b082      	sub	sp, #8
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f7ff ffb2 	bl	8000d68 <SysTick_Config>
 8000e04:	4603      	mov	r3, r0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
	...

08000e10 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b087      	sub	sp, #28
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e1e:	e146      	b.n	80010ae <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	2101      	movs	r1, #1
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	f000 8138 	beq.w	80010a8 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f003 0303 	and.w	r3, r3, #3
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d005      	beq.n	8000e50 <HAL_GPIO_Init+0x40>
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f003 0303 	and.w	r3, r3, #3
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	d130      	bne.n	8000eb2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	689b      	ldr	r3, [r3, #8]
 8000e54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	2203      	movs	r2, #3
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	43db      	mvns	r3, r3
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	4013      	ands	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	68da      	ldr	r2, [r3, #12]
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e86:	2201      	movs	r2, #1
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	4013      	ands	r3, r2
 8000e94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	091b      	lsrs	r3, r3, #4
 8000e9c:	f003 0201 	and.w	r2, r3, #1
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f003 0303 	and.w	r3, r3, #3
 8000eba:	2b03      	cmp	r3, #3
 8000ebc:	d017      	beq.n	8000eee <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	68db      	ldr	r3, [r3, #12]
 8000ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	2203      	movs	r2, #3
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	689a      	ldr	r2, [r3, #8]
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f003 0303 	and.w	r3, r3, #3
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d123      	bne.n	8000f42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	08da      	lsrs	r2, r3, #3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	3208      	adds	r2, #8
 8000f02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	f003 0307 	and.w	r3, r3, #7
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	220f      	movs	r2, #15
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	43db      	mvns	r3, r3
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	691a      	ldr	r2, [r3, #16]
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	f003 0307 	and.w	r3, r3, #7
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	08da      	lsrs	r2, r3, #3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3208      	adds	r2, #8
 8000f3c:	6939      	ldr	r1, [r7, #16]
 8000f3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	2203      	movs	r2, #3
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43db      	mvns	r3, r3
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	4013      	ands	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f003 0203 	and.w	r2, r3, #3
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	f000 8092 	beq.w	80010a8 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000f84:	4a51      	ldr	r2, [pc, #324]	; (80010cc <HAL_GPIO_Init+0x2bc>)
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	089b      	lsrs	r3, r3, #2
 8000f8a:	3302      	adds	r3, #2
 8000f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	f003 0303 	and.w	r3, r3, #3
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	220f      	movs	r2, #15
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fae:	d013      	beq.n	8000fd8 <HAL_GPIO_Init+0x1c8>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a47      	ldr	r2, [pc, #284]	; (80010d0 <HAL_GPIO_Init+0x2c0>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d00d      	beq.n	8000fd4 <HAL_GPIO_Init+0x1c4>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4a46      	ldr	r2, [pc, #280]	; (80010d4 <HAL_GPIO_Init+0x2c4>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d007      	beq.n	8000fd0 <HAL_GPIO_Init+0x1c0>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4a45      	ldr	r2, [pc, #276]	; (80010d8 <HAL_GPIO_Init+0x2c8>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d101      	bne.n	8000fcc <HAL_GPIO_Init+0x1bc>
 8000fc8:	2304      	movs	r3, #4
 8000fca:	e006      	b.n	8000fda <HAL_GPIO_Init+0x1ca>
 8000fcc:	2307      	movs	r3, #7
 8000fce:	e004      	b.n	8000fda <HAL_GPIO_Init+0x1ca>
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	e002      	b.n	8000fda <HAL_GPIO_Init+0x1ca>
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e000      	b.n	8000fda <HAL_GPIO_Init+0x1ca>
 8000fd8:	2300      	movs	r3, #0
 8000fda:	697a      	ldr	r2, [r7, #20]
 8000fdc:	f002 0203 	and.w	r2, r2, #3
 8000fe0:	0092      	lsls	r2, r2, #2
 8000fe2:	4093      	lsls	r3, r2
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fea:	4938      	ldr	r1, [pc, #224]	; (80010cc <HAL_GPIO_Init+0x2bc>)
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	089b      	lsrs	r3, r3, #2
 8000ff0:	3302      	adds	r3, #2
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ff8:	4b38      	ldr	r3, [pc, #224]	; (80010dc <HAL_GPIO_Init+0x2cc>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	43db      	mvns	r3, r3
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	4013      	ands	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d003      	beq.n	800101c <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	4313      	orrs	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800101c:	4a2f      	ldr	r2, [pc, #188]	; (80010dc <HAL_GPIO_Init+0x2cc>)
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001022:	4b2e      	ldr	r3, [pc, #184]	; (80010dc <HAL_GPIO_Init+0x2cc>)
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	43db      	mvns	r3, r3
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	4013      	ands	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d003      	beq.n	8001046 <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	4313      	orrs	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001046:	4a25      	ldr	r2, [pc, #148]	; (80010dc <HAL_GPIO_Init+0x2cc>)
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800104c:	4b23      	ldr	r3, [pc, #140]	; (80010dc <HAL_GPIO_Init+0x2cc>)
 800104e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001052:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	43db      	mvns	r3, r3
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	4013      	ands	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d003      	beq.n	8001072 <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	4313      	orrs	r3, r2
 8001070:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001072:	4a1a      	ldr	r2, [pc, #104]	; (80010dc <HAL_GPIO_Init+0x2cc>)
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800107a:	4b18      	ldr	r3, [pc, #96]	; (80010dc <HAL_GPIO_Init+0x2cc>)
 800107c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001080:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	43db      	mvns	r3, r3
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4013      	ands	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d003      	beq.n	80010a0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	4313      	orrs	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010a0:	4a0e      	ldr	r2, [pc, #56]	; (80010dc <HAL_GPIO_Init+0x2cc>)
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	3301      	adds	r3, #1
 80010ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	fa22 f303 	lsr.w	r3, r2, r3
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	f47f aeb1 	bne.w	8000e20 <HAL_GPIO_Init+0x10>
  }
}
 80010be:	bf00      	nop
 80010c0:	bf00      	nop
 80010c2:	371c      	adds	r7, #28
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	40010000 	.word	0x40010000
 80010d0:	48000400 	.word	0x48000400
 80010d4:	48000800 	.word	0x48000800
 80010d8:	48001000 	.word	0x48001000
 80010dc:	58000800 	.word	0x58000800

080010e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	460b      	mov	r3, r1
 80010ea:	807b      	strh	r3, [r7, #2]
 80010ec:	4613      	mov	r3, r2
 80010ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010f0:	787b      	ldrb	r3, [r7, #1]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d003      	beq.n	80010fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010f6:	887a      	ldrh	r2, [r7, #2]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010fc:	e002      	b.n	8001104 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010fe:	887a      	ldrh	r2, [r7, #2]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	460b      	mov	r3, r1
 800111a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	695b      	ldr	r3, [r3, #20]
 8001120:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001122:	887a      	ldrh	r2, [r7, #2]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	4013      	ands	r3, r2
 8001128:	041a      	lsls	r2, r3, #16
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	43d9      	mvns	r1, r3
 800112e:	887b      	ldrh	r3, [r7, #2]
 8001130:	400b      	ands	r3, r1
 8001132:	431a      	orrs	r2, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	619a      	str	r2, [r3, #24]
}
 8001138:	bf00      	nop
 800113a:	3714      	adds	r7, #20
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001148:	4b05      	ldr	r3, [pc, #20]	; (8001160 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a04      	ldr	r2, [pc, #16]	; (8001160 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800114e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001152:	6013      	str	r3, [r2, #0]
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	58000400 	.word	0x58000400

08001164 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001172:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001176:	d101      	bne.n	800117c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001178:	2301      	movs	r3, #1
 800117a:	e000      	b.n	800117e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800118c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001196:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800119a:	6013      	str	r3, [r2, #0]
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80011a6:	b480      	push	{r7}
 80011a8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80011aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011b8:	6013      	str	r3, [r2, #0]
}
 80011ba:	bf00      	nop
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80011c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80011d6:	d101      	bne.n	80011dc <LL_RCC_HSE_IsReady+0x18>
 80011d8:	2301      	movs	r3, #1
 80011da:	e000      	b.n	80011de <LL_RCC_HSE_IsReady+0x1a>
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80011ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011fa:	6013      	str	r3, [r2, #0]
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800120a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001214:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001218:	6013      	str	r3, [r2, #0]
}
 800121a:	bf00      	nop
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001232:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001236:	d101      	bne.n	800123c <LL_RCC_HSI_IsReady+0x18>
 8001238:	2301      	movs	r3, #1
 800123a:	e000      	b.n	800123e <LL_RCC_HSI_IsReady+0x1a>
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001250:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	061b      	lsls	r3, r3, #24
 800125e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001262:	4313      	orrs	r3, r2
 8001264:	604b      	str	r3, [r1, #4]
}
 8001266:	bf00      	nop
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001276:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800127a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800127e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001282:	f043 0301 	orr.w	r3, r3, #1
 8001286:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800128a:	bf00      	nop
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800129c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012a4:	f023 0301 	bic.w	r3, r3, #1
 80012a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80012ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012c6:	f043 0304 	orr.w	r3, r3, #4
 80012ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80012ce:	bf00      	nop
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80012dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012e8:	f023 0304 	bic.w	r3, r3, #4
 80012ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80012fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	2b02      	cmp	r3, #2
 800130c:	d101      	bne.n	8001312 <LL_RCC_LSE_IsReady+0x18>
 800130e:	2301      	movs	r3, #1
 8001310:	e000      	b.n	8001314 <LL_RCC_LSE_IsReady+0x1a>
 8001312:	2300      	movs	r3, #0
}
 8001314:	4618      	mov	r0, r3
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001322:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001326:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800132a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800132e:	f043 0301 	orr.w	r3, r3, #1
 8001332:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001336:	bf00      	nop
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001344:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001348:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800134c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001350:	f023 0301 	bic.w	r3, r3, #1
 8001354:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr

08001362 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001366:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800136a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b02      	cmp	r3, #2
 8001374:	d101      	bne.n	800137a <LL_RCC_LSI1_IsReady+0x18>
 8001376:	2301      	movs	r3, #1
 8001378:	e000      	b.n	800137c <LL_RCC_LSI1_IsReady+0x1a>
 800137a:	2300      	movs	r3, #0
}
 800137c:	4618      	mov	r0, r3
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800138a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800138e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001392:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001396:	f043 0304 	orr.w	r3, r3, #4
 800139a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800139e:	bf00      	nop
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80013ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013b8:	f023 0304 	bic.w	r3, r3, #4
 80013bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80013ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013d6:	f003 0308 	and.w	r3, r3, #8
 80013da:	2b08      	cmp	r3, #8
 80013dc:	d101      	bne.n	80013e2 <LL_RCC_LSI2_IsReady+0x18>
 80013de:	2301      	movs	r3, #1
 80013e0:	e000      	b.n	80013e4 <LL_RCC_LSI2_IsReady+0x1a>
 80013e2:	2300      	movs	r3, #0
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 80013ee:	b480      	push	{r7}
 80013f0:	b083      	sub	sp, #12
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80013f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013fe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	021b      	lsls	r3, r3, #8
 8001406:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800140a:	4313      	orrs	r3, r2
 800140c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001420:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800142a:	f043 0301 	orr.w	r3, r3, #1
 800142e:	6013      	str	r3, [r2, #0]
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800143e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001448:	f023 0301 	bic.w	r3, r3, #1
 800144c:	6013      	str	r3, [r2, #0]
}
 800144e:	bf00      	nop
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800145c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b02      	cmp	r3, #2
 8001468:	d101      	bne.n	800146e <LL_RCC_MSI_IsReady+0x16>
 800146a:	2301      	movs	r3, #1
 800146c:	e000      	b.n	8001470 <LL_RCC_MSI_IsReady+0x18>
 800146e:	2300      	movs	r3, #0
}
 8001470:	4618      	mov	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800147a:	b480      	push	{r7}
 800147c:	b083      	sub	sp, #12
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001482:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800148c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4313      	orrs	r3, r2
 8001494:	600b      	str	r3, [r1, #0]
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	b083      	sub	sp, #12
 80014a6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80014a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014b2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2bb0      	cmp	r3, #176	; 0xb0
 80014b8:	d901      	bls.n	80014be <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80014ba:	23b0      	movs	r3, #176	; 0xb0
 80014bc:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80014be:	687b      	ldr	r3, [r7, #4]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80014d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	021b      	lsls	r3, r3, #8
 80014e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014e6:	4313      	orrs	r3, r2
 80014e8:	604b      	str	r3, [r1, #4]
}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80014f6:	b480      	push	{r7}
 80014f8:	b083      	sub	sp, #12
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80014fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	f023 0203 	bic.w	r2, r3, #3
 8001508:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4313      	orrs	r3, r2
 8001510:	608b      	str	r3, [r1, #8]
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001522:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	f003 030c 	and.w	r3, r3, #12
}
 800152c:	4618      	mov	r0, r3
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800153e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001548:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4313      	orrs	r3, r2
 8001550:	608b      	str	r3, [r1, #8]
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800155e:	b480      	push	{r7}
 8001560:	b083      	sub	sp, #12
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001566:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800156a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800156e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001572:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4313      	orrs	r3, r2
 800157a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800158a:	b480      	push	{r7}
 800158c:	b083      	sub	sp, #12
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001592:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001596:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800159a:	f023 020f 	bic.w	r2, r3, #15
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	091b      	lsrs	r3, r3, #4
 80015a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015a6:	4313      	orrs	r3, r2
 80015a8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80015c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	608b      	str	r3, [r1, #8]
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80015e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	608b      	str	r3, [r1, #8]
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800160c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001616:	4618      	mov	r0, r3
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001624:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001628:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800162c:	011b      	lsls	r3, r3, #4
 800162e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001632:	4618      	mov	r0, r3
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800164a:	4618      	mov	r0, r3
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001658:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001662:	4618      	mov	r0, r3
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001670:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800167a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800167e:	6013      	str	r3, [r2, #0]
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800168e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001698:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800169c:	6013      	str	r3, [r2, #0]
}
 800169e:	bf00      	nop
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80016ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80016ba:	d101      	bne.n	80016c0 <LL_RCC_PLL_IsReady+0x18>
 80016bc:	2301      	movs	r3, #1
 80016be:	e000      	b.n	80016c2 <LL_RCC_PLL_IsReady+0x1a>
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80016d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016d4:	68db      	ldr	r3, [r3, #12]
 80016d6:	0a1b      	lsrs	r3, r3, #8
 80016d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80016dc:	4618      	mov	r0, r3
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80016ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001702:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800170c:	4618      	mov	r0, r3
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800171a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	f003 0303 	and.w	r3, r3, #3
}
 8001724:	4618      	mov	r0, r3
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001732:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800173c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001740:	d101      	bne.n	8001746 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001742:	2301      	movs	r3, #1
 8001744:	e000      	b.n	8001748 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001756:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800175a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800175e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001762:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001766:	d101      	bne.n	800176c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001768:	2301      	movs	r3, #1
 800176a:	e000      	b.n	800176e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800177c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001780:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001784:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800178c:	d101      	bne.n	8001792 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800178e:	2301      	movs	r3, #1
 8001790:	e000      	b.n	8001794 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001792:	2300      	movs	r3, #0
}
 8001794:	4618      	mov	r0, r3
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80017a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80017b0:	d101      	bne.n	80017b6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80017b2:	2301      	movs	r3, #1
 80017b4:	e000      	b.n	80017b8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80017b6:	2300      	movs	r3, #0
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80017c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80017d4:	d101      	bne.n	80017da <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80017d6:	2301      	movs	r3, #1
 80017d8:	e000      	b.n	80017dc <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80017da:	2300      	movs	r3, #0
}
 80017dc:	4618      	mov	r0, r3
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
	...

080017e8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017e8:	b590      	push	{r4, r7, lr}
 80017ea:	b08d      	sub	sp, #52	; 0x34
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d101      	bne.n	80017fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e33b      	b.n	8001e72 <HAL_RCC_OscConfig+0x68a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0320 	and.w	r3, r3, #32
 8001802:	2b00      	cmp	r3, #0
 8001804:	f000 8092 	beq.w	800192c <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001808:	f7ff fe89 	bl	800151e <LL_RCC_GetSysClkSource>
 800180c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800180e:	f7ff ff82 	bl	8001716 <LL_RCC_PLL_GetMainSource>
 8001812:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001816:	2b00      	cmp	r3, #0
 8001818:	d005      	beq.n	8001826 <HAL_RCC_OscConfig+0x3e>
 800181a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800181c:	2b0c      	cmp	r3, #12
 800181e:	d14c      	bne.n	80018ba <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001822:	2b01      	cmp	r3, #1
 8001824:	d149      	bne.n	80018ba <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001826:	f7ff fe17 	bl	8001458 <LL_RCC_MSI_IsReady>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d005      	beq.n	800183c <HAL_RCC_OscConfig+0x54>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	69db      	ldr	r3, [r3, #28]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d101      	bne.n	800183c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e31a      	b.n	8001e72 <HAL_RCC_OscConfig+0x68a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001840:	f7ff fe2f 	bl	80014a2 <LL_RCC_MSI_GetRange>
 8001844:	4603      	mov	r3, r0
 8001846:	429c      	cmp	r4, r3
 8001848:	d914      	bls.n	8001874 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184e:	4618      	mov	r0, r3
 8001850:	f000 fd06 	bl	8002260 <RCC_SetFlashLatencyFromMSIRange>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e309      	b.n	8001e72 <HAL_RCC_OscConfig+0x68a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff fe09 	bl	800147a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a1b      	ldr	r3, [r3, #32]
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff fe2d 	bl	80014cc <LL_RCC_MSI_SetCalibTrimming>
 8001872:	e013      	b.n	800189c <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff fdfe 	bl	800147a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a1b      	ldr	r3, [r3, #32]
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff fe22 	bl	80014cc <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188c:	4618      	mov	r0, r3
 800188e:	f000 fce7 	bl	8002260 <RCC_SetFlashLatencyFromMSIRange>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e2ea      	b.n	8001e72 <HAL_RCC_OscConfig+0x68a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800189c:	f000 fca0 	bl	80021e0 <HAL_RCC_GetHCLKFreq>
 80018a0:	4603      	mov	r3, r0
 80018a2:	4ab3      	ldr	r2, [pc, #716]	; (8001b70 <HAL_RCC_OscConfig+0x388>)
 80018a4:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80018a6:	4bb3      	ldr	r3, [pc, #716]	; (8001b74 <HAL_RCC_OscConfig+0x38c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff f942 	bl	8000b34 <HAL_InitTick>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d039      	beq.n	800192a <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e2db      	b.n	8001e72 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d01e      	beq.n	8001900 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018c2:	f7ff fdab 	bl	800141c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018c6:	f7ff f983 	bl	8000bd0 <HAL_GetTick>
 80018ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80018cc:	e008      	b.n	80018e0 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018ce:	f7ff f97f 	bl	8000bd0 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e2c8      	b.n	8001e72 <HAL_RCC_OscConfig+0x68a>
        while (LL_RCC_MSI_IsReady() == 0U)
 80018e0:	f7ff fdba 	bl	8001458 <LL_RCC_MSI_IsReady>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d0f1      	beq.n	80018ce <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff fdc3 	bl	800147a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a1b      	ldr	r3, [r3, #32]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff fde7 	bl	80014cc <LL_RCC_MSI_SetCalibTrimming>
 80018fe:	e015      	b.n	800192c <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001900:	f7ff fd9b 	bl	800143a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001904:	f7ff f964 	bl	8000bd0 <HAL_GetTick>
 8001908:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800190c:	f7ff f960 	bl	8000bd0 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e2a9      	b.n	8001e72 <HAL_RCC_OscConfig+0x68a>
        while (LL_RCC_MSI_IsReady() != 0U)
 800191e:	f7ff fd9b 	bl	8001458 <LL_RCC_MSI_IsReady>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d1f1      	bne.n	800190c <HAL_RCC_OscConfig+0x124>
 8001928:	e000      	b.n	800192c <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800192a:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	2b00      	cmp	r3, #0
 8001936:	d04e      	beq.n	80019d6 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001938:	f7ff fdf1 	bl	800151e <LL_RCC_GetSysClkSource>
 800193c:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800193e:	f7ff feea 	bl	8001716 <LL_RCC_PLL_GetMainSource>
 8001942:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001944:	6a3b      	ldr	r3, [r7, #32]
 8001946:	2b08      	cmp	r3, #8
 8001948:	d005      	beq.n	8001956 <HAL_RCC_OscConfig+0x16e>
 800194a:	6a3b      	ldr	r3, [r7, #32]
 800194c:	2b0c      	cmp	r3, #12
 800194e:	d10d      	bne.n	800196c <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	2b03      	cmp	r3, #3
 8001954:	d10a      	bne.n	800196c <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001956:	f7ff fc35 	bl	80011c4 <LL_RCC_HSE_IsReady>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d039      	beq.n	80019d4 <HAL_RCC_OscConfig+0x1ec>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d135      	bne.n	80019d4 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e282      	b.n	8001e72 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001974:	d102      	bne.n	800197c <HAL_RCC_OscConfig+0x194>
 8001976:	f7ff fc07 	bl	8001188 <LL_RCC_HSE_Enable>
 800197a:	e001      	b.n	8001980 <HAL_RCC_OscConfig+0x198>
 800197c:	f7ff fc13 	bl	80011a6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d012      	beq.n	80019ae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001988:	f7ff f922 	bl	8000bd0 <HAL_GetTick>
 800198c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001990:	f7ff f91e 	bl	8000bd0 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b64      	cmp	r3, #100	; 0x64
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e267      	b.n	8001e72 <HAL_RCC_OscConfig+0x68a>
        while (LL_RCC_HSE_IsReady() == 0U)
 80019a2:	f7ff fc0f 	bl	80011c4 <LL_RCC_HSE_IsReady>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d0f1      	beq.n	8001990 <HAL_RCC_OscConfig+0x1a8>
 80019ac:	e013      	b.n	80019d6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ae:	f7ff f90f 	bl	8000bd0 <HAL_GetTick>
 80019b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80019b4:	e008      	b.n	80019c8 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019b6:	f7ff f90b 	bl	8000bd0 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b64      	cmp	r3, #100	; 0x64
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e254      	b.n	8001e72 <HAL_RCC_OscConfig+0x68a>
        while (LL_RCC_HSE_IsReady() != 0U)
 80019c8:	f7ff fbfc 	bl	80011c4 <LL_RCC_HSE_IsReady>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1f1      	bne.n	80019b6 <HAL_RCC_OscConfig+0x1ce>
 80019d2:	e000      	b.n	80019d6 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d4:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d051      	beq.n	8001a86 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019e2:	f7ff fd9c 	bl	800151e <LL_RCC_GetSysClkSource>
 80019e6:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019e8:	f7ff fe95 	bl	8001716 <LL_RCC_PLL_GetMainSource>
 80019ec:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	2b04      	cmp	r3, #4
 80019f2:	d005      	beq.n	8001a00 <HAL_RCC_OscConfig+0x218>
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	2b0c      	cmp	r3, #12
 80019f8:	d113      	bne.n	8001a22 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d110      	bne.n	8001a22 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a00:	f7ff fc10 	bl	8001224 <LL_RCC_HSI_IsReady>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d005      	beq.n	8001a16 <HAL_RCC_OscConfig+0x22e>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e22d      	b.n	8001e72 <HAL_RCC_OscConfig+0x68a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff fc14 	bl	8001248 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a20:	e031      	b.n	8001a86 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d019      	beq.n	8001a5e <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a2a:	f7ff fbdd 	bl	80011e8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2e:	f7ff f8cf 	bl	8000bd0 <HAL_GetTick>
 8001a32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001a34:	e008      	b.n	8001a48 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a36:	f7ff f8cb 	bl	8000bd0 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e214      	b.n	8001e72 <HAL_RCC_OscConfig+0x68a>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001a48:	f7ff fbec 	bl	8001224 <LL_RCC_HSI_IsReady>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d0f1      	beq.n	8001a36 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	691b      	ldr	r3, [r3, #16]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff fbf6 	bl	8001248 <LL_RCC_HSI_SetCalibTrimming>
 8001a5c:	e013      	b.n	8001a86 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a5e:	f7ff fbd2 	bl	8001206 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a62:	f7ff f8b5 	bl	8000bd0 <HAL_GetTick>
 8001a66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001a68:	e008      	b.n	8001a7c <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a6a:	f7ff f8b1 	bl	8000bd0 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e1fa      	b.n	8001e72 <HAL_RCC_OscConfig+0x68a>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001a7c:	f7ff fbd2 	bl	8001224 <LL_RCC_HSI_IsReady>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1f1      	bne.n	8001a6a <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0308 	and.w	r3, r3, #8
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d106      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f000 80a3 	beq.w	8001be6 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	695b      	ldr	r3, [r3, #20]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d076      	beq.n	8001b96 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0310 	and.w	r3, r3, #16
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d046      	beq.n	8001b42 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8001ab4:	f7ff fc55 	bl	8001362 <LL_RCC_LSI1_IsReady>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d113      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8001abe:	f7ff fc2e 	bl	800131e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ac2:	f7ff f885 	bl	8000bd0 <HAL_GetTick>
 8001ac6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001ac8:	e008      	b.n	8001adc <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001aca:	f7ff f881 	bl	8000bd0 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e1ca      	b.n	8001e72 <HAL_RCC_OscConfig+0x68a>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001adc:	f7ff fc41 	bl	8001362 <LL_RCC_LSI1_IsReady>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d0f1      	beq.n	8001aca <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8001ae6:	f7ff fc4e 	bl	8001386 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aea:	f7ff f871 	bl	8000bd0 <HAL_GetTick>
 8001aee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001af0:	e008      	b.n	8001b04 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001af2:	f7ff f86d 	bl	8000bd0 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b03      	cmp	r3, #3
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e1b6      	b.n	8001e72 <HAL_RCC_OscConfig+0x68a>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001b04:	f7ff fc61 	bl	80013ca <LL_RCC_LSI2_IsReady>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d0f1      	beq.n	8001af2 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff fc6b 	bl	80013ee <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8001b18:	f7ff fc12 	bl	8001340 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1c:	f7ff f858 	bl	8000bd0 <HAL_GetTick>
 8001b20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001b24:	f7ff f854 	bl	8000bd0 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e19d      	b.n	8001e72 <HAL_RCC_OscConfig+0x68a>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001b36:	f7ff fc14 	bl	8001362 <LL_RCC_LSI1_IsReady>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d1f1      	bne.n	8001b24 <HAL_RCC_OscConfig+0x33c>
 8001b40:	e051      	b.n	8001be6 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8001b42:	f7ff fbec 	bl	800131e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b46:	f7ff f843 	bl	8000bd0 <HAL_GetTick>
 8001b4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001b4c:	e008      	b.n	8001b60 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001b4e:	f7ff f83f 	bl	8000bd0 <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e188      	b.n	8001e72 <HAL_RCC_OscConfig+0x68a>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001b60:	f7ff fbff 	bl	8001362 <LL_RCC_LSI1_IsReady>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d0f1      	beq.n	8001b4e <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8001b6a:	f7ff fc1d 	bl	80013a8 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001b6e:	e00c      	b.n	8001b8a <HAL_RCC_OscConfig+0x3a2>
 8001b70:	20000004 	.word	0x20000004
 8001b74:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001b78:	f7ff f82a 	bl	8000bd0 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b03      	cmp	r3, #3
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e173      	b.n	8001e72 <HAL_RCC_OscConfig+0x68a>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001b8a:	f7ff fc1e 	bl	80013ca <LL_RCC_LSI2_IsReady>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d1f1      	bne.n	8001b78 <HAL_RCC_OscConfig+0x390>
 8001b94:	e027      	b.n	8001be6 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8001b96:	f7ff fc07 	bl	80013a8 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b9a:	f7ff f819 	bl	8000bd0 <HAL_GetTick>
 8001b9e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001ba0:	e008      	b.n	8001bb4 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001ba2:	f7ff f815 	bl	8000bd0 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b03      	cmp	r3, #3
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e15e      	b.n	8001e72 <HAL_RCC_OscConfig+0x68a>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001bb4:	f7ff fc09 	bl	80013ca <LL_RCC_LSI2_IsReady>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1f1      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8001bbe:	f7ff fbbf 	bl	8001340 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc2:	f7ff f805 	bl	8000bd0 <HAL_GetTick>
 8001bc6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001bc8:	e008      	b.n	8001bdc <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001bca:	f7ff f801 	bl	8000bd0 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e14a      	b.n	8001e72 <HAL_RCC_OscConfig+0x68a>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001bdc:	f7ff fbc1 	bl	8001362 <LL_RCC_LSI1_IsReady>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1f1      	bne.n	8001bca <HAL_RCC_OscConfig+0x3e2>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0304 	and.w	r3, r3, #4
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d05b      	beq.n	8001caa <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bf2:	4ba2      	ldr	r3, [pc, #648]	; (8001e7c <HAL_RCC_OscConfig+0x694>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d114      	bne.n	8001c28 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001bfe:	f7ff faa1 	bl	8001144 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c02:	f7fe ffe5 	bl	8000bd0 <HAL_GetTick>
 8001c06:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c08:	e008      	b.n	8001c1c <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c0a:	f7fe ffe1 	bl	8000bd0 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e12a      	b.n	8001e72 <HAL_RCC_OscConfig+0x68a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c1c:	4b97      	ldr	r3, [pc, #604]	; (8001e7c <HAL_RCC_OscConfig+0x694>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d0f0      	beq.n	8001c0a <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d102      	bne.n	8001c36 <HAL_RCC_OscConfig+0x44e>
 8001c30:	f7ff fb1f 	bl	8001272 <LL_RCC_LSE_Enable>
 8001c34:	e00c      	b.n	8001c50 <HAL_RCC_OscConfig+0x468>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	2b05      	cmp	r3, #5
 8001c3c:	d104      	bne.n	8001c48 <HAL_RCC_OscConfig+0x460>
 8001c3e:	f7ff fb3a 	bl	80012b6 <LL_RCC_LSE_EnableBypass>
 8001c42:	f7ff fb16 	bl	8001272 <LL_RCC_LSE_Enable>
 8001c46:	e003      	b.n	8001c50 <HAL_RCC_OscConfig+0x468>
 8001c48:	f7ff fb24 	bl	8001294 <LL_RCC_LSE_Disable>
 8001c4c:	f7ff fb44 	bl	80012d8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d014      	beq.n	8001c82 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c58:	f7fe ffba 	bl	8000bd0 <HAL_GetTick>
 8001c5c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001c5e:	e00a      	b.n	8001c76 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c60:	f7fe ffb6 	bl	8000bd0 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e0fd      	b.n	8001e72 <HAL_RCC_OscConfig+0x68a>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001c76:	f7ff fb40 	bl	80012fa <LL_RCC_LSE_IsReady>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0ef      	beq.n	8001c60 <HAL_RCC_OscConfig+0x478>
 8001c80:	e013      	b.n	8001caa <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c82:	f7fe ffa5 	bl	8000bd0 <HAL_GetTick>
 8001c86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001c88:	e00a      	b.n	8001ca0 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c8a:	f7fe ffa1 	bl	8000bd0 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e0e8      	b.n	8001e72 <HAL_RCC_OscConfig+0x68a>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001ca0:	f7ff fb2b 	bl	80012fa <LL_RCC_LSE_IsReady>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1ef      	bne.n	8001c8a <HAL_RCC_OscConfig+0x4a2>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f000 80de 	beq.w	8001e70 <HAL_RCC_OscConfig+0x688>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cb4:	f7ff fc33 	bl	800151e <LL_RCC_GetSysClkSource>
 8001cb8:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8001cba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	f040 80a6 	bne.w	8001e18 <HAL_RCC_OscConfig+0x630>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f003 0203 	and.w	r2, r3, #3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d123      	bne.n	8001d22 <HAL_RCC_OscConfig+0x53a>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d11c      	bne.n	8001d22 <HAL_RCC_OscConfig+0x53a>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	0a1b      	lsrs	r3, r3, #8
 8001cec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d114      	bne.n	8001d22 <HAL_RCC_OscConfig+0x53a>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d10d      	bne.n	8001d22 <HAL_RCC_OscConfig+0x53a>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d106      	bne.n	8001d22 <HAL_RCC_OscConfig+0x53a>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d054      	beq.n	8001dcc <HAL_RCC_OscConfig+0x5e4>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	2b0c      	cmp	r3, #12
 8001d26:	d04f      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x5e0>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d28:	f7ff fcaf 	bl	800168a <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d2c:	f7fe ff50 	bl	8000bd0 <HAL_GetTick>
 8001d30:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0x55e>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d34:	f7fe ff4c 	bl	8000bd0 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x55e>
              {
                return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e095      	b.n	8001e72 <HAL_RCC_OscConfig+0x68a>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d1ef      	bne.n	8001d34 <HAL_RCC_OscConfig+0x54c>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d58:	68da      	ldr	r2, [r3, #12]
 8001d5a:	4b49      	ldr	r3, [pc, #292]	; (8001e80 <HAL_RCC_OscConfig+0x698>)
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d66:	4311      	orrs	r1, r2
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d6c:	0212      	lsls	r2, r2, #8
 8001d6e:	4311      	orrs	r1, r2
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d74:	4311      	orrs	r1, r2
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d7a:	4311      	orrs	r1, r2
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d80:	430a      	orrs	r2, r1
 8001d82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d86:	4313      	orrs	r3, r2
 8001d88:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d8a:	f7ff fc6f 	bl	800166c <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d9c:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d9e:	f7fe ff17 	bl	8000bd0 <HAL_GetTick>
 8001da2:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001da4:	e008      	b.n	8001db8 <HAL_RCC_OscConfig+0x5d0>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da6:	f7fe ff13 	bl	8000bd0 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x5d0>
              {
                return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e05c      	b.n	8001e72 <HAL_RCC_OscConfig+0x68a>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d0ef      	beq.n	8001da6 <HAL_RCC_OscConfig+0x5be>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dc6:	e053      	b.n	8001e70 <HAL_RCC_OscConfig+0x688>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e052      	b.n	8001e72 <HAL_RCC_OscConfig+0x68a>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d14a      	bne.n	8001e70 <HAL_RCC_OscConfig+0x688>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001dda:	f7ff fc47 	bl	800166c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001dde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dec:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001dee:	f7fe feef 	bl	8000bd0 <HAL_GetTick>
 8001df2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001df4:	e008      	b.n	8001e08 <HAL_RCC_OscConfig+0x620>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df6:	f7fe feeb 	bl	8000bd0 <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d901      	bls.n	8001e08 <HAL_RCC_OscConfig+0x620>
            {
              return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e034      	b.n	8001e72 <HAL_RCC_OscConfig+0x68a>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0ef      	beq.n	8001df6 <HAL_RCC_OscConfig+0x60e>
 8001e16:	e02b      	b.n	8001e70 <HAL_RCC_OscConfig+0x688>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	2b0c      	cmp	r3, #12
 8001e1c:	d026      	beq.n	8001e6c <HAL_RCC_OscConfig+0x684>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e1e:	f7ff fc34 	bl	800168a <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001e22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e2c:	f023 0303 	bic.w	r3, r3, #3
 8001e30:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
 8001e32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e40:	60d3      	str	r3, [r2, #12]
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e42:	f7fe fec5 	bl	8000bd0 <HAL_GetTick>
 8001e46:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e48:	e008      	b.n	8001e5c <HAL_RCC_OscConfig+0x674>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e4a:	f7fe fec1 	bl	8000bd0 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x674>
          {
            return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e00a      	b.n	8001e72 <HAL_RCC_OscConfig+0x68a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1ef      	bne.n	8001e4a <HAL_RCC_OscConfig+0x662>
 8001e6a:	e001      	b.n	8001e70 <HAL_RCC_OscConfig+0x688>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e000      	b.n	8001e72 <HAL_RCC_OscConfig+0x68a>
      }
    }
  }
  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3734      	adds	r7, #52	; 0x34
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd90      	pop	{r4, r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	58000400 	.word	0x58000400
 8001e80:	11c1808c 	.word	0x11c1808c

08001e84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d101      	bne.n	8001e98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e12d      	b.n	80020f4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e98:	4b98      	ldr	r3, [pc, #608]	; (80020fc <HAL_RCC_ClockConfig+0x278>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0307 	and.w	r3, r3, #7
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d91b      	bls.n	8001ede <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea6:	4b95      	ldr	r3, [pc, #596]	; (80020fc <HAL_RCC_ClockConfig+0x278>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f023 0207 	bic.w	r2, r3, #7
 8001eae:	4993      	ldr	r1, [pc, #588]	; (80020fc <HAL_RCC_ClockConfig+0x278>)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001eb6:	f7fe fe8b 	bl	8000bd0 <HAL_GetTick>
 8001eba:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ebc:	e008      	b.n	8001ed0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001ebe:	f7fe fe87 	bl	8000bd0 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e111      	b.n	80020f4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ed0:	4b8a      	ldr	r3, [pc, #552]	; (80020fc <HAL_RCC_ClockConfig+0x278>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0307 	and.w	r3, r3, #7
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d1ef      	bne.n	8001ebe <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d016      	beq.n	8001f18 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff fb21 	bl	8001536 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001ef4:	f7fe fe6c 	bl	8000bd0 <HAL_GetTick>
 8001ef8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001efc:	f7fe fe68 	bl	8000bd0 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e0f2      	b.n	80020f4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001f0e:	f7ff fc0e 	bl	800172e <LL_RCC_IsActiveFlag_HPRE>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d0f1      	beq.n	8001efc <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0320 	and.w	r3, r3, #32
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d016      	beq.n	8001f52 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	695b      	ldr	r3, [r3, #20]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff fb18 	bl	800155e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001f2e:	f7fe fe4f 	bl	8000bd0 <HAL_GetTick>
 8001f32:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001f34:	e008      	b.n	8001f48 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001f36:	f7fe fe4b 	bl	8000bd0 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e0d5      	b.n	80020f4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001f48:	f7ff fc03 	bl	8001752 <LL_RCC_IsActiveFlag_C2HPRE>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d0f1      	beq.n	8001f36 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d016      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff fb11 	bl	800158a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001f68:	f7fe fe32 	bl	8000bd0 <HAL_GetTick>
 8001f6c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001f70:	f7fe fe2e 	bl	8000bd0 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e0b8      	b.n	80020f4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001f82:	f7ff fbf9 	bl	8001778 <LL_RCC_IsActiveFlag_SHDHPRE>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d0f1      	beq.n	8001f70 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0304 	and.w	r3, r3, #4
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d016      	beq.n	8001fc6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff fb0b 	bl	80015b8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001fa2:	f7fe fe15 	bl	8000bd0 <HAL_GetTick>
 8001fa6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001fa8:	e008      	b.n	8001fbc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001faa:	f7fe fe11 	bl	8000bd0 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e09b      	b.n	80020f4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001fbc:	f7ff fbef 	bl	800179e <LL_RCC_IsActiveFlag_PPRE1>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d0f1      	beq.n	8001faa <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0308 	and.w	r3, r3, #8
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d017      	beq.n	8002002 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff fb01 	bl	80015e0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001fde:	f7fe fdf7 	bl	8000bd0 <HAL_GetTick>
 8001fe2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001fe6:	f7fe fdf3 	bl	8000bd0 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e07d      	b.n	80020f4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001ff8:	f7ff fbe3 	bl	80017c2 <LL_RCC_IsActiveFlag_PPRE2>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d0f1      	beq.n	8001fe6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b00      	cmp	r3, #0
 800200c:	d043      	beq.n	8002096 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	2b02      	cmp	r3, #2
 8002014:	d106      	bne.n	8002024 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002016:	f7ff f8d5 	bl	80011c4 <LL_RCC_HSE_IsReady>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d11e      	bne.n	800205e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e067      	b.n	80020f4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	2b03      	cmp	r3, #3
 800202a:	d106      	bne.n	800203a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800202c:	f7ff fb3c 	bl	80016a8 <LL_RCC_PLL_IsReady>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d113      	bne.n	800205e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e05c      	b.n	80020f4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d106      	bne.n	8002050 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002042:	f7ff fa09 	bl	8001458 <LL_RCC_MSI_IsReady>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d108      	bne.n	800205e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e051      	b.n	80020f4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002050:	f7ff f8e8 	bl	8001224 <LL_RCC_HSI_IsReady>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e04a      	b.n	80020f4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	4618      	mov	r0, r3
 8002064:	f7ff fa47 	bl	80014f6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002068:	f7fe fdb2 	bl	8000bd0 <HAL_GetTick>
 800206c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800206e:	e00a      	b.n	8002086 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002070:	f7fe fdae 	bl	8000bd0 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	f241 3288 	movw	r2, #5000	; 0x1388
 800207e:	4293      	cmp	r3, r2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e036      	b.n	80020f4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002086:	f7ff fa4a 	bl	800151e <LL_RCC_GetSysClkSource>
 800208a:	4602      	mov	r2, r0
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	429a      	cmp	r2, r3
 8002094:	d1ec      	bne.n	8002070 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002096:	4b19      	ldr	r3, [pc, #100]	; (80020fc <HAL_RCC_ClockConfig+0x278>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	683a      	ldr	r2, [r7, #0]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d21b      	bcs.n	80020dc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020a4:	4b15      	ldr	r3, [pc, #84]	; (80020fc <HAL_RCC_ClockConfig+0x278>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f023 0207 	bic.w	r2, r3, #7
 80020ac:	4913      	ldr	r1, [pc, #76]	; (80020fc <HAL_RCC_ClockConfig+0x278>)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020b4:	f7fe fd8c 	bl	8000bd0 <HAL_GetTick>
 80020b8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ba:	e008      	b.n	80020ce <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80020bc:	f7fe fd88 	bl	8000bd0 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e012      	b.n	80020f4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ce:	4b0b      	ldr	r3, [pc, #44]	; (80020fc <HAL_RCC_ClockConfig+0x278>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0307 	and.w	r3, r3, #7
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d1ef      	bne.n	80020bc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80020dc:	f000 f880 	bl	80021e0 <HAL_RCC_GetHCLKFreq>
 80020e0:	4603      	mov	r3, r0
 80020e2:	4a07      	ldr	r2, [pc, #28]	; (8002100 <HAL_RCC_ClockConfig+0x27c>)
 80020e4:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80020e6:	f7fe fd7f 	bl	8000be8 <HAL_GetTickPrio>
 80020ea:	4603      	mov	r3, r0
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7fe fd21 	bl	8000b34 <HAL_InitTick>
 80020f2:	4603      	mov	r3, r0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3710      	adds	r7, #16
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	58004000 	.word	0x58004000
 8002100:	20000004 	.word	0x20000004

08002104 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002104:	b590      	push	{r4, r7, lr}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800210a:	f7ff fa08 	bl	800151e <LL_RCC_GetSysClkSource>
 800210e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10a      	bne.n	800212c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002116:	f7ff f9c4 	bl	80014a2 <LL_RCC_MSI_GetRange>
 800211a:	4603      	mov	r3, r0
 800211c:	091b      	lsrs	r3, r3, #4
 800211e:	f003 030f 	and.w	r3, r3, #15
 8002122:	4a2b      	ldr	r2, [pc, #172]	; (80021d0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	e04b      	b.n	80021c4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2b04      	cmp	r3, #4
 8002130:	d102      	bne.n	8002138 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002132:	4b28      	ldr	r3, [pc, #160]	; (80021d4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	e045      	b.n	80021c4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b08      	cmp	r3, #8
 800213c:	d10a      	bne.n	8002154 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800213e:	f7ff f811 	bl	8001164 <LL_RCC_HSE_IsEnabledDiv2>
 8002142:	4603      	mov	r3, r0
 8002144:	2b01      	cmp	r3, #1
 8002146:	d102      	bne.n	800214e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002148:	4b23      	ldr	r3, [pc, #140]	; (80021d8 <HAL_RCC_GetSysClockFreq+0xd4>)
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	e03a      	b.n	80021c4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800214e:	4b23      	ldr	r3, [pc, #140]	; (80021dc <HAL_RCC_GetSysClockFreq+0xd8>)
 8002150:	60fb      	str	r3, [r7, #12]
 8002152:	e037      	b.n	80021c4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002154:	f7ff fadf 	bl	8001716 <LL_RCC_PLL_GetMainSource>
 8002158:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	2b02      	cmp	r3, #2
 800215e:	d003      	beq.n	8002168 <HAL_RCC_GetSysClockFreq+0x64>
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	2b03      	cmp	r3, #3
 8002164:	d003      	beq.n	800216e <HAL_RCC_GetSysClockFreq+0x6a>
 8002166:	e00d      	b.n	8002184 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002168:	4b1a      	ldr	r3, [pc, #104]	; (80021d4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800216a:	60bb      	str	r3, [r7, #8]
        break;
 800216c:	e015      	b.n	800219a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800216e:	f7fe fff9 	bl	8001164 <LL_RCC_HSE_IsEnabledDiv2>
 8002172:	4603      	mov	r3, r0
 8002174:	2b01      	cmp	r3, #1
 8002176:	d102      	bne.n	800217e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002178:	4b17      	ldr	r3, [pc, #92]	; (80021d8 <HAL_RCC_GetSysClockFreq+0xd4>)
 800217a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800217c:	e00d      	b.n	800219a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800217e:	4b17      	ldr	r3, [pc, #92]	; (80021dc <HAL_RCC_GetSysClockFreq+0xd8>)
 8002180:	60bb      	str	r3, [r7, #8]
        break;
 8002182:	e00a      	b.n	800219a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002184:	f7ff f98d 	bl	80014a2 <LL_RCC_MSI_GetRange>
 8002188:	4603      	mov	r3, r0
 800218a:	091b      	lsrs	r3, r3, #4
 800218c:	f003 030f 	and.w	r3, r3, #15
 8002190:	4a0f      	ldr	r2, [pc, #60]	; (80021d0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002196:	60bb      	str	r3, [r7, #8]
        break;
 8002198:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 800219a:	f7ff fa97 	bl	80016cc <LL_RCC_PLL_GetN>
 800219e:	4602      	mov	r2, r0
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	fb03 f402 	mul.w	r4, r3, r2
 80021a6:	f7ff faaa 	bl	80016fe <LL_RCC_PLL_GetDivider>
 80021aa:	4603      	mov	r3, r0
 80021ac:	091b      	lsrs	r3, r3, #4
 80021ae:	3301      	adds	r3, #1
 80021b0:	fbb4 f4f3 	udiv	r4, r4, r3
 80021b4:	f7ff fa97 	bl	80016e6 <LL_RCC_PLL_GetR>
 80021b8:	4603      	mov	r3, r0
 80021ba:	0f5b      	lsrs	r3, r3, #29
 80021bc:	3301      	adds	r3, #1
 80021be:	fbb4 f3f3 	udiv	r3, r4, r3
 80021c2:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 80021c4:	68fb      	ldr	r3, [r7, #12]
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3714      	adds	r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd90      	pop	{r4, r7, pc}
 80021ce:	bf00      	nop
 80021d0:	08003628 	.word	0x08003628
 80021d4:	00f42400 	.word	0x00f42400
 80021d8:	003d0900 	.word	0x003d0900
 80021dc:	007a1200 	.word	0x007a1200

080021e0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021e0:	b598      	push	{r3, r4, r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80021e4:	f7ff ff8e 	bl	8002104 <HAL_RCC_GetSysClockFreq>
 80021e8:	4604      	mov	r4, r0
 80021ea:	f7ff fa0d 	bl	8001608 <LL_RCC_GetAHBPrescaler>
 80021ee:	4603      	mov	r3, r0
 80021f0:	091b      	lsrs	r3, r3, #4
 80021f2:	f003 030f 	and.w	r3, r3, #15
 80021f6:	4a03      	ldr	r2, [pc, #12]	; (8002204 <HAL_RCC_GetHCLKFreq+0x24>)
 80021f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021fc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002200:	4618      	mov	r0, r3
 8002202:	bd98      	pop	{r3, r4, r7, pc}
 8002204:	080035c8 	.word	0x080035c8

08002208 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002208:	b598      	push	{r3, r4, r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800220c:	f7ff ffe8 	bl	80021e0 <HAL_RCC_GetHCLKFreq>
 8002210:	4604      	mov	r4, r0
 8002212:	f7ff fa13 	bl	800163c <LL_RCC_GetAPB1Prescaler>
 8002216:	4603      	mov	r3, r0
 8002218:	0a1b      	lsrs	r3, r3, #8
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	4a04      	ldr	r2, [pc, #16]	; (8002230 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002224:	f003 031f 	and.w	r3, r3, #31
 8002228:	fa24 f303 	lsr.w	r3, r4, r3
}
 800222c:	4618      	mov	r0, r3
 800222e:	bd98      	pop	{r3, r4, r7, pc}
 8002230:	08003608 	.word	0x08003608

08002234 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002234:	b598      	push	{r3, r4, r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002238:	f7ff ffd2 	bl	80021e0 <HAL_RCC_GetHCLKFreq>
 800223c:	4604      	mov	r4, r0
 800223e:	f7ff fa09 	bl	8001654 <LL_RCC_GetAPB2Prescaler>
 8002242:	4603      	mov	r3, r0
 8002244:	0adb      	lsrs	r3, r3, #11
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	4a04      	ldr	r2, [pc, #16]	; (800225c <HAL_RCC_GetPCLK2Freq+0x28>)
 800224c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002250:	f003 031f 	and.w	r3, r3, #31
 8002254:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002258:	4618      	mov	r0, r3
 800225a:	bd98      	pop	{r3, r4, r7, pc}
 800225c:	08003608 	.word	0x08003608

08002260 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2bb0      	cmp	r3, #176	; 0xb0
 800226c:	d903      	bls.n	8002276 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800226e:	4b14      	ldr	r3, [pc, #80]	; (80022c0 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8002270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	e007      	b.n	8002286 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	091b      	lsrs	r3, r3, #4
 800227a:	f003 030f 	and.w	r3, r3, #15
 800227e:	4a10      	ldr	r2, [pc, #64]	; (80022c0 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8002280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002284:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002286:	f7ff f9cb 	bl	8001620 <LL_RCC_GetAHB4Prescaler>
 800228a:	4603      	mov	r3, r0
 800228c:	091b      	lsrs	r3, r3, #4
 800228e:	f003 030f 	and.w	r3, r3, #15
 8002292:	4a0c      	ldr	r2, [pc, #48]	; (80022c4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	fbb2 f3f3 	udiv	r3, r2, r3
 800229e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	4a09      	ldr	r2, [pc, #36]	; (80022c8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80022a4:	fba2 2303 	umull	r2, r3, r2, r3
 80022a8:	0c9b      	lsrs	r3, r3, #18
 80022aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022ae:	4618      	mov	r0, r3
 80022b0:	f000 f80c 	bl	80022cc <RCC_SetFlashLatency>
 80022b4:	4603      	mov	r3, r0
#endif
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	08003628 	.word	0x08003628
 80022c4:	080035c8 	.word	0x080035c8
 80022c8:	431bde83 	.word	0x431bde83

080022cc <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80022cc:	b590      	push	{r4, r7, lr}
 80022ce:	b08f      	sub	sp, #60	; 0x3c
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80022d6:	4b25      	ldr	r3, [pc, #148]	; (800236c <RCC_SetFlashLatency+0xa0>)
 80022d8:	f107 041c 	add.w	r4, r7, #28
 80022dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80022e2:	4b23      	ldr	r3, [pc, #140]	; (8002370 <RCC_SetFlashLatency+0xa4>)
 80022e4:	f107 040c 	add.w	r4, r7, #12
 80022e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80022ee:	2300      	movs	r3, #0
 80022f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80022f2:	2300      	movs	r3, #0
 80022f4:	633b      	str	r3, [r7, #48]	; 0x30
 80022f6:	e015      	b.n	8002324 <RCC_SetFlashLatency+0x58>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80022f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002300:	4413      	add	r3, r2
 8002302:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	429a      	cmp	r2, r3
 800230a:	d808      	bhi.n	800231e <RCC_SetFlashLatency+0x52>
    {
      latency = FLASH_LATENCY_RANGE[index];
 800230c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002314:	4413      	add	r3, r2
 8002316:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800231a:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 800231c:	e005      	b.n	800232a <RCC_SetFlashLatency+0x5e>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800231e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002320:	3301      	adds	r3, #1
 8002322:	633b      	str	r3, [r7, #48]	; 0x30
 8002324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002326:	2b03      	cmp	r3, #3
 8002328:	d9e6      	bls.n	80022f8 <RCC_SetFlashLatency+0x2c>
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 800232a:	4b12      	ldr	r3, [pc, #72]	; (8002374 <RCC_SetFlashLatency+0xa8>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f023 0207 	bic.w	r2, r3, #7
 8002332:	4910      	ldr	r1, [pc, #64]	; (8002374 <RCC_SetFlashLatency+0xa8>)
 8002334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002336:	4313      	orrs	r3, r2
 8002338:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800233a:	f7fe fc49 	bl	8000bd0 <HAL_GetTick>
 800233e:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002340:	e008      	b.n	8002354 <RCC_SetFlashLatency+0x88>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002342:	f7fe fc45 	bl	8000bd0 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b02      	cmp	r3, #2
 800234e:	d901      	bls.n	8002354 <RCC_SetFlashLatency+0x88>
    {
      return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e007      	b.n	8002364 <RCC_SetFlashLatency+0x98>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002354:	4b07      	ldr	r3, [pc, #28]	; (8002374 <RCC_SetFlashLatency+0xa8>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800235e:	429a      	cmp	r2, r3
 8002360:	d1ef      	bne.n	8002342 <RCC_SetFlashLatency+0x76>
    }
  }
  return HAL_OK;
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	373c      	adds	r7, #60	; 0x3c
 8002368:	46bd      	mov	sp, r7
 800236a:	bd90      	pop	{r4, r7, pc}
 800236c:	080035a8 	.word	0x080035a8
 8002370:	080035b8 	.word	0x080035b8
 8002374:	58004000 	.word	0x58004000

08002378 <LL_RCC_LSE_IsEnabled>:
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800237c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	2b01      	cmp	r3, #1
 800238a:	d101      	bne.n	8002390 <LL_RCC_LSE_IsEnabled+0x18>
 800238c:	2301      	movs	r3, #1
 800238e:	e000      	b.n	8002392 <LL_RCC_LSE_IsEnabled+0x1a>
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <LL_RCC_LSE_IsReady>:
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80023a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d101      	bne.n	80023b4 <LL_RCC_LSE_IsReady+0x18>
 80023b0:	2301      	movs	r3, #1
 80023b2:	e000      	b.n	80023b6 <LL_RCC_LSE_IsReady+0x1a>
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <LL_RCC_SetRFWKPClockSource>:
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80023c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023d0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4313      	orrs	r3, r2
 80023dc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <LL_RCC_SetSMPSClockSource>:
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80023f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fa:	f023 0203 	bic.w	r2, r3, #3
 80023fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4313      	orrs	r3, r2
 8002406:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <LL_RCC_SetSMPSPrescaler>:
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800241c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002422:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002426:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4313      	orrs	r3, r2
 800242e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <LL_RCC_SetUSARTClockSource>:
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002444:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244c:	f023 0203 	bic.w	r2, r3, #3
 8002450:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4313      	orrs	r3, r2
 8002458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <LL_RCC_SetLPUARTClockSource>:
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002470:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002478:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800247c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4313      	orrs	r3, r2
 8002484:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <LL_RCC_SetI2CClockSource>:
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800249c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024a0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	091b      	lsrs	r3, r3, #4
 80024a8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80024ac:	43db      	mvns	r3, r3
 80024ae:	401a      	ands	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	011b      	lsls	r3, r3, #4
 80024b4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80024b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024bc:	4313      	orrs	r3, r2
 80024be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80024c2:	bf00      	nop
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <LL_RCC_SetLPTIMClockSource>:
{
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80024d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024da:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	0c1b      	lsrs	r3, r3, #16
 80024e2:	041b      	lsls	r3, r3, #16
 80024e4:	43db      	mvns	r3, r3
 80024e6:	401a      	ands	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	041b      	lsls	r3, r3, #16
 80024ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024f0:	4313      	orrs	r3, r2
 80024f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr

08002502 <LL_RCC_SetRNGClockSource>:
{
 8002502:	b480      	push	{r7}
 8002504:	b083      	sub	sp, #12
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800250a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800250e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002512:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002516:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4313      	orrs	r3, r2
 800251e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002522:	bf00      	nop
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <LL_RCC_SetCLK48ClockSource>:
{
 800252e:	b480      	push	{r7}
 8002530:	b083      	sub	sp, #12
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002536:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800253a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800253e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002542:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4313      	orrs	r3, r2
 800254a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <LL_RCC_SetADCClockSource>:
{
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800256a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800256e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4313      	orrs	r3, r2
 8002576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800257a:	bf00      	nop
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <LL_RCC_SetRTCClockSource>:
{
 8002586:	b480      	push	{r7}
 8002588:	b083      	sub	sp, #12
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800258e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002596:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800259a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80025a6:	bf00      	nop
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr

080025b2 <LL_RCC_GetRTCClockSource>:
{
 80025b2:	b480      	push	{r7}
 80025b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80025b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025be:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <LL_RCC_ForceBackupDomainReset>:
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80025d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80025e4:	bf00      	nop
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <LL_RCC_ReleaseBackupDomainReset>:
{
 80025ee:	b480      	push	{r7}
 80025f0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80025f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002602:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002606:	bf00      	nop
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b088      	sub	sp, #32
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002618:	2300      	movs	r3, #0
 800261a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800261c:	2300      	movs	r3, #0
 800261e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002628:	2b00      	cmp	r3, #0
 800262a:	d046      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800262c:	f7ff ffc1 	bl	80025b2 <LL_RCC_GetRTCClockSource>
 8002630:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a1b      	ldr	r3, [r3, #32]
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	429a      	cmp	r2, r3
 800263a:	d03c      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800263c:	f7fe fd82 	bl	8001144 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d105      	bne.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff ff9b 	bl	8002586 <LL_RCC_SetRTCClockSource>
 8002650:	e02e      	b.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800265a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800265c:	f7ff ffb6 	bl	80025cc <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002660:	f7ff ffc5 	bl	80025ee <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	4313      	orrs	r3, r2
 8002670:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8002672:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800267c:	f7ff fe7c 	bl	8002378 <LL_RCC_LSE_IsEnabled>
 8002680:	4603      	mov	r3, r0
 8002682:	2b01      	cmp	r3, #1
 8002684:	d114      	bne.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002686:	f7fe faa3 	bl	8000bd0 <HAL_GetTick>
 800268a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800268c:	e00b      	b.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800268e:	f7fe fa9f 	bl	8000bd0 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	f241 3288 	movw	r2, #5000	; 0x1388
 800269c:	4293      	cmp	r3, r2
 800269e:	d902      	bls.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	77fb      	strb	r3, [r7, #31]
              break;
 80026a4:	e004      	b.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 80026a6:	f7ff fe79 	bl	800239c <LL_RCC_LSE_IsReady>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d1ee      	bne.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80026b0:	7ffb      	ldrb	r3, [r7, #31]
 80026b2:	77bb      	strb	r3, [r7, #30]
 80026b4:	e001      	b.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026b6:	7ffb      	ldrb	r3, [r7, #31]
 80026b8:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d004      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff feb6 	bl	800243c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d004      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff fec1 	bl	8002468 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0310 	and.w	r3, r3, #16
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d004      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff fee9 	bl	80024ce <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0320 	and.w	r3, r3, #32
 8002704:	2b00      	cmp	r3, #0
 8002706:	d004      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	695b      	ldr	r3, [r3, #20]
 800270c:	4618      	mov	r0, r3
 800270e:	f7ff fede 	bl	80024ce <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0304 	and.w	r3, r3, #4
 800271a:	2b00      	cmp	r3, #0
 800271c:	d004      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff feb6 	bl	8002494 <LL_RCC_SetI2CClockSource>
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002730:	2b00      	cmp	r3, #0
 8002732:	d02b      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800273c:	d008      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x140>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002746:	d003      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d105      	bne.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff fed4 	bl	8002502 <LL_RCC_SetRNGClockSource>
 800275a:	e00a      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x162>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002764:	60fb      	str	r3, [r7, #12]
 8002766:	2000      	movs	r0, #0
 8002768:	f7ff fecb 	bl	8002502 <LL_RCC_SetRNGClockSource>
 800276c:	68f8      	ldr	r0, [r7, #12]
 800276e:	f7ff fede 	bl	800252e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800277a:	d107      	bne.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x17c>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800277c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002786:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800278a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002794:	2b00      	cmp	r3, #0
 8002796:	d011      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	69db      	ldr	r3, [r3, #28]
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff fedc 	bl	800255a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027aa:	d107      	bne.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80027ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ba:	60d3      	str	r3, [r2, #12]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d004      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff fdf7 	bl	80023c0 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d009      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7ff fe16 	bl	8002414 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff fdfd 	bl	80023ec <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 80027f2:	7fbb      	ldrb	r3, [r7, #30]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3720      	adds	r7, #32
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <LL_RCC_GetUSARTClockSource>:
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8002804:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002808:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4013      	ands	r3, r2
}
 8002810:	4618      	mov	r0, r3
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <LL_RCC_GetLPUARTClockSource>:
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8002824:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002828:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4013      	ands	r3, r2
}
 8002830:	4618      	mov	r0, r3
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e042      	b.n	80028d4 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002854:	2b00      	cmp	r3, #0
 8002856:	d106      	bne.n	8002866 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f7fe f825 	bl	80008b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2224      	movs	r2, #36	; 0x24
 800286a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f022 0201 	bic.w	r2, r2, #1
 800287c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 f996 	bl	8002bb0 <UART_SetConfig>
 8002884:	4603      	mov	r3, r0
 8002886:	2b01      	cmp	r3, #1
 8002888:	d101      	bne.n	800288e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e022      	b.n	80028d4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002892:	2b00      	cmp	r3, #0
 8002894:	d002      	beq.n	800289c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 fb90 	bl	8002fbc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f042 0201 	orr.w	r2, r2, #1
 80028ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f000 fc17 	bl	8003100 <UART_CheckIdleState>
 80028d2:	4603      	mov	r3, r0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b08a      	sub	sp, #40	; 0x28
 80028e0:	af02      	add	r7, sp, #8
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	603b      	str	r3, [r7, #0]
 80028e8:	4613      	mov	r3, r2
 80028ea:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028f2:	2b20      	cmp	r3, #32
 80028f4:	f040 8083 	bne.w	80029fe <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d002      	beq.n	8002904 <HAL_UART_Transmit+0x28>
 80028fe:	88fb      	ldrh	r3, [r7, #6]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d101      	bne.n	8002908 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e07b      	b.n	8002a00 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800290e:	2b01      	cmp	r3, #1
 8002910:	d101      	bne.n	8002916 <HAL_UART_Transmit+0x3a>
 8002912:	2302      	movs	r3, #2
 8002914:	e074      	b.n	8002a00 <HAL_UART_Transmit+0x124>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2201      	movs	r2, #1
 800291a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2221      	movs	r2, #33	; 0x21
 800292a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800292e:	f7fe f94f 	bl	8000bd0 <HAL_GetTick>
 8002932:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	88fa      	ldrh	r2, [r7, #6]
 8002938:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	88fa      	ldrh	r2, [r7, #6]
 8002940:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800294c:	d108      	bne.n	8002960 <HAL_UART_Transmit+0x84>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d104      	bne.n	8002960 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8002956:	2300      	movs	r3, #0
 8002958:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	61bb      	str	r3, [r7, #24]
 800295e:	e003      	b.n	8002968 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002964:	2300      	movs	r3, #0
 8002966:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8002970:	e02c      	b.n	80029cc <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	9300      	str	r3, [sp, #0]
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	2200      	movs	r2, #0
 800297a:	2180      	movs	r1, #128	; 0x80
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f000 fc0a 	bl	8003196 <UART_WaitOnFlagUntilTimeout>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e039      	b.n	8002a00 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d10b      	bne.n	80029aa <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	881b      	ldrh	r3, [r3, #0]
 8002996:	461a      	mov	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029a0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	3302      	adds	r3, #2
 80029a6:	61bb      	str	r3, [r7, #24]
 80029a8:	e007      	b.n	80029ba <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	781a      	ldrb	r2, [r3, #0]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	3301      	adds	r3, #1
 80029b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	3b01      	subs	r3, #1
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1cc      	bne.n	8002972 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	9300      	str	r3, [sp, #0]
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	2200      	movs	r2, #0
 80029e0:	2140      	movs	r1, #64	; 0x40
 80029e2:	68f8      	ldr	r0, [r7, #12]
 80029e4:	f000 fbd7 	bl	8003196 <UART_WaitOnFlagUntilTimeout>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e006      	b.n	8002a00 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2220      	movs	r2, #32
 80029f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80029fa:	2300      	movs	r3, #0
 80029fc:	e000      	b.n	8002a00 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80029fe:	2302      	movs	r3, #2
  }
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3720      	adds	r7, #32
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b08a      	sub	sp, #40	; 0x28
 8002a0c:	af02      	add	r7, sp, #8
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	603b      	str	r3, [r7, #0]
 8002a14:	4613      	mov	r3, r2
 8002a16:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a1e:	2b20      	cmp	r3, #32
 8002a20:	f040 80c0 	bne.w	8002ba4 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d002      	beq.n	8002a30 <HAL_UART_Receive+0x28>
 8002a2a:	88fb      	ldrh	r3, [r7, #6]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d101      	bne.n	8002a34 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e0b8      	b.n	8002ba6 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d101      	bne.n	8002a42 <HAL_UART_Receive+0x3a>
 8002a3e:	2302      	movs	r3, #2
 8002a40:	e0b1      	b.n	8002ba6 <HAL_UART_Receive+0x19e>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2222      	movs	r2, #34	; 0x22
 8002a56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a60:	f7fe f8b6 	bl	8000bd0 <HAL_GetTick>
 8002a64:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	88fa      	ldrh	r2, [r7, #6]
 8002a6a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	88fa      	ldrh	r2, [r7, #6]
 8002a72:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a7e:	d10e      	bne.n	8002a9e <HAL_UART_Receive+0x96>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d105      	bne.n	8002a94 <HAL_UART_Receive+0x8c>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002a8e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002a92:	e02d      	b.n	8002af0 <HAL_UART_Receive+0xe8>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	22ff      	movs	r2, #255	; 0xff
 8002a98:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002a9c:	e028      	b.n	8002af0 <HAL_UART_Receive+0xe8>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10d      	bne.n	8002ac2 <HAL_UART_Receive+0xba>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d104      	bne.n	8002ab8 <HAL_UART_Receive+0xb0>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	22ff      	movs	r2, #255	; 0xff
 8002ab2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002ab6:	e01b      	b.n	8002af0 <HAL_UART_Receive+0xe8>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	227f      	movs	r2, #127	; 0x7f
 8002abc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002ac0:	e016      	b.n	8002af0 <HAL_UART_Receive+0xe8>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002aca:	d10d      	bne.n	8002ae8 <HAL_UART_Receive+0xe0>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d104      	bne.n	8002ade <HAL_UART_Receive+0xd6>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	227f      	movs	r2, #127	; 0x7f
 8002ad8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002adc:	e008      	b.n	8002af0 <HAL_UART_Receive+0xe8>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	223f      	movs	r2, #63	; 0x3f
 8002ae2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002ae6:	e003      	b.n	8002af0 <HAL_UART_Receive+0xe8>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8002af6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b00:	d108      	bne.n	8002b14 <HAL_UART_Receive+0x10c>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d104      	bne.n	8002b14 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	61bb      	str	r3, [r7, #24]
 8002b12:	e003      	b.n	8002b1c <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002b24:	e032      	b.n	8002b8c <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	9300      	str	r3, [sp, #0]
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	2120      	movs	r1, #32
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f000 fb30 	bl	8003196 <UART_WaitOnFlagUntilTimeout>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e032      	b.n	8002ba6 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d10c      	bne.n	8002b60 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	8a7b      	ldrh	r3, [r7, #18]
 8002b50:	4013      	ands	r3, r2
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	3302      	adds	r3, #2
 8002b5c:	61bb      	str	r3, [r7, #24]
 8002b5e:	e00c      	b.n	8002b7a <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b66:	b2da      	uxtb	r2, r3
 8002b68:	8a7b      	ldrh	r3, [r7, #18]
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	3301      	adds	r3, #1
 8002b78:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	3b01      	subs	r3, #1
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1c6      	bne.n	8002b26 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	e000      	b.n	8002ba6 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8002ba4:	2302      	movs	r3, #2
  }
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3720      	adds	r7, #32
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
	...

08002bb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bb0:	b5b0      	push	{r4, r5, r7, lr}
 8002bb2:	b088      	sub	sp, #32
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689a      	ldr	r2, [r3, #8]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	431a      	orrs	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	69db      	ldr	r3, [r3, #28]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	4ba3      	ldr	r3, [pc, #652]	; (8002e68 <UART_SetConfig+0x2b8>)
 8002bdc:	4013      	ands	r3, r2
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	6812      	ldr	r2, [r2, #0]
 8002be2:	69f9      	ldr	r1, [r7, #28]
 8002be4:	430b      	orrs	r3, r1
 8002be6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	68da      	ldr	r2, [r3, #12]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a98      	ldr	r2, [pc, #608]	; (8002e6c <UART_SetConfig+0x2bc>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d004      	beq.n	8002c18 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	69fa      	ldr	r2, [r7, #28]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002c22:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	6812      	ldr	r2, [r2, #0]
 8002c2a:	69f9      	ldr	r1, [r7, #28]
 8002c2c:	430b      	orrs	r3, r1
 8002c2e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c36:	f023 010f 	bic.w	r1, r3, #15
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	430a      	orrs	r2, r1
 8002c44:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a89      	ldr	r2, [pc, #548]	; (8002e70 <UART_SetConfig+0x2c0>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d120      	bne.n	8002c92 <UART_SetConfig+0xe2>
 8002c50:	2003      	movs	r0, #3
 8002c52:	f7ff fdd3 	bl	80027fc <LL_RCC_GetUSARTClockSource>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b03      	cmp	r3, #3
 8002c5a:	d817      	bhi.n	8002c8c <UART_SetConfig+0xdc>
 8002c5c:	a201      	add	r2, pc, #4	; (adr r2, 8002c64 <UART_SetConfig+0xb4>)
 8002c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c62:	bf00      	nop
 8002c64:	08002c75 	.word	0x08002c75
 8002c68:	08002c81 	.word	0x08002c81
 8002c6c:	08002c7b 	.word	0x08002c7b
 8002c70:	08002c87 	.word	0x08002c87
 8002c74:	2301      	movs	r3, #1
 8002c76:	76fb      	strb	r3, [r7, #27]
 8002c78:	e038      	b.n	8002cec <UART_SetConfig+0x13c>
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	76fb      	strb	r3, [r7, #27]
 8002c7e:	e035      	b.n	8002cec <UART_SetConfig+0x13c>
 8002c80:	2304      	movs	r3, #4
 8002c82:	76fb      	strb	r3, [r7, #27]
 8002c84:	e032      	b.n	8002cec <UART_SetConfig+0x13c>
 8002c86:	2308      	movs	r3, #8
 8002c88:	76fb      	strb	r3, [r7, #27]
 8002c8a:	e02f      	b.n	8002cec <UART_SetConfig+0x13c>
 8002c8c:	2310      	movs	r3, #16
 8002c8e:	76fb      	strb	r3, [r7, #27]
 8002c90:	e02c      	b.n	8002cec <UART_SetConfig+0x13c>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a75      	ldr	r2, [pc, #468]	; (8002e6c <UART_SetConfig+0x2bc>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d125      	bne.n	8002ce8 <UART_SetConfig+0x138>
 8002c9c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8002ca0:	f7ff fdbc 	bl	800281c <LL_RCC_GetLPUARTClockSource>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002caa:	d017      	beq.n	8002cdc <UART_SetConfig+0x12c>
 8002cac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002cb0:	d817      	bhi.n	8002ce2 <UART_SetConfig+0x132>
 8002cb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cb6:	d00b      	beq.n	8002cd0 <UART_SetConfig+0x120>
 8002cb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cbc:	d811      	bhi.n	8002ce2 <UART_SetConfig+0x132>
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d003      	beq.n	8002cca <UART_SetConfig+0x11a>
 8002cc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cc6:	d006      	beq.n	8002cd6 <UART_SetConfig+0x126>
 8002cc8:	e00b      	b.n	8002ce2 <UART_SetConfig+0x132>
 8002cca:	2300      	movs	r3, #0
 8002ccc:	76fb      	strb	r3, [r7, #27]
 8002cce:	e00d      	b.n	8002cec <UART_SetConfig+0x13c>
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	76fb      	strb	r3, [r7, #27]
 8002cd4:	e00a      	b.n	8002cec <UART_SetConfig+0x13c>
 8002cd6:	2304      	movs	r3, #4
 8002cd8:	76fb      	strb	r3, [r7, #27]
 8002cda:	e007      	b.n	8002cec <UART_SetConfig+0x13c>
 8002cdc:	2308      	movs	r3, #8
 8002cde:	76fb      	strb	r3, [r7, #27]
 8002ce0:	e004      	b.n	8002cec <UART_SetConfig+0x13c>
 8002ce2:	2310      	movs	r3, #16
 8002ce4:	76fb      	strb	r3, [r7, #27]
 8002ce6:	e001      	b.n	8002cec <UART_SetConfig+0x13c>
 8002ce8:	2310      	movs	r3, #16
 8002cea:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a5e      	ldr	r2, [pc, #376]	; (8002e6c <UART_SetConfig+0x2bc>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	f040 808b 	bne.w	8002e0e <UART_SetConfig+0x25e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002cf8:	7efb      	ldrb	r3, [r7, #27]
 8002cfa:	2b08      	cmp	r3, #8
 8002cfc:	d823      	bhi.n	8002d46 <UART_SetConfig+0x196>
 8002cfe:	a201      	add	r2, pc, #4	; (adr r2, 8002d04 <UART_SetConfig+0x154>)
 8002d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d04:	08002d29 	.word	0x08002d29
 8002d08:	08002d47 	.word	0x08002d47
 8002d0c:	08002d31 	.word	0x08002d31
 8002d10:	08002d47 	.word	0x08002d47
 8002d14:	08002d37 	.word	0x08002d37
 8002d18:	08002d47 	.word	0x08002d47
 8002d1c:	08002d47 	.word	0x08002d47
 8002d20:	08002d47 	.word	0x08002d47
 8002d24:	08002d3f 	.word	0x08002d3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d28:	f7ff fa6e 	bl	8002208 <HAL_RCC_GetPCLK1Freq>
 8002d2c:	6178      	str	r0, [r7, #20]
        break;
 8002d2e:	e00f      	b.n	8002d50 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d30:	4b50      	ldr	r3, [pc, #320]	; (8002e74 <UART_SetConfig+0x2c4>)
 8002d32:	617b      	str	r3, [r7, #20]
        break;
 8002d34:	e00c      	b.n	8002d50 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d36:	f7ff f9e5 	bl	8002104 <HAL_RCC_GetSysClockFreq>
 8002d3a:	6178      	str	r0, [r7, #20]
        break;
 8002d3c:	e008      	b.n	8002d50 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d42:	617b      	str	r3, [r7, #20]
        break;
 8002d44:	e004      	b.n	8002d50 <UART_SetConfig+0x1a0>
      default:
        pclk = 0U;
 8002d46:	2300      	movs	r3, #0
 8002d48:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	76bb      	strb	r3, [r7, #26]
        break;
 8002d4e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	f000 811a 	beq.w	8002f8c <UART_SetConfig+0x3dc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5c:	4a46      	ldr	r2, [pc, #280]	; (8002e78 <UART_SetConfig+0x2c8>)
 8002d5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d62:	461a      	mov	r2, r3
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d6a:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685a      	ldr	r2, [r3, #4]
 8002d70:	4613      	mov	r3, r2
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	4413      	add	r3, r2
 8002d76:	68ba      	ldr	r2, [r7, #8]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d305      	bcc.n	8002d88 <UART_SetConfig+0x1d8>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002d82:	68ba      	ldr	r2, [r7, #8]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d902      	bls.n	8002d8e <UART_SetConfig+0x1de>
      {
        ret = HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	76bb      	strb	r3, [r7, #26]
 8002d8c:	e0fe      	b.n	8002f8c <UART_SetConfig+0x3dc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f04f 0100 	mov.w	r1, #0
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9a:	4a37      	ldr	r2, [pc, #220]	; (8002e78 <UART_SetConfig+0x2c8>)
 8002d9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	f04f 0300 	mov.w	r3, #0
 8002da6:	f7fd f9e9 	bl	800017c <__aeabi_uldivmod>
 8002daa:	4602      	mov	r2, r0
 8002dac:	460b      	mov	r3, r1
 8002dae:	4610      	mov	r0, r2
 8002db0:	4619      	mov	r1, r3
 8002db2:	f04f 0200 	mov.w	r2, #0
 8002db6:	f04f 0300 	mov.w	r3, #0
 8002dba:	020b      	lsls	r3, r1, #8
 8002dbc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002dc0:	0202      	lsls	r2, r0, #8
 8002dc2:	6879      	ldr	r1, [r7, #4]
 8002dc4:	6849      	ldr	r1, [r1, #4]
 8002dc6:	0849      	lsrs	r1, r1, #1
 8002dc8:	4608      	mov	r0, r1
 8002dca:	f04f 0100 	mov.w	r1, #0
 8002dce:	1814      	adds	r4, r2, r0
 8002dd0:	eb43 0501 	adc.w	r5, r3, r1
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	461a      	mov	r2, r3
 8002dda:	f04f 0300 	mov.w	r3, #0
 8002dde:	4620      	mov	r0, r4
 8002de0:	4629      	mov	r1, r5
 8002de2:	f7fd f9cb 	bl	800017c <__aeabi_uldivmod>
 8002de6:	4602      	mov	r2, r0
 8002de8:	460b      	mov	r3, r1
 8002dea:	4613      	mov	r3, r2
 8002dec:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002df4:	d308      	bcc.n	8002e08 <UART_SetConfig+0x258>
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dfc:	d204      	bcs.n	8002e08 <UART_SetConfig+0x258>
        {
          huart->Instance->BRR = usartdiv;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	60da      	str	r2, [r3, #12]
 8002e06:	e0c1      	b.n	8002f8c <UART_SetConfig+0x3dc>
        }
        else
        {
          ret = HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	76bb      	strb	r3, [r7, #26]
 8002e0c:	e0be      	b.n	8002f8c <UART_SetConfig+0x3dc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	69db      	ldr	r3, [r3, #28]
 8002e12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e16:	d16a      	bne.n	8002eee <UART_SetConfig+0x33e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8002e18:	7efb      	ldrb	r3, [r7, #27]
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	2b07      	cmp	r3, #7
 8002e1e:	d82d      	bhi.n	8002e7c <UART_SetConfig+0x2cc>
 8002e20:	a201      	add	r2, pc, #4	; (adr r2, 8002e28 <UART_SetConfig+0x278>)
 8002e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e26:	bf00      	nop
 8002e28:	08002e49 	.word	0x08002e49
 8002e2c:	08002e51 	.word	0x08002e51
 8002e30:	08002e7d 	.word	0x08002e7d
 8002e34:	08002e57 	.word	0x08002e57
 8002e38:	08002e7d 	.word	0x08002e7d
 8002e3c:	08002e7d 	.word	0x08002e7d
 8002e40:	08002e7d 	.word	0x08002e7d
 8002e44:	08002e5f 	.word	0x08002e5f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e48:	f7ff f9f4 	bl	8002234 <HAL_RCC_GetPCLK2Freq>
 8002e4c:	6178      	str	r0, [r7, #20]
        break;
 8002e4e:	e01a      	b.n	8002e86 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e50:	4b08      	ldr	r3, [pc, #32]	; (8002e74 <UART_SetConfig+0x2c4>)
 8002e52:	617b      	str	r3, [r7, #20]
        break;
 8002e54:	e017      	b.n	8002e86 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e56:	f7ff f955 	bl	8002104 <HAL_RCC_GetSysClockFreq>
 8002e5a:	6178      	str	r0, [r7, #20]
        break;
 8002e5c:	e013      	b.n	8002e86 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e62:	617b      	str	r3, [r7, #20]
        break;
 8002e64:	e00f      	b.n	8002e86 <UART_SetConfig+0x2d6>
 8002e66:	bf00      	nop
 8002e68:	cfff69f3 	.word	0xcfff69f3
 8002e6c:	40008000 	.word	0x40008000
 8002e70:	40013800 	.word	0x40013800
 8002e74:	00f42400 	.word	0x00f42400
 8002e78:	08003668 	.word	0x08003668
      default:
        pclk = 0U;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	76bb      	strb	r3, [r7, #26]
        break;
 8002e84:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d07f      	beq.n	8002f8c <UART_SetConfig+0x3dc>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e90:	4a48      	ldr	r2, [pc, #288]	; (8002fb4 <UART_SetConfig+0x404>)
 8002e92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e96:	461a      	mov	r2, r3
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e9e:	005a      	lsls	r2, r3, #1
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	085b      	lsrs	r3, r3, #1
 8002ea6:	441a      	add	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	2b0f      	cmp	r3, #15
 8002eb8:	d916      	bls.n	8002ee8 <UART_SetConfig+0x338>
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ec0:	d212      	bcs.n	8002ee8 <UART_SetConfig+0x338>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	f023 030f 	bic.w	r3, r3, #15
 8002eca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	085b      	lsrs	r3, r3, #1
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	f003 0307 	and.w	r3, r3, #7
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	89fb      	ldrh	r3, [r7, #14]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	89fa      	ldrh	r2, [r7, #14]
 8002ee4:	60da      	str	r2, [r3, #12]
 8002ee6:	e051      	b.n	8002f8c <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	76bb      	strb	r3, [r7, #26]
 8002eec:	e04e      	b.n	8002f8c <UART_SetConfig+0x3dc>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002eee:	7efb      	ldrb	r3, [r7, #27]
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	2b07      	cmp	r3, #7
 8002ef4:	d821      	bhi.n	8002f3a <UART_SetConfig+0x38a>
 8002ef6:	a201      	add	r2, pc, #4	; (adr r2, 8002efc <UART_SetConfig+0x34c>)
 8002ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002efc:	08002f1d 	.word	0x08002f1d
 8002f00:	08002f25 	.word	0x08002f25
 8002f04:	08002f3b 	.word	0x08002f3b
 8002f08:	08002f2b 	.word	0x08002f2b
 8002f0c:	08002f3b 	.word	0x08002f3b
 8002f10:	08002f3b 	.word	0x08002f3b
 8002f14:	08002f3b 	.word	0x08002f3b
 8002f18:	08002f33 	.word	0x08002f33
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f1c:	f7ff f98a 	bl	8002234 <HAL_RCC_GetPCLK2Freq>
 8002f20:	6178      	str	r0, [r7, #20]
        break;
 8002f22:	e00f      	b.n	8002f44 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f24:	4b24      	ldr	r3, [pc, #144]	; (8002fb8 <UART_SetConfig+0x408>)
 8002f26:	617b      	str	r3, [r7, #20]
        break;
 8002f28:	e00c      	b.n	8002f44 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f2a:	f7ff f8eb 	bl	8002104 <HAL_RCC_GetSysClockFreq>
 8002f2e:	6178      	str	r0, [r7, #20]
        break;
 8002f30:	e008      	b.n	8002f44 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f36:	617b      	str	r3, [r7, #20]
        break;
 8002f38:	e004      	b.n	8002f44 <UART_SetConfig+0x394>
      default:
        pclk = 0U;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	76bb      	strb	r3, [r7, #26]
        break;
 8002f42:	bf00      	nop
    }

    if (pclk != 0U)
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d020      	beq.n	8002f8c <UART_SetConfig+0x3dc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4e:	4a19      	ldr	r2, [pc, #100]	; (8002fb4 <UART_SetConfig+0x404>)
 8002f50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f54:	461a      	mov	r2, r3
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	fbb3 f2f2 	udiv	r2, r3, r2
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	085b      	lsrs	r3, r3, #1
 8002f62:	441a      	add	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	2b0f      	cmp	r3, #15
 8002f74:	d908      	bls.n	8002f88 <UART_SetConfig+0x3d8>
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f7c:	d204      	bcs.n	8002f88 <UART_SetConfig+0x3d8>
      {
        huart->Instance->BRR = usartdiv;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	60da      	str	r2, [r3, #12]
 8002f86:	e001      	b.n	8002f8c <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8002fa8:	7ebb      	ldrb	r3, [r7, #26]
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3720      	adds	r7, #32
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bdb0      	pop	{r4, r5, r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	08003668 	.word	0x08003668
 8002fb8:	00f42400 	.word	0x00f42400

08002fbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00a      	beq.n	8002fe6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00a      	beq.n	8003008 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	430a      	orrs	r2, r1
 8003006:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300c:	f003 0304 	and.w	r3, r3, #4
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00a      	beq.n	800302a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	430a      	orrs	r2, r1
 8003028:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302e:	f003 0308 	and.w	r3, r3, #8
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00a      	beq.n	800304c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	430a      	orrs	r2, r1
 800304a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003050:	f003 0310 	and.w	r3, r3, #16
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00a      	beq.n	800306e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	430a      	orrs	r2, r1
 800306c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003072:	f003 0320 	and.w	r3, r3, #32
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00a      	beq.n	8003090 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	430a      	orrs	r2, r1
 800308e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003098:	2b00      	cmp	r3, #0
 800309a:	d01a      	beq.n	80030d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030ba:	d10a      	bne.n	80030d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00a      	beq.n	80030f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	430a      	orrs	r2, r1
 80030f2:	605a      	str	r2, [r3, #4]
  }
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af02      	add	r7, sp, #8
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003110:	f7fd fd5e 	bl	8000bd0 <HAL_GetTick>
 8003114:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0308 	and.w	r3, r3, #8
 8003120:	2b08      	cmp	r3, #8
 8003122:	d10e      	bne.n	8003142 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003124:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003128:	9300      	str	r3, [sp, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 f82f 	bl	8003196 <UART_WaitOnFlagUntilTimeout>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e025      	b.n	800318e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0304 	and.w	r3, r3, #4
 800314c:	2b04      	cmp	r3, #4
 800314e:	d10e      	bne.n	800316e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003150:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003154:	9300      	str	r3, [sp, #0]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 f819 	bl	8003196 <UART_WaitOnFlagUntilTimeout>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e00f      	b.n	800318e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2220      	movs	r2, #32
 8003172:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2220      	movs	r2, #32
 800317a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b09c      	sub	sp, #112	; 0x70
 800319a:	af00      	add	r7, sp, #0
 800319c:	60f8      	str	r0, [r7, #12]
 800319e:	60b9      	str	r1, [r7, #8]
 80031a0:	603b      	str	r3, [r7, #0]
 80031a2:	4613      	mov	r3, r2
 80031a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031a6:	e0a9      	b.n	80032fc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ae:	f000 80a5 	beq.w	80032fc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031b2:	f7fd fd0d 	bl	8000bd0 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80031be:	429a      	cmp	r2, r3
 80031c0:	d302      	bcc.n	80031c8 <UART_WaitOnFlagUntilTimeout+0x32>
 80031c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d140      	bne.n	800324a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031d0:	e853 3f00 	ldrex	r3, [r3]
 80031d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80031d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80031dc:	667b      	str	r3, [r7, #100]	; 0x64
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	461a      	mov	r2, r3
 80031e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031e8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80031ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80031ee:	e841 2300 	strex	r3, r2, [r1]
 80031f2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80031f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1e6      	bne.n	80031c8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	3308      	adds	r3, #8
 8003200:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003204:	e853 3f00 	ldrex	r3, [r3]
 8003208:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800320a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800320c:	f023 0301 	bic.w	r3, r3, #1
 8003210:	663b      	str	r3, [r7, #96]	; 0x60
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	3308      	adds	r3, #8
 8003218:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800321a:	64ba      	str	r2, [r7, #72]	; 0x48
 800321c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800321e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003220:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003222:	e841 2300 	strex	r3, r2, [r1]
 8003226:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003228:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1e5      	bne.n	80031fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2220      	movs	r2, #32
 8003232:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2220      	movs	r2, #32
 800323a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e069      	b.n	800331e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0304 	and.w	r3, r3, #4
 8003254:	2b00      	cmp	r3, #0
 8003256:	d051      	beq.n	80032fc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003262:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003266:	d149      	bne.n	80032fc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003270:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800327a:	e853 3f00 	ldrex	r3, [r3]
 800327e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003282:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003286:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	461a      	mov	r2, r3
 800328e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003290:	637b      	str	r3, [r7, #52]	; 0x34
 8003292:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003294:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003296:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003298:	e841 2300 	strex	r3, r2, [r1]
 800329c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800329e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1e6      	bne.n	8003272 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	3308      	adds	r3, #8
 80032aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	e853 3f00 	ldrex	r3, [r3]
 80032b2:	613b      	str	r3, [r7, #16]
   return(result);
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	f023 0301 	bic.w	r3, r3, #1
 80032ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	3308      	adds	r3, #8
 80032c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80032c4:	623a      	str	r2, [r7, #32]
 80032c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c8:	69f9      	ldr	r1, [r7, #28]
 80032ca:	6a3a      	ldr	r2, [r7, #32]
 80032cc:	e841 2300 	strex	r3, r2, [r1]
 80032d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d1e5      	bne.n	80032a4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2220      	movs	r2, #32
 80032dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2220      	movs	r2, #32
 80032e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2220      	movs	r2, #32
 80032ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e010      	b.n	800331e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	69da      	ldr	r2, [r3, #28]
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	4013      	ands	r3, r2
 8003306:	68ba      	ldr	r2, [r7, #8]
 8003308:	429a      	cmp	r2, r3
 800330a:	bf0c      	ite	eq
 800330c:	2301      	moveq	r3, #1
 800330e:	2300      	movne	r3, #0
 8003310:	b2db      	uxtb	r3, r3
 8003312:	461a      	mov	r2, r3
 8003314:	79fb      	ldrb	r3, [r7, #7]
 8003316:	429a      	cmp	r2, r3
 8003318:	f43f af46 	beq.w	80031a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3770      	adds	r7, #112	; 0x70
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003326:	b480      	push	{r7}
 8003328:	b085      	sub	sp, #20
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003334:	2b01      	cmp	r3, #1
 8003336:	d101      	bne.n	800333c <HAL_UARTEx_DisableFifoMode+0x16>
 8003338:	2302      	movs	r3, #2
 800333a:	e027      	b.n	800338c <HAL_UARTEx_DisableFifoMode+0x66>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2224      	movs	r2, #36	; 0x24
 8003348:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f022 0201 	bic.w	r2, r2, #1
 8003362:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800336a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2220      	movs	r2, #32
 800337e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3714      	adds	r7, #20
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d101      	bne.n	80033b0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80033ac:	2302      	movs	r3, #2
 80033ae:	e02d      	b.n	800340c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2224      	movs	r2, #36	; 0x24
 80033bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f022 0201 	bic.w	r2, r2, #1
 80033d6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	430a      	orrs	r2, r1
 80033ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 f84f 	bl	8003490 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2220      	movs	r2, #32
 80033fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003424:	2b01      	cmp	r3, #1
 8003426:	d101      	bne.n	800342c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003428:	2302      	movs	r3, #2
 800342a:	e02d      	b.n	8003488 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2224      	movs	r2, #36	; 0x24
 8003438:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f022 0201 	bic.w	r2, r2, #1
 8003452:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	430a      	orrs	r2, r1
 8003466:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 f811 	bl	8003490 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2220      	movs	r2, #32
 800347a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3710      	adds	r7, #16
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800349c:	2b00      	cmp	r3, #0
 800349e:	d108      	bne.n	80034b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80034b0:	e031      	b.n	8003516 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80034b2:	2308      	movs	r3, #8
 80034b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80034b6:	2308      	movs	r3, #8
 80034b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	0e5b      	lsrs	r3, r3, #25
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	f003 0307 	and.w	r3, r3, #7
 80034c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	0f5b      	lsrs	r3, r3, #29
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	f003 0307 	and.w	r3, r3, #7
 80034d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80034da:	7bbb      	ldrb	r3, [r7, #14]
 80034dc:	7b3a      	ldrb	r2, [r7, #12]
 80034de:	4911      	ldr	r1, [pc, #68]	; (8003524 <UARTEx_SetNbDataToProcess+0x94>)
 80034e0:	5c8a      	ldrb	r2, [r1, r2]
 80034e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80034e6:	7b3a      	ldrb	r2, [r7, #12]
 80034e8:	490f      	ldr	r1, [pc, #60]	; (8003528 <UARTEx_SetNbDataToProcess+0x98>)
 80034ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80034ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80034f8:	7bfb      	ldrb	r3, [r7, #15]
 80034fa:	7b7a      	ldrb	r2, [r7, #13]
 80034fc:	4909      	ldr	r1, [pc, #36]	; (8003524 <UARTEx_SetNbDataToProcess+0x94>)
 80034fe:	5c8a      	ldrb	r2, [r1, r2]
 8003500:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003504:	7b7a      	ldrb	r2, [r7, #13]
 8003506:	4908      	ldr	r1, [pc, #32]	; (8003528 <UARTEx_SetNbDataToProcess+0x98>)
 8003508:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800350a:	fb93 f3f2 	sdiv	r3, r3, r2
 800350e:	b29a      	uxth	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003516:	bf00      	nop
 8003518:	3714      	adds	r7, #20
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	08003680 	.word	0x08003680
 8003528:	08003688 	.word	0x08003688

0800352c <__libc_init_array>:
 800352c:	b570      	push	{r4, r5, r6, lr}
 800352e:	4d0d      	ldr	r5, [pc, #52]	; (8003564 <__libc_init_array+0x38>)
 8003530:	4c0d      	ldr	r4, [pc, #52]	; (8003568 <__libc_init_array+0x3c>)
 8003532:	1b64      	subs	r4, r4, r5
 8003534:	10a4      	asrs	r4, r4, #2
 8003536:	2600      	movs	r6, #0
 8003538:	42a6      	cmp	r6, r4
 800353a:	d109      	bne.n	8003550 <__libc_init_array+0x24>
 800353c:	4d0b      	ldr	r5, [pc, #44]	; (800356c <__libc_init_array+0x40>)
 800353e:	4c0c      	ldr	r4, [pc, #48]	; (8003570 <__libc_init_array+0x44>)
 8003540:	f000 f820 	bl	8003584 <_init>
 8003544:	1b64      	subs	r4, r4, r5
 8003546:	10a4      	asrs	r4, r4, #2
 8003548:	2600      	movs	r6, #0
 800354a:	42a6      	cmp	r6, r4
 800354c:	d105      	bne.n	800355a <__libc_init_array+0x2e>
 800354e:	bd70      	pop	{r4, r5, r6, pc}
 8003550:	f855 3b04 	ldr.w	r3, [r5], #4
 8003554:	4798      	blx	r3
 8003556:	3601      	adds	r6, #1
 8003558:	e7ee      	b.n	8003538 <__libc_init_array+0xc>
 800355a:	f855 3b04 	ldr.w	r3, [r5], #4
 800355e:	4798      	blx	r3
 8003560:	3601      	adds	r6, #1
 8003562:	e7f2      	b.n	800354a <__libc_init_array+0x1e>
 8003564:	08003698 	.word	0x08003698
 8003568:	08003698 	.word	0x08003698
 800356c:	08003698 	.word	0x08003698
 8003570:	0800369c 	.word	0x0800369c

08003574 <memset>:
 8003574:	4402      	add	r2, r0
 8003576:	4603      	mov	r3, r0
 8003578:	4293      	cmp	r3, r2
 800357a:	d100      	bne.n	800357e <memset+0xa>
 800357c:	4770      	bx	lr
 800357e:	f803 1b01 	strb.w	r1, [r3], #1
 8003582:	e7f9      	b.n	8003578 <memset+0x4>

08003584 <_init>:
 8003584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003586:	bf00      	nop
 8003588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800358a:	bc08      	pop	{r3}
 800358c:	469e      	mov	lr, r3
 800358e:	4770      	bx	lr

08003590 <_fini>:
 8003590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003592:	bf00      	nop
 8003594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003596:	bc08      	pop	{r3}
 8003598:	469e      	mov	lr, r3
 800359a:	4770      	bx	lr
